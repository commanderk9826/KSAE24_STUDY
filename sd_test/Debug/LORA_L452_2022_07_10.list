
LORA_L452_2022_07_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d44  0800bdb0  0800bdb0  0001bdb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caf4  0800caf4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800caf4  0800caf4  0001caf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cafc  0800cafc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cafc  0800cafc  0001cafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb00  0800cb00  0001cb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cb04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ab8  200001f8  0800ccf8  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb0  0800ccf8  00024cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b62c  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d5  00000000  00000000  0003b850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0003f228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00040378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260ce  00000000  00000000  00041340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c88  00000000  00000000  0006740e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5b24  00000000  00000000  0007e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153bba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  00153c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bd98 	.word	0x0800bd98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800bd98 	.word	0x0800bd98

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <SX1278_SPIRead>:


#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	78fa      	ldrb	r2, [r7, #3]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fb39 	bl	800157c <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fb54 	bl	80015bc <SX1278_hw_SPIReadByte>
 8000f14:	4603      	mov	r3, r0
 8000f16:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 faf1 	bl	8001506 <SX1278_hw_SetNSS>
	return tmp;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	70fb      	strb	r3, [r7, #3]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fade 	bl	8001506 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	f000 fb0f 	bl	800157c <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	78ba      	ldrb	r2, [r7, #2]
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fb08 	bl	800157c <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2101      	movs	r1, #1
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fac7 	bl	8001506 <SX1278_hw_SetNSS>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	72fb      	strb	r3, [r7, #11]
 8000f90:	4613      	mov	r3, r2
 8000f92:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000f94:	7abb      	ldrb	r3, [r7, #10]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d927      	bls.n	8000fea <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fab0 	bl	8001506 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	7afa      	ldrb	r2, [r7, #11]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fae4 	bl	800157c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	75fb      	strb	r3, [r7, #23]
 8000fb8:	e00c      	b.n	8000fd4 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6819      	ldr	r1, [r3, #0]
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	18d4      	adds	r4, r2, r3
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	f000 faf9 	bl	80015bc <SX1278_hw_SPIReadByte>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	75fb      	strb	r3, [r7, #23]
 8000fd4:	7dfa      	ldrb	r2, [r7, #23]
 8000fd6:	7abb      	ldrb	r3, [r7, #10]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3ee      	bcc.n	8000fba <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fa8f 	bl	8001506 <SX1278_hw_SetNSS>
 8000fe8:	e000      	b.n	8000fec <SX1278_SPIBurstRead+0x6c>
		return;
 8000fea:	bf00      	nop
	}
}
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}

08000ff2 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	460b      	mov	r3, r1
 8001000:	72fb      	strb	r3, [r7, #11]
 8001002:	4613      	mov	r3, r2
 8001004:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001006:	7abb      	ldrb	r3, [r7, #10]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d929      	bls.n	8001060 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fa77 	bl	8001506 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	7afb      	ldrb	r3, [r7, #11]
 800101e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4619      	mov	r1, r3
 8001026:	4610      	mov	r0, r2
 8001028:	f000 faa8 	bl	800157c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800102c:	2300      	movs	r3, #0
 800102e:	75fb      	strb	r3, [r7, #23]
 8001030:	e00b      	b.n	800104a <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	f000 fa9c 	bl	800157c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	3301      	adds	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
 800104a:	7dfa      	ldrb	r2, [r7, #23]
 800104c:	7abb      	ldrb	r3, [r7, #10]
 800104e:	429a      	cmp	r2, r3
 8001050:	d3ef      	bcc.n	8001032 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2101      	movs	r1, #1
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fa54 	bl	8001506 <SX1278_hw_SetNSS>
 800105e:	e000      	b.n	8001062 <SX1278_SPIBurstWrite+0x70>
		return;
 8001060:	bf00      	nop
	}
}
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f90d 	bl	8001290 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001076:	200f      	movs	r0, #15
 8001078:	f000 fac6 	bl	8001608 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f917 	bl	80012b0 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001088:	f04f 0000 	mov.w	r0, #0
 800108c:	f04f 0100 	mov.w	r1, #0
 8001090:	04d9      	lsls	r1, r3, #19
 8001092:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001096:	04d0      	lsls	r0, r2, #19
 8001098:	4a6f      	ldr	r2, [pc, #444]	; (8001258 <SX1278_config+0x1f0>)
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	f7ff fdab 	bl	8000bf8 <__aeabi_uldivmod>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80010aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	0c02      	lsrs	r2, r0, #16
 80010b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010bc:	0c0b      	lsrs	r3, r1, #16
 80010be:	b2d3      	uxtb	r3, r2
 80010c0:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80010c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	0a02      	lsrs	r2, r0, #8
 80010d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80010d4:	0a0b      	lsrs	r3, r1, #8
 80010d6:	b2d3      	uxtb	r3, r2
 80010d8:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80010da:	7c3b      	ldrb	r3, [r7, #16]
 80010dc:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80010de:	f107 020c 	add.w	r2, r7, #12
 80010e2:	2303      	movs	r3, #3
 80010e4:	2106      	movs	r1, #6
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff83 	bl	8000ff2 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80010ec:	2234      	movs	r2, #52	; 0x34
 80010ee:	2139      	movs	r1, #57	; 0x39
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff1c 	bl	8000f2e <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7c1b      	ldrb	r3, [r3, #16]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b57      	ldr	r3, [pc, #348]	; (800125c <SX1278_config+0x1f4>)
 80010fe:	5c9b      	ldrb	r3, [r3, r2]
 8001100:	461a      	mov	r2, r3
 8001102:	2109      	movs	r1, #9
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff12 	bl	8000f2e <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800110a:	220b      	movs	r2, #11
 800110c:	210b      	movs	r1, #11
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff0d 	bl	8000f2e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001114:	2223      	movs	r2, #35	; 0x23
 8001116:	210c      	movs	r1, #12
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff08 	bl	8000f2e <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7c5b      	ldrb	r3, [r3, #17]
 8001122:	461a      	mov	r2, r3
 8001124:	4b4e      	ldr	r3, [pc, #312]	; (8001260 <SX1278_config+0x1f8>)
 8001126:	5c9b      	ldrb	r3, [r3, r2]
 8001128:	2b06      	cmp	r3, #6
 800112a:	d147      	bne.n	80011bc <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7c9b      	ldrb	r3, [r3, #18]
 8001130:	461a      	mov	r2, r3
 8001132:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <SX1278_config+0x1fc>)
 8001134:	5c9b      	ldrb	r3, [r3, r2]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7cdb      	ldrb	r3, [r3, #19]
 800113e:	4619      	mov	r1, r3
 8001140:	4b49      	ldr	r3, [pc, #292]	; (8001268 <SX1278_config+0x200>)
 8001142:	5c5b      	ldrb	r3, [r3, r1]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800114c:	3301      	adds	r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	211d      	movs	r1, #29
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff feea 	bl	8000f2e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7c5b      	ldrb	r3, [r3, #17]
 800115e:	461a      	mov	r2, r3
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <SX1278_config+0x1f8>)
 8001162:	5c9b      	ldrb	r3, [r3, r2]
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7d1b      	ldrb	r3, [r3, #20]
 800116c:	4619      	mov	r1, r3
 800116e:	4b3f      	ldr	r3, [pc, #252]	; (800126c <SX1278_config+0x204>)
 8001170:	5c5b      	ldrb	r3, [r3, r1]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800117a:	3303      	adds	r3, #3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	211e      	movs	r1, #30
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fed3 	bl	8000f2e <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8001188:	2131      	movs	r1, #49	; 0x31
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff feb0 	bl	8000ef0 <SX1278_SPIRead>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	f023 0307 	bic.w	r3, r3, #7
 800119a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f043 0305 	orr.w	r3, r3, #5
 80011a2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	461a      	mov	r2, r3
 80011a8:	2131      	movs	r1, #49	; 0x31
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff febf 	bl	8000f2e <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80011b0:	220c      	movs	r2, #12
 80011b2:	2137      	movs	r1, #55	; 0x37
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff feba 	bl	8000f2e <SX1278_SPIWrite>
 80011ba:	e029      	b.n	8001210 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7c9b      	ldrb	r3, [r3, #18]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <SX1278_config+0x1fc>)
 80011c4:	5c9b      	ldrb	r3, [r3, r2]
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7cdb      	ldrb	r3, [r3, #19]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <SX1278_config+0x200>)
 80011d2:	5c5b      	ldrb	r3, [r3, r1]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80011d8:	4413      	add	r3, r2
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	211d      	movs	r1, #29
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fea4 	bl	8000f2e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7c5b      	ldrb	r3, [r3, #17]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <SX1278_config+0x1f8>)
 80011ee:	5c9b      	ldrb	r3, [r3, r2]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7d1b      	ldrb	r3, [r3, #20]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <SX1278_config+0x204>)
 80011fc:	5c5b      	ldrb	r3, [r3, r1]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001202:	4413      	add	r3, r2
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	211e      	movs	r1, #30
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fe8f 	bl	8000f2e <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8001210:	2204      	movs	r2, #4
 8001212:	2126      	movs	r1, #38	; 0x26
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fe8a 	bl	8000f2e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800121a:	2208      	movs	r2, #8
 800121c:	211f      	movs	r1, #31
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fe85 	bl	8000f2e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001224:	2200      	movs	r2, #0
 8001226:	2120      	movs	r1, #32
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fe80 	bl	8000f2e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800122e:	2208      	movs	r2, #8
 8001230:	2121      	movs	r1, #33	; 0x21
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fe7b 	bl	8000f2e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001238:	2201      	movs	r2, #1
 800123a:	2141      	movs	r1, #65	; 0x41
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fe76 	bl	8000f2e <SX1278_SPIWrite>
	module->readBytes = 0;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f810 	bl	8001270 <SX1278_standby>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	01e84800 	.word	0x01e84800
 800125c:	0800c26c 	.word	0x0800c26c
 8001260:	0800c270 	.word	0x0800c270
 8001264:	0800c278 	.word	0x0800c278
 8001268:	0800c284 	.word	0x0800c284
 800126c:	0800c288 	.word	0x0800c288

08001270 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001278:	2209      	movs	r2, #9
 800127a:	2101      	movs	r1, #1
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fe56 	bl	8000f2e <SX1278_SPIWrite>
	module->status = STANDBY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	759a      	strb	r2, [r3, #22]
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001298:	2208      	movs	r2, #8
 800129a:	2101      	movs	r1, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fe46 	bl	8000f2e <SX1278_SPIWrite>
	module->status = SLEEP;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	759a      	strb	r2, [r3, #22]
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80012b8:	2288      	movs	r2, #136	; 0x88
 80012ba:	2101      	movs	r1, #1
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fe36 	bl	8000f2e <SX1278_SPIWrite>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	2112      	movs	r1, #18
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fe29 	bl	8000f2e <SX1278_SPIWrite>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	460b      	mov	r3, r1
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	7afa      	ldrb	r2, [r7, #11]
 80012f6:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff feb5 	bl	8001068 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80012fe:	2284      	movs	r2, #132	; 0x84
 8001300:	214d      	movs	r1, #77	; 0x4d
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff fe13 	bl	8000f2e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001308:	22ff      	movs	r2, #255	; 0xff
 800130a:	2124      	movs	r1, #36	; 0x24
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff fe0e 	bl	8000f2e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001312:	2201      	movs	r2, #1
 8001314:	2140      	movs	r1, #64	; 0x40
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff fe09 	bl	8000f2e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800131c:	223f      	movs	r2, #63	; 0x3f
 800131e:	2111      	movs	r1, #17
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f7ff fe04 	bl	8000f2e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f7ff ffcf 	bl	80012ca <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	461a      	mov	r2, r3
 8001330:	2122      	movs	r1, #34	; 0x22
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f7ff fdfb 	bl	8000f2e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001338:	210f      	movs	r1, #15
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f7ff fdd8 	bl	8000ef0 <SX1278_SPIRead>
 8001340:	4603      	mov	r3, r0
 8001342:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	461a      	mov	r2, r3
 8001348:	210d      	movs	r1, #13
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff fdef 	bl	8000f2e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001350:	228d      	movs	r2, #141	; 0x8d
 8001352:	2101      	movs	r1, #1
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff fdea 	bl	8000f2e <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001362:	2118      	movs	r1, #24
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f7ff fdc3 	bl	8000ef0 <SX1278_SPIRead>
 800136a:	4603      	mov	r3, r0
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b04      	cmp	r3, #4
 8001372:	d104      	bne.n	800137e <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2203      	movs	r2, #3
 8001378:	759a      	strb	r2, [r3, #22]
			return 1;
 800137a:	2301      	movs	r3, #1
 800137c:	e013      	b.n	80013a6 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3b01      	subs	r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f8d0 	bl	8001534 <SX1278_hw_Reset>
			SX1278_config(module);
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f7ff fe67 	bl	8001068 <SX1278_config>
			return 0;
 800139a:	2300      	movs	r3, #0
 800139c:	e003      	b.n	80013a6 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 f932 	bl	8001608 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80013a4:	e7dd      	b.n	8001362 <SX1278_LoRaEntryRx+0x7e>
	}
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f92f 	bl	800161e <SX1278_hw_GetDIO0>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d030      	beq.n	8001428 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3317      	adds	r3, #23
 80013ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f007 ff2b 	bl	800922c <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80013d6:	2110      	movs	r1, #16
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff fd89 	bl	8000ef0 <SX1278_SPIRead>
 80013de:	4603      	mov	r3, r0
 80013e0:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	461a      	mov	r2, r3
 80013e6:	210d      	movs	r1, #13
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fda0 	bl	8000f2e <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7c5b      	ldrb	r3, [r3, #17]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d103      	bne.n	80013fe <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7d5b      	ldrb	r3, [r3, #21]
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e005      	b.n	800140a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80013fe:	2113      	movs	r1, #19
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff fd75 	bl	8000ef0 <SX1278_SPIRead>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f103 0217 	add.w	r2, r3, #23
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2100      	movs	r1, #0
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fdb3 	bl	8000f80 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff51 	bl	80012ca <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <SX1278_init>:
	}
}

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f848 	bl	80014dc <SX1278_hw_init>
	module->frequency = frequency;
 800144c:	68f9      	ldr	r1, [r7, #12]
 800144e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001452:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	7e3a      	ldrb	r2, [r7, #24]
 800145a:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	7f3a      	ldrb	r2, [r7, #28]
 8001460:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001468:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001470:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001478:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001480:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff fdf0 	bl	8001068 <SX1278_config>
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	4613      	mov	r3, r2
 800149c:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d003      	beq.n	80014b2 <SX1278_read+0x22>
		length = module->readBytes;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80014b0:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3317      	adds	r3, #23
 80014b6:	79fa      	ldrb	r2, [r7, #7]
 80014b8:	4619      	mov	r1, r3
 80014ba:	68b8      	ldr	r0, [r7, #8]
 80014bc:	f007 fea8 	bl	8009210 <memcpy>
	rxBuf[length] = '\0';
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	4413      	add	r3, r2
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 80014d2:	79fb      	ldrb	r3, [r7, #7]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80014e4:	2101      	movs	r1, #1
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f80d 	bl	8001506 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6858      	ldr	r0, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	2201      	movs	r2, #1
 80014f8:	4619      	mov	r1, r3
 80014fa:	f002 f8e1 	bl	80036c0 <HAL_GPIO_WritePin>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6958      	ldr	r0, [r3, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	b299      	uxth	r1, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	f002 f8ca 	bl	80036c0 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800153c:	2101      	movs	r1, #1
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffe1 	bl	8001506 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6858      	ldr	r0, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	2200      	movs	r2, #0
 8001550:	4619      	mov	r1, r3
 8001552:	f002 f8b5 	bl	80036c0 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f000 f856 	bl	8001608 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6858      	ldr	r0, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	2201      	movs	r2, #1
 8001568:	4619      	mov	r1, r3
 800156a:	f002 f8a9 	bl	80036c0 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800156e:	2064      	movs	r0, #100	; 0x64
 8001570:	f000 f84a 	bl	8001608 <SX1278_hw_DelayMs>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001588:	2100      	movs	r1, #0
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffbb 	bl	8001506 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6998      	ldr	r0, [r3, #24]
 8001594:	1cf9      	adds	r1, r7, #3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	2201      	movs	r2, #1
 800159c:	f003 fb6b 	bl	8004c76 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80015a0:	bf00      	nop
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fee6 	bl	8005378 <HAL_SPI_GetState>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d1f7      	bne.n	80015a2 <SX1278_hw_SPICommand+0x26>
		;
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80015cc:	2100      	movs	r1, #0
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ff99 	bl	8001506 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6998      	ldr	r0, [r3, #24]
 80015d8:	f107 020e 	add.w	r2, r7, #14
 80015dc:	f107 010f 	add.w	r1, r7, #15
 80015e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2301      	movs	r3, #1
 80015e8:	f003 fcb3 	bl	8004f52 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80015ec:	bf00      	nop
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fec0 	bl	8005378 <HAL_SPI_GetState>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d1f7      	bne.n	80015ee <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80015fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f001 fd8d 	bl	8003130 <HAL_Delay>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4619      	mov	r1, r3
 8001632:	4610      	mov	r0, r2
 8001634:	f002 f82c 	bl	8003690 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	2b01      	cmp	r3, #1
 800163c:	bf0c      	ite	eq
 800163e:	2301      	moveq	r3, #1
 8001640:	2300      	movne	r3, #0
 8001642:	b2db      	uxtb	r3, r3
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165a:	f002 f831 	bl	80036c0 <HAL_GPIO_WritePin>
  	HAL_Delay(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f001 fd66 	bl	8003130 <HAL_Delay>

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001676:	f002 f823 	bl	80036c0 <HAL_GPIO_WritePin>
  	HAL_Delay(1);
 800167a:	2001      	movs	r0, #1
 800167c:	f001 fd58 	bl	8003130 <HAL_Delay>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 800168e:	bf00      	nop
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <SPI_TxByte+0x30>)
 8001692:	f003 fe71 	bl	8005378 <HAL_SPI_GetState>
 8001696:	4603      	mov	r3, r0
 8001698:	2b01      	cmp	r3, #1
 800169a:	d1f9      	bne.n	8001690 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 800169c:	1df9      	adds	r1, r7, #7
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	2201      	movs	r2, #1
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <SPI_TxByte+0x30>)
 80016a6:	f003 fae6 	bl	8004c76 <HAL_SPI_Transmit>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20002b40 	.word	0x20002b40

080016b8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80016be:	23ff      	movs	r3, #255	; 0xff
 80016c0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 80016c6:	bf00      	nop
 80016c8:	4809      	ldr	r0, [pc, #36]	; (80016f0 <SPI_RxByte+0x38>)
 80016ca:	f003 fe55 	bl	8005378 <HAL_SPI_GetState>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d1f9      	bne.n	80016c8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 80016d4:	1dba      	adds	r2, r7, #6
 80016d6:	1df9      	adds	r1, r7, #7
 80016d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2301      	movs	r3, #1
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <SPI_RxByte+0x38>)
 80016e2:	f003 fc36 	bl	8004f52 <HAL_SPI_TransmitReceive>

  return data;
 80016e6:	79bb      	ldrb	r3, [r7, #6]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20002b40 	.word	0x20002b40

080016f4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80016fc:	f7ff ffdc 	bl	80016b8 <SPI_RxByte>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	701a      	strb	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <SD_ReadyWait+0x34>)
 8001718:	2232      	movs	r2, #50	; 0x32
 800171a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800171c:	f7ff ffcc 	bl	80016b8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001720:	f7ff ffca 	bl	80016b8 <SPI_RxByte>
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	d004      	beq.n	8001738 <SD_ReadyWait+0x28>
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SD_ReadyWait+0x34>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f3      	bne.n	8001720 <SD_ReadyWait+0x10>

  return res;
 8001738:	79fb      	ldrb	r3, [r7, #7]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20002ba4 	.word	0x20002ba4

08001748 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800174e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001752:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001754:	f7ff ff88 	bl	8001668 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	e005      	b.n	800176a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800175e:	20ff      	movs	r0, #255	; 0xff
 8001760:	f7ff ff90 	bl	8001684 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3301      	adds	r3, #1
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b09      	cmp	r3, #9
 800176e:	ddf6      	ble.n	800175e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001770:	f7ff ff6c 	bl	800164c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001774:	2340      	movs	r3, #64	; 0x40
 8001776:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001788:	2395      	movs	r3, #149	; 0x95
 800178a:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e009      	b.n	80017a6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001792:	1d3a      	adds	r2, r7, #4
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff72 	bl	8001684 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3301      	adds	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	ddf2      	ble.n	8001792 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80017ac:	e002      	b.n	80017b4 <SD_PowerOn+0x6c>
  {
    Count--;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80017b4:	f7ff ff80 	bl	80016b8 <SPI_RxByte>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d002      	beq.n	80017c4 <SD_PowerOn+0x7c>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f4      	bne.n	80017ae <SD_PowerOn+0x66>
  }

  DESELECT();
 80017c4:	f7ff ff50 	bl	8001668 <DESELECT>
  SPI_TxByte(0XFF);
 80017c8:	20ff      	movs	r0, #255	; 0xff
 80017ca:	f7ff ff5b 	bl	8001684 <SPI_TxByte>

  PowerFlag = 1;
 80017ce:	4b03      	ldr	r3, [pc, #12]	; (80017dc <SD_PowerOn+0x94>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000215 	.word	0x20000215

080017e0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <SD_PowerOff+0x14>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	20000215 	.word	0x20000215

080017f8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <SD_CheckPower+0x14>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000215 	.word	0x20000215

08001810 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <SD_RxDataBlock+0x68>)
 800181c:	220a      	movs	r2, #10
 800181e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001820:	f7ff ff4a 	bl	80016b8 <SPI_RxByte>
 8001824:	4603      	mov	r3, r0
 8001826:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d104      	bne.n	8001838 <SD_RxDataBlock+0x28>
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <SD_RxDataBlock+0x68>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f3      	bne.n	8001820 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2bfe      	cmp	r3, #254	; 0xfe
 800183c:	d001      	beq.n	8001842 <SD_RxDataBlock+0x32>
    return FALSE;
 800183e:	2300      	movs	r3, #0
 8001840:	e016      	b.n	8001870 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff53 	bl	80016f4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff4d 	bl	80016f4 <SPI_RxBytePtr>
  } while(btr -= 2);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	3b02      	subs	r3, #2
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ed      	bne.n	8001842 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001866:	f7ff ff27 	bl	80016b8 <SPI_RxByte>
  SPI_RxByte();
 800186a:	f7ff ff25 	bl	80016b8 <SPI_RxByte>

  return TRUE;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20002ba5 	.word	0x20002ba5

0800187c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800188c:	f7ff ff40 	bl	8001710 <SD_ReadyWait>
 8001890:	4603      	mov	r3, r0
 8001892:	2bff      	cmp	r3, #255	; 0xff
 8001894:	d001      	beq.n	800189a <SD_TxDataBlock+0x1e>
    return FALSE;
 8001896:	2300      	movs	r3, #0
 8001898:	e040      	b.n	800191c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fef1 	bl	8001684 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	2bfd      	cmp	r3, #253	; 0xfd
 80018a6:	d031      	beq.n	800190c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fee5 	bl	8001684 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fede 	bl	8001684 <SPI_TxByte>
    } while (--wc);
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	73bb      	strb	r3, [r7, #14]
 80018ce:	7bbb      	ldrb	r3, [r7, #14]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1eb      	bne.n	80018ac <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80018d4:	f7ff fef0 	bl	80016b8 <SPI_RxByte>
    SPI_RxByte();
 80018d8:	f7ff feee 	bl	80016b8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80018dc:	e00b      	b.n	80018f6 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80018de:	f7ff feeb 	bl	80016b8 <SPI_RxByte>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d006      	beq.n	80018fe <SD_TxDataBlock+0x82>
        break;

      i++;
 80018f0:	7b7b      	ldrb	r3, [r7, #13]
 80018f2:	3301      	adds	r3, #1
 80018f4:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80018f6:	7b7b      	ldrb	r3, [r7, #13]
 80018f8:	2b40      	cmp	r3, #64	; 0x40
 80018fa:	d9f0      	bls.n	80018de <SD_TxDataBlock+0x62>
 80018fc:	e000      	b.n	8001900 <SD_TxDataBlock+0x84>
        break;
 80018fe:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001900:	bf00      	nop
 8001902:	f7ff fed9 	bl	80016b8 <SPI_RxByte>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0fa      	beq.n	8001902 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	2b05      	cmp	r3, #5
 8001914:	d101      	bne.n	800191a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <SD_SendCmd>:
#endif /* _READONLY */
/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001930:	f7ff feee 	bl	8001710 <SD_ReadyWait>
 8001934:	4603      	mov	r3, r0
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d001      	beq.n	800193e <SD_SendCmd+0x1a>
    return 0xFF;
 800193a:	23ff      	movs	r3, #255	; 0xff
 800193c:	e040      	b.n	80019c0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fe9f 	bl	8001684 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	0e1b      	lsrs	r3, r3, #24
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe99 	bl	8001684 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fe93 	bl	8001684 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b2db      	uxtb	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fe8d 	bl	8001684 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fe88 	bl	8001684 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d101      	bne.n	8001982 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800197e:	2395      	movs	r3, #149	; 0x95
 8001980:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2b48      	cmp	r3, #72	; 0x48
 8001986:	d101      	bne.n	800198c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001988:	2387      	movs	r3, #135	; 0x87
 800198a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fe78 	bl	8001684 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b4c      	cmp	r3, #76	; 0x4c
 8001998:	d101      	bne.n	800199e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800199a:	f7ff fe8d 	bl	80016b8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800199e:	230a      	movs	r3, #10
 80019a0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80019a2:	f7ff fe89 	bl	80016b8 <SPI_RxByte>
 80019a6:	4603      	mov	r3, r0
 80019a8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80019aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da05      	bge.n	80019be <SD_SendCmd+0x9a>
 80019b2:	7bbb      	ldrb	r3, [r7, #14]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	73bb      	strb	r3, [r7, #14]
 80019b8:	7bbb      	ldrb	r3, [r7, #14]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f1      	bne.n	80019a2 <SD_SendCmd+0x7e>

  return res;
 80019be:	7b7b      	ldrb	r3, [r7, #13]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0d5      	b.n	8001b88 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80019dc:	4b6c      	ldr	r3, [pc, #432]	; (8001b90 <SD_disk_initialize+0x1c8>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <SD_disk_initialize+0x2a>
    return Stat;
 80019ea:	4b69      	ldr	r3, [pc, #420]	; (8001b90 <SD_disk_initialize+0x1c8>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	e0ca      	b.n	8001b88 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80019f2:	f7ff fea9 	bl	8001748 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80019f6:	f7ff fe29 	bl	800164c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80019fe:	2100      	movs	r1, #0
 8001a00:	2040      	movs	r0, #64	; 0x40
 8001a02:	f7ff ff8f 	bl	8001924 <SD_SendCmd>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	f040 80a5 	bne.w	8001b58 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001a0e:	4b61      	ldr	r3, [pc, #388]	; (8001b94 <SD_disk_initialize+0x1cc>)
 8001a10:	2264      	movs	r2, #100	; 0x64
 8001a12:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001a14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a18:	2048      	movs	r0, #72	; 0x48
 8001a1a:	f7ff ff83 	bl	8001924 <SD_SendCmd>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d158      	bne.n	8001ad6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e00c      	b.n	8001a44 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001a2a:	7bfc      	ldrb	r4, [r7, #15]
 8001a2c:	f7ff fe44 	bl	80016b8 <SPI_RxByte>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	4423      	add	r3, r4
 8001a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	3301      	adds	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d9ef      	bls.n	8001a2a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001a4a:	7abb      	ldrb	r3, [r7, #10]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	f040 8083 	bne.w	8001b58 <SD_disk_initialize+0x190>
 8001a52:	7afb      	ldrb	r3, [r7, #11]
 8001a54:	2baa      	cmp	r3, #170	; 0xaa
 8001a56:	d17f      	bne.n	8001b58 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2077      	movs	r0, #119	; 0x77
 8001a5c:	f7ff ff62 	bl	8001924 <SD_SendCmd>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d807      	bhi.n	8001a76 <SD_disk_initialize+0xae>
 8001a66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a6a:	2069      	movs	r0, #105	; 0x69
 8001a6c:	f7ff ff5a 	bl	8001924 <SD_SendCmd>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001a76:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <SD_disk_initialize+0x1cc>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1eb      	bne.n	8001a58 <SD_disk_initialize+0x90>
 8001a80:	e000      	b.n	8001a84 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001a82:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <SD_disk_initialize+0x1cc>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d064      	beq.n	8001b58 <SD_disk_initialize+0x190>
 8001a8e:	2100      	movs	r1, #0
 8001a90:	207a      	movs	r0, #122	; 0x7a
 8001a92:	f7ff ff47 	bl	8001924 <SD_SendCmd>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d15d      	bne.n	8001b58 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e00c      	b.n	8001abc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001aa2:	7bfc      	ldrb	r4, [r7, #15]
 8001aa4:	f7ff fe08 	bl	80016b8 <SPI_RxByte>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4423      	add	r3, r4
 8001ab2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d9ef      	bls.n	8001aa2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001ac2:	7a3b      	ldrb	r3, [r7, #8]
 8001ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SD_disk_initialize+0x108>
 8001acc:	2306      	movs	r3, #6
 8001ace:	e000      	b.n	8001ad2 <SD_disk_initialize+0x10a>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	73bb      	strb	r3, [r7, #14]
 8001ad4:	e040      	b.n	8001b58 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2077      	movs	r0, #119	; 0x77
 8001ada:	f7ff ff23 	bl	8001924 <SD_SendCmd>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d808      	bhi.n	8001af6 <SD_disk_initialize+0x12e>
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2069      	movs	r0, #105	; 0x69
 8001ae8:	f7ff ff1c 	bl	8001924 <SD_SendCmd>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d801      	bhi.n	8001af6 <SD_disk_initialize+0x12e>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e000      	b.n	8001af8 <SD_disk_initialize+0x130>
 8001af6:	2301      	movs	r3, #1
 8001af8:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001afa:	7bbb      	ldrb	r3, [r7, #14]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d10e      	bne.n	8001b1e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001b00:	2100      	movs	r1, #0
 8001b02:	2077      	movs	r0, #119	; 0x77
 8001b04:	f7ff ff0e 	bl	8001924 <SD_SendCmd>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d80e      	bhi.n	8001b2c <SD_disk_initialize+0x164>
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2069      	movs	r0, #105	; 0x69
 8001b12:	f7ff ff07 	bl	8001924 <SD_SendCmd>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001b1c:	e00d      	b.n	8001b3a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2041      	movs	r0, #65	; 0x41
 8001b22:	f7ff feff 	bl	8001924 <SD_SendCmd>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <SD_disk_initialize+0x1cc>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1e1      	bne.n	8001afa <SD_disk_initialize+0x132>
 8001b36:	e000      	b.n	8001b3a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001b38:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <SD_disk_initialize+0x1cc>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <SD_disk_initialize+0x18c>
 8001b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b48:	2050      	movs	r0, #80	; 0x50
 8001b4a:	f7ff feeb 	bl	8001924 <SD_SendCmd>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <SD_disk_initialize+0x1d0>)
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001b5e:	f7ff fd83 	bl	8001668 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001b62:	f7ff fda9 	bl	80016b8 <SPI_RxByte>

  if (type)
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <SD_disk_initialize+0x1c8>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SD_disk_initialize+0x1c8>)
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	e001      	b.n	8001b82 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001b7e:	f7ff fe2f 	bl	80017e0 <SD_PowerOff>
  }

  return Stat;
 8001b82:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <SD_disk_initialize+0x1c8>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20002ba5 	.word	0x20002ba5
 8001b98:	20000214 	.word	0x20000214

08001b9c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e002      	b.n	8001bb6 <SD_disk_status+0x1a>

  return Stat;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SD_disk_status+0x28>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <SD_disk_read+0x1c>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <SD_disk_read+0x20>
    return RES_PARERR;
 8001be4:	2304      	movs	r3, #4
 8001be6:	e051      	b.n	8001c8c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <SD_disk_read+0xcc>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e048      	b.n	8001c8c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001bfa:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <SD_disk_read+0xd0>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	025b      	lsls	r3, r3, #9
 8001c0a:	607b      	str	r3, [r7, #4]

  SELECT();
 8001c0c:	f7ff fd1e 	bl	800164c <SELECT>

  if (count == 1)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d111      	bne.n	8001c3a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	2051      	movs	r0, #81	; 0x51
 8001c1a:	f7ff fe83 	bl	8001924 <SD_SendCmd>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d129      	bne.n	8001c78 <SD_disk_read+0xb0>
 8001c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c28:	68b8      	ldr	r0, [r7, #8]
 8001c2a:	f7ff fdf1 	bl	8001810 <SD_RxDataBlock>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d021      	beq.n	8001c78 <SD_disk_read+0xb0>
      count = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	e01e      	b.n	8001c78 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	2052      	movs	r0, #82	; 0x52
 8001c3e:	f7ff fe71 	bl	8001924 <SD_SendCmd>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d117      	bne.n	8001c78 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c4c:	68b8      	ldr	r0, [r7, #8]
 8001c4e:	f7ff fddf 	bl	8001810 <SD_RxDataBlock>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00a      	beq.n	8001c6e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c5e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1ed      	bne.n	8001c48 <SD_disk_read+0x80>
 8001c6c:	e000      	b.n	8001c70 <SD_disk_read+0xa8>
          break;
 8001c6e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001c70:	2100      	movs	r1, #0
 8001c72:	204c      	movs	r0, #76	; 0x4c
 8001c74:	f7ff fe56 	bl	8001924 <SD_SendCmd>
    }
  }

  DESELECT();
 8001c78:	f7ff fcf6 	bl	8001668 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001c7c:	f7ff fd1c 	bl	80016b8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bf14      	ite	ne
 8001c86:	2301      	movne	r3, #1
 8001c88:	2300      	moveq	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000214 	.word	0x20000214

08001c9c <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <SD_disk_write+0x1c>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <SD_disk_write+0x20>
    return RES_PARERR;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e06b      	b.n	8001d94 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001cbc:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <SD_disk_write+0x100>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e062      	b.n	8001d94 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <SD_disk_write+0x100>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e059      	b.n	8001d94 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <SD_disk_write+0x104>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	025b      	lsls	r3, r3, #9
 8001cf0:	607b      	str	r3, [r7, #4]

  SELECT();
 8001cf2:	f7ff fcab 	bl	800164c <SELECT>

  if (count == 1)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d110      	bne.n	8001d1e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	2058      	movs	r0, #88	; 0x58
 8001d00:	f7ff fe10 	bl	8001924 <SD_SendCmd>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d13a      	bne.n	8001d80 <SD_disk_write+0xe4>
 8001d0a:	21fe      	movs	r1, #254	; 0xfe
 8001d0c:	68b8      	ldr	r0, [r7, #8]
 8001d0e:	f7ff fdb5 	bl	800187c <SD_TxDataBlock>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d033      	beq.n	8001d80 <SD_disk_write+0xe4>
      count = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	e030      	b.n	8001d80 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <SD_disk_write+0x104>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2077      	movs	r0, #119	; 0x77
 8001d2e:	f7ff fdf9 	bl	8001924 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001d32:	6839      	ldr	r1, [r7, #0]
 8001d34:	2057      	movs	r0, #87	; 0x57
 8001d36:	f7ff fdf5 	bl	8001924 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	2059      	movs	r0, #89	; 0x59
 8001d3e:	f7ff fdf1 	bl	8001924 <SD_SendCmd>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d11b      	bne.n	8001d80 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001d48:	21fc      	movs	r1, #252	; 0xfc
 8001d4a:	68b8      	ldr	r0, [r7, #8]
 8001d4c:	f7ff fd96 	bl	800187c <SD_TxDataBlock>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d5c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1ee      	bne.n	8001d48 <SD_disk_write+0xac>
 8001d6a:	e000      	b.n	8001d6e <SD_disk_write+0xd2>
          break;
 8001d6c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001d6e:	21fd      	movs	r1, #253	; 0xfd
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff fd83 	bl	800187c <SD_TxDataBlock>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <SD_disk_write+0xe4>
      {
        count = 1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001d80:	f7ff fc72 	bl	8001668 <DESELECT>
  SPI_RxByte();
 8001d84:	f7ff fc98 	bl	80016b8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf14      	ite	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	2300      	moveq	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000214 	.word	0x20000214

08001da4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b08b      	sub	sp, #44	; 0x2c
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	603a      	str	r2, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
 8001db0:	460b      	mov	r3, r1
 8001db2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	e11b      	b.n	8001ffa <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001dc8:	79bb      	ldrb	r3, [r7, #6]
 8001dca:	2b05      	cmp	r3, #5
 8001dcc:	d129      	bne.n	8001e22 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d017      	beq.n	8001e06 <SD_disk_ioctl+0x62>
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	dc1f      	bgt.n	8001e1a <SD_disk_ioctl+0x76>
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <SD_disk_ioctl+0x40>
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d00b      	beq.n	8001dfa <SD_disk_ioctl+0x56>
 8001de2:	e01a      	b.n	8001e1a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001de4:	f7ff fd08 	bl	80017f8 <SD_CheckPower>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001dee:	f7ff fcf7 	bl	80017e0 <SD_PowerOff>
      res = RES_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001df8:	e0fd      	b.n	8001ff6 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001dfa:	f7ff fca5 	bl	8001748 <SD_PowerOn>
      res = RES_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e04:	e0f7      	b.n	8001ff6 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	1c5c      	adds	r4, r3, #1
 8001e0a:	f7ff fcf5 	bl	80017f8 <SD_CheckPower>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e18:	e0ed      	b.n	8001ff6 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e20:	e0e9      	b.n	8001ff6 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001e22:	4b78      	ldr	r3, [pc, #480]	; (8002004 <SD_disk_ioctl+0x260>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0e2      	b.n	8001ffa <SD_disk_ioctl+0x256>

    SELECT();
 8001e34:	f7ff fc0a 	bl	800164c <SELECT>

    switch (ctrl)
 8001e38:	79bb      	ldrb	r3, [r7, #6]
 8001e3a:	2b0d      	cmp	r3, #13
 8001e3c:	f200 80cc 	bhi.w	8001fd8 <SD_disk_ioctl+0x234>
 8001e40:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <SD_disk_ioctl+0xa4>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001f43 	.word	0x08001f43
 8001e4c:	08001e81 	.word	0x08001e81
 8001e50:	08001f33 	.word	0x08001f33
 8001e54:	08001fd9 	.word	0x08001fd9
 8001e58:	08001fd9 	.word	0x08001fd9
 8001e5c:	08001fd9 	.word	0x08001fd9
 8001e60:	08001fd9 	.word	0x08001fd9
 8001e64:	08001fd9 	.word	0x08001fd9
 8001e68:	08001fd9 	.word	0x08001fd9
 8001e6c:	08001fd9 	.word	0x08001fd9
 8001e70:	08001fd9 	.word	0x08001fd9
 8001e74:	08001f55 	.word	0x08001f55
 8001e78:	08001f79 	.word	0x08001f79
 8001e7c:	08001f9d 	.word	0x08001f9d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001e80:	2100      	movs	r1, #0
 8001e82:	2049      	movs	r0, #73	; 0x49
 8001e84:	f7ff fd4e 	bl	8001924 <SD_SendCmd>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 80a8 	bne.w	8001fe0 <SD_disk_ioctl+0x23c>
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2110      	movs	r1, #16
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fcba 	bl	8001810 <SD_RxDataBlock>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 809e 	beq.w	8001fe0 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001ea4:	7b3b      	ldrb	r3, [r7, #12]
 8001ea6:	099b      	lsrs	r3, r3, #6
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10e      	bne.n	8001ecc <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001eae:	7d7b      	ldrb	r3, [r7, #21]
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	7d3b      	ldrb	r3, [r7, #20]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001ec2:	8bfb      	ldrh	r3, [r7, #30]
 8001ec4:	029a      	lsls	r2, r3, #10
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e02e      	b.n	8001f2a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ecc:	7c7b      	ldrb	r3, [r7, #17]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	7dbb      	ldrb	r3, [r7, #22]
 8001ed6:	09db      	lsrs	r3, r3, #7
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	7d7b      	ldrb	r3, [r7, #21]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f003 0306 	and.w	r3, r3, #6
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3302      	adds	r3, #2
 8001ef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001ef4:	7d3b      	ldrb	r3, [r7, #20]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	7cfb      	ldrb	r3, [r7, #19]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	7cbb      	ldrb	r3, [r7, #18]
 8001f0a:	029b      	lsls	r3, r3, #10
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001f1c:	8bfa      	ldrh	r2, [r7, #30]
 8001f1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f22:	3b09      	subs	r3, #9
 8001f24:	409a      	lsls	r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001f30:	e056      	b.n	8001fe0 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f38:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f40:	e055      	b.n	8001fee <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001f42:	f7ff fbe5 	bl	8001710 <SD_ReadyWait>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2bff      	cmp	r3, #255	; 0xff
 8001f4a:	d14b      	bne.n	8001fe4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f52:	e047      	b.n	8001fe4 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f54:	2100      	movs	r1, #0
 8001f56:	2049      	movs	r0, #73	; 0x49
 8001f58:	f7ff fce4 	bl	8001924 <SD_SendCmd>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d142      	bne.n	8001fe8 <SD_disk_ioctl+0x244>
 8001f62:	2110      	movs	r1, #16
 8001f64:	6a38      	ldr	r0, [r7, #32]
 8001f66:	f7ff fc53 	bl	8001810 <SD_RxDataBlock>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d03b      	beq.n	8001fe8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f76:	e037      	b.n	8001fe8 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f78:	2100      	movs	r1, #0
 8001f7a:	204a      	movs	r0, #74	; 0x4a
 8001f7c:	f7ff fcd2 	bl	8001924 <SD_SendCmd>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d132      	bne.n	8001fec <SD_disk_ioctl+0x248>
 8001f86:	2110      	movs	r1, #16
 8001f88:	6a38      	ldr	r0, [r7, #32]
 8001f8a:	f7ff fc41 	bl	8001810 <SD_RxDataBlock>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d02b      	beq.n	8001fec <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f9a:	e027      	b.n	8001fec <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	207a      	movs	r0, #122	; 0x7a
 8001fa0:	f7ff fcc0 	bl	8001924 <SD_SendCmd>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fb0:	e00b      	b.n	8001fca <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001fb2:	6a3c      	ldr	r4, [r7, #32]
 8001fb4:	1c63      	adds	r3, r4, #1
 8001fb6:	623b      	str	r3, [r7, #32]
 8001fb8:	f7ff fb7e 	bl	80016b8 <SPI_RxByte>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d9ef      	bls.n	8001fb2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fde:	e006      	b.n	8001fee <SD_disk_ioctl+0x24a>
      break;
 8001fe0:	bf00      	nop
 8001fe2:	e004      	b.n	8001fee <SD_disk_ioctl+0x24a>
      break;
 8001fe4:	bf00      	nop
 8001fe6:	e002      	b.n	8001fee <SD_disk_ioctl+0x24a>
      break;
 8001fe8:	bf00      	nop
 8001fea:	e000      	b.n	8001fee <SD_disk_ioctl+0x24a>
      break;
 8001fec:	bf00      	nop
    }

    DESELECT();
 8001fee:	f7ff fb3b 	bl	8001668 <DESELECT>
    SPI_RxByte();
 8001ff2:	f7ff fb61 	bl	80016b8 <SPI_RxByte>
  }

  return res;
 8001ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	372c      	adds	r7, #44	; 0x2c
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd90      	pop	{r4, r7, pc}
 8002002:	bf00      	nop
 8002004:	20000000 	.word	0x20000000

08002008 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	4b50      	ldr	r3, [pc, #320]	; (8002160 <MX_GPIO_Init+0x158>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	4a4f      	ldr	r2, [pc, #316]	; (8002160 <MX_GPIO_Init+0x158>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202a:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <MX_GPIO_Init+0x158>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002036:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <MX_GPIO_Init+0x158>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	4a49      	ldr	r2, [pc, #292]	; (8002160 <MX_GPIO_Init+0x158>)
 800203c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <MX_GPIO_Init+0x158>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <MX_GPIO_Init+0x158>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	4a43      	ldr	r2, [pc, #268]	; (8002160 <MX_GPIO_Init+0x158>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <MX_GPIO_Init+0x158>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <MX_GPIO_Init+0x158>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <MX_GPIO_Init+0x158>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <MX_GPIO_Init+0x158>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|SD_CS_Pin, GPIO_PIN_SET);
 800207e:	2201      	movs	r2, #1
 8002080:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002088:	f001 fb1a 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	2120      	movs	r1, #32
 8002090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002094:	f001 fb14 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8002098:	2201      	movs	r2, #1
 800209a:	2102      	movs	r1, #2
 800209c:	4831      	ldr	r0, [pc, #196]	; (8002164 <MX_GPIO_Init+0x15c>)
 800209e:	f001 fb0f 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_Pin;
 80020a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <MX_GPIO_Init+0x160>)
 80020aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	482d      	ldr	r0, [pc, #180]	; (800216c <MX_GPIO_Init+0x164>)
 80020b8:	f001 f970 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|LED_Pin;
 80020bc:	2330      	movs	r3, #48	; 0x30
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f001 f961 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = register_Pin;
 80020da:	2340      	movs	r3, #64	; 0x40
 80020dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(register_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f0:	f001 f954 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80020f4:	2301      	movs	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4817      	ldr	r0, [pc, #92]	; (8002164 <MX_GPIO_Init+0x15c>)
 8002108:	f001 f948 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800210c:	2302      	movs	r3, #2
 800210e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002110:	2301      	movs	r3, #1
 8002112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	4810      	ldr	r0, [pc, #64]	; (8002164 <MX_GPIO_Init+0x15c>)
 8002124:	f001 f93a 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800212c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002136:	2301      	movs	r3, #1
 8002138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002144:	f001 f92a 	bl	800339c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2100      	movs	r1, #0
 800214c:	2028      	movs	r0, #40	; 0x28
 800214e:	f001 f8ee 	bl	800332e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002152:	2028      	movs	r0, #40	; 0x28
 8002154:	f001 f907 	bl	8003366 <HAL_NVIC_EnableIRQ>

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	48000400 	.word	0x48000400
 8002168:	10210000 	.word	0x10210000
 800216c:	48000800 	.word	0x48000800

08002170 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800217c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800218c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002190:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00b      	beq.n	80021b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002198:	e000      	b.n	800219c <ITM_SendChar+0x2c>
    {
      __NOP();
 800219a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800219c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f9      	beq.n	800219a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80021a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80021b0:	687b      	ldr	r3, [r7, #4]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <_write>:
void SDcard(void);
/* USER CODE BEGIN PFP */

/* Private function prototypes -----------------------------------------------*/

int _write(int file, char *ptr, int len) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2332      	movs	r3, #50	; 0x32
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <_write+0x48>)
 80021d6:	f003 fa8b 	bl	80056f0 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e009      	b.n	80021f4 <_write+0x34>
		ITM_SendChar(*ptr++);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	60ba      	str	r2, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ffc1 	bl	8002170 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3301      	adds	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	dbf1      	blt.n	80021e0 <_write+0x20>
	}
	return len;
 80021fc:	687b      	ldr	r3, [r7, #4]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20002ba8 	.word	0x20002ba8
 800220c:	00000000 	.word	0x00000000

08002210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002216:	f000 ff0f 	bl	8003038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800221a:	f000 f85b 	bl	80022d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221e:	f7ff fef3 	bl	8002008 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002222:	f000 fbd9 	bl	80029d8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002226:	f000 fe51 	bl	8002ecc <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800222a:	f000 fc13 	bl	8002a54 <MX_SPI3_Init>
  MX_FATFS_Init();
 800222e:	f003 feb7 	bl	8005fa0 <MX_FATFS_Init>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
		}
		*/

	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <main+0xa8>)
 8002234:	4a21      	ldr	r2, [pc, #132]	; (80022bc <main+0xac>)
 8002236:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8002238:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <main+0xa8>)
 800223a:	2201      	movs	r2, #1
 800223c:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <main+0xa8>)
 8002240:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002244:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8002246:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <main+0xa8>)
 8002248:	2210      	movs	r2, #16
 800224a:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <main+0xa8>)
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <main+0xac>)
 8002250:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <main+0xa8>)
 8002254:	2202      	movs	r2, #2
 8002256:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi2;
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <main+0xa8>)
 800225a:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <main+0xb0>)
 800225c:	619a      	str	r2, [r3, #24]

	SX1278.hw = &SX1278_hw;
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <main+0xb4>)
 8002260:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <main+0xa8>)
 8002262:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 8002264:	4818      	ldr	r0, [pc, #96]	; (80022c8 <main+0xb8>)
 8002266:	f007 fcef 	bl	8009c48 <puts>
	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
 800226a:	230a      	movs	r3, #10
 800226c:	9305      	str	r3, [sp, #20]
 800226e:	2300      	movs	r3, #0
 8002270:	9304      	str	r3, [sp, #16]
 8002272:	2300      	movs	r3, #0
 8002274:	9303      	str	r3, [sp, #12]
 8002276:	2307      	movs	r3, #7
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	2301      	movs	r3, #1
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	2301      	movs	r3, #1
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	a30b      	add	r3, pc, #44	; (adr r3, 80022b0 <main+0xa0>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	480e      	ldr	r0, [pc, #56]	; (80022c4 <main+0xb4>)
 800228a:	f7ff f8d4 	bl	8001436 <SX1278_init>

	//	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
	printf("Done configuring LoRaModule\r\n");
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <main+0xbc>)
 8002290:	f007 fcda 	bl	8009c48 <puts>
//	ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);//16,2000
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 200);
 8002294:	22c8      	movs	r2, #200	; 0xc8
 8002296:	2110      	movs	r1, #16
 8002298:	480a      	ldr	r0, [pc, #40]	; (80022c4 <main+0xb4>)
 800229a:	f7ff f823 	bl	80012e4 <SX1278_LoRaEntryRx>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <main+0xc0>)
 80022a2:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    LORA();
 80022a4:	f000 f878 	bl	8002398 <LORA>
 80022a8:	e7fc      	b.n	80022a4 <main+0x94>
 80022aa:	bf00      	nop
 80022ac:	f3af 8000 	nop.w
 80022b0:	19de5080 	.word	0x19de5080
 80022b4:	00000000 	.word	0x00000000
 80022b8:	20002abc 	.word	0x20002abc
 80022bc:	48000400 	.word	0x48000400
 80022c0:	20002adc 	.word	0x20002adc
 80022c4:	20001968 	.word	0x20001968
 80022c8:	0800bdb0 	.word	0x0800bdb0
 80022cc:	0800bdcc 	.word	0x0800bdcc
 80022d0:	20001a88 	.word	0x20001a88

080022d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b096      	sub	sp, #88	; 0x58
 80022d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	2244      	movs	r2, #68	; 0x44
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f006 ffa2 	bl	800922c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e8:	463b      	mov	r3, r7
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
 80022f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022fa:	f001 fa2f 	bl	800375c <HAL_PWREx_ControlVoltageScaling>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002304:	f000 fb62 	bl	80029cc <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002308:	f001 fa0a 	bl	8003720 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800230c:	4b21      	ldr	r3, [pc, #132]	; (8002394 <SystemClock_Config+0xc0>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	4a20      	ldr	r2, [pc, #128]	; (8002394 <SystemClock_Config+0xc0>)
 8002314:	f023 0318 	bic.w	r3, r3, #24
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800231c:	2314      	movs	r3, #20
 800231e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002320:	2301      	movs	r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002324:	2301      	movs	r3, #1
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800232c:	2360      	movs	r3, #96	; 0x60
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002330:	2302      	movs	r3, #2
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002334:	2301      	movs	r3, #1
 8002336:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002338:	2301      	movs	r3, #1
 800233a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800233c:	2328      	movs	r3, #40	; 0x28
 800233e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002340:	2307      	movs	r3, #7
 8002342:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002344:	2302      	movs	r3, #2
 8002346:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002348:	2302      	movs	r3, #2
 800234a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4618      	mov	r0, r3
 8002352:	f001 fa59 	bl	8003808 <HAL_RCC_OscConfig>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800235c:	f000 fb36 	bl	80029cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002360:	230f      	movs	r3, #15
 8002362:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002364:	2303      	movs	r3, #3
 8002366:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002374:	463b      	mov	r3, r7
 8002376:	2104      	movs	r1, #4
 8002378:	4618      	mov	r0, r3
 800237a:	f001 fe65 	bl	8004048 <HAL_RCC_ClockConfig>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002384:	f000 fb22 	bl	80029cc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002388:	f002 fad0 	bl	800492c <HAL_RCCEx_EnableMSIPLLMode>
}
 800238c:	bf00      	nop
 800238e:	3758      	adds	r7, #88	; 0x58
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <LORA>:

/* USER CODE BEGIN 4 */
void LORA(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
		//ret = SX1278_LoRaEntryRx(&SX1278, 16, 200);
		//printf("Slave ...\r\n");

		printf("Receiving package...\r\n");
 800239c:	4893      	ldr	r0, [pc, #588]	; (80025ec <LORA+0x254>)
 800239e:	f007 fc53 	bl	8009c48 <puts>
		HAL_Delay(1000);
 80023a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a6:	f000 fec3 	bl	8003130 <HAL_Delay>
		ret = SX1278_LoRaRxPacket(&SX1278);
 80023aa:	4891      	ldr	r0, [pc, #580]	; (80025f0 <LORA+0x258>)
 80023ac:	f7fe ffff 	bl	80013ae <SX1278_LoRaRxPacket>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b8f      	ldr	r3, [pc, #572]	; (80025f4 <LORA+0x25c>)
 80023b6:	601a      	str	r2, [r3, #0]
        printf("Received: %d\r\n", ret);
 80023b8:	4b8e      	ldr	r3, [pc, #568]	; (80025f4 <LORA+0x25c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	488e      	ldr	r0, [pc, #568]	; (80025f8 <LORA+0x260>)
 80023c0:	f007 fba6 	bl	8009b10 <iprintf>
        if (ret > 0) {
 80023c4:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <LORA+0x25c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f340 8202 	ble.w	80027d2 <LORA+0x43a>
        //	printf("Time Battery_Sum_voltage Battery_voltage_min Battery_voltage_max Battery_temp Motorcontroller_temp Motor_temp Motorcontroller_current Motorcontroller_voltage Motor_rpm Motor_Torque\r\n");
        //	printf("TIME Sum_of_Voltage Max_Voltage Min_Voltage Max_temp CAN_L_motor_temp, CAN_L_invertertemp, Motor_L_CommandedTorque, Motor_L_TorqueFeedback, CAN_L_current, CAN_L_voltage, CAN_L_VSM_State, CAN_L_Inverter_State, CAN_L_RPM, CAN_R_motor_temp, CAN_R_invertertemp, Motor_R_CommandedTorque, Motor_R_TorqueFeedback, CAN_R_current, CAN_R_voltage, CAN_R_VSM_State, CAN_R_Inverter_State, CAN_R_RPM\r\n");

            SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 80023ce:	4b89      	ldr	r3, [pc, #548]	; (80025f4 <LORA+0x25c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	4989      	ldr	r1, [pc, #548]	; (80025fc <LORA+0x264>)
 80023d8:	4885      	ldr	r0, [pc, #532]	; (80025f0 <LORA+0x258>)
 80023da:	f7ff f859 	bl	8001490 <SX1278_read>


       //     SX1278_read(&SX1278, (uint8_t*) buffer, ret);
           	printf("%s\r\n", buffer);
 80023de:	4987      	ldr	r1, [pc, #540]	; (80025fc <LORA+0x264>)
 80023e0:	4887      	ldr	r0, [pc, #540]	; (8002600 <LORA+0x268>)
 80023e2:	f007 fb95 	bl	8009b10 <iprintf>
                  		  								  t=1;
 80023e6:	4b87      	ldr	r3, [pc, #540]	; (8002604 <LORA+0x26c>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
                  		  								 printf("\r\nTIME: ");
 80023ec:	4886      	ldr	r0, [pc, #536]	; (8002608 <LORA+0x270>)
 80023ee:	f007 fb8f 	bl	8009b10 <iprintf>
                  		  								  for(i=0;i<246;i++){
 80023f2:	4b86      	ldr	r3, [pc, #536]	; (800260c <LORA+0x274>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e1e4      	b.n	80027c4 <LORA+0x42c>
                  		  								  if(buffer[i]==0) break;
 80023fa:	4b84      	ldr	r3, [pc, #528]	; (800260c <LORA+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7f      	ldr	r2, [pc, #508]	; (80025fc <LORA+0x264>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 81e4 	beq.w	80027d0 <LORA+0x438>

                  		  								  if(buffer[i]!=32){
 8002408:	4b80      	ldr	r3, [pc, #512]	; (800260c <LORA+0x274>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a7b      	ldr	r2, [pc, #492]	; (80025fc <LORA+0x264>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	2b20      	cmp	r3, #32
 8002412:	d007      	beq.n	8002424 <LORA+0x8c>
                  		  									 printf("%c",buffer[i]);
 8002414:	4b7d      	ldr	r3, [pc, #500]	; (800260c <LORA+0x274>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a78      	ldr	r2, [pc, #480]	; (80025fc <LORA+0x264>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	4618      	mov	r0, r3
 800241e:	f007 fb8f 	bl	8009b40 <putchar>
 8002422:	e1ca      	b.n	80027ba <LORA+0x422>
                  		  									 }

                  		  								  else if(buffer[i]==32&&t==1){
 8002424:	4b79      	ldr	r3, [pc, #484]	; (800260c <LORA+0x274>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a74      	ldr	r2, [pc, #464]	; (80025fc <LORA+0x264>)
 800242a:	5cd3      	ldrb	r3, [r2, r3]
 800242c:	2b20      	cmp	r3, #32
 800242e:	d10c      	bne.n	800244a <LORA+0xb2>
 8002430:	4b74      	ldr	r3, [pc, #464]	; (8002604 <LORA+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d108      	bne.n	800244a <LORA+0xb2>
                  		  									 printf("\r\nSum_of_Voltage: ");
 8002438:	4875      	ldr	r0, [pc, #468]	; (8002610 <LORA+0x278>)
 800243a:	f007 fb69 	bl	8009b10 <iprintf>
                  		  									 t++;
 800243e:	4b71      	ldr	r3, [pc, #452]	; (8002604 <LORA+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	4a6f      	ldr	r2, [pc, #444]	; (8002604 <LORA+0x26c>)
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e1b7      	b.n	80027ba <LORA+0x422>
                  		  								  }
                  		  								  else if(buffer[i]==32&&t==2){
 800244a:	4b70      	ldr	r3, [pc, #448]	; (800260c <LORA+0x274>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6b      	ldr	r2, [pc, #428]	; (80025fc <LORA+0x264>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	2b20      	cmp	r3, #32
 8002454:	d10c      	bne.n	8002470 <LORA+0xd8>
 8002456:	4b6b      	ldr	r3, [pc, #428]	; (8002604 <LORA+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d108      	bne.n	8002470 <LORA+0xd8>
                  		  									 printf("\r\nMax_Voltage: ");
 800245e:	486d      	ldr	r0, [pc, #436]	; (8002614 <LORA+0x27c>)
 8002460:	f007 fb56 	bl	8009b10 <iprintf>
                  		  									 t++;
 8002464:	4b67      	ldr	r3, [pc, #412]	; (8002604 <LORA+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	4a66      	ldr	r2, [pc, #408]	; (8002604 <LORA+0x26c>)
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e1a4      	b.n	80027ba <LORA+0x422>
                  		  								  }
                  		  								  else if(buffer[i]==32&&t==3){
 8002470:	4b66      	ldr	r3, [pc, #408]	; (800260c <LORA+0x274>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a61      	ldr	r2, [pc, #388]	; (80025fc <LORA+0x264>)
 8002476:	5cd3      	ldrb	r3, [r2, r3]
 8002478:	2b20      	cmp	r3, #32
 800247a:	d10c      	bne.n	8002496 <LORA+0xfe>
 800247c:	4b61      	ldr	r3, [pc, #388]	; (8002604 <LORA+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d108      	bne.n	8002496 <LORA+0xfe>
                  		  									 printf("\r\nMin_Voltage: ");
 8002484:	4864      	ldr	r0, [pc, #400]	; (8002618 <LORA+0x280>)
 8002486:	f007 fb43 	bl	8009b10 <iprintf>
                  		  									 t++;
 800248a:	4b5e      	ldr	r3, [pc, #376]	; (8002604 <LORA+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	4a5c      	ldr	r2, [pc, #368]	; (8002604 <LORA+0x26c>)
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	e191      	b.n	80027ba <LORA+0x422>
                  		  								  }
                  		  								  else if(buffer[i]==32&&t==4){
 8002496:	4b5d      	ldr	r3, [pc, #372]	; (800260c <LORA+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a58      	ldr	r2, [pc, #352]	; (80025fc <LORA+0x264>)
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d10c      	bne.n	80024bc <LORA+0x124>
 80024a2:	4b58      	ldr	r3, [pc, #352]	; (8002604 <LORA+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d108      	bne.n	80024bc <LORA+0x124>
                  		  									 printf("\r\nMax_temp: ");
 80024aa:	485c      	ldr	r0, [pc, #368]	; (800261c <LORA+0x284>)
 80024ac:	f007 fb30 	bl	8009b10 <iprintf>
                  		  									 t++;
 80024b0:	4b54      	ldr	r3, [pc, #336]	; (8002604 <LORA+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	4a53      	ldr	r2, [pc, #332]	; (8002604 <LORA+0x26c>)
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e17e      	b.n	80027ba <LORA+0x422>
                  		  								  }

                  		  								  else if(buffer[i]==32&&t==5){
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <LORA+0x274>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a4e      	ldr	r2, [pc, #312]	; (80025fc <LORA+0x264>)
 80024c2:	5cd3      	ldrb	r3, [r2, r3]
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d10c      	bne.n	80024e2 <LORA+0x14a>
 80024c8:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <LORA+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d108      	bne.n	80024e2 <LORA+0x14a>
                  		  								 	 printf("\r\n\r\nCAN_L_motor_temp: ");
 80024d0:	4853      	ldr	r0, [pc, #332]	; (8002620 <LORA+0x288>)
 80024d2:	f007 fb1d 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 80024d6:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <LORA+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	4a49      	ldr	r2, [pc, #292]	; (8002604 <LORA+0x26c>)
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e16b      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==6){
 80024e2:	4b4a      	ldr	r3, [pc, #296]	; (800260c <LORA+0x274>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a45      	ldr	r2, [pc, #276]	; (80025fc <LORA+0x264>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d10c      	bne.n	8002508 <LORA+0x170>
 80024ee:	4b45      	ldr	r3, [pc, #276]	; (8002604 <LORA+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d108      	bne.n	8002508 <LORA+0x170>
                  		  								 	 printf("\r\nCAN_L_invertertemp: ");
 80024f6:	484b      	ldr	r0, [pc, #300]	; (8002624 <LORA+0x28c>)
 80024f8:	f007 fb0a 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 80024fc:	4b41      	ldr	r3, [pc, #260]	; (8002604 <LORA+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3301      	adds	r3, #1
 8002502:	4a40      	ldr	r2, [pc, #256]	; (8002604 <LORA+0x26c>)
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e158      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==7){
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <LORA+0x274>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <LORA+0x264>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	2b20      	cmp	r3, #32
 8002512:	d10c      	bne.n	800252e <LORA+0x196>
 8002514:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <LORA+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b07      	cmp	r3, #7
 800251a:	d108      	bne.n	800252e <LORA+0x196>
                   		  								 	 printf("\r\nMotor_L_CommandedTorque:  ");
 800251c:	4842      	ldr	r0, [pc, #264]	; (8002628 <LORA+0x290>)
 800251e:	f007 faf7 	bl	8009b10 <iprintf>
                   		  								 	 t++;
 8002522:	4b38      	ldr	r3, [pc, #224]	; (8002604 <LORA+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	4a36      	ldr	r2, [pc, #216]	; (8002604 <LORA+0x26c>)
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	e145      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==8){
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <LORA+0x274>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a32      	ldr	r2, [pc, #200]	; (80025fc <LORA+0x264>)
 8002534:	5cd3      	ldrb	r3, [r2, r3]
 8002536:	2b20      	cmp	r3, #32
 8002538:	d10c      	bne.n	8002554 <LORA+0x1bc>
 800253a:	4b32      	ldr	r3, [pc, #200]	; (8002604 <LORA+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b08      	cmp	r3, #8
 8002540:	d108      	bne.n	8002554 <LORA+0x1bc>
                   		  								 	 printf("\r\nMotor_L_TorqueFeedback: ");
 8002542:	483a      	ldr	r0, [pc, #232]	; (800262c <LORA+0x294>)
 8002544:	f007 fae4 	bl	8009b10 <iprintf>
                   		  								 	 t++;
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <LORA+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	4a2d      	ldr	r2, [pc, #180]	; (8002604 <LORA+0x26c>)
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e132      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==9){
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <LORA+0x274>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a28      	ldr	r2, [pc, #160]	; (80025fc <LORA+0x264>)
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	2b20      	cmp	r3, #32
 800255e:	d10c      	bne.n	800257a <LORA+0x1e2>
 8002560:	4b28      	ldr	r3, [pc, #160]	; (8002604 <LORA+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b09      	cmp	r3, #9
 8002566:	d108      	bne.n	800257a <LORA+0x1e2>
                   		  								 	 printf("\r\nCAN_L_current: ");
 8002568:	4831      	ldr	r0, [pc, #196]	; (8002630 <LORA+0x298>)
 800256a:	f007 fad1 	bl	8009b10 <iprintf>
                   		  								 	 t++;
 800256e:	4b25      	ldr	r3, [pc, #148]	; (8002604 <LORA+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <LORA+0x26c>)
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e11f      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==10){
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <LORA+0x274>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <LORA+0x264>)
 8002580:	5cd3      	ldrb	r3, [r2, r3]
 8002582:	2b20      	cmp	r3, #32
 8002584:	d10c      	bne.n	80025a0 <LORA+0x208>
 8002586:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <LORA+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b0a      	cmp	r3, #10
 800258c:	d108      	bne.n	80025a0 <LORA+0x208>
                   		  								 	 printf("\r\nCAN_L_voltage: ");
 800258e:	4829      	ldr	r0, [pc, #164]	; (8002634 <LORA+0x29c>)
 8002590:	f007 fabe 	bl	8009b10 <iprintf>
                   		  								 	 t++;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <LORA+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <LORA+0x26c>)
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e10c      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==11){
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <LORA+0x274>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a15      	ldr	r2, [pc, #84]	; (80025fc <LORA+0x264>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d10c      	bne.n	80025c6 <LORA+0x22e>
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <LORA+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b0b      	cmp	r3, #11
 80025b2:	d108      	bne.n	80025c6 <LORA+0x22e>
                   		  								 	 printf("\r\nCAN_L_VSM_State : ");
 80025b4:	4820      	ldr	r0, [pc, #128]	; (8002638 <LORA+0x2a0>)
 80025b6:	f007 faab 	bl	8009b10 <iprintf>
                   		  								 	 t++;
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <LORA+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3301      	adds	r3, #1
 80025c0:	4a10      	ldr	r2, [pc, #64]	; (8002604 <LORA+0x26c>)
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	e0f9      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==12){
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <LORA+0x274>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <LORA+0x264>)
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d136      	bne.n	8002640 <LORA+0x2a8>
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <LORA+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d132      	bne.n	8002640 <LORA+0x2a8>
                   		  								 	 printf("\r\nCAN_L_Inverter_State: ");
 80025da:	4818      	ldr	r0, [pc, #96]	; (800263c <LORA+0x2a4>)
 80025dc:	f007 fa98 	bl	8009b10 <iprintf>
                   		  								 	 t++;
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <LORA+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <LORA+0x26c>)
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e0e6      	b.n	80027ba <LORA+0x422>
 80025ec:	0800bdec 	.word	0x0800bdec
 80025f0:	20001968 	.word	0x20001968
 80025f4:	20001a88 	.word	0x20001a88
 80025f8:	0800be04 	.word	0x0800be04
 80025fc:	20001754 	.word	0x20001754
 8002600:	0800be14 	.word	0x0800be14
 8002604:	20000468 	.word	0x20000468
 8002608:	0800be1c 	.word	0x0800be1c
 800260c:	20001548 	.word	0x20001548
 8002610:	0800be28 	.word	0x0800be28
 8002614:	0800be3c 	.word	0x0800be3c
 8002618:	0800be4c 	.word	0x0800be4c
 800261c:	0800be5c 	.word	0x0800be5c
 8002620:	0800be6c 	.word	0x0800be6c
 8002624:	0800be84 	.word	0x0800be84
 8002628:	0800be9c 	.word	0x0800be9c
 800262c:	0800bebc 	.word	0x0800bebc
 8002630:	0800bed8 	.word	0x0800bed8
 8002634:	0800beec 	.word	0x0800beec
 8002638:	0800bf00 	.word	0x0800bf00
 800263c:	0800bf18 	.word	0x0800bf18
                  		  								}
                  		  								  else if(buffer[i]==32&&t==13){
 8002640:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <LORA+0x448>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a67      	ldr	r2, [pc, #412]	; (80027e4 <LORA+0x44c>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	2b20      	cmp	r3, #32
 800264a:	d10c      	bne.n	8002666 <LORA+0x2ce>
 800264c:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <LORA+0x450>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b0d      	cmp	r3, #13
 8002652:	d108      	bne.n	8002666 <LORA+0x2ce>
                  		  								 	 printf("\r\nCAN_L_RPM: ");
 8002654:	4865      	ldr	r0, [pc, #404]	; (80027ec <LORA+0x454>)
 8002656:	f007 fa5b 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <LORA+0x450>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3301      	adds	r3, #1
 8002660:	4a61      	ldr	r2, [pc, #388]	; (80027e8 <LORA+0x450>)
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	e0a9      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==14){
 8002666:	4b5e      	ldr	r3, [pc, #376]	; (80027e0 <LORA+0x448>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a5e      	ldr	r2, [pc, #376]	; (80027e4 <LORA+0x44c>)
 800266c:	5cd3      	ldrb	r3, [r2, r3]
 800266e:	2b20      	cmp	r3, #32
 8002670:	d10c      	bne.n	800268c <LORA+0x2f4>
 8002672:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <LORA+0x450>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b0e      	cmp	r3, #14
 8002678:	d108      	bne.n	800268c <LORA+0x2f4>
                  		  								 	 printf("\r\n\r\nCAN_R_motor_temp: ");
 800267a:	485d      	ldr	r0, [pc, #372]	; (80027f0 <LORA+0x458>)
 800267c:	f007 fa48 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 8002680:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <LORA+0x450>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <LORA+0x450>)
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e096      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==15){
 800268c:	4b54      	ldr	r3, [pc, #336]	; (80027e0 <LORA+0x448>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a54      	ldr	r2, [pc, #336]	; (80027e4 <LORA+0x44c>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	2b20      	cmp	r3, #32
 8002696:	d10c      	bne.n	80026b2 <LORA+0x31a>
 8002698:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <LORA+0x450>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b0f      	cmp	r3, #15
 800269e:	d108      	bne.n	80026b2 <LORA+0x31a>
                  		  								 	 printf("\r\nCAN_R_invertertemp: ");
 80026a0:	4854      	ldr	r0, [pc, #336]	; (80027f4 <LORA+0x45c>)
 80026a2:	f007 fa35 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 80026a6:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <LORA+0x450>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	4a4e      	ldr	r2, [pc, #312]	; (80027e8 <LORA+0x450>)
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	e083      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==16){
 80026b2:	4b4b      	ldr	r3, [pc, #300]	; (80027e0 <LORA+0x448>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a4b      	ldr	r2, [pc, #300]	; (80027e4 <LORA+0x44c>)
 80026b8:	5cd3      	ldrb	r3, [r2, r3]
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d10c      	bne.n	80026d8 <LORA+0x340>
 80026be:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <LORA+0x450>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d108      	bne.n	80026d8 <LORA+0x340>
                  		  								 	 printf("\r\nMotor_R_CommandedTorque: ");
 80026c6:	484c      	ldr	r0, [pc, #304]	; (80027f8 <LORA+0x460>)
 80026c8:	f007 fa22 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <LORA+0x450>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3301      	adds	r3, #1
 80026d2:	4a45      	ldr	r2, [pc, #276]	; (80027e8 <LORA+0x450>)
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e070      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==17){
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <LORA+0x448>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a41      	ldr	r2, [pc, #260]	; (80027e4 <LORA+0x44c>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d10c      	bne.n	80026fe <LORA+0x366>
 80026e4:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <LORA+0x450>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b11      	cmp	r3, #17
 80026ea:	d108      	bne.n	80026fe <LORA+0x366>
                  		  								 	 printf("\r\nMotor_R_TorqueFeedback ");
 80026ec:	4843      	ldr	r0, [pc, #268]	; (80027fc <LORA+0x464>)
 80026ee:	f007 fa0f 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 80026f2:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <LORA+0x450>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <LORA+0x450>)
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	e05d      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==18){
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <LORA+0x448>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a38      	ldr	r2, [pc, #224]	; (80027e4 <LORA+0x44c>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	2b20      	cmp	r3, #32
 8002708:	d10c      	bne.n	8002724 <LORA+0x38c>
 800270a:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <LORA+0x450>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b12      	cmp	r3, #18
 8002710:	d108      	bne.n	8002724 <LORA+0x38c>
                  		  								 	 printf("\r\nCAN_R_current: ");
 8002712:	483b      	ldr	r0, [pc, #236]	; (8002800 <LORA+0x468>)
 8002714:	f007 f9fc 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 8002718:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <LORA+0x450>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <LORA+0x450>)
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e04a      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==19){
 8002724:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <LORA+0x448>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a2e      	ldr	r2, [pc, #184]	; (80027e4 <LORA+0x44c>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	2b20      	cmp	r3, #32
 800272e:	d10c      	bne.n	800274a <LORA+0x3b2>
 8002730:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <LORA+0x450>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b13      	cmp	r3, #19
 8002736:	d108      	bne.n	800274a <LORA+0x3b2>
                  		  								 	 printf("\r\nCAN_R_voltage: ");
 8002738:	4832      	ldr	r0, [pc, #200]	; (8002804 <LORA+0x46c>)
 800273a:	f007 f9e9 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 800273e:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <LORA+0x450>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <LORA+0x450>)
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e037      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==20){
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <LORA+0x448>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <LORA+0x44c>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	2b20      	cmp	r3, #32
 8002754:	d10c      	bne.n	8002770 <LORA+0x3d8>
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <LORA+0x450>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b14      	cmp	r3, #20
 800275c:	d108      	bne.n	8002770 <LORA+0x3d8>
                  		  								 	 printf("\r\nCAN_R_VSM_State: ");
 800275e:	482a      	ldr	r0, [pc, #168]	; (8002808 <LORA+0x470>)
 8002760:	f007 f9d6 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 8002764:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <LORA+0x450>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <LORA+0x450>)
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e024      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==21){
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <LORA+0x448>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <LORA+0x44c>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	2b20      	cmp	r3, #32
 800277a:	d10c      	bne.n	8002796 <LORA+0x3fe>
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <LORA+0x450>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b15      	cmp	r3, #21
 8002782:	d108      	bne.n	8002796 <LORA+0x3fe>
                  		  								 	 printf("\r\nCAN_R_Inverter_State: ");
 8002784:	4821      	ldr	r0, [pc, #132]	; (800280c <LORA+0x474>)
 8002786:	f007 f9c3 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <LORA+0x450>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <LORA+0x450>)
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	e011      	b.n	80027ba <LORA+0x422>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==22){
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <LORA+0x448>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <LORA+0x44c>)
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d10b      	bne.n	80027ba <LORA+0x422>
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <LORA+0x450>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b16      	cmp	r3, #22
 80027a8:	d107      	bne.n	80027ba <LORA+0x422>
                  		  								 	 printf("\r\nCAN_R_RPM ");
 80027aa:	4819      	ldr	r0, [pc, #100]	; (8002810 <LORA+0x478>)
 80027ac:	f007 f9b0 	bl	8009b10 <iprintf>
                  		  								 	 t++;
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <LORA+0x450>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <LORA+0x450>)
 80027b8:	6013      	str	r3, [r2, #0]
                  		  								  for(i=0;i<246;i++){
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <LORA+0x448>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	4a07      	ldr	r2, [pc, #28]	; (80027e0 <LORA+0x448>)
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <LORA+0x448>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2bf5      	cmp	r3, #245	; 0xf5
 80027ca:	f77f ae16 	ble.w	80023fa <LORA+0x62>
 80027ce:	e000      	b.n	80027d2 <LORA+0x43a>
                  		  								  if(buffer[i]==0) break;
 80027d0:	bf00      	nop

                  		  						}

           // SDcard();
        }
        SDcard();
 80027d2:	f000 f821 	bl	8002818 <SDcard>
        		  }

*/


        printf("\r\n------------------------------------------------------------------------------------------------------------------------------------\r\n");
 80027d6:	480f      	ldr	r0, [pc, #60]	; (8002814 <LORA+0x47c>)
 80027d8:	f007 fa36 	bl	8009c48 <puts>


}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20001548 	.word	0x20001548
 80027e4:	20001754 	.word	0x20001754
 80027e8:	20000468 	.word	0x20000468
 80027ec:	0800bf34 	.word	0x0800bf34
 80027f0:	0800bf44 	.word	0x0800bf44
 80027f4:	0800bf5c 	.word	0x0800bf5c
 80027f8:	0800bf74 	.word	0x0800bf74
 80027fc:	0800bf90 	.word	0x0800bf90
 8002800:	0800bfac 	.word	0x0800bfac
 8002804:	0800bfc0 	.word	0x0800bfc0
 8002808:	0800bfd4 	.word	0x0800bfd4
 800280c:	0800bfe8 	.word	0x0800bfe8
 8002810:	0800c004 	.word	0x0800c004
 8002814:	0800c014 	.word	0x0800c014

08002818 <SDcard>:
void SDcard(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	 /* SD card -------------------------------------------------------------------------------------------------------------------*/
	 /* SDcard logging -------------------------------------------------------------------------------------------------------------------*/
	 /* Mount SD Card */

	/* start */
	if(SDstate==1){
 800281c:	4b47      	ldr	r3, [pc, #284]	; (800293c <SDcard+0x124>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d153      	bne.n	80028cc <SDcard+0xb4>
		f_mount(&fs, "", 0);
 8002824:	2200      	movs	r2, #0
 8002826:	4946      	ldr	r1, [pc, #280]	; (8002940 <SDcard+0x128>)
 8002828:	4846      	ldr	r0, [pc, #280]	; (8002944 <SDcard+0x12c>)
 800282a:	f005 fe07 	bl	800843c <f_mount>
		/* Open file to write */
		f_open(&fil, "DATA.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800282e:	2213      	movs	r2, #19
 8002830:	4945      	ldr	r1, [pc, #276]	; (8002948 <SDcard+0x130>)
 8002832:	4846      	ldr	r0, [pc, #280]	; (800294c <SDcard+0x134>)
 8002834:	f005 fe48 	bl	80084c8 <f_open>

	   /* Check free space */
	   f_getfree("", &fre_clust, &pfs);
 8002838:	4a45      	ldr	r2, [pc, #276]	; (8002950 <SDcard+0x138>)
 800283a:	4946      	ldr	r1, [pc, #280]	; (8002954 <SDcard+0x13c>)
 800283c:	4840      	ldr	r0, [pc, #256]	; (8002940 <SDcard+0x128>)
 800283e:	f006 fa4b 	bl	8008cd8 <f_getfree>
	   total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002842:	4b43      	ldr	r3, [pc, #268]	; (8002950 <SDcard+0x138>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	3b02      	subs	r3, #2
 800284a:	4a41      	ldr	r2, [pc, #260]	; (8002950 <SDcard+0x138>)
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	8952      	ldrh	r2, [r2, #10]
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe5d 	bl	8000514 <__aeabi_ui2d>
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <SDcard+0x140>)
 8002860:	f7fd fed2 	bl	8000608 <__aeabi_dmul>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	f7fe f9a4 	bl	8000bb8 <__aeabi_d2uiz>
 8002870:	4603      	mov	r3, r0
 8002872:	4a3a      	ldr	r2, [pc, #232]	; (800295c <SDcard+0x144>)
 8002874:	6013      	str	r3, [r2, #0]
	   freespace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002876:	4b36      	ldr	r3, [pc, #216]	; (8002950 <SDcard+0x138>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	895b      	ldrh	r3, [r3, #10]
 800287c:	461a      	mov	r2, r3
 800287e:	4b35      	ldr	r3, [pc, #212]	; (8002954 <SDcard+0x13c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fb03 f302 	mul.w	r3, r3, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f7fd fe44 	bl	8000514 <__aeabi_ui2d>
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	4b31      	ldr	r3, [pc, #196]	; (8002958 <SDcard+0x140>)
 8002892:	f7fd feb9 	bl	8000608 <__aeabi_dmul>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	f7fe f98b 	bl	8000bb8 <__aeabi_d2uiz>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4a2e      	ldr	r2, [pc, #184]	; (8002960 <SDcard+0x148>)
 80028a6:	6013      	str	r3, [r2, #0]
	   // Free space is less than 1kb

	   /* show start logging */
	   SDstate=2;
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <SDcard+0x124>)
 80028aa:	2202      	movs	r2, #2
 80028ac:	601a      	str	r2, [r3, #0]
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80028ae:	2201      	movs	r2, #1
 80028b0:	2120      	movs	r1, #32
 80028b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b6:	f000 ff03 	bl	80036c0 <HAL_GPIO_WritePin>
	   f_puts("TIME Sum_of_Voltage Max_Voltage Min_Voltage Max_temp CAN_L_motor_temp CAN_L_invertertemp Motor_L_CommandedTorque Motor_L_TorqueFeedback CAN_L_current CAN_L_voltage CAN_L_VSM_State CAN_L_Inverter_State CAN_L_RPM CAN_R_motor_temp CAN_R_invertertemp Motor_R_CommandedTorque Motor_R_TorqueFeedback CAN_R_current CAN_R_voltage CAN_R_VSM_State CAN_R_Inverter_State CAN_R_RPM", &fil);
 80028ba:	4924      	ldr	r1, [pc, #144]	; (800294c <SDcard+0x134>)
 80028bc:	4829      	ldr	r0, [pc, #164]	; (8002964 <SDcard+0x14c>)
 80028be:	f006 fb37 	bl	8008f30 <f_puts>
	   f_puts("\n", &fil);
 80028c2:	4922      	ldr	r1, [pc, #136]	; (800294c <SDcard+0x134>)
 80028c4:	4828      	ldr	r0, [pc, #160]	; (8002968 <SDcard+0x150>)
 80028c6:	f006 fb33 	bl	8008f30 <f_puts>
	     f_close(&fil);
	     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }


}
 80028ca:	e034      	b.n	8002936 <SDcard+0x11e>
	else if(SDstate==2){
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <SDcard+0x124>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d123      	bne.n	800291c <SDcard+0x104>
			for(i=0;i<512;i++){
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <SDcard+0x154>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e00c      	b.n	80028f6 <SDcard+0xde>
			SDbuffer[i]=buffer[i];
 80028dc:	4b23      	ldr	r3, [pc, #140]	; (800296c <SDcard+0x154>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <SDcard+0x154>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4922      	ldr	r1, [pc, #136]	; (8002970 <SDcard+0x158>)
 80028e6:	5c89      	ldrb	r1, [r1, r2]
 80028e8:	4a22      	ldr	r2, [pc, #136]	; (8002974 <SDcard+0x15c>)
 80028ea:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<512;i++){
 80028ec:	4b1f      	ldr	r3, [pc, #124]	; (800296c <SDcard+0x154>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	4a1e      	ldr	r2, [pc, #120]	; (800296c <SDcard+0x154>)
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <SDcard+0x154>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fe:	dbed      	blt.n	80028dc <SDcard+0xc4>
			f_write(&fil, SDbuffer , strlen(SDbuffer), &bw);
 8002900:	481c      	ldr	r0, [pc, #112]	; (8002974 <SDcard+0x15c>)
 8002902:	f7fd fc6d 	bl	80001e0 <strlen>
 8002906:	4602      	mov	r2, r0
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <SDcard+0x160>)
 800290a:	491a      	ldr	r1, [pc, #104]	; (8002974 <SDcard+0x15c>)
 800290c:	480f      	ldr	r0, [pc, #60]	; (800294c <SDcard+0x134>)
 800290e:	f005 ffa7 	bl	8008860 <f_write>
			f_puts("\n", &fil);
 8002912:	490e      	ldr	r1, [pc, #56]	; (800294c <SDcard+0x134>)
 8002914:	4814      	ldr	r0, [pc, #80]	; (8002968 <SDcard+0x150>)
 8002916:	f006 fb0b 	bl	8008f30 <f_puts>
}
 800291a:	e00c      	b.n	8002936 <SDcard+0x11e>
	else if(SDstate==3){
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <SDcard+0x124>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d108      	bne.n	8002936 <SDcard+0x11e>
	     f_close(&fil);
 8002924:	4809      	ldr	r0, [pc, #36]	; (800294c <SDcard+0x134>)
 8002926:	f006 f9ad 	bl	8008c84 <f_close>
	     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800292a:	2200      	movs	r2, #0
 800292c:	2120      	movs	r1, #32
 800292e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002932:	f000 fec5 	bl	80036c0 <HAL_GPIO_WritePin>
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000218 	.word	0x20000218
 8002940:	0800c09c 	.word	0x0800c09c
 8002944:	20000474 	.word	0x20000474
 8002948:	0800c0a0 	.word	0x0800c0a0
 800294c:	20001a8c 	.word	0x20001a8c
 8002950:	2000195c 	.word	0x2000195c
 8002954:	20000460 	.word	0x20000460
 8002958:	3fe00000 	.word	0x3fe00000
 800295c:	20001a80 	.word	0x20001a80
 8002960:	200014b0 	.word	0x200014b0
 8002964:	0800c0ac 	.word	0x0800c0ac
 8002968:	0800c220 	.word	0x0800c220
 800296c:	20001548 	.word	0x20001548
 8002970:	20001754 	.word	0x20001754
 8002974:	20001550 	.word	0x20001550
 8002978:	20001958 	.word	0x20001958

0800297c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298c:	d116      	bne.n	80029bc <HAL_GPIO_EXTI_Callback+0x40>
	{

		/*start*/
		if(SDstate==0){
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_GPIO_EXTI_Callback+0x22>
			SDstate=1;
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]
		else if(SDstate==3){
			SDstate=0;
		}

	}
}
 800299c:	e00e      	b.n	80029bc <HAL_GPIO_EXTI_Callback+0x40>
		else if(SDstate==2){
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d103      	bne.n	80029ae <HAL_GPIO_EXTI_Callback+0x32>
			SDstate=3;
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80029a8:	2203      	movs	r2, #3
 80029aa:	601a      	str	r2, [r3, #0]
}
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_EXTI_Callback+0x40>
		else if(SDstate==3){
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d102      	bne.n	80029bc <HAL_GPIO_EXTI_Callback+0x40>
			SDstate=0;
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	20000218 	.word	0x20000218

080029cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d0:	b672      	cpsid	i
}
 80029d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <Error_Handler+0x8>
	...

080029d8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <MX_SPI2_Init+0x74>)
 80029de:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <MX_SPI2_Init+0x78>)
 80029e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <MX_SPI2_Init+0x74>)
 80029e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <MX_SPI2_Init+0x74>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <MX_SPI2_Init+0x74>)
 80029f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <MX_SPI2_Init+0x74>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <MX_SPI2_Init+0x74>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_SPI2_Init+0x74>)
 8002a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a0a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_SPI2_Init+0x74>)
 8002a0e:	2218      	movs	r2, #24
 8002a10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_SPI2_Init+0x74>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <MX_SPI2_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <MX_SPI2_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <MX_SPI2_Init+0x74>)
 8002a26:	2207      	movs	r2, #7
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <MX_SPI2_Init+0x74>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <MX_SPI2_Init+0x74>)
 8002a32:	2208      	movs	r2, #8
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a36:	4805      	ldr	r0, [pc, #20]	; (8002a4c <MX_SPI2_Init+0x74>)
 8002a38:	f002 f87a 	bl	8004b30 <HAL_SPI_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002a42:	f7ff ffc3 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20002adc 	.word	0x20002adc
 8002a50:	40003800 	.word	0x40003800

08002a54 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a5a:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <MX_SPI3_Init+0x78>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a6c:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a72:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a74:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a86:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a8a:	2218      	movs	r2, #24
 8002a8c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002aae:	2208      	movs	r2, #8
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ab2:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <MX_SPI3_Init+0x74>)
 8002ab4:	f002 f83c 	bl	8004b30 <HAL_SPI_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002abe:	f7ff ff85 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20002b40 	.word	0x20002b40
 8002acc:	40003c00 	.word	0x40003c00

08002ad0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08c      	sub	sp, #48	; 0x30
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a3d      	ldr	r2, [pc, #244]	; (8002be4 <HAL_SPI_MspInit+0x114>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d145      	bne.n	8002b7e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002af2:	4b3d      	ldr	r3, [pc, #244]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
 8002afe:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	4a36      	ldr	r2, [pc, #216]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b16:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	4a30      	ldr	r2, [pc, #192]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	4619      	mov	r1, r3
 8002b54:	4825      	ldr	r0, [pc, #148]	; (8002bec <HAL_SPI_MspInit+0x11c>)
 8002b56:	f000 fc21 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b6c:	2305      	movs	r3, #5
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	f107 031c 	add.w	r3, r7, #28
 8002b74:	4619      	mov	r1, r3
 8002b76:	481e      	ldr	r0, [pc, #120]	; (8002bf0 <HAL_SPI_MspInit+0x120>)
 8002b78:	f000 fc10 	bl	800339c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002b7c:	e02d      	b.n	8002bda <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_SPI_MspInit+0x124>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d128      	bne.n	8002bda <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	4a16      	ldr	r2, [pc, #88]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b92:	6593      	str	r3, [r2, #88]	; 0x58
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba4:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_SPI_MspInit+0x118>)
 8002bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002bb8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bca:	2306      	movs	r3, #6
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bce:	f107 031c 	add.w	r3, r7, #28
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4805      	ldr	r0, [pc, #20]	; (8002bec <HAL_SPI_MspInit+0x11c>)
 8002bd6:	f000 fbe1 	bl	800339c <HAL_GPIO_Init>
}
 8002bda:	bf00      	nop
 8002bdc:	3730      	adds	r7, #48	; 0x30
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40003800 	.word	0x40003800
 8002be8:	40021000 	.word	0x40021000
 8002bec:	48000800 	.word	0x48000800
 8002bf0:	48000400 	.word	0x48000400
 8002bf4:	40003c00 	.word	0x40003c00

08002bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <HAL_MspInit+0x44>)
 8002c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c02:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <HAL_MspInit+0x44>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6613      	str	r3, [r2, #96]	; 0x60
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <HAL_MspInit+0x44>)
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_MspInit+0x44>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <HAL_MspInit+0x44>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6593      	str	r3, [r2, #88]	; 0x58
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_MspInit+0x44>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000

08002c40 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <SDTimer_Handler+0x40>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <SDTimer_Handler+0x1c>
    Timer1--;
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <SDTimer_Handler+0x40>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <SDTimer_Handler+0x40>)
 8002c5a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <SDTimer_Handler+0x44>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <SDTimer_Handler+0x34>
    Timer2--;
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <SDTimer_Handler+0x44>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <SDTimer_Handler+0x44>)
 8002c72:	701a      	strb	r2, [r3, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20002ba5 	.word	0x20002ba5
 8002c84:	20002ba4 	.word	0x20002ba4

08002c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <NMI_Handler+0x4>

08002c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c92:	e7fe      	b.n	8002c92 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <BusFault_Handler+0x4>

08002ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <UsageFault_Handler+0x4>

08002ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <SysTick_Handler+0x30>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <SysTick_Handler+0x30>)
 8002ce0:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <SysTick_Handler+0x30>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b09      	cmp	r3, #9
 8002cea:	d904      	bls.n	8002cf6 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <SysTick_Handler+0x30>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002cf2:	f7ff ffa5 	bl	8002c40 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf6:	f000 f9fb 	bl	80030f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000021c 	.word	0x2000021c

08002d04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d0c:	f000 fcf0 	bl	80036f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
	return 1;
 8002d18:	2301      	movs	r3, #1
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <_kill>:

int _kill(int pid, int sig)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d2e:	f006 fa45 	bl	80091bc <__errno>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2216      	movs	r2, #22
 8002d36:	601a      	str	r2, [r3, #0]
	return -1;
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_exit>:

void _exit (int status)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ffe7 	bl	8002d24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d56:	e7fe      	b.n	8002d56 <_exit+0x12>

08002d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e00a      	b.n	8002d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d6a:	f3af 8000 	nop.w
 8002d6e:	4601      	mov	r1, r0
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	b2ca      	uxtb	r2, r1
 8002d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf0      	blt.n	8002d6a <_read+0x12>
	}

return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
	return -1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dba:	605a      	str	r2, [r3, #4]
	return 0;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <_isatty>:

int _isatty(int file)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
	return 1;
 8002dd2:	2301      	movs	r3, #1
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
	return 0;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e04:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <_sbrk+0x5c>)
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <_sbrk+0x60>)
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <_sbrk+0x64>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <_sbrk+0x68>)
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d207      	bcs.n	8002e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e2c:	f006 f9c6 	bl	80091bc <__errno>
 8002e30:	4603      	mov	r3, r0
 8002e32:	220c      	movs	r2, #12
 8002e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	e009      	b.n	8002e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <_sbrk+0x64>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <_sbrk+0x64>)
 8002e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20020000 	.word	0x20020000
 8002e5c:	00000400 	.word	0x00000400
 8002e60:	20000220 	.word	0x20000220
 8002e64:	20004cb0 	.word	0x20004cb0

08002e68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e6c:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <SystemInit+0x5c>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <SystemInit+0x5c>)
 8002e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <SystemInit+0x60>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a11      	ldr	r2, [pc, #68]	; (8002ec8 <SystemInit+0x60>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <SystemInit+0x60>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <SystemInit+0x60>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <SystemInit+0x60>)
 8002e94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <SystemInit+0x60>)
 8002ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ea4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <SystemInit+0x60>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <SystemInit+0x60>)
 8002eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <SystemInit+0x60>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	40021000 	.word	0x40021000

08002ecc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <MX_USART2_UART_Init+0x5c>)
 8002ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_USART2_UART_Init+0x58>)
 8002f10:	f002 fba0 	bl	8005654 <HAL_UART_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f1a:	f7ff fd57 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20002ba8 	.word	0x20002ba8
 8002f28:	40004400 	.word	0x40004400

08002f2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b0a4      	sub	sp, #144	; 0x90
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	2268      	movs	r2, #104	; 0x68
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f006 f96d 	bl	800922c <memset>
  if(uartHandle->Instance==USART2)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <HAL_UART_MspInit+0xb0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d13a      	bne.n	8002fd2 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f60:	2300      	movs	r3, #0
 8002f62:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f001 fa73 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f74:	f7ff fd2a 	bl	80029cc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_UART_MspInit+0xb4>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <HAL_UART_MspInit+0xb4>)
 8002f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f82:	6593      	str	r3, [r2, #88]	; 0x58
 8002f84:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <HAL_UART_MspInit+0xb4>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <HAL_UART_MspInit+0xb4>)
 8002f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f94:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_UART_MspInit+0xb4>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <HAL_UART_MspInit+0xb4>)
 8002f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fa8:	230c      	movs	r3, #12
 8002faa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fce:	f000 f9e5 	bl	800339c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	3790      	adds	r7, #144	; 0x90
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40004400 	.word	0x40004400
 8002fe0:	40021000 	.word	0x40021000

08002fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800301c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fe8:	f7ff ff3e 	bl	8002e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002fec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002fee:	e003      	b.n	8002ff8 <LoopCopyDataInit>

08002ff0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002ff2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ff4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ff6:	3104      	adds	r1, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ff8:	480a      	ldr	r0, [pc, #40]	; (8003024 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ffc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ffe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003000:	d3f6      	bcc.n	8002ff0 <CopyDataInit>
	ldr	r2, =_sbss
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003004:	e002      	b.n	800300c <LoopFillZerobss>

08003006 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003006:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003008:	f842 3b04 	str.w	r3, [r2], #4

0800300c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <LoopForever+0x16>)
	cmp	r2, r3
 800300e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003010:	d3f9      	bcc.n	8003006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003012:	f006 f8d9 	bl	80091c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003016:	f7ff f8fb 	bl	8002210 <main>

0800301a <LoopForever>:

LoopForever:
    b LoopForever
 800301a:	e7fe      	b.n	800301a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800301c:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8003020:	0800cb04 	.word	0x0800cb04
	ldr	r0, =_sdata
 8003024:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003028:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 800302c:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8003030:	20004cb0 	.word	0x20004cb0

08003034 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC1_IRQHandler>
	...

08003038 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_Init+0x3c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <HAL_Init+0x3c>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800304e:	2003      	movs	r0, #3
 8003050:	f000 f962 	bl	8003318 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003054:	2000      	movs	r0, #0
 8003056:	f000 f80f 	bl	8003078 <HAL_InitTick>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	71fb      	strb	r3, [r7, #7]
 8003064:	e001      	b.n	800306a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003066:	f7ff fdc7 	bl	8002bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800306a:	79fb      	ldrb	r3, [r7, #7]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40022000 	.word	0x40022000

08003078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003084:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_InitTick+0x6c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d023      	beq.n	80030d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800308c:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_InitTick+0x70>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_InitTick+0x6c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309a:	fbb3 f3f1 	udiv	r3, r3, r1
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f96d 	bl	8003382 <HAL_SYSTICK_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10f      	bne.n	80030ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b0f      	cmp	r3, #15
 80030b2:	d809      	bhi.n	80030c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b4:	2200      	movs	r2, #0
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	f04f 30ff 	mov.w	r0, #4294967295
 80030bc:	f000 f937 	bl	800332e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_InitTick+0x74>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e007      	b.n	80030d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e004      	b.n	80030d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	e001      	b.n	80030d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	2000000c 	.word	0x2000000c
 80030e8:	20000004 	.word	0x20000004
 80030ec:	20000008 	.word	0x20000008

080030f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_IncTick+0x20>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_IncTick+0x24>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_IncTick+0x24>)
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	2000000c 	.word	0x2000000c
 8003114:	20002c2c 	.word	0x20002c2c

08003118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return uwTick;
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <HAL_GetTick+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20002c2c 	.word	0x20002c2c

08003130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff ffee 	bl	8003118 <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d005      	beq.n	8003156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_Delay+0x44>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003156:	bf00      	nop
 8003158:	f7ff ffde 	bl	8003118 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	429a      	cmp	r2, r3
 8003166:	d8f7      	bhi.n	8003158 <HAL_Delay+0x28>
  {
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	2000000c 	.word	0x2000000c

08003178 <__NVIC_SetPriorityGrouping>:
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003194:	4013      	ands	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031aa:	4a04      	ldr	r2, [pc, #16]	; (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	60d3      	str	r3, [r2, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <__NVIC_GetPriorityGrouping>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <__NVIC_GetPriorityGrouping+0x18>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 0307 	and.w	r3, r3, #7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <__NVIC_EnableIRQ>:
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	db0b      	blt.n	8003206 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	4907      	ldr	r1, [pc, #28]	; (8003214 <__NVIC_EnableIRQ+0x38>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2001      	movs	r0, #1
 80031fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e100 	.word	0xe000e100

08003218 <__NVIC_SetPriority>:
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	2b00      	cmp	r3, #0
 800322a:	db0a      	blt.n	8003242 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	490c      	ldr	r1, [pc, #48]	; (8003264 <__NVIC_SetPriority+0x4c>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	0112      	lsls	r2, r2, #4
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	440b      	add	r3, r1
 800323c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003240:	e00a      	b.n	8003258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4908      	ldr	r1, [pc, #32]	; (8003268 <__NVIC_SetPriority+0x50>)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	3b04      	subs	r3, #4
 8003250:	0112      	lsls	r2, r2, #4
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	440b      	add	r3, r1
 8003256:	761a      	strb	r2, [r3, #24]
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000e100 	.word	0xe000e100
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <NVIC_EncodePriority>:
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	; 0x24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f1c3 0307 	rsb	r3, r3, #7
 8003286:	2b04      	cmp	r3, #4
 8003288:	bf28      	it	cs
 800328a:	2304      	movcs	r3, #4
 800328c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3304      	adds	r3, #4
 8003292:	2b06      	cmp	r3, #6
 8003294:	d902      	bls.n	800329c <NVIC_EncodePriority+0x30>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3b03      	subs	r3, #3
 800329a:	e000      	b.n	800329e <NVIC_EncodePriority+0x32>
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	401a      	ands	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b4:	f04f 31ff 	mov.w	r1, #4294967295
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	43d9      	mvns	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	4313      	orrs	r3, r2
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3724      	adds	r7, #36	; 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <SysTick_Config>:
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e4:	d301      	bcc.n	80032ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00f      	b.n	800330a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <SysTick_Config+0x40>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f2:	210f      	movs	r1, #15
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	f7ff ff8e 	bl	8003218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <SysTick_Config+0x40>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <SysTick_Config+0x40>)
 8003304:	2207      	movs	r2, #7
 8003306:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	e000e010 	.word	0xe000e010

08003318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff29 	bl	8003178 <__NVIC_SetPriorityGrouping>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003340:	f7ff ff3e 	bl	80031c0 <__NVIC_GetPriorityGrouping>
 8003344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	6978      	ldr	r0, [r7, #20]
 800334c:	f7ff ff8e 	bl	800326c <NVIC_EncodePriority>
 8003350:	4602      	mov	r2, r0
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff5d 	bl	8003218 <__NVIC_SetPriority>
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff31 	bl	80031dc <__NVIC_EnableIRQ>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ffa2 	bl	80032d4 <SysTick_Config>
 8003390:	4603      	mov	r3, r0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033aa:	e154      	b.n	8003656 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8146 	beq.w	8003650 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d00b      	beq.n	80033e4 <HAL_GPIO_Init+0x48>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d007      	beq.n	80033e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d8:	2b11      	cmp	r3, #17
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b12      	cmp	r3, #18
 80033e2:	d130      	bne.n	8003446 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800341a:	2201      	movs	r2, #1
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0201 	and.w	r2, r3, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0xea>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b12      	cmp	r3, #18
 8003484:	d123      	bne.n	80034ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	08da      	lsrs	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3208      	adds	r2, #8
 800348e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	6939      	ldr	r1, [r7, #16]
 80034ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80a0 	beq.w	8003650 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003510:	4b58      	ldr	r3, [pc, #352]	; (8003674 <HAL_GPIO_Init+0x2d8>)
 8003512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003514:	4a57      	ldr	r2, [pc, #348]	; (8003674 <HAL_GPIO_Init+0x2d8>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6613      	str	r3, [r2, #96]	; 0x60
 800351c:	4b55      	ldr	r3, [pc, #340]	; (8003674 <HAL_GPIO_Init+0x2d8>)
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003528:	4a53      	ldr	r2, [pc, #332]	; (8003678 <HAL_GPIO_Init+0x2dc>)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3302      	adds	r3, #2
 8003530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	220f      	movs	r2, #15
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003552:	d019      	beq.n	8003588 <HAL_GPIO_Init+0x1ec>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a49      	ldr	r2, [pc, #292]	; (800367c <HAL_GPIO_Init+0x2e0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d013      	beq.n	8003584 <HAL_GPIO_Init+0x1e8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a48      	ldr	r2, [pc, #288]	; (8003680 <HAL_GPIO_Init+0x2e4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00d      	beq.n	8003580 <HAL_GPIO_Init+0x1e4>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a47      	ldr	r2, [pc, #284]	; (8003684 <HAL_GPIO_Init+0x2e8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <HAL_GPIO_Init+0x1e0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a46      	ldr	r2, [pc, #280]	; (8003688 <HAL_GPIO_Init+0x2ec>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d101      	bne.n	8003578 <HAL_GPIO_Init+0x1dc>
 8003574:	2304      	movs	r3, #4
 8003576:	e008      	b.n	800358a <HAL_GPIO_Init+0x1ee>
 8003578:	2307      	movs	r3, #7
 800357a:	e006      	b.n	800358a <HAL_GPIO_Init+0x1ee>
 800357c:	2303      	movs	r3, #3
 800357e:	e004      	b.n	800358a <HAL_GPIO_Init+0x1ee>
 8003580:	2302      	movs	r3, #2
 8003582:	e002      	b.n	800358a <HAL_GPIO_Init+0x1ee>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <HAL_GPIO_Init+0x1ee>
 8003588:	2300      	movs	r3, #0
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	f002 0203 	and.w	r2, r2, #3
 8003590:	0092      	lsls	r2, r2, #2
 8003592:	4093      	lsls	r3, r2
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800359a:	4937      	ldr	r1, [pc, #220]	; (8003678 <HAL_GPIO_Init+0x2dc>)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	3302      	adds	r3, #2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035a8:	4b38      	ldr	r3, [pc, #224]	; (800368c <HAL_GPIO_Init+0x2f0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035cc:	4a2f      	ldr	r2, [pc, #188]	; (800368c <HAL_GPIO_Init+0x2f0>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035d2:	4b2e      	ldr	r3, [pc, #184]	; (800368c <HAL_GPIO_Init+0x2f0>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035f6:	4a25      	ldr	r2, [pc, #148]	; (800368c <HAL_GPIO_Init+0x2f0>)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035fc:	4b23      	ldr	r3, [pc, #140]	; (800368c <HAL_GPIO_Init+0x2f0>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003620:	4a1a      	ldr	r2, [pc, #104]	; (800368c <HAL_GPIO_Init+0x2f0>)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_GPIO_Init+0x2f0>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <HAL_GPIO_Init+0x2f0>)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	3301      	adds	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	f47f aea3 	bne.w	80033ac <HAL_GPIO_Init+0x10>
  }
}
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40021000 	.word	0x40021000
 8003678:	40010000 	.word	0x40010000
 800367c:	48000400 	.word	0x48000400
 8003680:	48000800 	.word	0x48000800
 8003684:	48000c00 	.word	0x48000c00
 8003688:	48001000 	.word	0x48001000
 800368c:	40010400 	.word	0x40010400

08003690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e001      	b.n	80036b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
 80036cc:	4613      	mov	r3, r2
 80036ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d0:	787b      	ldrb	r3, [r7, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036dc:	e002      	b.n	80036e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff f934 	bl	800297c <HAL_GPIO_EXTI_Callback>
  }
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40010400 	.word	0x40010400

08003720 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40007000 	.word	0x40007000

08003740 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <HAL_PWREx_GetVoltageRange+0x18>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40007000 	.word	0x40007000

0800375c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376a:	d130      	bne.n	80037ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d038      	beq.n	80037ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003782:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003784:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2232      	movs	r2, #50	; 0x32
 8003790:	fb02 f303 	mul.w	r3, r2, r3
 8003794:	4a1b      	ldr	r2, [pc, #108]	; (8003804 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0c9b      	lsrs	r3, r3, #18
 800379c:	3301      	adds	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037a0:	e002      	b.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b4:	d102      	bne.n	80037bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f2      	bne.n	80037a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c8:	d110      	bne.n	80037ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e00f      	b.n	80037ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037da:	d007      	beq.n	80037ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e4:	4a05      	ldr	r2, [pc, #20]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40007000 	.word	0x40007000
 8003800:	20000004 	.word	0x20000004
 8003804:	431bde83 	.word	0x431bde83

08003808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f000 bc11 	b.w	800403e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381c:	4ba0      	ldr	r3, [pc, #640]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003826:	4b9e      	ldr	r3, [pc, #632]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80e4 	beq.w	8003a06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <HAL_RCC_OscConfig+0x4c>
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b0c      	cmp	r3, #12
 8003848:	f040 808b 	bne.w	8003962 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2b01      	cmp	r3, #1
 8003850:	f040 8087 	bne.w	8003962 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003854:	4b92      	ldr	r3, [pc, #584]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_OscConfig+0x64>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e3e8      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1a      	ldr	r2, [r3, #32]
 8003870:	4b8b      	ldr	r3, [pc, #556]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_RCC_OscConfig+0x7e>
 800387c:	4b88      	ldr	r3, [pc, #544]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003884:	e005      	b.n	8003892 <HAL_RCC_OscConfig+0x8a>
 8003886:	4b86      	ldr	r3, [pc, #536]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003892:	4293      	cmp	r3, r2
 8003894:	d223      	bcs.n	80038de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fd7a 	bl	8004394 <RCC_SetFlashLatencyFromMSIRange>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e3c9      	b.n	800403e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038aa:	4b7d      	ldr	r3, [pc, #500]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a7c      	ldr	r2, [pc, #496]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b7a      	ldr	r3, [pc, #488]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4977      	ldr	r1, [pc, #476]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c8:	4b75      	ldr	r3, [pc, #468]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	4972      	ldr	r1, [pc, #456]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
 80038dc:	e025      	b.n	800392a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038de:	4b70      	ldr	r3, [pc, #448]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6f      	ldr	r2, [pc, #444]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038e4:	f043 0308 	orr.w	r3, r3, #8
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	4b6d      	ldr	r3, [pc, #436]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	496a      	ldr	r1, [pc, #424]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038fc:	4b68      	ldr	r3, [pc, #416]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	4965      	ldr	r1, [pc, #404]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fd3a 	bl	8004394 <RCC_SetFlashLatencyFromMSIRange>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e389      	b.n	800403e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800392a:	f000 fc6f 	bl	800420c <HAL_RCC_GetSysClockFreq>
 800392e:	4602      	mov	r2, r0
 8003930:	4b5b      	ldr	r3, [pc, #364]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	495a      	ldr	r1, [pc, #360]	; (8003aa4 <HAL_RCC_OscConfig+0x29c>)
 800393c:	5ccb      	ldrb	r3, [r1, r3]
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	4a58      	ldr	r2, [pc, #352]	; (8003aa8 <HAL_RCC_OscConfig+0x2a0>)
 8003948:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800394a:	4b58      	ldr	r3, [pc, #352]	; (8003aac <HAL_RCC_OscConfig+0x2a4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fb92 	bl	8003078 <HAL_InitTick>
 8003954:	4603      	mov	r3, r0
 8003956:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d052      	beq.n	8003a04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	e36d      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d032      	beq.n	80039d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800396a:	4b4d      	ldr	r3, [pc, #308]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a4c      	ldr	r2, [pc, #304]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003976:	f7ff fbcf 	bl	8003118 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800397e:	f7ff fbcb 	bl	8003118 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e356      	b.n	800403e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003990:	4b43      	ldr	r3, [pc, #268]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800399c:	4b40      	ldr	r3, [pc, #256]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a3f      	ldr	r2, [pc, #252]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80039a2:	f043 0308 	orr.w	r3, r3, #8
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	493a      	ldr	r1, [pc, #232]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ba:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	4935      	ldr	r1, [pc, #212]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
 80039ce:	e01a      	b.n	8003a06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039d0:	4b33      	ldr	r3, [pc, #204]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a32      	ldr	r2, [pc, #200]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039dc:	f7ff fb9c 	bl	8003118 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039e4:	f7ff fb98 	bl	8003118 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e323      	b.n	800403e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039f6:	4b2a      	ldr	r3, [pc, #168]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x1dc>
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d073      	beq.n	8003afa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_OscConfig+0x21c>
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d10e      	bne.n	8003a3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d063      	beq.n	8003af8 <HAL_RCC_OscConfig+0x2f0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d15f      	bne.n	8003af8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e300      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d106      	bne.n	8003a54 <HAL_RCC_OscConfig+0x24c>
 8003a46:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a15      	ldr	r2, [pc, #84]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e01d      	b.n	8003a90 <HAL_RCC_OscConfig+0x288>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x270>
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a0c      	ldr	r2, [pc, #48]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e00b      	b.n	8003a90 <HAL_RCC_OscConfig+0x288>
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a05      	ldr	r2, [pc, #20]	; (8003aa0 <HAL_RCC_OscConfig+0x298>)
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01b      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7ff fb3e 	bl	8003118 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a9e:	e010      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2ba>
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	0800c28c 	.word	0x0800c28c
 8003aa8:	20000004 	.word	0x20000004
 8003aac:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7ff fb32 	bl	8003118 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	; 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e2bd      	b.n	800403e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac2:	4baf      	ldr	r3, [pc, #700]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x2a8>
 8003ace:	e014      	b.n	8003afa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7ff fb22 	bl	8003118 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7ff fb1e 	bl	8003118 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e2a9      	b.n	800403e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aea:	4ba5      	ldr	r3, [pc, #660]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x2d0>
 8003af6:	e000      	b.n	8003afa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d060      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_OscConfig+0x310>
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d119      	bne.n	8003b46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d116      	bne.n	8003b46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b18:	4b99      	ldr	r3, [pc, #612]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_OscConfig+0x328>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e286      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b93      	ldr	r3, [pc, #588]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	4990      	ldr	r1, [pc, #576]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b44:	e040      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d023      	beq.n	8003b96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b4e:	4b8c      	ldr	r3, [pc, #560]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a8b      	ldr	r2, [pc, #556]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7ff fadd 	bl	8003118 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b62:	f7ff fad9 	bl	8003118 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e264      	b.n	800403e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b74:	4b82      	ldr	r3, [pc, #520]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b80:	4b7f      	ldr	r3, [pc, #508]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	497c      	ldr	r1, [pc, #496]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
 8003b94:	e018      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b96:	4b7a      	ldr	r3, [pc, #488]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a79      	ldr	r2, [pc, #484]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7ff fab9 	bl	8003118 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003baa:	f7ff fab5 	bl	8003118 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e240      	b.n	800403e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bbc:	4b70      	ldr	r3, [pc, #448]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d03c      	beq.n	8003c4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bdc:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be2:	4a67      	ldr	r2, [pc, #412]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bec:	f7ff fa94 	bl	8003118 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf4:	f7ff fa90 	bl	8003118 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e21b      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c06:	4b5e      	ldr	r3, [pc, #376]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ef      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x3ec>
 8003c14:	e01b      	b.n	8003c4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c16:	4b5a      	ldr	r3, [pc, #360]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7ff fa77 	bl	8003118 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2e:	f7ff fa73 	bl	8003118 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e1fe      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c40:	4b4f      	ldr	r3, [pc, #316]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ef      	bne.n	8003c2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80a6 	beq.w	8003da8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c60:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6c:	4b44      	ldr	r3, [pc, #272]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c70:	4a43      	ldr	r2, [pc, #268]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c76:	6593      	str	r3, [r2, #88]	; 0x58
 8003c78:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c84:	2301      	movs	r3, #1
 8003c86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c88:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <HAL_RCC_OscConfig+0x57c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d118      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c94:	4b3b      	ldr	r3, [pc, #236]	; (8003d84 <HAL_RCC_OscConfig+0x57c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a3a      	ldr	r2, [pc, #232]	; (8003d84 <HAL_RCC_OscConfig+0x57c>)
 8003c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca0:	f7ff fa3a 	bl	8003118 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca8:	f7ff fa36 	bl	8003118 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1c1      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cba:	4b32      	ldr	r3, [pc, #200]	; (8003d84 <HAL_RCC_OscConfig+0x57c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d108      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x4d8>
 8003cce:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cde:	e024      	b.n	8003d2a <HAL_RCC_OscConfig+0x522>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d110      	bne.n	8003d0a <HAL_RCC_OscConfig+0x502>
 8003ce8:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003cf0:	f043 0304 	orr.w	r3, r3, #4
 8003cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf8:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d08:	e00f      	b.n	8003d2a <HAL_RCC_OscConfig+0x522>
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d1a:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003d22:	f023 0304 	bic.w	r3, r3, #4
 8003d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7ff f9f1 	bl	8003118 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7ff f9ed 	bl	8003118 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e176      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_OscConfig+0x578>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ed      	beq.n	8003d3a <HAL_RCC_OscConfig+0x532>
 8003d5e:	e01a      	b.n	8003d96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7ff f9da 	bl	8003118 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d66:	e00f      	b.n	8003d88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7ff f9d6 	bl	8003118 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d906      	bls.n	8003d88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e15f      	b.n	800403e <HAL_RCC_OscConfig+0x836>
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d88:	4baa      	ldr	r3, [pc, #680]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e8      	bne.n	8003d68 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d96:	7ffb      	ldrb	r3, [r7, #31]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d105      	bne.n	8003da8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9c:	4ba5      	ldr	r3, [pc, #660]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da0:	4aa4      	ldr	r2, [pc, #656]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d03c      	beq.n	8003e2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dbc:	4b9d      	ldr	r3, [pc, #628]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dc2:	4a9c      	ldr	r2, [pc, #624]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7ff f9a4 	bl	8003118 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dd4:	f7ff f9a0 	bl	8003118 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e12b      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003de6:	4b93      	ldr	r3, [pc, #588]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ef      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x5cc>
 8003df4:	e01b      	b.n	8003e2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003df6:	4b8f      	ldr	r3, [pc, #572]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dfc:	4a8d      	ldr	r2, [pc, #564]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7ff f987 	bl	8003118 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e0e:	f7ff f983 	bl	8003118 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e10e      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e20:	4b84      	ldr	r3, [pc, #528]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1ef      	bne.n	8003e0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8102 	beq.w	800403c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	f040 80c5 	bne.w	8003fcc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e42:	4b7c      	ldr	r3, [pc, #496]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 0203 	and.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d12c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	3b01      	subs	r3, #1
 8003e62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d123      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d11b      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d113      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	3b01      	subs	r3, #1
 8003e96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d109      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d067      	beq.n	8003f80 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d062      	beq.n	8003f7c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003eb6:	4b5f      	ldr	r3, [pc, #380]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0bb      	b.n	800403e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ec6:	4b5b      	ldr	r3, [pc, #364]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a5a      	ldr	r2, [pc, #360]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003ecc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ed2:	f7ff f921 	bl	8003118 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eda:	f7ff f91d 	bl	8003118 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e0a8      	b.n	800403e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eec:	4b51      	ldr	r3, [pc, #324]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef8:	4b4e      	ldr	r3, [pc, #312]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	4b4e      	ldr	r3, [pc, #312]	; (8004038 <HAL_RCC_OscConfig+0x830>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	0112      	lsls	r2, r2, #4
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f12:	0212      	lsls	r2, r2, #8
 8003f14:	4311      	orrs	r1, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f1a:	0852      	lsrs	r2, r2, #1
 8003f1c:	3a01      	subs	r2, #1
 8003f1e:	0552      	lsls	r2, r2, #21
 8003f20:	4311      	orrs	r1, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f26:	0852      	lsrs	r2, r2, #1
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	0652      	lsls	r2, r2, #25
 8003f2c:	4311      	orrs	r1, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f32:	06d2      	lsls	r2, r2, #27
 8003f34:	430a      	orrs	r2, r1
 8003f36:	493f      	ldr	r1, [pc, #252]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f3c:	4b3d      	ldr	r3, [pc, #244]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f48:	4b3a      	ldr	r3, [pc, #232]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a39      	ldr	r2, [pc, #228]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f54:	f7ff f8e0 	bl	8003118 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7ff f8dc 	bl	8003118 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e067      	b.n	800403e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6e:	4b31      	ldr	r3, [pc, #196]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f7a:	e05f      	b.n	800403c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e05e      	b.n	800403e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f80:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d157      	bne.n	800403c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f8c:	4b29      	ldr	r3, [pc, #164]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a28      	ldr	r2, [pc, #160]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f98:	4b26      	ldr	r3, [pc, #152]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a25      	ldr	r2, [pc, #148]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fa4:	f7ff f8b8 	bl	8003118 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fac:	f7ff f8b4 	bl	8003118 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e03f      	b.n	800403e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x7a4>
 8003fca:	e037      	b.n	800403c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b0c      	cmp	r3, #12
 8003fd0:	d02d      	beq.n	800402e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd2:	4b18      	ldr	r3, [pc, #96]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a17      	ldr	r2, [pc, #92]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fdc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	4a11      	ldr	r2, [pc, #68]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003ff0:	f023 0303 	bic.w	r3, r3, #3
 8003ff4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	4a0e      	ldr	r2, [pc, #56]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8003ffc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004004:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004006:	f7ff f887 	bl	8003118 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400e:	f7ff f883 	bl	8003118 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e00e      	b.n	800403e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <HAL_RCC_OscConfig+0x82c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_OscConfig+0x806>
 800402c:	e006      	b.n	800403c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e005      	b.n	800403e <HAL_RCC_OscConfig+0x836>
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000
 8004038:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop

08004048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0c8      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800405c:	4b66      	ldr	r3, [pc, #408]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d910      	bls.n	800408c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b63      	ldr	r3, [pc, #396]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	4961      	ldr	r1, [pc, #388]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b5f      	ldr	r3, [pc, #380]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0b0      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d04c      	beq.n	8004132 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a0:	4b56      	ldr	r3, [pc, #344]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d121      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e09e      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b8:	4b50      	ldr	r3, [pc, #320]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d115      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e092      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d0:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e086      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e0:	4b46      	ldr	r3, [pc, #280]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e07e      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040f0:	4b42      	ldr	r3, [pc, #264]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 0203 	bic.w	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	493f      	ldr	r1, [pc, #252]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004102:	f7ff f809 	bl	8003118 <HAL_GetTick>
 8004106:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004108:	e00a      	b.n	8004120 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410a:	f7ff f805 	bl	8003118 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e066      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 020c 	and.w	r2, r3, #12
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	429a      	cmp	r2, r3
 8004130:	d1eb      	bne.n	800410a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413e:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	492c      	ldr	r1, [pc, #176]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004150:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d210      	bcs.n	8004180 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 0207 	bic.w	r2, r3, #7
 8004166:	4924      	ldr	r1, [pc, #144]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e036      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4918      	ldr	r1, [pc, #96]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4910      	ldr	r1, [pc, #64]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041be:	f000 f825 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80041c2:	4602      	mov	r2, r0
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	490c      	ldr	r1, [pc, #48]	; (8004200 <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	5ccb      	ldrb	r3, [r1, r3]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	fa22 f303 	lsr.w	r3, r2, r3
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe ff48 	bl	8003078 <HAL_InitTick>
 80041e8:	4603      	mov	r3, r0
 80041ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80041ec:	7afb      	ldrb	r3, [r7, #11]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40022000 	.word	0x40022000
 80041fc:	40021000 	.word	0x40021000
 8004200:	0800c28c 	.word	0x0800c28c
 8004204:	20000004 	.word	0x20000004
 8004208:	20000008 	.word	0x20000008

0800420c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421a:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004224:	4b3b      	ldr	r3, [pc, #236]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x34>
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d121      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d11e      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004240:	4b34      	ldr	r3, [pc, #208]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800424c:	4b31      	ldr	r3, [pc, #196]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800424e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e005      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800425c:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004268:	4a2b      	ldr	r2, [pc, #172]	; (8004318 <HAL_RCC_GetSysClockFreq+0x10c>)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004270:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10d      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800427c:	e00a      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d102      	bne.n	800428a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004284:	4b25      	ldr	r3, [pc, #148]	; (800431c <HAL_RCC_GetSysClockFreq+0x110>)
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e004      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d101      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004290:	4b23      	ldr	r3, [pc, #140]	; (8004320 <HAL_RCC_GetSysClockFreq+0x114>)
 8004292:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d134      	bne.n	8004304 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800429a:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d003      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0xac>
 80042b0:	e005      	b.n	80042be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042b2:	4b1a      	ldr	r3, [pc, #104]	; (800431c <HAL_RCC_GetSysClockFreq+0x110>)
 80042b4:	617b      	str	r3, [r7, #20]
      break;
 80042b6:	e005      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_RCC_GetSysClockFreq+0x114>)
 80042ba:	617b      	str	r3, [r7, #20]
      break;
 80042bc:	e002      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	617b      	str	r3, [r7, #20]
      break;
 80042c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042c4:	4b13      	ldr	r3, [pc, #76]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	3301      	adds	r3, #1
 80042d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	fb02 f203 	mul.w	r2, r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	0e5b      	lsrs	r3, r3, #25
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	3301      	adds	r3, #1
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004304:	69bb      	ldr	r3, [r7, #24]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3724      	adds	r7, #36	; 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	0800c2a4 	.word	0x0800c2a4
 800431c:	00f42400 	.word	0x00f42400
 8004320:	007a1200 	.word	0x007a1200

08004324 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <HAL_RCC_GetHCLKFreq+0x14>)
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000004 	.word	0x20000004

0800433c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004340:	f7ff fff0 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0a1b      	lsrs	r3, r3, #8
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4904      	ldr	r1, [pc, #16]	; (8004364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000
 8004364:	0800c29c 	.word	0x0800c29c

08004368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800436c:	f7ff ffda 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0adb      	lsrs	r3, r3, #11
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <HAL_RCC_GetPCLK2Freq+0x28>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40021000 	.word	0x40021000
 8004390:	0800c29c 	.word	0x0800c29c

08004394 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043a0:	4b2a      	ldr	r3, [pc, #168]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043ac:	f7ff f9c8 	bl	8003740 <HAL_PWREx_GetVoltageRange>
 80043b0:	6178      	str	r0, [r7, #20]
 80043b2:	e014      	b.n	80043de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b4:	4b25      	ldr	r3, [pc, #148]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	4a24      	ldr	r2, [pc, #144]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043be:	6593      	str	r3, [r2, #88]	; 0x58
 80043c0:	4b22      	ldr	r3, [pc, #136]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043cc:	f7ff f9b8 	bl	8003740 <HAL_PWREx_GetVoltageRange>
 80043d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043d2:	4b1e      	ldr	r3, [pc, #120]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e4:	d10b      	bne.n	80043fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b80      	cmp	r3, #128	; 0x80
 80043ea:	d919      	bls.n	8004420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2ba0      	cmp	r3, #160	; 0xa0
 80043f0:	d902      	bls.n	80043f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043f2:	2302      	movs	r3, #2
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	e013      	b.n	8004420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043f8:	2301      	movs	r3, #1
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	e010      	b.n	8004420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d902      	bls.n	800440a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004404:	2303      	movs	r3, #3
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	e00a      	b.n	8004420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b80      	cmp	r3, #128	; 0x80
 800440e:	d102      	bne.n	8004416 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004410:	2302      	movs	r3, #2
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	e004      	b.n	8004420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b70      	cmp	r3, #112	; 0x70
 800441a:	d101      	bne.n	8004420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800441c:	2301      	movs	r3, #1
 800441e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f023 0207 	bic.w	r2, r3, #7
 8004428:	4909      	ldr	r1, [pc, #36]	; (8004450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d001      	beq.n	8004442 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000
 8004450:	40022000 	.word	0x40022000

08004454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800445c:	2300      	movs	r3, #0
 800445e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004460:	2300      	movs	r3, #0
 8004462:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800446c:	2b00      	cmp	r3, #0
 800446e:	d031      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004474:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004478:	d01a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800447a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800447e:	d814      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004484:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004488:	d10f      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800448a:	4b5d      	ldr	r3, [pc, #372]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	4a5c      	ldr	r2, [pc, #368]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004494:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004496:	e00c      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	2100      	movs	r1, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fa54 	bl	800494c <RCCEx_PLLSAI1_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044a8:	e003      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	74fb      	strb	r3, [r7, #19]
      break;
 80044ae:	e000      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b2:	7cfb      	ldrb	r3, [r7, #19]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044b8:	4b51      	ldr	r3, [pc, #324]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	494e      	ldr	r1, [pc, #312]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044ce:	e001      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 809e 	beq.w	800461e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044e6:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80044f6:	2300      	movs	r3, #0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fc:	4b40      	ldr	r3, [pc, #256]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004500:	4a3f      	ldr	r2, [pc, #252]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004506:	6593      	str	r3, [r2, #88]	; 0x58
 8004508:	4b3d      	ldr	r3, [pc, #244]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004514:	2301      	movs	r3, #1
 8004516:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004518:	4b3a      	ldr	r3, [pc, #232]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a39      	ldr	r2, [pc, #228]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800451e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004524:	f7fe fdf8 	bl	8003118 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800452a:	e009      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452c:	f7fe fdf4 	bl	8003118 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d902      	bls.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	74fb      	strb	r3, [r7, #19]
        break;
 800453e:	e005      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ef      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d15a      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004552:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01e      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	429a      	cmp	r2, r3
 800456c:	d019      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800456e:	4b24      	ldr	r3, [pc, #144]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004578:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800457a:	4b21      	ldr	r3, [pc, #132]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800459a:	4a19      	ldr	r2, [pc, #100]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d016      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fe fdb4 	bl	8003118 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b2:	e00b      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b4:	f7fe fdb0 	bl	8003118 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d902      	bls.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	74fb      	strb	r3, [r7, #19]
            break;
 80045ca:	e006      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0ec      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80045da:	7cfb      	ldrb	r3, [r7, #19]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e0:	4b07      	ldr	r3, [pc, #28]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ee:	4904      	ldr	r1, [pc, #16]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045f6:	e009      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	74bb      	strb	r3, [r7, #18]
 80045fc:	e006      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800460c:	7c7b      	ldrb	r3, [r7, #17]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004612:	4b9e      	ldr	r3, [pc, #632]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004616:	4a9d      	ldr	r2, [pc, #628]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800462a:	4b98      	ldr	r3, [pc, #608]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f023 0203 	bic.w	r2, r3, #3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	4994      	ldr	r1, [pc, #592]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800464c:	4b8f      	ldr	r3, [pc, #572]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f023 020c 	bic.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	498c      	ldr	r1, [pc, #560]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800466e:	4b87      	ldr	r3, [pc, #540]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004674:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	4983      	ldr	r1, [pc, #524]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004690:	4b7e      	ldr	r3, [pc, #504]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	497b      	ldr	r1, [pc, #492]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046b2:	4b76      	ldr	r3, [pc, #472]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	4972      	ldr	r1, [pc, #456]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046d4:	4b6d      	ldr	r3, [pc, #436]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	496a      	ldr	r1, [pc, #424]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046f6:	4b65      	ldr	r3, [pc, #404]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004704:	4961      	ldr	r1, [pc, #388]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004718:	4b5c      	ldr	r3, [pc, #368]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	4959      	ldr	r1, [pc, #356]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800473a:	4b54      	ldr	r3, [pc, #336]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004740:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	4950      	ldr	r1, [pc, #320]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800475c:	4b4b      	ldr	r3, [pc, #300]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	4948      	ldr	r1, [pc, #288]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800477e:	4b43      	ldr	r3, [pc, #268]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004784:	f023 0203 	bic.w	r2, r3, #3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	493f      	ldr	r1, [pc, #252]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d028      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047a0:	4b3a      	ldr	r3, [pc, #232]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ae:	4937      	ldr	r1, [pc, #220]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047be:	d106      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c0:	4b32      	ldr	r3, [pc, #200]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4a31      	ldr	r2, [pc, #196]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ca:	60d3      	str	r3, [r2, #12]
 80047cc:	e011      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047d6:	d10c      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	2101      	movs	r1, #1
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f8b4 	bl	800494c <RCCEx_PLLSAI1_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80047ee:	7cfb      	ldrb	r3, [r7, #19]
 80047f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d028      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047fe:	4b23      	ldr	r3, [pc, #140]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480c:	491f      	ldr	r1, [pc, #124]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800481c:	d106      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800481e:	4b1b      	ldr	r3, [pc, #108]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	4a1a      	ldr	r2, [pc, #104]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004828:	60d3      	str	r3, [r2, #12]
 800482a:	e011      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004834:	d10c      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	2101      	movs	r1, #1
 800483c:	4618      	mov	r0, r3
 800483e:	f000 f885 	bl	800494c <RCCEx_PLLSAI1_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004846:	7cfb      	ldrb	r3, [r7, #19]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d02b      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	4908      	ldr	r1, [pc, #32]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800487a:	d109      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a02      	ldr	r2, [pc, #8]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004886:	60d3      	str	r3, [r2, #12]
 8004888:	e014      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	2101      	movs	r1, #1
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 f853 	bl	800494c <RCCEx_PLLSAI1_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048aa:	7cfb      	ldrb	r3, [r7, #19]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
 80048b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01c      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ce:	4916      	ldr	r1, [pc, #88]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048de:	d10c      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	2102      	movs	r1, #2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f830 	bl	800494c <RCCEx_PLLSAI1_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004914:	4904      	ldr	r1, [pc, #16]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800491c:	7cbb      	ldrb	r3, [r7, #18]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000

0800492c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a04      	ldr	r2, [pc, #16]	; (8004948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	6013      	str	r3, [r2, #0]
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40021000 	.word	0x40021000

0800494c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800495a:	4b74      	ldr	r3, [pc, #464]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004966:	4b71      	ldr	r3, [pc, #452]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0203 	and.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d10d      	bne.n	8004992 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
       ||
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800497e:	4b6b      	ldr	r3, [pc, #428]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	091b      	lsrs	r3, r3, #4
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
       ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d047      	beq.n	8004a22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
 8004996:	e044      	b.n	8004a22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d018      	beq.n	80049d2 <RCCEx_PLLSAI1_Config+0x86>
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d825      	bhi.n	80049f0 <RCCEx_PLLSAI1_Config+0xa4>
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d002      	beq.n	80049ae <RCCEx_PLLSAI1_Config+0x62>
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d009      	beq.n	80049c0 <RCCEx_PLLSAI1_Config+0x74>
 80049ac:	e020      	b.n	80049f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ae:	4b5f      	ldr	r3, [pc, #380]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d11d      	bne.n	80049f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049be:	e01a      	b.n	80049f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049c0:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d116      	bne.n	80049fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d0:	e013      	b.n	80049fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049d2:	4b56      	ldr	r3, [pc, #344]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10f      	bne.n	80049fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049de:	4b53      	ldr	r3, [pc, #332]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ee:	e006      	b.n	80049fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      break;
 80049f4:	e004      	b.n	8004a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a06:	4b49      	ldr	r3, [pc, #292]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6819      	ldr	r1, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	4943      	ldr	r1, [pc, #268]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d17c      	bne.n	8004b22 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a28:	4b40      	ldr	r3, [pc, #256]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a3f      	ldr	r2, [pc, #252]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a34:	f7fe fb70 	bl	8003118 <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a3a:	e009      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a3c:	f7fe fb6c 	bl	8003118 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a4e:	e005      	b.n	8004a5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a50:	4b36      	ldr	r3, [pc, #216]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1ef      	bne.n	8004a3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d15f      	bne.n	8004b22 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d110      	bne.n	8004a8a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a68:	4b30      	ldr	r3, [pc, #192]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6892      	ldr	r2, [r2, #8]
 8004a78:	0211      	lsls	r1, r2, #8
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68d2      	ldr	r2, [r2, #12]
 8004a7e:	06d2      	lsls	r2, r2, #27
 8004a80:	430a      	orrs	r2, r1
 8004a82:	492a      	ldr	r1, [pc, #168]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	610b      	str	r3, [r1, #16]
 8004a88:	e027      	b.n	8004ada <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d112      	bne.n	8004ab6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a90:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6892      	ldr	r2, [r2, #8]
 8004aa0:	0211      	lsls	r1, r2, #8
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6912      	ldr	r2, [r2, #16]
 8004aa6:	0852      	lsrs	r2, r2, #1
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	0552      	lsls	r2, r2, #21
 8004aac:	430a      	orrs	r2, r1
 8004aae:	491f      	ldr	r1, [pc, #124]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	610b      	str	r3, [r1, #16]
 8004ab4:	e011      	b.n	8004ada <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004abe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6892      	ldr	r2, [r2, #8]
 8004ac6:	0211      	lsls	r1, r2, #8
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6952      	ldr	r2, [r2, #20]
 8004acc:	0852      	lsrs	r2, r2, #1
 8004ace:	3a01      	subs	r2, #1
 8004ad0:	0652      	lsls	r2, r2, #25
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	4915      	ldr	r1, [pc, #84]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ada:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ae4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae6:	f7fe fb17 	bl	8003118 <HAL_GetTick>
 8004aea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aec:	e009      	b.n	8004b02 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aee:	f7fe fb13 	bl	8003118 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d902      	bls.n	8004b02 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	73fb      	strb	r3, [r7, #15]
          break;
 8004b00:	e005      	b.n	8004b0e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0ef      	beq.n	8004aee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d106      	bne.n	8004b22 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	4903      	ldr	r1, [pc, #12]	; (8004b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000

08004b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e095      	b.n	8004c6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b52:	d009      	beq.n	8004b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	61da      	str	r2, [r3, #28]
 8004b5a:	e005      	b.n	8004b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fd ffa4 	bl	8002ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ba8:	d902      	bls.n	8004bb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	e002      	b.n	8004bb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bbe:	d007      	beq.n	8004bd0 <HAL_SPI_Init+0xa0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bc8:	d002      	beq.n	8004bd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	ea42 0103 	orr.w	r1, r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	f003 0204 	and.w	r2, r3, #4
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c4c:	ea42 0103 	orr.w	r1, r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b088      	sub	sp, #32
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_SPI_Transmit+0x22>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e158      	b.n	8004f4a <HAL_SPI_Transmit+0x2d4>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ca0:	f7fe fa3a 	bl	8003118 <HAL_GetTick>
 8004ca4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d002      	beq.n	8004cbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cba:	e13d      	b.n	8004f38 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SPI_Transmit+0x52>
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d102      	bne.n	8004cce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ccc:	e134      	b.n	8004f38 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d18:	d10f      	bne.n	8004d3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d007      	beq.n	8004d58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d60:	d94b      	bls.n	8004dfa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_Transmit+0xfa>
 8004d6a:	8afb      	ldrh	r3, [r7, #22]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d13e      	bne.n	8004dee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	881a      	ldrh	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	1c9a      	adds	r2, r3, #2
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d94:	e02b      	b.n	8004dee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d112      	bne.n	8004dca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	881a      	ldrh	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	1c9a      	adds	r2, r3, #2
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dc8:	e011      	b.n	8004dee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dca:	f7fe f9a5 	bl	8003118 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d803      	bhi.n	8004de2 <HAL_SPI_Transmit+0x16c>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d102      	bne.n	8004de8 <HAL_SPI_Transmit+0x172>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d102      	bne.n	8004dee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dec:	e0a4      	b.n	8004f38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ce      	bne.n	8004d96 <HAL_SPI_Transmit+0x120>
 8004df8:	e07c      	b.n	8004ef4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_SPI_Transmit+0x192>
 8004e02:	8afb      	ldrh	r3, [r7, #22]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d170      	bne.n	8004eea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d912      	bls.n	8004e38 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	881a      	ldrh	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	1c9a      	adds	r2, r3, #2
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b02      	subs	r3, #2
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e36:	e058      	b.n	8004eea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	7812      	ldrb	r2, [r2, #0]
 8004e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e5e:	e044      	b.n	8004eea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d12b      	bne.n	8004ec6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d912      	bls.n	8004e9e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	881a      	ldrh	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	1c9a      	adds	r2, r3, #2
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b02      	subs	r3, #2
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e9c:	e025      	b.n	8004eea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ec4:	e011      	b.n	8004eea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec6:	f7fe f927 	bl	8003118 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d803      	bhi.n	8004ede <HAL_SPI_Transmit+0x268>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d102      	bne.n	8004ee4 <HAL_SPI_Transmit+0x26e>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ee8:	e026      	b.n	8004f38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1b5      	bne.n	8004e60 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fb65 	bl	80055c8 <SPI_EndRxTxTransaction>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f12:	2300      	movs	r3, #0
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e000      	b.n	8004f38 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004f36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b08a      	sub	sp, #40	; 0x28
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
 8004f5e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f60:	2301      	movs	r3, #1
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x26>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e1fb      	b.n	8005370 <HAL_SPI_TransmitReceive+0x41e>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f80:	f7fe f8ca 	bl	8003118 <HAL_GetTick>
 8004f84:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f8c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f98:	887b      	ldrh	r3, [r7, #2]
 8004f9a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f9c:	7efb      	ldrb	r3, [r7, #27]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_SPI_TransmitReceive+0x6e>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa8:	d106      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d102      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x66>
 8004fb2:	7efb      	ldrb	r3, [r7, #27]
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d003      	beq.n	8004fc0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fbe:	e1cd      	b.n	800535c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_SPI_TransmitReceive+0x80>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <HAL_SPI_TransmitReceive+0x80>
 8004fcc:	887b      	ldrh	r3, [r7, #2]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fd8:	e1c0      	b.n	800535c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d003      	beq.n	8004fee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2205      	movs	r2, #5
 8004fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	887a      	ldrh	r2, [r7, #2]
 8004ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	887a      	ldrh	r2, [r7, #2]
 8005006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	887a      	ldrh	r2, [r7, #2]
 800501a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005030:	d802      	bhi.n	8005038 <HAL_SPI_TransmitReceive+0xe6>
 8005032:	8a3b      	ldrh	r3, [r7, #16]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d908      	bls.n	800504a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005046:	605a      	str	r2, [r3, #4]
 8005048:	e007      	b.n	800505a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005058:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d007      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005080:	d97c      	bls.n	800517c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x13e>
 800508a:	8a7b      	ldrh	r3, [r7, #18]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d169      	bne.n	8005164 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	881a      	ldrh	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	1c9a      	adds	r2, r3, #2
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b4:	e056      	b.n	8005164 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d11b      	bne.n	80050fc <HAL_SPI_TransmitReceive+0x1aa>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_SPI_TransmitReceive+0x1aa>
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d113      	bne.n	80050fc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d11c      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x1f2>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d016      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	b292      	uxth	r2, r2
 8005122:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005140:	2301      	movs	r3, #1
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005144:	f7fd ffe8 	bl	8003118 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005150:	429a      	cmp	r2, r3
 8005152:	d807      	bhi.n	8005164 <HAL_SPI_TransmitReceive+0x212>
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515a:	d003      	beq.n	8005164 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005162:	e0fb      	b.n	800535c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1a3      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x164>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d19d      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x164>
 800517a:	e0df      	b.n	800533c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_SPI_TransmitReceive+0x23a>
 8005184:	8a7b      	ldrh	r3, [r7, #18]
 8005186:	2b01      	cmp	r3, #1
 8005188:	f040 80cb 	bne.w	8005322 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	d912      	bls.n	80051bc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	881a      	ldrh	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	1c9a      	adds	r2, r3, #2
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b02      	subs	r3, #2
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ba:	e0b2      	b.n	8005322 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	7812      	ldrb	r2, [r2, #0]
 80051c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e2:	e09e      	b.n	8005322 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d134      	bne.n	800525c <HAL_SPI_TransmitReceive+0x30a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02f      	beq.n	800525c <HAL_SPI_TransmitReceive+0x30a>
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d12c      	bne.n	800525c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d912      	bls.n	8005232 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	881a      	ldrh	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	1c9a      	adds	r2, r3, #2
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b02      	subs	r3, #2
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005230:	e012      	b.n	8005258 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	7812      	ldrb	r2, [r2, #0]
 800523e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b01      	cmp	r3, #1
 8005268:	d148      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x3aa>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d042      	beq.n	80052fc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	d923      	bls.n	80052ca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	b292      	uxth	r2, r2
 800528e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	1c9a      	adds	r2, r3, #2
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b02      	subs	r3, #2
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d81f      	bhi.n	80052f8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052c6:	605a      	str	r2, [r3, #4]
 80052c8:	e016      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f103 020c 	add.w	r2, r3, #12
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	7812      	ldrb	r2, [r2, #0]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052f8:	2301      	movs	r3, #1
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052fc:	f7fd ff0c 	bl	8003118 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005308:	429a      	cmp	r2, r3
 800530a:	d803      	bhi.n	8005314 <HAL_SPI_TransmitReceive+0x3c2>
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d102      	bne.n	800531a <HAL_SPI_TransmitReceive+0x3c8>
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005320:	e01c      	b.n	800535c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	f47f af5b 	bne.w	80051e4 <HAL_SPI_TransmitReceive+0x292>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	f47f af54 	bne.w	80051e4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f941 	bl	80055c8 <SPI_EndRxTxTransaction>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	661a      	str	r2, [r3, #96]	; 0x60
 8005358:	e000      	b.n	800535c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800535a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800536c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005370:	4618      	mov	r0, r3
 8005372:	3728      	adds	r7, #40	; 0x28
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005386:	b2db      	uxtb	r3, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a4:	f7fd feb8 	bl	8003118 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b4:	f7fd feb0 	bl	8003118 <HAL_GetTick>
 80053b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053ba:	4b39      	ldr	r3, [pc, #228]	; (80054a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	015b      	lsls	r3, r3, #5
 80053c0:	0d1b      	lsrs	r3, r3, #20
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ca:	e054      	b.n	8005476 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d050      	beq.n	8005476 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d4:	f7fd fea0 	bl	8003118 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d902      	bls.n	80053ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d13d      	bne.n	8005466 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005402:	d111      	bne.n	8005428 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540c:	d004      	beq.n	8005418 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005416:	d107      	bne.n	8005428 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005426:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005430:	d10f      	bne.n	8005452 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005450:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e017      	b.n	8005496 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	3b01      	subs	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	429a      	cmp	r2, r3
 8005492:	d19b      	bne.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000004 	.word	0x20000004

080054a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054b2:	f7fd fe31 	bl	8003118 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	4413      	add	r3, r2
 80054c0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054c2:	f7fd fe29 	bl	8003118 <HAL_GetTick>
 80054c6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054c8:	4b3e      	ldr	r3, [pc, #248]	; (80055c4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	00da      	lsls	r2, r3, #3
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	0d1b      	lsrs	r3, r3, #20
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80054e0:	e062      	b.n	80055a8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054e8:	d109      	bne.n	80054fe <SPI_WaitFifoStateUntilTimeout+0x5a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d106      	bne.n	80054fe <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80054fc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d050      	beq.n	80055a8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005506:	f7fd fe07 	bl	8003118 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	429a      	cmp	r2, r3
 8005514:	d902      	bls.n	800551c <SPI_WaitFifoStateUntilTimeout+0x78>
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d13d      	bne.n	8005598 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800552a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005534:	d111      	bne.n	800555a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553e:	d004      	beq.n	800554a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005548:	d107      	bne.n	800555a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005558:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005562:	d10f      	bne.n	8005584 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005582:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e010      	b.n	80055ba <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4013      	ands	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d194      	bne.n	80054e2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3720      	adds	r7, #32
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000004 	.word	0x20000004

080055c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2200      	movs	r2, #0
 80055dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff ff5f 	bl	80054a4 <SPI_WaitFifoStateUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f0:	f043 0220 	orr.w	r2, r3, #32
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e027      	b.n	800564c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff fec4 	bl	8005394 <SPI_WaitFlagStateUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e014      	b.n	800564c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2200      	movs	r2, #0
 800562a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7ff ff38 	bl	80054a4 <SPI_WaitFifoStateUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563e:	f043 0220 	orr.w	r2, r3, #32
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e000      	b.n	800564c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e040      	b.n	80056e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fd fc58 	bl	8002f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2224      	movs	r2, #36	; 0x24
 8005680:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f8c0 	bl	8005818 <UART_SetConfig>
 8005698:	4603      	mov	r3, r0
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e022      	b.n	80056e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fb10 	bl	8005cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fb97 	bl	8005e14 <UART_CheckIdleState>
 80056e6:	4603      	mov	r3, r0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	4613      	mov	r3, r2
 80056fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005704:	2b20      	cmp	r3, #32
 8005706:	f040 8082 	bne.w	800580e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_Transmit+0x26>
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e07a      	b.n	8005810 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_UART_Transmit+0x38>
 8005724:	2302      	movs	r3, #2
 8005726:	e073      	b.n	8005810 <HAL_UART_Transmit+0x120>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2221      	movs	r2, #33	; 0x21
 800573c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800573e:	f7fd fceb 	bl	8003118 <HAL_GetTick>
 8005742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	88fa      	ldrh	r2, [r7, #6]
 8005748:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575c:	d108      	bne.n	8005770 <HAL_UART_Transmit+0x80>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d104      	bne.n	8005770 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	e003      	b.n	8005778 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005774:	2300      	movs	r3, #0
 8005776:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005780:	e02d      	b.n	80057de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2200      	movs	r2, #0
 800578a:	2180      	movs	r1, #128	; 0x80
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fb8a 	bl	8005ea6 <UART_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e039      	b.n	8005810 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ae:	b292      	uxth	r2, r2
 80057b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	3302      	adds	r3, #2
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	e008      	b.n	80057cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	781a      	ldrb	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	b292      	uxth	r2, r2
 80057c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	3301      	adds	r3, #1
 80057ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1cb      	bne.n	8005782 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2200      	movs	r2, #0
 80057f2:	2140      	movs	r1, #64	; 0x40
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fb56 	bl	8005ea6 <UART_WaitOnFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e005      	b.n	8005810 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	e000      	b.n	8005810 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
  }
}
 8005810:	4618      	mov	r0, r3
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005818:	b5b0      	push	{r4, r5, r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	4313      	orrs	r3, r2
 800583a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4ba4      	ldr	r3, [pc, #656]	; (8005ad4 <UART_SetConfig+0x2bc>)
 8005844:	4013      	ands	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	69f9      	ldr	r1, [r7, #28]
 800584c:	430b      	orrs	r3, r1
 800584e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a99      	ldr	r2, [pc, #612]	; (8005ad8 <UART_SetConfig+0x2c0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	4313      	orrs	r3, r2
 800587e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a90      	ldr	r2, [pc, #576]	; (8005adc <UART_SetConfig+0x2c4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d121      	bne.n	80058e2 <UART_SetConfig+0xca>
 800589e:	4b90      	ldr	r3, [pc, #576]	; (8005ae0 <UART_SetConfig+0x2c8>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d817      	bhi.n	80058dc <UART_SetConfig+0xc4>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x9c>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058c5 	.word	0x080058c5
 80058b8:	080058d1 	.word	0x080058d1
 80058bc:	080058cb 	.word	0x080058cb
 80058c0:	080058d7 	.word	0x080058d7
 80058c4:	2301      	movs	r3, #1
 80058c6:	76fb      	strb	r3, [r7, #27]
 80058c8:	e0bc      	b.n	8005a44 <UART_SetConfig+0x22c>
 80058ca:	2302      	movs	r3, #2
 80058cc:	76fb      	strb	r3, [r7, #27]
 80058ce:	e0b9      	b.n	8005a44 <UART_SetConfig+0x22c>
 80058d0:	2304      	movs	r3, #4
 80058d2:	76fb      	strb	r3, [r7, #27]
 80058d4:	e0b6      	b.n	8005a44 <UART_SetConfig+0x22c>
 80058d6:	2308      	movs	r3, #8
 80058d8:	76fb      	strb	r3, [r7, #27]
 80058da:	e0b3      	b.n	8005a44 <UART_SetConfig+0x22c>
 80058dc:	2310      	movs	r3, #16
 80058de:	76fb      	strb	r3, [r7, #27]
 80058e0:	e0b0      	b.n	8005a44 <UART_SetConfig+0x22c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a7f      	ldr	r2, [pc, #508]	; (8005ae4 <UART_SetConfig+0x2cc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d132      	bne.n	8005952 <UART_SetConfig+0x13a>
 80058ec:	4b7c      	ldr	r3, [pc, #496]	; (8005ae0 <UART_SetConfig+0x2c8>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f2:	f003 030c 	and.w	r3, r3, #12
 80058f6:	2b0c      	cmp	r3, #12
 80058f8:	d828      	bhi.n	800594c <UART_SetConfig+0x134>
 80058fa:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0xe8>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005935 	.word	0x08005935
 8005904:	0800594d 	.word	0x0800594d
 8005908:	0800594d 	.word	0x0800594d
 800590c:	0800594d 	.word	0x0800594d
 8005910:	08005941 	.word	0x08005941
 8005914:	0800594d 	.word	0x0800594d
 8005918:	0800594d 	.word	0x0800594d
 800591c:	0800594d 	.word	0x0800594d
 8005920:	0800593b 	.word	0x0800593b
 8005924:	0800594d 	.word	0x0800594d
 8005928:	0800594d 	.word	0x0800594d
 800592c:	0800594d 	.word	0x0800594d
 8005930:	08005947 	.word	0x08005947
 8005934:	2300      	movs	r3, #0
 8005936:	76fb      	strb	r3, [r7, #27]
 8005938:	e084      	b.n	8005a44 <UART_SetConfig+0x22c>
 800593a:	2302      	movs	r3, #2
 800593c:	76fb      	strb	r3, [r7, #27]
 800593e:	e081      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005940:	2304      	movs	r3, #4
 8005942:	76fb      	strb	r3, [r7, #27]
 8005944:	e07e      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005946:	2308      	movs	r3, #8
 8005948:	76fb      	strb	r3, [r7, #27]
 800594a:	e07b      	b.n	8005a44 <UART_SetConfig+0x22c>
 800594c:	2310      	movs	r3, #16
 800594e:	76fb      	strb	r3, [r7, #27]
 8005950:	e078      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a64      	ldr	r2, [pc, #400]	; (8005ae8 <UART_SetConfig+0x2d0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d120      	bne.n	800599e <UART_SetConfig+0x186>
 800595c:	4b60      	ldr	r3, [pc, #384]	; (8005ae0 <UART_SetConfig+0x2c8>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005966:	2b30      	cmp	r3, #48	; 0x30
 8005968:	d013      	beq.n	8005992 <UART_SetConfig+0x17a>
 800596a:	2b30      	cmp	r3, #48	; 0x30
 800596c:	d814      	bhi.n	8005998 <UART_SetConfig+0x180>
 800596e:	2b20      	cmp	r3, #32
 8005970:	d009      	beq.n	8005986 <UART_SetConfig+0x16e>
 8005972:	2b20      	cmp	r3, #32
 8005974:	d810      	bhi.n	8005998 <UART_SetConfig+0x180>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <UART_SetConfig+0x168>
 800597a:	2b10      	cmp	r3, #16
 800597c:	d006      	beq.n	800598c <UART_SetConfig+0x174>
 800597e:	e00b      	b.n	8005998 <UART_SetConfig+0x180>
 8005980:	2300      	movs	r3, #0
 8005982:	76fb      	strb	r3, [r7, #27]
 8005984:	e05e      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005986:	2302      	movs	r3, #2
 8005988:	76fb      	strb	r3, [r7, #27]
 800598a:	e05b      	b.n	8005a44 <UART_SetConfig+0x22c>
 800598c:	2304      	movs	r3, #4
 800598e:	76fb      	strb	r3, [r7, #27]
 8005990:	e058      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005992:	2308      	movs	r3, #8
 8005994:	76fb      	strb	r3, [r7, #27]
 8005996:	e055      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005998:	2310      	movs	r3, #16
 800599a:	76fb      	strb	r3, [r7, #27]
 800599c:	e052      	b.n	8005a44 <UART_SetConfig+0x22c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a52      	ldr	r2, [pc, #328]	; (8005aec <UART_SetConfig+0x2d4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d120      	bne.n	80059ea <UART_SetConfig+0x1d2>
 80059a8:	4b4d      	ldr	r3, [pc, #308]	; (8005ae0 <UART_SetConfig+0x2c8>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059b2:	2bc0      	cmp	r3, #192	; 0xc0
 80059b4:	d013      	beq.n	80059de <UART_SetConfig+0x1c6>
 80059b6:	2bc0      	cmp	r3, #192	; 0xc0
 80059b8:	d814      	bhi.n	80059e4 <UART_SetConfig+0x1cc>
 80059ba:	2b80      	cmp	r3, #128	; 0x80
 80059bc:	d009      	beq.n	80059d2 <UART_SetConfig+0x1ba>
 80059be:	2b80      	cmp	r3, #128	; 0x80
 80059c0:	d810      	bhi.n	80059e4 <UART_SetConfig+0x1cc>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <UART_SetConfig+0x1b4>
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d006      	beq.n	80059d8 <UART_SetConfig+0x1c0>
 80059ca:	e00b      	b.n	80059e4 <UART_SetConfig+0x1cc>
 80059cc:	2300      	movs	r3, #0
 80059ce:	76fb      	strb	r3, [r7, #27]
 80059d0:	e038      	b.n	8005a44 <UART_SetConfig+0x22c>
 80059d2:	2302      	movs	r3, #2
 80059d4:	76fb      	strb	r3, [r7, #27]
 80059d6:	e035      	b.n	8005a44 <UART_SetConfig+0x22c>
 80059d8:	2304      	movs	r3, #4
 80059da:	76fb      	strb	r3, [r7, #27]
 80059dc:	e032      	b.n	8005a44 <UART_SetConfig+0x22c>
 80059de:	2308      	movs	r3, #8
 80059e0:	76fb      	strb	r3, [r7, #27]
 80059e2:	e02f      	b.n	8005a44 <UART_SetConfig+0x22c>
 80059e4:	2310      	movs	r3, #16
 80059e6:	76fb      	strb	r3, [r7, #27]
 80059e8:	e02c      	b.n	8005a44 <UART_SetConfig+0x22c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a3a      	ldr	r2, [pc, #232]	; (8005ad8 <UART_SetConfig+0x2c0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d125      	bne.n	8005a40 <UART_SetConfig+0x228>
 80059f4:	4b3a      	ldr	r3, [pc, #232]	; (8005ae0 <UART_SetConfig+0x2c8>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a02:	d017      	beq.n	8005a34 <UART_SetConfig+0x21c>
 8005a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a08:	d817      	bhi.n	8005a3a <UART_SetConfig+0x222>
 8005a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0e:	d00b      	beq.n	8005a28 <UART_SetConfig+0x210>
 8005a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a14:	d811      	bhi.n	8005a3a <UART_SetConfig+0x222>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <UART_SetConfig+0x20a>
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1e:	d006      	beq.n	8005a2e <UART_SetConfig+0x216>
 8005a20:	e00b      	b.n	8005a3a <UART_SetConfig+0x222>
 8005a22:	2300      	movs	r3, #0
 8005a24:	76fb      	strb	r3, [r7, #27]
 8005a26:	e00d      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	76fb      	strb	r3, [r7, #27]
 8005a2c:	e00a      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005a2e:	2304      	movs	r3, #4
 8005a30:	76fb      	strb	r3, [r7, #27]
 8005a32:	e007      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005a34:	2308      	movs	r3, #8
 8005a36:	76fb      	strb	r3, [r7, #27]
 8005a38:	e004      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005a3a:	2310      	movs	r3, #16
 8005a3c:	76fb      	strb	r3, [r7, #27]
 8005a3e:	e001      	b.n	8005a44 <UART_SetConfig+0x22c>
 8005a40:	2310      	movs	r3, #16
 8005a42:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <UART_SetConfig+0x2c0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	f040 8084 	bne.w	8005b58 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a50:	7efb      	ldrb	r3, [r7, #27]
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d823      	bhi.n	8005a9e <UART_SetConfig+0x286>
 8005a56:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <UART_SetConfig+0x244>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a81 	.word	0x08005a81
 8005a60:	08005a9f 	.word	0x08005a9f
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a9f 	.word	0x08005a9f
 8005a6c:	08005a8f 	.word	0x08005a8f
 8005a70:	08005a9f 	.word	0x08005a9f
 8005a74:	08005a9f 	.word	0x08005a9f
 8005a78:	08005a9f 	.word	0x08005a9f
 8005a7c:	08005a97 	.word	0x08005a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a80:	f7fe fc5c 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005a84:	6178      	str	r0, [r7, #20]
        break;
 8005a86:	e00f      	b.n	8005aa8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a88:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <UART_SetConfig+0x2d8>)
 8005a8a:	617b      	str	r3, [r7, #20]
        break;
 8005a8c:	e00c      	b.n	8005aa8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8e:	f7fe fbbd 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005a92:	6178      	str	r0, [r7, #20]
        break;
 8005a94:	e008      	b.n	8005aa8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9a:	617b      	str	r3, [r7, #20]
        break;
 8005a9c:	e004      	b.n	8005aa8 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	76bb      	strb	r3, [r7, #26]
        break;
 8005aa6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8102 	beq.w	8005cb4 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d305      	bcc.n	8005acc <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d913      	bls.n	8005af4 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	76bb      	strb	r3, [r7, #26]
 8005ad0:	e0f0      	b.n	8005cb4 <UART_SetConfig+0x49c>
 8005ad2:	bf00      	nop
 8005ad4:	efff69f3 	.word	0xefff69f3
 8005ad8:	40008000 	.word	0x40008000
 8005adc:	40013800 	.word	0x40013800
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	40004400 	.word	0x40004400
 8005ae8:	40004800 	.word	0x40004800
 8005aec:	40004c00 	.word	0x40004c00
 8005af0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f04f 0100 	mov.w	r1, #0
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	020b      	lsls	r3, r1, #8
 8005b06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b0a:	0202      	lsls	r2, r0, #8
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	6849      	ldr	r1, [r1, #4]
 8005b10:	0849      	lsrs	r1, r1, #1
 8005b12:	4608      	mov	r0, r1
 8005b14:	f04f 0100 	mov.w	r1, #0
 8005b18:	1814      	adds	r4, r2, r0
 8005b1a:	eb43 0501 	adc.w	r5, r3, r1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	461a      	mov	r2, r3
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	f7fb f864 	bl	8000bf8 <__aeabi_uldivmod>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4613      	mov	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3e:	d308      	bcc.n	8005b52 <UART_SetConfig+0x33a>
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b46:	d204      	bcs.n	8005b52 <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	60da      	str	r2, [r3, #12]
 8005b50:	e0b0      	b.n	8005cb4 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	76bb      	strb	r3, [r7, #26]
 8005b56:	e0ad      	b.n	8005cb4 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b60:	d15c      	bne.n	8005c1c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005b62:	7efb      	ldrb	r3, [r7, #27]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d828      	bhi.n	8005bba <UART_SetConfig+0x3a2>
 8005b68:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <UART_SetConfig+0x358>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	08005bbb 	.word	0x08005bbb
 8005b80:	08005bab 	.word	0x08005bab
 8005b84:	08005bbb 	.word	0x08005bbb
 8005b88:	08005bbb 	.word	0x08005bbb
 8005b8c:	08005bbb 	.word	0x08005bbb
 8005b90:	08005bb3 	.word	0x08005bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7fe fbd2 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005b98:	6178      	str	r0, [r7, #20]
        break;
 8005b9a:	e013      	b.n	8005bc4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fe fbe4 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 8005ba0:	6178      	str	r0, [r7, #20]
        break;
 8005ba2:	e00f      	b.n	8005bc4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba4:	4b49      	ldr	r3, [pc, #292]	; (8005ccc <UART_SetConfig+0x4b4>)
 8005ba6:	617b      	str	r3, [r7, #20]
        break;
 8005ba8:	e00c      	b.n	8005bc4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005baa:	f7fe fb2f 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005bae:	6178      	str	r0, [r7, #20]
        break;
 8005bb0:	e008      	b.n	8005bc4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb6:	617b      	str	r3, [r7, #20]
        break;
 8005bb8:	e004      	b.n	8005bc4 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	76bb      	strb	r3, [r7, #26]
        break;
 8005bc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d074      	beq.n	8005cb4 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	005a      	lsls	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b0f      	cmp	r3, #15
 8005be6:	d916      	bls.n	8005c16 <UART_SetConfig+0x3fe>
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bee:	d212      	bcs.n	8005c16 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f023 030f 	bic.w	r3, r3, #15
 8005bf8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	89fb      	ldrh	r3, [r7, #14]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	89fa      	ldrh	r2, [r7, #14]
 8005c12:	60da      	str	r2, [r3, #12]
 8005c14:	e04e      	b.n	8005cb4 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	76bb      	strb	r3, [r7, #26]
 8005c1a:	e04b      	b.n	8005cb4 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c1c:	7efb      	ldrb	r3, [r7, #27]
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d827      	bhi.n	8005c72 <UART_SetConfig+0x45a>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x410>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c73 	.word	0x08005c73
 8005c38:	08005c63 	.word	0x08005c63
 8005c3c:	08005c73 	.word	0x08005c73
 8005c40:	08005c73 	.word	0x08005c73
 8005c44:	08005c73 	.word	0x08005c73
 8005c48:	08005c6b 	.word	0x08005c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c4c:	f7fe fb76 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005c50:	6178      	str	r0, [r7, #20]
        break;
 8005c52:	e013      	b.n	8005c7c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c54:	f7fe fb88 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 8005c58:	6178      	str	r0, [r7, #20]
        break;
 8005c5a:	e00f      	b.n	8005c7c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ccc <UART_SetConfig+0x4b4>)
 8005c5e:	617b      	str	r3, [r7, #20]
        break;
 8005c60:	e00c      	b.n	8005c7c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c62:	f7fe fad3 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005c66:	6178      	str	r0, [r7, #20]
        break;
 8005c68:	e008      	b.n	8005c7c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6e:	617b      	str	r3, [r7, #20]
        break;
 8005c70:	e004      	b.n	8005c7c <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	76bb      	strb	r3, [r7, #26]
        break;
 8005c7a:	bf00      	nop
    }

    if (pclk != 0U)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	085a      	lsrs	r2, r3, #1
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	441a      	add	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b0f      	cmp	r3, #15
 8005c9c:	d908      	bls.n	8005cb0 <UART_SetConfig+0x498>
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca4:	d204      	bcs.n	8005cb0 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	e001      	b.n	8005cb4 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005cc0:	7ebb      	ldrb	r3, [r7, #26]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	00f42400 	.word	0x00f42400

08005cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01a      	beq.n	8005de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dce:	d10a      	bne.n	8005de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e24:	f7fd f978 	bl	8003118 <HAL_GetTick>
 8005e28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d10e      	bne.n	8005e56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f82d 	bl	8005ea6 <UART_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e023      	b.n	8005e9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d10e      	bne.n	8005e82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f817 	bl	8005ea6 <UART_WaitOnFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e00d      	b.n	8005e9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb6:	e05e      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d05a      	beq.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec0:	f7fd f92a 	bl	8003118 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d302      	bcc.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11b      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ee4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e043      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d02c      	beq.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2a:	d124      	bne.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f34:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f44:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e00f      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d091      	beq.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005fa4:	4904      	ldr	r1, [pc, #16]	; (8005fb8 <MX_FATFS_Init+0x18>)
 8005fa6:	4805      	ldr	r0, [pc, #20]	; (8005fbc <MX_FATFS_Init+0x1c>)
 8005fa8:	f003 f832 	bl	8009010 <FATFS_LinkDriver>
 8005fac:	4603      	mov	r3, r0
 8005fae:	461a      	mov	r2, r3
 8005fb0:	4b03      	ldr	r3, [pc, #12]	; (8005fc0 <MX_FATFS_Init+0x20>)
 8005fb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005fb4:	bf00      	nop
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20002c30 	.word	0x20002c30
 8005fbc:	20000010 	.word	0x20000010
 8005fc0:	20002c34 	.word	0x20002c34

08005fc4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005fc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//    Stat = STA_NOINIT;
	//    return Stat;
	    return SD_disk_initialize(pdrv);
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fb fcf1 	bl	80019c8 <SD_disk_initialize>
 8005fe6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	//    Stat = STA_NOINIT;
	//    return Stat;
		 return SD_disk_status(pdrv);
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fb fdcd 	bl	8001b9c <SD_disk_status>
 8006002:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4603      	mov	r3, r0
 800601a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	//    return RES_OK;
		return SD_disk_read(pdrv, buff, sector, count);
 800601c:	7bf8      	ldrb	r0, [r7, #15]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	f7fb fdd0 	bl	8001bc8 <SD_disk_read>
 8006028:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	4603      	mov	r3, r0
 8006040:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	 //   return RES_OK;
		 return SD_disk_write(pdrv, buff, sector, count);
 8006042:	7bf8      	ldrb	r0, [r7, #15]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	f7fb fe27 	bl	8001c9c <SD_disk_write>
 800604e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	603a      	str	r2, [r7, #0]
 8006062:	71fb      	strb	r3, [r7, #7]
 8006064:	460b      	mov	r3, r1
 8006066:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	//    DRESULT res = RES_ERROR;
	//    return res;
		 return SD_disk_ioctl(pdrv, cmd, buff);
 8006068:	79b9      	ldrb	r1, [r7, #6]
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7fb fe98 	bl	8001da4 <SD_disk_ioctl>
 8006074:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <disk_status+0x30>)
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	79fa      	ldrb	r2, [r7, #7]
 8006098:	4905      	ldr	r1, [pc, #20]	; (80060b0 <disk_status+0x30>)
 800609a:	440a      	add	r2, r1
 800609c:	7a12      	ldrb	r2, [r2, #8]
 800609e:	4610      	mov	r0, r2
 80060a0:	4798      	blx	r3
 80060a2:	4603      	mov	r3, r0
 80060a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	2000044c 	.word	0x2000044c

080060b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	4a0d      	ldr	r2, [pc, #52]	; (80060fc <disk_initialize+0x48>)
 80060c6:	5cd3      	ldrb	r3, [r2, r3]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d111      	bne.n	80060f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	4a0b      	ldr	r2, [pc, #44]	; (80060fc <disk_initialize+0x48>)
 80060d0:	2101      	movs	r1, #1
 80060d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	4a09      	ldr	r2, [pc, #36]	; (80060fc <disk_initialize+0x48>)
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	79fa      	ldrb	r2, [r7, #7]
 80060e2:	4906      	ldr	r1, [pc, #24]	; (80060fc <disk_initialize+0x48>)
 80060e4:	440a      	add	r2, r1
 80060e6:	7a12      	ldrb	r2, [r2, #8]
 80060e8:	4610      	mov	r0, r2
 80060ea:	4798      	blx	r3
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	2000044c 	.word	0x2000044c

08006100 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006100:	b590      	push	{r4, r7, lr}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	4a0a      	ldr	r2, [pc, #40]	; (800613c <disk_read+0x3c>)
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	689c      	ldr	r4, [r3, #8]
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	4a07      	ldr	r2, [pc, #28]	; (800613c <disk_read+0x3c>)
 8006120:	4413      	add	r3, r2
 8006122:	7a18      	ldrb	r0, [r3, #8]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	47a0      	blx	r4
 800612c:	4603      	mov	r3, r0
 800612e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006130:	7dfb      	ldrb	r3, [r7, #23]
}
 8006132:	4618      	mov	r0, r3
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	bd90      	pop	{r4, r7, pc}
 800613a:	bf00      	nop
 800613c:	2000044c 	.word	0x2000044c

08006140 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006140:	b590      	push	{r4, r7, lr}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4603      	mov	r3, r0
 800614e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	4a0a      	ldr	r2, [pc, #40]	; (800617c <disk_write+0x3c>)
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	68dc      	ldr	r4, [r3, #12]
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	4a07      	ldr	r2, [pc, #28]	; (800617c <disk_write+0x3c>)
 8006160:	4413      	add	r3, r2
 8006162:	7a18      	ldrb	r0, [r3, #8]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	47a0      	blx	r4
 800616c:	4603      	mov	r3, r0
 800616e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006170:	7dfb      	ldrb	r3, [r7, #23]
}
 8006172:	4618      	mov	r0, r3
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	bd90      	pop	{r4, r7, pc}
 800617a:	bf00      	nop
 800617c:	2000044c 	.word	0x2000044c

08006180 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	603a      	str	r2, [r7, #0]
 800618a:	71fb      	strb	r3, [r7, #7]
 800618c:	460b      	mov	r3, r1
 800618e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <disk_ioctl+0x38>)
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	79fa      	ldrb	r2, [r7, #7]
 800619e:	4906      	ldr	r1, [pc, #24]	; (80061b8 <disk_ioctl+0x38>)
 80061a0:	440a      	add	r2, r1
 80061a2:	7a10      	ldrb	r0, [r2, #8]
 80061a4:	79b9      	ldrb	r1, [r7, #6]
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	4798      	blx	r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	2000044c 	.word	0x2000044c

080061bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3301      	adds	r3, #1
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80061cc:	89fb      	ldrh	r3, [r7, #14]
 80061ce:	021b      	lsls	r3, r3, #8
 80061d0:	b21a      	sxth	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	b21b      	sxth	r3, r3
 80061d8:	4313      	orrs	r3, r2
 80061da:	b21b      	sxth	r3, r3
 80061dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80061de:	89fb      	ldrh	r3, [r7, #14]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3303      	adds	r3, #3
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	3202      	adds	r2, #2
 8006204:	7812      	ldrb	r2, [r2, #0]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	3201      	adds	r2, #1
 8006212:	7812      	ldrb	r2, [r2, #0]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
	return rv;
 8006224:	68fb      	ldr	r3, [r7, #12]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	887a      	ldrh	r2, [r7, #2]
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	887b      	ldrh	r3, [r7, #2]
 800624c:	0a1b      	lsrs	r3, r3, #8
 800624e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	607a      	str	r2, [r7, #4]
 8006256:	887a      	ldrh	r2, [r7, #2]
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	701a      	strb	r2, [r3, #0]
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	0a1b      	lsrs	r3, r3, #8
 80062a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00d      	beq.n	80062f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	1c53      	adds	r3, r2, #1
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1c59      	adds	r1, r3, #1
 80062e4:	6179      	str	r1, [r7, #20]
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	607b      	str	r3, [r7, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f1      	bne.n	80062da <mem_cpy+0x1a>
	}
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006302:	b480      	push	{r7}
 8006304:	b087      	sub	sp, #28
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	617a      	str	r2, [r7, #20]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3b01      	subs	r3, #1
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f3      	bne.n	8006312 <mem_set+0x10>
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006338:	b480      	push	{r7}
 800633a:	b089      	sub	sp, #36	; 0x24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	61fa      	str	r2, [r7, #28]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	4619      	mov	r1, r3
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	61ba      	str	r2, [r7, #24]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	1acb      	subs	r3, r1, r3
 8006364:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3b01      	subs	r3, #1
 800636a:	607b      	str	r3, [r7, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <mem_cmp+0x40>
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0eb      	beq.n	8006350 <mem_cmp+0x18>

	return r;
 8006378:	697b      	ldr	r3, [r7, #20]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3724      	adds	r7, #36	; 0x24
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006390:	e002      	b.n	8006398 <chk_chr+0x12>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3301      	adds	r3, #1
 8006396:	607b      	str	r3, [r7, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <chk_chr+0x26>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d1f2      	bne.n	8006392 <chk_chr+0xc>
	return *str;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	781b      	ldrb	r3, [r3, #0]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063c6:	2300      	movs	r3, #0
 80063c8:	60bb      	str	r3, [r7, #8]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	e029      	b.n	8006424 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80063d0:	4a27      	ldr	r2, [pc, #156]	; (8006470 <chk_lock+0xb4>)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	4413      	add	r3, r2
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01d      	beq.n	800641a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80063de:	4a24      	ldr	r2, [pc, #144]	; (8006470 <chk_lock+0xb4>)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	4413      	add	r3, r2
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d116      	bne.n	800641e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80063f0:	4a1f      	ldr	r2, [pc, #124]	; (8006470 <chk_lock+0xb4>)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	4413      	add	r3, r2
 80063f8:	3304      	adds	r3, #4
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006400:	429a      	cmp	r2, r3
 8006402:	d10c      	bne.n	800641e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006404:	4a1a      	ldr	r2, [pc, #104]	; (8006470 <chk_lock+0xb4>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	4413      	add	r3, r2
 800640c:	3308      	adds	r3, #8
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006414:	429a      	cmp	r2, r3
 8006416:	d102      	bne.n	800641e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006418:	e007      	b.n	800642a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800641a:	2301      	movs	r3, #1
 800641c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3301      	adds	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d9d2      	bls.n	80063d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d109      	bne.n	8006444 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <chk_lock+0x80>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d101      	bne.n	8006440 <chk_lock+0x84>
 800643c:	2300      	movs	r3, #0
 800643e:	e010      	b.n	8006462 <chk_lock+0xa6>
 8006440:	2312      	movs	r3, #18
 8006442:	e00e      	b.n	8006462 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d108      	bne.n	800645c <chk_lock+0xa0>
 800644a:	4a09      	ldr	r2, [pc, #36]	; (8006470 <chk_lock+0xb4>)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	4413      	add	r3, r2
 8006452:	330c      	adds	r3, #12
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645a:	d101      	bne.n	8006460 <chk_lock+0xa4>
 800645c:	2310      	movs	r3, #16
 800645e:	e000      	b.n	8006462 <chk_lock+0xa6>
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	2000022c 	.word	0x2000022c

08006474 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	e002      	b.n	8006486 <enq_lock+0x12>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3301      	adds	r3, #1
 8006484:	607b      	str	r3, [r7, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d806      	bhi.n	800649a <enq_lock+0x26>
 800648c:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <enq_lock+0x40>)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	4413      	add	r3, r2
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f2      	bne.n	8006480 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b02      	cmp	r3, #2
 800649e:	bf14      	ite	ne
 80064a0:	2301      	movne	r3, #1
 80064a2:	2300      	moveq	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	2000022c 	.word	0x2000022c

080064b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	e01f      	b.n	8006508 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80064c8:	4a41      	ldr	r2, [pc, #260]	; (80065d0 <inc_lock+0x118>)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	4413      	add	r3, r2
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d113      	bne.n	8006502 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80064da:	4a3d      	ldr	r2, [pc, #244]	; (80065d0 <inc_lock+0x118>)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	4413      	add	r3, r2
 80064e2:	3304      	adds	r3, #4
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d109      	bne.n	8006502 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80064ee:	4a38      	ldr	r2, [pc, #224]	; (80065d0 <inc_lock+0x118>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	4413      	add	r3, r2
 80064f6:	3308      	adds	r3, #8
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80064fe:	429a      	cmp	r2, r3
 8006500:	d006      	beq.n	8006510 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d9dc      	bls.n	80064c8 <inc_lock+0x10>
 800650e:	e000      	b.n	8006512 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006510:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d132      	bne.n	800657e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	e002      	b.n	8006524 <inc_lock+0x6c>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3301      	adds	r3, #1
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d806      	bhi.n	8006538 <inc_lock+0x80>
 800652a:	4a29      	ldr	r2, [pc, #164]	; (80065d0 <inc_lock+0x118>)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	4413      	add	r3, r2
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1f2      	bne.n	800651e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d101      	bne.n	8006542 <inc_lock+0x8a>
 800653e:	2300      	movs	r3, #0
 8006540:	e040      	b.n	80065c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4922      	ldr	r1, [pc, #136]	; (80065d0 <inc_lock+0x118>)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	440b      	add	r3, r1
 800654e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	491e      	ldr	r1, [pc, #120]	; (80065d0 <inc_lock+0x118>)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	440b      	add	r3, r1
 800655c:	3304      	adds	r3, #4
 800655e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	695a      	ldr	r2, [r3, #20]
 8006564:	491a      	ldr	r1, [pc, #104]	; (80065d0 <inc_lock+0x118>)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	440b      	add	r3, r1
 800656c:	3308      	adds	r3, #8
 800656e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006570:	4a17      	ldr	r2, [pc, #92]	; (80065d0 <inc_lock+0x118>)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	4413      	add	r3, r2
 8006578:	330c      	adds	r3, #12
 800657a:	2200      	movs	r2, #0
 800657c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d009      	beq.n	8006598 <inc_lock+0xe0>
 8006584:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <inc_lock+0x118>)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	4413      	add	r3, r2
 800658c:	330c      	adds	r3, #12
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <inc_lock+0xe0>
 8006594:	2300      	movs	r3, #0
 8006596:	e015      	b.n	80065c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d108      	bne.n	80065b0 <inc_lock+0xf8>
 800659e:	4a0c      	ldr	r2, [pc, #48]	; (80065d0 <inc_lock+0x118>)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	4413      	add	r3, r2
 80065a6:	330c      	adds	r3, #12
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	3301      	adds	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	e001      	b.n	80065b4 <inc_lock+0xfc>
 80065b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065b4:	4906      	ldr	r1, [pc, #24]	; (80065d0 <inc_lock+0x118>)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	440b      	add	r3, r1
 80065bc:	330c      	adds	r3, #12
 80065be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	2000022c 	.word	0x2000022c

080065d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3b01      	subs	r3, #1
 80065e0:	607b      	str	r3, [r7, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d825      	bhi.n	8006634 <dec_lock+0x60>
		n = Files[i].ctr;
 80065e8:	4a17      	ldr	r2, [pc, #92]	; (8006648 <dec_lock+0x74>)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	4413      	add	r3, r2
 80065f0:	330c      	adds	r3, #12
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80065f6:	89fb      	ldrh	r3, [r7, #14]
 80065f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fc:	d101      	bne.n	8006602 <dec_lock+0x2e>
 80065fe:	2300      	movs	r3, #0
 8006600:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006602:	89fb      	ldrh	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <dec_lock+0x3a>
 8006608:	89fb      	ldrh	r3, [r7, #14]
 800660a:	3b01      	subs	r3, #1
 800660c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800660e:	4a0e      	ldr	r2, [pc, #56]	; (8006648 <dec_lock+0x74>)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	4413      	add	r3, r2
 8006616:	330c      	adds	r3, #12
 8006618:	89fa      	ldrh	r2, [r7, #14]
 800661a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800661c:	89fb      	ldrh	r3, [r7, #14]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d105      	bne.n	800662e <dec_lock+0x5a>
 8006622:	4a09      	ldr	r2, [pc, #36]	; (8006648 <dec_lock+0x74>)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	4413      	add	r3, r2
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	737b      	strb	r3, [r7, #13]
 8006632:	e001      	b.n	8006638 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006634:	2302      	movs	r3, #2
 8006636:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006638:	7b7b      	ldrb	r3, [r7, #13]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	2000022c 	.word	0x2000022c

0800664c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e010      	b.n	800667c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800665a:	4a0d      	ldr	r2, [pc, #52]	; (8006690 <clear_lock+0x44>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	4413      	add	r3, r2
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d105      	bne.n	8006676 <clear_lock+0x2a>
 800666a:	4a09      	ldr	r2, [pc, #36]	; (8006690 <clear_lock+0x44>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	4413      	add	r3, r2
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d9eb      	bls.n	800665a <clear_lock+0xe>
	}
}
 8006682:	bf00      	nop
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	2000022c 	.word	0x2000022c

08006694 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	78db      	ldrb	r3, [r3, #3]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d034      	beq.n	8006712 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	7858      	ldrb	r0, [r3, #1]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066b8:	2301      	movs	r3, #1
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	f7ff fd40 	bl	8006140 <disk_write>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	73fb      	strb	r3, [r7, #15]
 80066ca:	e022      	b.n	8006712 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	1ad2      	subs	r2, r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d217      	bcs.n	8006712 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	789b      	ldrb	r3, [r3, #2]
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	e010      	b.n	800670c <sync_window+0x78>
					wsect += fs->fsize;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7858      	ldrb	r0, [r3, #1]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066fe:	2301      	movs	r3, #1
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	f7ff fd1d 	bl	8006140 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	3b01      	subs	r3, #1
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d8eb      	bhi.n	80066ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d01b      	beq.n	800676c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff ffad 	bl	8006694 <sync_window>
 800673a:	4603      	mov	r3, r0
 800673c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d113      	bne.n	800676c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7858      	ldrb	r0, [r3, #1]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800674e:	2301      	movs	r3, #1
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	f7ff fcd5 	bl	8006100 <disk_read>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800675c:	f04f 33ff 	mov.w	r3, #4294967295
 8006760:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006762:	2301      	movs	r3, #1
 8006764:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ff87 	bl	8006694 <sync_window>
 8006786:	4603      	mov	r3, r0
 8006788:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d159      	bne.n	8006844 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b03      	cmp	r3, #3
 8006796:	d149      	bne.n	800682c <sync_fs+0xb4>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	791b      	ldrb	r3, [r3, #4]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d145      	bne.n	800682c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	899b      	ldrh	r3, [r3, #12]
 80067aa:	461a      	mov	r2, r3
 80067ac:	2100      	movs	r1, #0
 80067ae:	f7ff fda8 	bl	8006302 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3338      	adds	r3, #56	; 0x38
 80067b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067ba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff fd37 	bl	8006232 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3338      	adds	r3, #56	; 0x38
 80067c8:	4921      	ldr	r1, [pc, #132]	; (8006850 <sync_fs+0xd8>)
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fd4c 	bl	8006268 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3338      	adds	r3, #56	; 0x38
 80067d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80067d8:	491e      	ldr	r1, [pc, #120]	; (8006854 <sync_fs+0xdc>)
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff fd44 	bl	8006268 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3338      	adds	r3, #56	; 0x38
 80067e4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	4619      	mov	r1, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	f7ff fd3a 	bl	8006268 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3338      	adds	r3, #56	; 0x38
 80067f8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7ff fd30 	bl	8006268 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	7858      	ldrb	r0, [r3, #1]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006820:	2301      	movs	r3, #1
 8006822:	f7ff fc8d 	bl	8006140 <disk_write>
			fs->fsi_flag = 0;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2200      	movs	r2, #0
 8006832:	2100      	movs	r1, #0
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff fca3 	bl	8006180 <disk_ioctl>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <sync_fs+0xcc>
 8006840:	2301      	movs	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	41615252 	.word	0x41615252
 8006854:	61417272 	.word	0x61417272

08006858 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	3b02      	subs	r3, #2
 8006866:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	3b02      	subs	r3, #2
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d301      	bcc.n	8006878 <clust2sect+0x20>
 8006874:	2300      	movs	r3, #0
 8006876:	e008      	b.n	800688a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	895b      	ldrh	r3, [r3, #10]
 800687c:	461a      	mov	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	fb03 f202 	mul.w	r2, r3, r2
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	4413      	add	r3, r2
}
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d904      	bls.n	80068b6 <get_fat+0x20>
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d302      	bcc.n	80068bc <get_fat+0x26>
		val = 1;	/* Internal error */
 80068b6:	2301      	movs	r3, #1
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	e0bb      	b.n	8006a34 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80068bc:	f04f 33ff 	mov.w	r3, #4294967295
 80068c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	f000 8083 	beq.w	80069d2 <get_fat+0x13c>
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	f300 80a7 	bgt.w	8006a20 <get_fat+0x18a>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d002      	beq.n	80068dc <get_fat+0x46>
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d056      	beq.n	8006988 <get_fat+0xf2>
 80068da:	e0a1      	b.n	8006a20 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	899b      	ldrh	r3, [r3, #12]
 80068f2:	4619      	mov	r1, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80068fa:	4413      	add	r3, r2
 80068fc:	4619      	mov	r1, r3
 80068fe:	6938      	ldr	r0, [r7, #16]
 8006900:	f7ff ff0c 	bl	800671c <move_window>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	f040 808d 	bne.w	8006a26 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	60fa      	str	r2, [r7, #12]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	8992      	ldrh	r2, [r2, #12]
 8006916:	fbb3 f1f2 	udiv	r1, r3, r2
 800691a:	fb02 f201 	mul.w	r2, r2, r1
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4413      	add	r3, r2
 8006924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006928:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	899b      	ldrh	r3, [r3, #12]
 8006932:	4619      	mov	r1, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	fbb3 f3f1 	udiv	r3, r3, r1
 800693a:	4413      	add	r3, r2
 800693c:	4619      	mov	r1, r3
 800693e:	6938      	ldr	r0, [r7, #16]
 8006940:	f7ff feec 	bl	800671c <move_window>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d16f      	bne.n	8006a2a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	899b      	ldrh	r3, [r3, #12]
 800694e:	461a      	mov	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	fbb3 f1f2 	udiv	r1, r3, r2
 8006956:	fb02 f201 	mul.w	r2, r2, r1
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4413      	add	r3, r2
 8006960:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	461a      	mov	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	4313      	orrs	r3, r2
 800696c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <get_fat+0xe8>
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	091b      	lsrs	r3, r3, #4
 800697c:	e002      	b.n	8006984 <get_fat+0xee>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006984:	617b      	str	r3, [r7, #20]
			break;
 8006986:	e055      	b.n	8006a34 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	899b      	ldrh	r3, [r3, #12]
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	b29b      	uxth	r3, r3
 8006994:	4619      	mov	r1, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	fbb3 f3f1 	udiv	r3, r3, r1
 800699c:	4413      	add	r3, r2
 800699e:	4619      	mov	r1, r3
 80069a0:	6938      	ldr	r0, [r7, #16]
 80069a2:	f7ff febb 	bl	800671c <move_window>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d140      	bne.n	8006a2e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	8992      	ldrh	r2, [r2, #12]
 80069ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80069be:	fb02 f200 	mul.w	r2, r2, r0
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	440b      	add	r3, r1
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff fbf8 	bl	80061bc <ld_word>
 80069cc:	4603      	mov	r3, r0
 80069ce:	617b      	str	r3, [r7, #20]
			break;
 80069d0:	e030      	b.n	8006a34 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	899b      	ldrh	r3, [r3, #12]
 80069da:	089b      	lsrs	r3, r3, #2
 80069dc:	b29b      	uxth	r3, r3
 80069de:	4619      	mov	r1, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80069e6:	4413      	add	r3, r2
 80069e8:	4619      	mov	r1, r3
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f7ff fe96 	bl	800671c <move_window>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d11d      	bne.n	8006a32 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	8992      	ldrh	r2, [r2, #12]
 8006a04:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a08:	fb02 f200 	mul.w	r2, r2, r0
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	440b      	add	r3, r1
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fbeb 	bl	80061ec <ld_dword>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a1c:	617b      	str	r3, [r7, #20]
			break;
 8006a1e:	e009      	b.n	8006a34 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006a20:	2301      	movs	r3, #1
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e006      	b.n	8006a34 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a26:	bf00      	nop
 8006a28:	e004      	b.n	8006a34 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a2a:	bf00      	nop
 8006a2c:	e002      	b.n	8006a34 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a2e:	bf00      	nop
 8006a30:	e000      	b.n	8006a34 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a32:	bf00      	nop
		}
	}

	return val;
 8006a34:	697b      	ldr	r3, [r7, #20]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006a3e:	b590      	push	{r4, r7, lr}
 8006a40:	b089      	sub	sp, #36	; 0x24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	f240 8102 	bls.w	8006c5a <put_fat+0x21c>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	f080 80fc 	bcs.w	8006c5a <put_fat+0x21c>
		switch (fs->fs_type) {
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	f000 80b6 	beq.w	8006bd8 <put_fat+0x19a>
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	f300 80fd 	bgt.w	8006c6c <put_fat+0x22e>
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d003      	beq.n	8006a7e <put_fat+0x40>
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	f000 8083 	beq.w	8006b82 <put_fat+0x144>
 8006a7c:	e0f6      	b.n	8006c6c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	085b      	lsrs	r3, r3, #1
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	4413      	add	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	899b      	ldrh	r3, [r3, #12]
 8006a94:	4619      	mov	r1, r3
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a9c:	4413      	add	r3, r2
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7ff fe3b 	bl	800671c <move_window>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006aaa:	7ffb      	ldrb	r3, [r7, #31]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f040 80d6 	bne.w	8006c5e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	61ba      	str	r2, [r7, #24]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	8992      	ldrh	r2, [r2, #12]
 8006ac2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ac6:	fb02 f200 	mul.w	r2, r2, r0
 8006aca:	1a9b      	subs	r3, r3, r2
 8006acc:	440b      	add	r3, r1
 8006ace:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00d      	beq.n	8006af6 <put_fat+0xb8>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b25b      	sxtb	r3, r3
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	b25a      	sxtb	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	b25b      	sxtb	r3, r3
 8006aee:	4313      	orrs	r3, r2
 8006af0:	b25b      	sxtb	r3, r3
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	e001      	b.n	8006afa <put_fat+0xbc>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	899b      	ldrh	r3, [r3, #12]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b14:	4413      	add	r3, r2
 8006b16:	4619      	mov	r1, r3
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff fdff 	bl	800671c <move_window>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b22:	7ffb      	ldrb	r3, [r7, #31]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f040 809c 	bne.w	8006c62 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	899b      	ldrh	r3, [r3, #12]
 8006b34:	461a      	mov	r2, r3
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b3c:	fb02 f200 	mul.w	r2, r2, r0
 8006b40:	1a9b      	subs	r3, r3, r2
 8006b42:	440b      	add	r3, r1
 8006b44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <put_fat+0x11a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	091b      	lsrs	r3, r3, #4
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	e00e      	b.n	8006b76 <put_fat+0x138>
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	b25b      	sxtb	r3, r3
 8006b5e:	f023 030f 	bic.w	r3, r3, #15
 8006b62:	b25a      	sxtb	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	0a1b      	lsrs	r3, r3, #8
 8006b68:	b25b      	sxtb	r3, r3
 8006b6a:	f003 030f 	and.w	r3, r3, #15
 8006b6e:	b25b      	sxtb	r3, r3
 8006b70:	4313      	orrs	r3, r2
 8006b72:	b25b      	sxtb	r3, r3
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	70da      	strb	r2, [r3, #3]
			break;
 8006b80:	e074      	b.n	8006c6c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	899b      	ldrh	r3, [r3, #12]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	4619      	mov	r1, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b96:	4413      	add	r3, r2
 8006b98:	4619      	mov	r1, r3
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff fdbe 	bl	800671c <move_window>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ba4:	7ffb      	ldrb	r3, [r7, #31]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d15d      	bne.n	8006c66 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	8992      	ldrh	r2, [r2, #12]
 8006bb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bbc:	fb02 f200 	mul.w	r2, r2, r0
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	b292      	uxth	r2, r2
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fb31 	bl	8006232 <st_word>
			fs->wflag = 1;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	70da      	strb	r2, [r3, #3]
			break;
 8006bd6:	e049      	b.n	8006c6c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	899b      	ldrh	r3, [r3, #12]
 8006be0:	089b      	lsrs	r3, r3, #2
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	4619      	mov	r1, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bec:	4413      	add	r3, r2
 8006bee:	4619      	mov	r1, r3
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff fd93 	bl	800671c <move_window>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bfa:	7ffb      	ldrb	r3, [r7, #31]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d134      	bne.n	8006c6a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	8992      	ldrh	r2, [r2, #12]
 8006c14:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c18:	fb02 f200 	mul.w	r2, r2, r0
 8006c1c:	1a9b      	subs	r3, r3, r2
 8006c1e:	440b      	add	r3, r1
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff fae3 	bl	80061ec <ld_dword>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006c2c:	4323      	orrs	r3, r4
 8006c2e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	8992      	ldrh	r2, [r2, #12]
 8006c3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c42:	fb02 f200 	mul.w	r2, r2, r0
 8006c46:	1a9b      	subs	r3, r3, r2
 8006c48:	440b      	add	r3, r1
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fb0b 	bl	8006268 <st_dword>
			fs->wflag = 1;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	70da      	strb	r2, [r3, #3]
			break;
 8006c58:	e008      	b.n	8006c6c <put_fat+0x22e>
		}
	}
 8006c5a:	bf00      	nop
 8006c5c:	e006      	b.n	8006c6c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006c5e:	bf00      	nop
 8006c60:	e004      	b.n	8006c6c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006c62:	bf00      	nop
 8006c64:	e002      	b.n	8006c6c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006c66:	bf00      	nop
 8006c68:	e000      	b.n	8006c6c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006c6a:	bf00      	nop
	return res;
 8006c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3724      	adds	r7, #36	; 0x24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}

08006c76 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b088      	sub	sp, #32
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d904      	bls.n	8006c9c <remove_chain+0x26>
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d301      	bcc.n	8006ca0 <remove_chain+0x2a>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e04b      	b.n	8006d38 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00c      	beq.n	8006cc0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	69b8      	ldr	r0, [r7, #24]
 8006cae:	f7ff fec6 	bl	8006a3e <put_fat>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006cb6:	7ffb      	ldrb	r3, [r7, #31]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <remove_chain+0x4a>
 8006cbc:	7ffb      	ldrb	r3, [r7, #31]
 8006cbe:	e03b      	b.n	8006d38 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006cc0:	68b9      	ldr	r1, [r7, #8]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7ff fde7 	bl	8006896 <get_fat>
 8006cc8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d031      	beq.n	8006d34 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <remove_chain+0x64>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e02e      	b.n	8006d38 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce0:	d101      	bne.n	8006ce6 <remove_chain+0x70>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e028      	b.n	8006d38 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	69b8      	ldr	r0, [r7, #24]
 8006cec:	f7ff fea7 	bl	8006a3e <put_fat>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006cf4:	7ffb      	ldrb	r3, [r7, #31]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <remove_chain+0x88>
 8006cfa:	7ffb      	ldrb	r3, [r7, #31]
 8006cfc:	e01c      	b.n	8006d38 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	3b02      	subs	r3, #2
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d20b      	bcs.n	8006d24 <remove_chain+0xae>
			fs->free_clst++;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	791b      	ldrb	r3, [r3, #4]
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d3c6      	bcc.n	8006cc0 <remove_chain+0x4a>
 8006d32:	e000      	b.n	8006d36 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006d34:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3720      	adds	r7, #32
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10d      	bne.n	8006d72 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <create_chain+0x2c>
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d31b      	bcc.n	8006da4 <create_chain+0x64>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	61bb      	str	r3, [r7, #24]
 8006d70:	e018      	b.n	8006da4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff fd8e 	bl	8006896 <get_fat>
 8006d7a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d801      	bhi.n	8006d86 <create_chain+0x46>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e070      	b.n	8006e68 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d101      	bne.n	8006d92 <create_chain+0x52>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	e06a      	b.n	8006e68 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d201      	bcs.n	8006da0 <create_chain+0x60>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	e063      	b.n	8006e68 <create_chain+0x128>
		scl = clst;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	3301      	adds	r3, #1
 8006dac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d307      	bcc.n	8006dc8 <create_chain+0x88>
				ncl = 2;
 8006db8:	2302      	movs	r3, #2
 8006dba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d901      	bls.n	8006dc8 <create_chain+0x88>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e04f      	b.n	8006e68 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006dc8:	69f9      	ldr	r1, [r7, #28]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff fd63 	bl	8006896 <get_fat>
 8006dd0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00e      	beq.n	8006df6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d003      	beq.n	8006de6 <create_chain+0xa6>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d101      	bne.n	8006dea <create_chain+0xaa>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	e03e      	b.n	8006e68 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d1da      	bne.n	8006da8 <create_chain+0x68>
 8006df2:	2300      	movs	r3, #0
 8006df4:	e038      	b.n	8006e68 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006df6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006df8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfc:	69f9      	ldr	r1, [r7, #28]
 8006dfe:	6938      	ldr	r0, [r7, #16]
 8006e00:	f7ff fe1d 	bl	8006a3e <put_fat>
 8006e04:	4603      	mov	r3, r0
 8006e06:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <create_chain+0xe2>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d006      	beq.n	8006e22 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6938      	ldr	r0, [r7, #16]
 8006e1a:	f7ff fe10 	bl	8006a3e <put_fat>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d116      	bne.n	8006e56 <create_chain+0x116>
		fs->last_clst = ncl;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	3b02      	subs	r3, #2
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d804      	bhi.n	8006e46 <create_chain+0x106>
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	1e5a      	subs	r2, r3, #1
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	791b      	ldrb	r3, [r3, #4]
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	711a      	strb	r2, [r3, #4]
 8006e54:	e007      	b.n	8006e66 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d102      	bne.n	8006e62 <create_chain+0x122>
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e60:	e000      	b.n	8006e64 <create_chain+0x124>
 8006e62:	2301      	movs	r3, #1
 8006e64:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006e66:	69fb      	ldr	r3, [r7, #28]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	3304      	adds	r3, #4
 8006e86:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	899b      	ldrh	r3, [r3, #12]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	8952      	ldrh	r2, [r2, #10]
 8006e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1d1a      	adds	r2, r3, #4
 8006ea2:	613a      	str	r2, [r7, #16]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <clmt_clust+0x42>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e010      	b.n	8006ed4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d307      	bcc.n	8006eca <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ec8:	e7e9      	b.n	8006e9e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006eca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	4413      	add	r3, r2
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ef6:	d204      	bcs.n	8006f02 <dir_sdi+0x22>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006f02:	2302      	movs	r3, #2
 8006f04:	e071      	b.n	8006fea <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d106      	bne.n	8006f26 <dir_sdi+0x46>
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d902      	bls.n	8006f26 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10c      	bne.n	8006f46 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	8912      	ldrh	r2, [r2, #8]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d301      	bcc.n	8006f3c <dir_sdi+0x5c>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e056      	b.n	8006fea <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	61da      	str	r2, [r3, #28]
 8006f44:	e02d      	b.n	8006fa2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	895b      	ldrh	r3, [r3, #10]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	899b      	ldrh	r3, [r3, #12]
 8006f50:	fb03 f302 	mul.w	r3, r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f56:	e019      	b.n	8006f8c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6979      	ldr	r1, [r7, #20]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff fc9a 	bl	8006896 <get_fat>
 8006f62:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d101      	bne.n	8006f70 <dir_sdi+0x90>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e03c      	b.n	8006fea <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d904      	bls.n	8006f80 <dir_sdi+0xa0>
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d301      	bcc.n	8006f84 <dir_sdi+0xa4>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e032      	b.n	8006fea <dir_sdi+0x10a>
			ofs -= csz;
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d2e1      	bcs.n	8006f58 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006f94:	6979      	ldr	r1, [r7, #20]
 8006f96:	6938      	ldr	r0, [r7, #16]
 8006f98:	f7ff fc5e 	bl	8006858 <clust2sect>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <dir_sdi+0xd4>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e01a      	b.n	8006fea <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69da      	ldr	r2, [r3, #28]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	899b      	ldrh	r3, [r3, #12]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fc4:	441a      	add	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	899b      	ldrh	r3, [r3, #12]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fdc:	fb02 f200 	mul.w	r2, r2, r0
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	18ca      	adds	r2, r1, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b086      	sub	sp, #24
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	3320      	adds	r3, #32
 8007008:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <dir_next+0x28>
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007018:	d301      	bcc.n	800701e <dir_next+0x2c>
 800701a:	2304      	movs	r3, #4
 800701c:	e0bb      	b.n	8007196 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	899b      	ldrh	r3, [r3, #12]
 8007022:	461a      	mov	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	fbb3 f1f2 	udiv	r1, r3, r2
 800702a:	fb02 f201 	mul.w	r2, r2, r1
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	2b00      	cmp	r3, #0
 8007032:	f040 809d 	bne.w	8007170 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	8912      	ldrh	r2, [r2, #8]
 8007050:	4293      	cmp	r3, r2
 8007052:	f0c0 808d 	bcc.w	8007170 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	61da      	str	r2, [r3, #28]
 800705c:	2304      	movs	r3, #4
 800705e:	e09a      	b.n	8007196 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	899b      	ldrh	r3, [r3, #12]
 8007064:	461a      	mov	r2, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	fbb3 f3f2 	udiv	r3, r3, r2
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	8952      	ldrh	r2, [r2, #10]
 8007070:	3a01      	subs	r2, #1
 8007072:	4013      	ands	r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d17b      	bne.n	8007170 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f7ff fc08 	bl	8006896 <get_fat>
 8007086:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d801      	bhi.n	8007092 <dir_next+0xa0>
 800708e:	2302      	movs	r3, #2
 8007090:	e081      	b.n	8007196 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d101      	bne.n	800709e <dir_next+0xac>
 800709a:	2301      	movs	r3, #1
 800709c:	e07b      	b.n	8007196 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d359      	bcc.n	800715c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	61da      	str	r2, [r3, #28]
 80070b4:	2304      	movs	r3, #4
 80070b6:	e06e      	b.n	8007196 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	4619      	mov	r1, r3
 80070c0:	4610      	mov	r0, r2
 80070c2:	f7ff fe3d 	bl	8006d40 <create_chain>
 80070c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <dir_next+0xe0>
 80070ce:	2307      	movs	r3, #7
 80070d0:	e061      	b.n	8007196 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <dir_next+0xea>
 80070d8:	2302      	movs	r3, #2
 80070da:	e05c      	b.n	8007196 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e2:	d101      	bne.n	80070e8 <dir_next+0xf6>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e056      	b.n	8007196 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff fad3 	bl	8006694 <sync_window>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <dir_next+0x106>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e04e      	b.n	8007196 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	899b      	ldrh	r3, [r3, #12]
 8007102:	461a      	mov	r2, r3
 8007104:	2100      	movs	r1, #0
 8007106:	f7ff f8fc 	bl	8006302 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800710a:	2300      	movs	r3, #0
 800710c:	613b      	str	r3, [r7, #16]
 800710e:	6979      	ldr	r1, [r7, #20]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff fba1 	bl	8006858 <clust2sect>
 8007116:	4602      	mov	r2, r0
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	635a      	str	r2, [r3, #52]	; 0x34
 800711c:	e012      	b.n	8007144 <dir_next+0x152>
						fs->wflag = 1;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f7ff fab5 	bl	8006694 <sync_window>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <dir_next+0x142>
 8007130:	2301      	movs	r3, #1
 8007132:	e030      	b.n	8007196 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	3301      	adds	r3, #1
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	635a      	str	r2, [r3, #52]	; 0x34
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	895b      	ldrh	r3, [r3, #10]
 8007148:	461a      	mov	r2, r3
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	4293      	cmp	r3, r2
 800714e:	d3e6      	bcc.n	800711e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007162:	6979      	ldr	r1, [r7, #20]
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f7ff fb77 	bl	8006858 <clust2sect>
 800716a:	4602      	mov	r2, r0
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	899b      	ldrh	r3, [r3, #12]
 8007180:	461a      	mov	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	fbb3 f0f2 	udiv	r0, r3, r2
 8007188:	fb02 f200 	mul.w	r2, r2, r0
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	18ca      	adds	r2, r1, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b086      	sub	sp, #24
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80071ae:	2100      	movs	r1, #0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff fe95 	bl	8006ee0 <dir_sdi>
 80071b6:	4603      	mov	r3, r0
 80071b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d12b      	bne.n	8007218 <dir_alloc+0x7a>
		n = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	4619      	mov	r1, r3
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff faa6 	bl	800671c <move_window>
 80071d0:	4603      	mov	r3, r0
 80071d2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d11d      	bne.n	8007216 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2be5      	cmp	r3, #229	; 0xe5
 80071e2:	d004      	beq.n	80071ee <dir_alloc+0x50>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d107      	bne.n	80071fe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	3301      	adds	r3, #1
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d102      	bne.n	8007202 <dir_alloc+0x64>
 80071fc:	e00c      	b.n	8007218 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80071fe:	2300      	movs	r3, #0
 8007200:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007202:	2101      	movs	r1, #1
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff fef4 	bl	8006ff2 <dir_next>
 800720a:	4603      	mov	r3, r0
 800720c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0d7      	beq.n	80071c4 <dir_alloc+0x26>
 8007214:	e000      	b.n	8007218 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007216:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	2b04      	cmp	r3, #4
 800721c:	d101      	bne.n	8007222 <dir_alloc+0x84>
 800721e:	2307      	movs	r3, #7
 8007220:	75fb      	strb	r3, [r7, #23]
	return res;
 8007222:	7dfb      	ldrb	r3, [r7, #23]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	331a      	adds	r3, #26
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe ffbe 	bl	80061bc <ld_word>
 8007240:	4603      	mov	r3, r0
 8007242:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b03      	cmp	r3, #3
 800724a:	d109      	bne.n	8007260 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	3314      	adds	r3, #20
 8007250:	4618      	mov	r0, r3
 8007252:	f7fe ffb3 	bl	80061bc <ld_word>
 8007256:	4603      	mov	r3, r0
 8007258:	041b      	lsls	r3, r3, #16
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4313      	orrs	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007260:	68fb      	ldr	r3, [r7, #12]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	331a      	adds	r3, #26
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	b292      	uxth	r2, r2
 800727e:	4611      	mov	r1, r2
 8007280:	4618      	mov	r0, r3
 8007282:	f7fe ffd6 	bl	8006232 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b03      	cmp	r3, #3
 800728c:	d109      	bne.n	80072a2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f103 0214 	add.w	r2, r3, #20
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	0c1b      	lsrs	r3, r3, #16
 8007298:	b29b      	uxth	r3, r3
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f7fe ffc8 	bl	8006232 <st_word>
	}
}
 80072a2:	bf00      	nop
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80072ac:	b590      	push	{r4, r7, lr}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	331a      	adds	r3, #26
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe ff7e 	bl	80061bc <ld_word>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <cmp_lfn+0x1e>
 80072c6:	2300      	movs	r3, #0
 80072c8:	e059      	b.n	800737e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d2:	1e5a      	subs	r2, r3, #1
 80072d4:	4613      	mov	r3, r2
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80072e0:	2301      	movs	r3, #1
 80072e2:	81fb      	strh	r3, [r7, #14]
 80072e4:	2300      	movs	r3, #0
 80072e6:	613b      	str	r3, [r7, #16]
 80072e8:	e033      	b.n	8007352 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80072ea:	4a27      	ldr	r2, [pc, #156]	; (8007388 <cmp_lfn+0xdc>)
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	4413      	add	r3, r2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe ff5f 	bl	80061bc <ld_word>
 80072fe:	4603      	mov	r3, r0
 8007300:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007302:	89fb      	ldrh	r3, [r7, #14]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01a      	beq.n	800733e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2bfe      	cmp	r3, #254	; 0xfe
 800730c:	d812      	bhi.n	8007334 <cmp_lfn+0x88>
 800730e:	89bb      	ldrh	r3, [r7, #12]
 8007310:	4618      	mov	r0, r3
 8007312:	f001 fec9 	bl	80090a8 <ff_wtoupper>
 8007316:	4603      	mov	r3, r0
 8007318:	461c      	mov	r4, r3
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	617a      	str	r2, [r7, #20]
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f001 febd 	bl	80090a8 <ff_wtoupper>
 800732e:	4603      	mov	r3, r0
 8007330:	429c      	cmp	r4, r3
 8007332:	d001      	beq.n	8007338 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007334:	2300      	movs	r3, #0
 8007336:	e022      	b.n	800737e <cmp_lfn+0xd2>
			}
			wc = uc;
 8007338:	89bb      	ldrh	r3, [r7, #12]
 800733a:	81fb      	strh	r3, [r7, #14]
 800733c:	e006      	b.n	800734c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800733e:	89bb      	ldrh	r3, [r7, #12]
 8007340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007344:	4293      	cmp	r3, r2
 8007346:	d001      	beq.n	800734c <cmp_lfn+0xa0>
 8007348:	2300      	movs	r3, #0
 800734a:	e018      	b.n	800737e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	3301      	adds	r3, #1
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b0c      	cmp	r3, #12
 8007356:	d9c8      	bls.n	80072ea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <cmp_lfn+0xd0>
 8007364:	89fb      	ldrh	r3, [r7, #14]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d008      	beq.n	800737c <cmp_lfn+0xd0>
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4413      	add	r3, r2
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <cmp_lfn+0xd0>
 8007378:	2300      	movs	r3, #0
 800737a:	e000      	b.n	800737e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800737c:	2301      	movs	r3, #1
}
 800737e:	4618      	mov	r0, r3
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	bd90      	pop	{r4, r7, pc}
 8007386:	bf00      	nop
 8007388:	0800c354 	.word	0x0800c354

0800738c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	4611      	mov	r1, r2
 8007398:	461a      	mov	r2, r3
 800739a:	460b      	mov	r3, r1
 800739c:	71fb      	strb	r3, [r7, #7]
 800739e:	4613      	mov	r3, r2
 80073a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	330d      	adds	r3, #13
 80073a6:	79ba      	ldrb	r2, [r7, #6]
 80073a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	330b      	adds	r3, #11
 80073ae:	220f      	movs	r2, #15
 80073b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	330c      	adds	r3, #12
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	331a      	adds	r3, #26
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe ff36 	bl	8006232 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	1e5a      	subs	r2, r3, #1
 80073ca:	4613      	mov	r3, r2
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	82fb      	strh	r3, [r7, #22]
 80073da:	2300      	movs	r3, #0
 80073dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80073de:	8afb      	ldrh	r3, [r7, #22]
 80073e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <put_lfn+0x6c>
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	61fa      	str	r2, [r7, #28]
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80073f8:	4a17      	ldr	r2, [pc, #92]	; (8007458 <put_lfn+0xcc>)
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	4413      	add	r3, r2
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	4413      	add	r3, r2
 8007406:	8afa      	ldrh	r2, [r7, #22]
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe ff11 	bl	8006232 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007410:	8afb      	ldrh	r3, [r7, #22]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d102      	bne.n	800741c <put_lfn+0x90>
 8007416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800741a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	3301      	adds	r3, #1
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	2b0c      	cmp	r3, #12
 8007426:	d9da      	bls.n	80073de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007428:	8afb      	ldrh	r3, [r7, #22]
 800742a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800742e:	4293      	cmp	r3, r2
 8007430:	d006      	beq.n	8007440 <put_lfn+0xb4>
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4413      	add	r3, r2
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d103      	bne.n	8007448 <put_lfn+0xbc>
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007446:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	79fa      	ldrb	r2, [r7, #7]
 800744c:	701a      	strb	r2, [r3, #0]
}
 800744e:	bf00      	nop
 8007450:	3720      	adds	r7, #32
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	0800c354 	.word	0x0800c354

0800745c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08c      	sub	sp, #48	; 0x30
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800746a:	220b      	movs	r2, #11
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f7fe ff26 	bl	80062c0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b05      	cmp	r3, #5
 8007478:	d92b      	bls.n	80074d2 <gen_numname+0x76>
		sr = seq;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800747e:	e022      	b.n	80074c6 <gen_numname+0x6a>
			wc = *lfn++;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	1c9a      	adds	r2, r3, #2
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800748a:	2300      	movs	r3, #0
 800748c:	62bb      	str	r3, [r7, #40]	; 0x28
 800748e:	e017      	b.n	80074c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	005a      	lsls	r2, r3, #1
 8007494:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	4413      	add	r3, r2
 800749c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800749e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <gen_numname+0x5e>
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80074b4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80074b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	3301      	adds	r3, #1
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	2b0f      	cmp	r3, #15
 80074c4:	d9e4      	bls.n	8007490 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1d8      	bne.n	8007480 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80074d2:	2307      	movs	r3, #7
 80074d4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	3330      	adds	r3, #48	; 0x30
 80074e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80074e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074ea:	2b39      	cmp	r3, #57	; 0x39
 80074ec:	d904      	bls.n	80074f8 <gen_numname+0x9c>
 80074ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074f2:	3307      	adds	r3, #7
 80074f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	1e5a      	subs	r2, r3, #1
 80074fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80074fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007502:	4413      	add	r3, r2
 8007504:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007508:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	091b      	lsrs	r3, r3, #4
 8007510:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1de      	bne.n	80074d6 <gen_numname+0x7a>
	ns[i] = '~';
 8007518:	f107 0214 	add.w	r2, r7, #20
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	4413      	add	r3, r2
 8007520:	227e      	movs	r2, #126	; 0x7e
 8007522:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007524:	2300      	movs	r3, #0
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
 8007528:	e002      	b.n	8007530 <gen_numname+0xd4>
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	3301      	adds	r3, #1
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
 8007530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	429a      	cmp	r2, r3
 8007536:	d205      	bcs.n	8007544 <gen_numname+0xe8>
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	4413      	add	r3, r2
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b20      	cmp	r3, #32
 8007542:	d1f2      	bne.n	800752a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	2b07      	cmp	r3, #7
 8007548:	d808      	bhi.n	800755c <gen_numname+0x100>
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007550:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007554:	4413      	add	r3, r2
 8007556:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800755a:	e000      	b.n	800755e <gen_numname+0x102>
 800755c:	2120      	movs	r1, #32
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	627a      	str	r2, [r7, #36]	; 0x24
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	460a      	mov	r2, r1
 800756a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	2b07      	cmp	r3, #7
 8007570:	d9e8      	bls.n	8007544 <gen_numname+0xe8>
}
 8007572:	bf00      	nop
 8007574:	bf00      	nop
 8007576:	3730      	adds	r7, #48	; 0x30
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007588:	230b      	movs	r3, #11
 800758a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	b2da      	uxtb	r2, r3
 8007590:	0852      	lsrs	r2, r2, #1
 8007592:	01db      	lsls	r3, r3, #7
 8007594:	4313      	orrs	r3, r2
 8007596:	b2da      	uxtb	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	1c59      	adds	r1, r3, #1
 800759c:	6079      	str	r1, [r7, #4]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	4413      	add	r3, r2
 80075a2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	60bb      	str	r3, [r7, #8]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1ed      	bne.n	800758c <sum_sfn+0x10>
	return sum;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80075cc:	2100      	movs	r1, #0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff fc86 	bl	8006ee0 <dir_sdi>
 80075d4:	4603      	mov	r3, r0
 80075d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <dir_find+0x24>
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	e0a9      	b.n	8007736 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80075e2:	23ff      	movs	r3, #255	; 0xff
 80075e4:	753b      	strb	r3, [r7, #20]
 80075e6:	7d3b      	ldrb	r3, [r7, #20]
 80075e8:	757b      	strb	r3, [r7, #21]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f04f 32ff 	mov.w	r2, #4294967295
 80075f0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6938      	ldr	r0, [r7, #16]
 80075fa:	f7ff f88f 	bl	800671c <move_window>
 80075fe:	4603      	mov	r3, r0
 8007600:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f040 8090 	bne.w	800772a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007612:	7dbb      	ldrb	r3, [r7, #22]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d102      	bne.n	800761e <dir_find+0x60>
 8007618:	2304      	movs	r3, #4
 800761a:	75fb      	strb	r3, [r7, #23]
 800761c:	e08a      	b.n	8007734 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	330b      	adds	r3, #11
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800762a:	73fb      	strb	r3, [r7, #15]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	7bfa      	ldrb	r2, [r7, #15]
 8007630:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007632:	7dbb      	ldrb	r3, [r7, #22]
 8007634:	2be5      	cmp	r3, #229	; 0xe5
 8007636:	d007      	beq.n	8007648 <dir_find+0x8a>
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	f003 0308 	and.w	r3, r3, #8
 800763e:	2b00      	cmp	r3, #0
 8007640:	d009      	beq.n	8007656 <dir_find+0x98>
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	2b0f      	cmp	r3, #15
 8007646:	d006      	beq.n	8007656 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007648:	23ff      	movs	r3, #255	; 0xff
 800764a:	757b      	strb	r3, [r7, #21]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	631a      	str	r2, [r3, #48]	; 0x30
 8007654:	e05e      	b.n	8007714 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	2b0f      	cmp	r3, #15
 800765a:	d136      	bne.n	80076ca <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	d154      	bne.n	8007714 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800766a:	7dbb      	ldrb	r3, [r7, #22]
 800766c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00d      	beq.n	8007690 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	7b5b      	ldrb	r3, [r3, #13]
 800767a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800767c:	7dbb      	ldrb	r3, [r7, #22]
 800767e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007682:	75bb      	strb	r3, [r7, #22]
 8007684:	7dbb      	ldrb	r3, [r7, #22]
 8007686:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007690:	7dba      	ldrb	r2, [r7, #22]
 8007692:	7d7b      	ldrb	r3, [r7, #21]
 8007694:	429a      	cmp	r2, r3
 8007696:	d115      	bne.n	80076c4 <dir_find+0x106>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	330d      	adds	r3, #13
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	7d3a      	ldrb	r2, [r7, #20]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d10e      	bne.n	80076c4 <dir_find+0x106>
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f7ff fdfb 	bl	80072ac <cmp_lfn>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <dir_find+0x106>
 80076bc:	7d7b      	ldrb	r3, [r7, #21]
 80076be:	3b01      	subs	r3, #1
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	e000      	b.n	80076c6 <dir_find+0x108>
 80076c4:	23ff      	movs	r3, #255	; 0xff
 80076c6:	757b      	strb	r3, [r7, #21]
 80076c8:	e024      	b.n	8007714 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80076ca:	7d7b      	ldrb	r3, [r7, #21]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d109      	bne.n	80076e4 <dir_find+0x126>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff ff51 	bl	800757c <sum_sfn>
 80076da:	4603      	mov	r3, r0
 80076dc:	461a      	mov	r2, r3
 80076de:	7d3b      	ldrb	r3, [r7, #20]
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d024      	beq.n	800772e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <dir_find+0x14a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a18      	ldr	r0, [r3, #32]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	220b      	movs	r2, #11
 80076fc:	4619      	mov	r1, r3
 80076fe:	f7fe fe1b 	bl	8006338 <mem_cmp>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d014      	beq.n	8007732 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007708:	23ff      	movs	r3, #255	; 0xff
 800770a:	757b      	strb	r3, [r7, #21]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f04f 32ff 	mov.w	r2, #4294967295
 8007712:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007714:	2100      	movs	r1, #0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff fc6b 	bl	8006ff2 <dir_next>
 800771c:	4603      	mov	r3, r0
 800771e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007720:	7dfb      	ldrb	r3, [r7, #23]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f43f af65 	beq.w	80075f2 <dir_find+0x34>
 8007728:	e004      	b.n	8007734 <dir_find+0x176>
		if (res != FR_OK) break;
 800772a:	bf00      	nop
 800772c:	e002      	b.n	8007734 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800772e:	bf00      	nop
 8007730:	e000      	b.n	8007734 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007732:	bf00      	nop

	return res;
 8007734:	7dfb      	ldrb	r3, [r7, #23]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08c      	sub	sp, #48	; 0x30
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007754:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <dir_register+0x20>
 800775c:	2306      	movs	r3, #6
 800775e:	e0e0      	b.n	8007922 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007760:	2300      	movs	r3, #0
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
 8007764:	e002      	b.n	800776c <dir_register+0x2c>
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	3301      	adds	r3, #1
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	4413      	add	r3, r2
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f4      	bne.n	8007766 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007782:	f107 030c 	add.w	r3, r7, #12
 8007786:	220c      	movs	r2, #12
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe fd99 	bl	80062c0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d032      	beq.n	80077fe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2240      	movs	r2, #64	; 0x40
 800779c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80077a0:	2301      	movs	r3, #1
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077a4:	e016      	b.n	80077d4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	f107 010c 	add.w	r1, r7, #12
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	f7ff fe51 	bl	800745c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff feff 	bl	80075be <dir_find>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80077c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	3301      	adds	r3, #1
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	2b63      	cmp	r3, #99	; 0x63
 80077d8:	d9e5      	bls.n	80077a6 <dir_register+0x66>
 80077da:	e000      	b.n	80077de <dir_register+0x9e>
			if (res != FR_OK) break;
 80077dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	2b64      	cmp	r3, #100	; 0x64
 80077e2:	d101      	bne.n	80077e8 <dir_register+0xa8>
 80077e4:	2307      	movs	r3, #7
 80077e6:	e09c      	b.n	8007922 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80077e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d002      	beq.n	80077f6 <dir_register+0xb6>
 80077f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077f4:	e095      	b.n	8007922 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80077f6:	7dfa      	ldrb	r2, [r7, #23]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d007      	beq.n	8007818 <dir_register+0xd8>
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	330c      	adds	r3, #12
 800780c:	4a47      	ldr	r2, [pc, #284]	; (800792c <dir_register+0x1ec>)
 800780e:	fba2 2303 	umull	r2, r3, r2, r3
 8007812:	089b      	lsrs	r3, r3, #2
 8007814:	3301      	adds	r3, #1
 8007816:	e000      	b.n	800781a <dir_register+0xda>
 8007818:	2301      	movs	r3, #1
 800781a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800781c:	6a39      	ldr	r1, [r7, #32]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff fcbd 	bl	800719e <dir_alloc>
 8007824:	4603      	mov	r3, r0
 8007826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800782a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800782e:	2b00      	cmp	r3, #0
 8007830:	d148      	bne.n	80078c4 <dir_register+0x184>
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	3b01      	subs	r3, #1
 8007836:	623b      	str	r3, [r7, #32]
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d042      	beq.n	80078c4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	015b      	lsls	r3, r3, #5
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff fb48 	bl	8006ee0 <dir_sdi>
 8007850:	4603      	mov	r3, r0
 8007852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800785a:	2b00      	cmp	r3, #0
 800785c:	d132      	bne.n	80078c4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	3324      	adds	r3, #36	; 0x24
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff fe8a 	bl	800757c <sum_sfn>
 8007868:	4603      	mov	r3, r0
 800786a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	4619      	mov	r1, r3
 8007872:	69f8      	ldr	r0, [r7, #28]
 8007874:	f7fe ff52 	bl	800671c <move_window>
 8007878:	4603      	mov	r3, r0
 800787a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800787e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007882:	2b00      	cmp	r3, #0
 8007884:	d11d      	bne.n	80078c2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	6918      	ldr	r0, [r3, #16]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a19      	ldr	r1, [r3, #32]
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	b2da      	uxtb	r2, r3
 8007892:	7efb      	ldrb	r3, [r7, #27]
 8007894:	f7ff fd7a 	bl	800738c <put_lfn>
				fs->wflag = 1;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	2201      	movs	r2, #1
 800789c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800789e:	2100      	movs	r1, #0
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff fba6 	bl	8006ff2 <dir_next>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80078ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d107      	bne.n	80078c4 <dir_register+0x184>
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	623b      	str	r3, [r7, #32]
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1d5      	bne.n	800786c <dir_register+0x12c>
 80078c0:	e000      	b.n	80078c4 <dir_register+0x184>
				if (res != FR_OK) break;
 80078c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80078c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d128      	bne.n	800791e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	4619      	mov	r1, r3
 80078d2:	69f8      	ldr	r0, [r7, #28]
 80078d4:	f7fe ff22 	bl	800671c <move_window>
 80078d8:	4603      	mov	r3, r0
 80078da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80078de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d11b      	bne.n	800791e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	2220      	movs	r2, #32
 80078ec:	2100      	movs	r1, #0
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fd07 	bl	8006302 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a18      	ldr	r0, [r3, #32]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3324      	adds	r3, #36	; 0x24
 80078fc:	220b      	movs	r2, #11
 80078fe:	4619      	mov	r1, r3
 8007900:	f7fe fcde 	bl	80062c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	330c      	adds	r3, #12
 8007910:	f002 0218 	and.w	r2, r2, #24
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2201      	movs	r2, #1
 800791c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800791e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007922:	4618      	mov	r0, r3
 8007924:	3730      	adds	r7, #48	; 0x30
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	4ec4ec4f 	.word	0x4ec4ec4f

08007930 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08a      	sub	sp, #40	; 0x28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	61ba      	str	r2, [r7, #24]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	4413      	add	r3, r2
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800795e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007960:	2b1f      	cmp	r3, #31
 8007962:	d940      	bls.n	80079e6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007966:	2b2f      	cmp	r3, #47	; 0x2f
 8007968:	d006      	beq.n	8007978 <create_name+0x48>
 800796a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800796c:	2b5c      	cmp	r3, #92	; 0x5c
 800796e:	d110      	bne.n	8007992 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007970:	e002      	b.n	8007978 <create_name+0x48>
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	3301      	adds	r3, #1
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	4413      	add	r3, r2
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b2f      	cmp	r3, #47	; 0x2f
 8007982:	d0f6      	beq.n	8007972 <create_name+0x42>
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	4413      	add	r3, r2
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b5c      	cmp	r3, #92	; 0x5c
 800798e:	d0f0      	beq.n	8007972 <create_name+0x42>
			break;
 8007990:	e02a      	b.n	80079e8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2bfe      	cmp	r3, #254	; 0xfe
 8007996:	d901      	bls.n	800799c <create_name+0x6c>
 8007998:	2306      	movs	r3, #6
 800799a:	e177      	b.n	8007c8c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800799c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80079a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079a4:	2101      	movs	r1, #1
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 fb42 	bl	8009030 <ff_convert>
 80079ac:	4603      	mov	r3, r0
 80079ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80079b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <create_name+0x8a>
 80079b6:	2306      	movs	r3, #6
 80079b8:	e168      	b.n	8007c8c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80079ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079bc:	2b7f      	cmp	r3, #127	; 0x7f
 80079be:	d809      	bhi.n	80079d4 <create_name+0xa4>
 80079c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079c2:	4619      	mov	r1, r3
 80079c4:	48b3      	ldr	r0, [pc, #716]	; (8007c94 <create_name+0x364>)
 80079c6:	f7fe fcde 	bl	8006386 <chk_chr>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <create_name+0xa4>
 80079d0:	2306      	movs	r3, #6
 80079d2:	e15b      	b.n	8007c8c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	617a      	str	r2, [r7, #20]
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079e2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80079e4:	e7b4      	b.n	8007950 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80079e6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	441a      	add	r2, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079f4:	2b1f      	cmp	r3, #31
 80079f6:	d801      	bhi.n	80079fc <create_name+0xcc>
 80079f8:	2304      	movs	r3, #4
 80079fa:	e000      	b.n	80079fe <create_name+0xce>
 80079fc:	2300      	movs	r3, #0
 80079fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a02:	e011      	b.n	8007a28 <create_name+0xf8>
		w = lfn[di - 1];
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d002      	beq.n	8007a22 <create_name+0xf2>
 8007a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a20:	d106      	bne.n	8007a30 <create_name+0x100>
		di--;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1ea      	bne.n	8007a04 <create_name+0xd4>
 8007a2e:	e000      	b.n	8007a32 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007a30:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <create_name+0x118>
 8007a44:	2306      	movs	r3, #6
 8007a46:	e121      	b.n	8007c8c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3324      	adds	r3, #36	; 0x24
 8007a4c:	220b      	movs	r2, #11
 8007a4e:	2120      	movs	r1, #32
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fc56 	bl	8006302 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	e002      	b.n	8007a62 <create_name+0x132>
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4413      	add	r3, r2
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d0f5      	beq.n	8007a5c <create_name+0x12c>
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a7c:	d0ee      	beq.n	8007a5c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d009      	beq.n	8007a98 <create_name+0x168>
 8007a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a88:	f043 0303 	orr.w	r3, r3, #3
 8007a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a90:	e002      	b.n	8007a98 <create_name+0x168>
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <create_name+0x182>
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	2b2e      	cmp	r3, #46	; 0x2e
 8007ab0:	d1ef      	bne.n	8007a92 <create_name+0x162>

	i = b = 0; ni = 8;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007ab8:	2300      	movs	r3, #0
 8007aba:	623b      	str	r3, [r7, #32]
 8007abc:	2308      	movs	r3, #8
 8007abe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	61ba      	str	r2, [r7, #24]
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007ad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 8090 	beq.w	8007bf8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d006      	beq.n	8007aec <create_name+0x1bc>
 8007ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ae2:	d10a      	bne.n	8007afa <create_name+0x1ca>
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d006      	beq.n	8007afa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007af0:	f043 0303 	orr.w	r3, r3, #3
 8007af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007af8:	e07d      	b.n	8007bf6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007afa:	6a3a      	ldr	r2, [r7, #32]
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d203      	bcs.n	8007b0a <create_name+0x1da>
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d123      	bne.n	8007b52 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	2b0b      	cmp	r3, #11
 8007b0e:	d106      	bne.n	8007b1e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b14:	f043 0303 	orr.w	r3, r3, #3
 8007b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b1c:	e06f      	b.n	8007bfe <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d005      	beq.n	8007b32 <create_name+0x202>
 8007b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b2a:	f043 0303 	orr.w	r3, r3, #3
 8007b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d860      	bhi.n	8007bfc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	2308      	movs	r3, #8
 8007b40:	623b      	str	r3, [r7, #32]
 8007b42:	230b      	movs	r3, #11
 8007b44:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b50:	e051      	b.n	8007bf6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b54:	2b7f      	cmp	r3, #127	; 0x7f
 8007b56:	d914      	bls.n	8007b82 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 fa67 	bl	8009030 <ff_convert>
 8007b62:	4603      	mov	r3, r0
 8007b64:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d004      	beq.n	8007b76 <create_name+0x246>
 8007b6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b6e:	3b80      	subs	r3, #128	; 0x80
 8007b70:	4a49      	ldr	r2, [pc, #292]	; (8007c98 <create_name+0x368>)
 8007b72:	5cd3      	ldrb	r3, [r2, r3]
 8007b74:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b7a:	f043 0302 	orr.w	r3, r3, #2
 8007b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <create_name+0x268>
 8007b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4843      	ldr	r0, [pc, #268]	; (8007c9c <create_name+0x36c>)
 8007b8e:	f7fe fbfa 	bl	8006386 <chk_chr>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d008      	beq.n	8007baa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007b98:	235f      	movs	r3, #95	; 0x5f
 8007b9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ba0:	f043 0303 	orr.w	r3, r3, #3
 8007ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ba8:	e01b      	b.n	8007be2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	d909      	bls.n	8007bc4 <create_name+0x294>
 8007bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bb2:	2b5a      	cmp	r3, #90	; 0x5a
 8007bb4:	d806      	bhi.n	8007bc4 <create_name+0x294>
					b |= 2;
 8007bb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bba:	f043 0302 	orr.w	r3, r3, #2
 8007bbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007bc2:	e00e      	b.n	8007be2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bc6:	2b60      	cmp	r3, #96	; 0x60
 8007bc8:	d90b      	bls.n	8007be2 <create_name+0x2b2>
 8007bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bcc:	2b7a      	cmp	r3, #122	; 0x7a
 8007bce:	d808      	bhi.n	8007be2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007bd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bd4:	f043 0301 	orr.w	r3, r3, #1
 8007bd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bde:	3b20      	subs	r3, #32
 8007be0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	623a      	str	r2, [r7, #32]
 8007be8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bea:	b2d1      	uxtb	r1, r2
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	4413      	add	r3, r2
 8007bf0:	460a      	mov	r2, r1
 8007bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007bf6:	e763      	b.n	8007ac0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007bf8:	bf00      	nop
 8007bfa:	e000      	b.n	8007bfe <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007bfc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c04:	2be5      	cmp	r3, #229	; 0xe5
 8007c06:	d103      	bne.n	8007c10 <create_name+0x2e0>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2205      	movs	r2, #5
 8007c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	d104      	bne.n	8007c20 <create_name+0x2f0>
 8007c16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007c20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c24:	f003 030c 	and.w	r3, r3, #12
 8007c28:	2b0c      	cmp	r3, #12
 8007c2a:	d005      	beq.n	8007c38 <create_name+0x308>
 8007c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d105      	bne.n	8007c44 <create_name+0x314>
 8007c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c3c:	f043 0302 	orr.w	r3, r3, #2
 8007c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d117      	bne.n	8007c80 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007c50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d105      	bne.n	8007c68 <create_name+0x338>
 8007c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c60:	f043 0310 	orr.w	r3, r3, #16
 8007c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007c68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c6c:	f003 030c 	and.w	r3, r3, #12
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d105      	bne.n	8007c80 <create_name+0x350>
 8007c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c78:	f043 0308 	orr.w	r3, r3, #8
 8007c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007c86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007c8a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3728      	adds	r7, #40	; 0x28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	0800c224 	.word	0x0800c224
 8007c98:	0800c2d4 	.word	0x0800c2d4
 8007c9c:	0800c230 	.word	0x0800c230

08007ca0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007cb4:	e002      	b.n	8007cbc <follow_path+0x1c>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b2f      	cmp	r3, #47	; 0x2f
 8007cc2:	d0f8      	beq.n	8007cb6 <follow_path+0x16>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b5c      	cmp	r3, #92	; 0x5c
 8007cca:	d0f4      	beq.n	8007cb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b1f      	cmp	r3, #31
 8007cd8:	d80a      	bhi.n	8007cf0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2280      	movs	r2, #128	; 0x80
 8007cde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff f8fb 	bl	8006ee0 <dir_sdi>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]
 8007cee:	e048      	b.n	8007d82 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff fe1b 	bl	8007930 <create_name>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d139      	bne.n	8007d78 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff fc5a 	bl	80075be <dir_find>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007d14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d12c      	bne.n	8007d7c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d127      	bne.n	8007d7c <follow_path+0xdc>
 8007d2c:	2305      	movs	r3, #5
 8007d2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007d30:	e024      	b.n	8007d7c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d121      	bne.n	8007d80 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	799b      	ldrb	r3, [r3, #6]
 8007d40:	f003 0310 	and.w	r3, r3, #16
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007d48:	2305      	movs	r3, #5
 8007d4a:	75fb      	strb	r3, [r7, #23]
 8007d4c:	e019      	b.n	8007d82 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	8992      	ldrh	r2, [r2, #12]
 8007d5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d60:	fb02 f200 	mul.w	r2, r2, r0
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	440b      	add	r3, r1
 8007d68:	4619      	mov	r1, r3
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fa5e 	bl	800722c <ld_clust>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d76:	e7bb      	b.n	8007cf0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007d78:	bf00      	nop
 8007d7a:	e002      	b.n	8007d82 <follow_path+0xe2>
				break;
 8007d7c:	bf00      	nop
 8007d7e:	e000      	b.n	8007d82 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d80:	bf00      	nop
			}
		}
	}

	return res;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295
 8007d98:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d031      	beq.n	8007e06 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	e002      	b.n	8007db0 <get_ldnumber+0x24>
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	3301      	adds	r3, #1
 8007dae:	617b      	str	r3, [r7, #20]
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b1f      	cmp	r3, #31
 8007db6:	d903      	bls.n	8007dc0 <get_ldnumber+0x34>
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b3a      	cmp	r3, #58	; 0x3a
 8007dbe:	d1f4      	bne.n	8007daa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b3a      	cmp	r3, #58	; 0x3a
 8007dc6:	d11c      	bne.n	8007e02 <get_ldnumber+0x76>
			tp = *path;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	60fa      	str	r2, [r7, #12]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	3b30      	subs	r3, #48	; 0x30
 8007dd8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b09      	cmp	r3, #9
 8007dde:	d80e      	bhi.n	8007dfe <get_ldnumber+0x72>
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d10a      	bne.n	8007dfe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d107      	bne.n	8007dfe <get_ldnumber+0x72>
					vol = (int)i;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	3301      	adds	r3, #1
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	e002      	b.n	8007e08 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e02:	2300      	movs	r3, #0
 8007e04:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007e06:	693b      	ldr	r3, [r7, #16]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	70da      	strb	r2, [r3, #3]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fe fc74 	bl	800671c <move_window>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <check_fs+0x2a>
 8007e3a:	2304      	movs	r3, #4
 8007e3c:	e038      	b.n	8007eb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3338      	adds	r3, #56	; 0x38
 8007e42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe f9b8 	bl	80061bc <ld_word>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d001      	beq.n	8007e5c <check_fs+0x48>
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e029      	b.n	8007eb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e62:	2be9      	cmp	r3, #233	; 0xe9
 8007e64:	d009      	beq.n	8007e7a <check_fs+0x66>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e6c:	2beb      	cmp	r3, #235	; 0xeb
 8007e6e:	d11e      	bne.n	8007eae <check_fs+0x9a>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e76:	2b90      	cmp	r3, #144	; 0x90
 8007e78:	d119      	bne.n	8007eae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3338      	adds	r3, #56	; 0x38
 8007e7e:	3336      	adds	r3, #54	; 0x36
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fe f9b3 	bl	80061ec <ld_dword>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e8c:	4a0a      	ldr	r2, [pc, #40]	; (8007eb8 <check_fs+0xa4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d101      	bne.n	8007e96 <check_fs+0x82>
 8007e92:	2300      	movs	r3, #0
 8007e94:	e00c      	b.n	8007eb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3338      	adds	r3, #56	; 0x38
 8007e9a:	3352      	adds	r3, #82	; 0x52
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe f9a5 	bl	80061ec <ld_dword>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4a05      	ldr	r2, [pc, #20]	; (8007ebc <check_fs+0xa8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d101      	bne.n	8007eae <check_fs+0x9a>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e000      	b.n	8007eb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007eae:	2302      	movs	r3, #2
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	00544146 	.word	0x00544146
 8007ebc:	33544146 	.word	0x33544146

08007ec0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b096      	sub	sp, #88	; 0x58
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff ff59 	bl	8007d8c <get_ldnumber>
 8007eda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	da01      	bge.n	8007ee6 <find_volume+0x26>
 8007ee2:	230b      	movs	r3, #11
 8007ee4:	e268      	b.n	80083b8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007ee6:	4ab0      	ldr	r2, [pc, #704]	; (80081a8 <find_volume+0x2e8>)
 8007ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <find_volume+0x3a>
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	e25e      	b.n	80083b8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007efe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	f023 0301 	bic.w	r3, r3, #1
 8007f06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01a      	beq.n	8007f46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe f8b3 	bl	8006080 <disk_status>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10c      	bne.n	8007f46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <find_volume+0x82>
 8007f32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007f3e:	230a      	movs	r3, #10
 8007f40:	e23a      	b.n	80083b8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8007f42:	2300      	movs	r3, #0
 8007f44:	e238      	b.n	80083b8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f48:	2200      	movs	r2, #0
 8007f4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe f8ab 	bl	80060b4 <disk_initialize>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007f64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f70:	2303      	movs	r3, #3
 8007f72:	e221      	b.n	80083b8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <find_volume+0xca>
 8007f7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007f86:	230a      	movs	r3, #10
 8007f88:	e216      	b.n	80083b8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	7858      	ldrb	r0, [r3, #1]
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f90:	330c      	adds	r3, #12
 8007f92:	461a      	mov	r2, r3
 8007f94:	2102      	movs	r1, #2
 8007f96:	f7fe f8f3 	bl	8006180 <disk_ioctl>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <find_volume+0xe4>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e209      	b.n	80083b8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	899b      	ldrh	r3, [r3, #12]
 8007fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fac:	d80d      	bhi.n	8007fca <find_volume+0x10a>
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	899b      	ldrh	r3, [r3, #12]
 8007fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fb6:	d308      	bcc.n	8007fca <find_volume+0x10a>
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	899b      	ldrh	r3, [r3, #12]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	899b      	ldrh	r3, [r3, #12]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <find_volume+0x10e>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e1f4      	b.n	80083b8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007fd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fd6:	f7ff ff1d 	bl	8007e14 <check_fs>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d14b      	bne.n	8008080 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007fe8:	2300      	movs	r3, #0
 8007fea:	643b      	str	r3, [r7, #64]	; 0x40
 8007fec:	e01f      	b.n	800802e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007ffc:	4413      	add	r3, r2
 8007ffe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	3304      	adds	r3, #4
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d006      	beq.n	8008018 <find_volume+0x158>
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	3308      	adds	r3, #8
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe f8ec 	bl	80061ec <ld_dword>
 8008014:	4602      	mov	r2, r0
 8008016:	e000      	b.n	800801a <find_volume+0x15a>
 8008018:	2200      	movs	r2, #0
 800801a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008022:	440b      	add	r3, r1
 8008024:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800802a:	3301      	adds	r3, #1
 800802c:	643b      	str	r3, [r7, #64]	; 0x40
 800802e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008030:	2b03      	cmp	r3, #3
 8008032:	d9dc      	bls.n	8007fee <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008034:	2300      	movs	r3, #0
 8008036:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <find_volume+0x184>
 800803e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008040:	3b01      	subs	r3, #1
 8008042:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800804c:	4413      	add	r3, r2
 800804e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008052:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008056:	2b00      	cmp	r3, #0
 8008058:	d005      	beq.n	8008066 <find_volume+0x1a6>
 800805a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800805c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800805e:	f7ff fed9 	bl	8007e14 <check_fs>
 8008062:	4603      	mov	r3, r0
 8008064:	e000      	b.n	8008068 <find_volume+0x1a8>
 8008066:	2303      	movs	r3, #3
 8008068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800806c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008070:	2b01      	cmp	r3, #1
 8008072:	d905      	bls.n	8008080 <find_volume+0x1c0>
 8008074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008076:	3301      	adds	r3, #1
 8008078:	643b      	str	r3, [r7, #64]	; 0x40
 800807a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800807c:	2b03      	cmp	r3, #3
 800807e:	d9e1      	bls.n	8008044 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008084:	2b04      	cmp	r3, #4
 8008086:	d101      	bne.n	800808c <find_volume+0x1cc>
 8008088:	2301      	movs	r3, #1
 800808a:	e195      	b.n	80083b8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800808c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008090:	2b01      	cmp	r3, #1
 8008092:	d901      	bls.n	8008098 <find_volume+0x1d8>
 8008094:	230d      	movs	r3, #13
 8008096:	e18f      	b.n	80083b8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	3338      	adds	r3, #56	; 0x38
 800809c:	330b      	adds	r3, #11
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe f88c 	bl	80061bc <ld_word>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	899b      	ldrh	r3, [r3, #12]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d001      	beq.n	80080b4 <find_volume+0x1f4>
 80080b0:	230d      	movs	r3, #13
 80080b2:	e181      	b.n	80083b8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	3338      	adds	r3, #56	; 0x38
 80080b8:	3316      	adds	r3, #22
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe f87e 	bl	80061bc <ld_word>
 80080c0:	4603      	mov	r3, r0
 80080c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80080c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <find_volume+0x218>
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	3338      	adds	r3, #56	; 0x38
 80080ce:	3324      	adds	r3, #36	; 0x24
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe f88b 	bl	80061ec <ld_dword>
 80080d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080dc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80080e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	789b      	ldrb	r3, [r3, #2]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d005      	beq.n	80080fc <find_volume+0x23c>
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	789b      	ldrb	r3, [r3, #2]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d001      	beq.n	80080fc <find_volume+0x23c>
 80080f8:	230d      	movs	r3, #13
 80080fa:	e15d      	b.n	80083b8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80080fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fe:	789b      	ldrb	r3, [r3, #2]
 8008100:	461a      	mov	r2, r3
 8008102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008104:	fb02 f303 	mul.w	r3, r2, r3
 8008108:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008110:	b29a      	uxth	r2, r3
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008118:	895b      	ldrh	r3, [r3, #10]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d008      	beq.n	8008130 <find_volume+0x270>
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	895b      	ldrh	r3, [r3, #10]
 8008122:	461a      	mov	r2, r3
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	895b      	ldrh	r3, [r3, #10]
 8008128:	3b01      	subs	r3, #1
 800812a:	4013      	ands	r3, r2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <find_volume+0x274>
 8008130:	230d      	movs	r3, #13
 8008132:	e141      	b.n	80083b8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	3338      	adds	r3, #56	; 0x38
 8008138:	3311      	adds	r3, #17
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe f83e 	bl	80061bc <ld_word>
 8008140:	4603      	mov	r3, r0
 8008142:	461a      	mov	r2, r3
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814a:	891b      	ldrh	r3, [r3, #8]
 800814c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800814e:	8992      	ldrh	r2, [r2, #12]
 8008150:	0952      	lsrs	r2, r2, #5
 8008152:	b292      	uxth	r2, r2
 8008154:	fbb3 f1f2 	udiv	r1, r3, r2
 8008158:	fb02 f201 	mul.w	r2, r2, r1
 800815c:	1a9b      	subs	r3, r3, r2
 800815e:	b29b      	uxth	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <find_volume+0x2a8>
 8008164:	230d      	movs	r3, #13
 8008166:	e127      	b.n	80083b8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816a:	3338      	adds	r3, #56	; 0x38
 800816c:	3313      	adds	r3, #19
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe f824 	bl	80061bc <ld_word>
 8008174:	4603      	mov	r3, r0
 8008176:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800817a:	2b00      	cmp	r3, #0
 800817c:	d106      	bne.n	800818c <find_volume+0x2cc>
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	3338      	adds	r3, #56	; 0x38
 8008182:	3320      	adds	r3, #32
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe f831 	bl	80061ec <ld_dword>
 800818a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	3338      	adds	r3, #56	; 0x38
 8008190:	330e      	adds	r3, #14
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe f812 	bl	80061bc <ld_word>
 8008198:	4603      	mov	r3, r0
 800819a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800819c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <find_volume+0x2ec>
 80081a2:	230d      	movs	r3, #13
 80081a4:	e108      	b.n	80083b8 <find_volume+0x4f8>
 80081a6:	bf00      	nop
 80081a8:	20000224 	.word	0x20000224

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80081ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80081ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b0:	4413      	add	r3, r2
 80081b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081b4:	8911      	ldrh	r1, [r2, #8]
 80081b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081b8:	8992      	ldrh	r2, [r2, #12]
 80081ba:	0952      	lsrs	r2, r2, #5
 80081bc:	b292      	uxth	r2, r2
 80081be:	fbb1 f2f2 	udiv	r2, r1, r2
 80081c2:	b292      	uxth	r2, r2
 80081c4:	4413      	add	r3, r2
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80081c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d201      	bcs.n	80081d4 <find_volume+0x314>
 80081d0:	230d      	movs	r3, #13
 80081d2:	e0f1      	b.n	80083b8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80081d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081dc:	8952      	ldrh	r2, [r2, #10]
 80081de:	fbb3 f3f2 	udiv	r3, r3, r2
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <find_volume+0x32e>
 80081ea:	230d      	movs	r3, #13
 80081ec:	e0e4      	b.n	80083b8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80081ee:	2303      	movs	r3, #3
 80081f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d802      	bhi.n	8008204 <find_volume+0x344>
 80081fe:	2302      	movs	r3, #2
 8008200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	f640 72f5 	movw	r2, #4085	; 0xff5
 800820a:	4293      	cmp	r3, r2
 800820c:	d802      	bhi.n	8008214 <find_volume+0x354>
 800820e:	2301      	movs	r3, #1
 8008210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	1c9a      	adds	r2, r3, #2
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008220:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008222:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008226:	441a      	add	r2, r3
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800822c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	441a      	add	r2, r3
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008236:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800823a:	2b03      	cmp	r3, #3
 800823c:	d11e      	bne.n	800827c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	3338      	adds	r3, #56	; 0x38
 8008242:	332a      	adds	r3, #42	; 0x2a
 8008244:	4618      	mov	r0, r3
 8008246:	f7fd ffb9 	bl	80061bc <ld_word>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <find_volume+0x394>
 8008250:	230d      	movs	r3, #13
 8008252:	e0b1      	b.n	80083b8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	891b      	ldrh	r3, [r3, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <find_volume+0x3a0>
 800825c:	230d      	movs	r3, #13
 800825e:	e0ab      	b.n	80083b8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	3338      	adds	r3, #56	; 0x38
 8008264:	332c      	adds	r3, #44	; 0x2c
 8008266:	4618      	mov	r0, r3
 8008268:	f7fd ffc0 	bl	80061ec <ld_dword>
 800826c:	4602      	mov	r2, r0
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	647b      	str	r3, [r7, #68]	; 0x44
 800827a:	e01f      	b.n	80082bc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	891b      	ldrh	r3, [r3, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <find_volume+0x3c8>
 8008284:	230d      	movs	r3, #13
 8008286:	e097      	b.n	80083b8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800828c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828e:	441a      	add	r2, r3
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008298:	2b02      	cmp	r3, #2
 800829a:	d103      	bne.n	80082a4 <find_volume+0x3e4>
 800829c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	e00a      	b.n	80082ba <find_volume+0x3fa>
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	69da      	ldr	r2, [r3, #28]
 80082a8:	4613      	mov	r3, r2
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	4413      	add	r3, r2
 80082ae:	085a      	lsrs	r2, r3, #1
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80082ba:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	6a1a      	ldr	r2, [r3, #32]
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	899b      	ldrh	r3, [r3, #12]
 80082c4:	4619      	mov	r1, r3
 80082c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082c8:	440b      	add	r3, r1
 80082ca:	3b01      	subs	r3, #1
 80082cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082ce:	8989      	ldrh	r1, [r1, #12]
 80082d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d201      	bcs.n	80082dc <find_volume+0x41c>
 80082d8:	230d      	movs	r3, #13
 80082da:	e06d      	b.n	80083b8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	f04f 32ff 	mov.w	r2, #4294967295
 80082e2:	619a      	str	r2, [r3, #24]
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	2280      	movs	r2, #128	; 0x80
 80082f0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80082f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d149      	bne.n	800838e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	3338      	adds	r3, #56	; 0x38
 80082fe:	3330      	adds	r3, #48	; 0x30
 8008300:	4618      	mov	r0, r3
 8008302:	f7fd ff5b 	bl	80061bc <ld_word>
 8008306:	4603      	mov	r3, r0
 8008308:	2b01      	cmp	r3, #1
 800830a:	d140      	bne.n	800838e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800830c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800830e:	3301      	adds	r3, #1
 8008310:	4619      	mov	r1, r3
 8008312:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008314:	f7fe fa02 	bl	800671c <move_window>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d137      	bne.n	800838e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	2200      	movs	r2, #0
 8008322:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	3338      	adds	r3, #56	; 0x38
 8008328:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800832c:	4618      	mov	r0, r3
 800832e:	f7fd ff45 	bl	80061bc <ld_word>
 8008332:	4603      	mov	r3, r0
 8008334:	461a      	mov	r2, r3
 8008336:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800833a:	429a      	cmp	r2, r3
 800833c:	d127      	bne.n	800838e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	3338      	adds	r3, #56	; 0x38
 8008342:	4618      	mov	r0, r3
 8008344:	f7fd ff52 	bl	80061ec <ld_dword>
 8008348:	4603      	mov	r3, r0
 800834a:	4a1d      	ldr	r2, [pc, #116]	; (80083c0 <find_volume+0x500>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d11e      	bne.n	800838e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	3338      	adds	r3, #56	; 0x38
 8008354:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008358:	4618      	mov	r0, r3
 800835a:	f7fd ff47 	bl	80061ec <ld_dword>
 800835e:	4603      	mov	r3, r0
 8008360:	4a18      	ldr	r2, [pc, #96]	; (80083c4 <find_volume+0x504>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d113      	bne.n	800838e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	3338      	adds	r3, #56	; 0x38
 800836a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800836e:	4618      	mov	r0, r3
 8008370:	f7fd ff3c 	bl	80061ec <ld_dword>
 8008374:	4602      	mov	r2, r0
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	3338      	adds	r3, #56	; 0x38
 800837e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008382:	4618      	mov	r0, r3
 8008384:	f7fd ff32 	bl	80061ec <ld_dword>
 8008388:	4602      	mov	r2, r0
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008394:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008396:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <find_volume+0x508>)
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	3301      	adds	r3, #1
 800839c:	b29a      	uxth	r2, r3
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <find_volume+0x508>)
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	4b09      	ldr	r3, [pc, #36]	; (80083c8 <find_volume+0x508>)
 80083a4:	881a      	ldrh	r2, [r3, #0]
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	4a07      	ldr	r2, [pc, #28]	; (80083cc <find_volume+0x50c>)
 80083ae:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80083b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083b2:	f7fe f94b 	bl	800664c <clear_lock>
#endif
	return FR_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3758      	adds	r7, #88	; 0x58
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	41615252 	.word	0x41615252
 80083c4:	61417272 	.word	0x61417272
 80083c8:	20000228 	.word	0x20000228
 80083cc:	2000024c 	.word	0x2000024c

080083d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80083da:	2309      	movs	r3, #9
 80083dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01c      	beq.n	800841e <validate+0x4e>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d018      	beq.n	800841e <validate+0x4e>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d013      	beq.n	800841e <validate+0x4e>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	889a      	ldrh	r2, [r3, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	88db      	ldrh	r3, [r3, #6]
 8008400:	429a      	cmp	r2, r3
 8008402:	d10c      	bne.n	800841e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	785b      	ldrb	r3, [r3, #1]
 800840a:	4618      	mov	r0, r3
 800840c:	f7fd fe38 	bl	8006080 <disk_status>
 8008410:	4603      	mov	r3, r0
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <validate+0x4e>
			res = FR_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <validate+0x5a>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	e000      	b.n	800842c <validate+0x5c>
 800842a:	2300      	movs	r3, #0
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	6013      	str	r3, [r2, #0]
	return res;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800844e:	f107 0310 	add.w	r3, r7, #16
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fc9a 	bl	8007d8c <get_ldnumber>
 8008458:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	2b00      	cmp	r3, #0
 800845e:	da01      	bge.n	8008464 <f_mount+0x28>
 8008460:	230b      	movs	r3, #11
 8008462:	e02b      	b.n	80084bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008464:	4a17      	ldr	r2, [pc, #92]	; (80084c4 <f_mount+0x88>)
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800846c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008474:	69b8      	ldr	r0, [r7, #24]
 8008476:	f7fe f8e9 	bl	800664c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2200      	movs	r2, #0
 800847e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	490d      	ldr	r1, [pc, #52]	; (80084c4 <f_mount+0x88>)
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <f_mount+0x66>
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d001      	beq.n	80084a6 <f_mount+0x6a>
 80084a2:	2300      	movs	r3, #0
 80084a4:	e00a      	b.n	80084bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80084a6:	f107 010c 	add.w	r1, r7, #12
 80084aa:	f107 0308 	add.w	r3, r7, #8
 80084ae:	2200      	movs	r2, #0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fd05 	bl	8007ec0 <find_volume>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3720      	adds	r7, #32
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000224 	.word	0x20000224

080084c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b09a      	sub	sp, #104	; 0x68
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	4613      	mov	r3, r2
 80084d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <f_open+0x18>
 80084dc:	2309      	movs	r3, #9
 80084de:	e1bb      	b.n	8008858 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80084e8:	79fa      	ldrb	r2, [r7, #7]
 80084ea:	f107 0114 	add.w	r1, r7, #20
 80084ee:	f107 0308 	add.w	r3, r7, #8
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff fce4 	bl	8007ec0 <find_volume>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80084fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008502:	2b00      	cmp	r3, #0
 8008504:	f040 819f 	bne.w	8008846 <f_open+0x37e>
		dj.obj.fs = fs;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	f107 0318 	add.w	r3, r7, #24
 8008512:	4611      	mov	r1, r2
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fbc3 	bl	8007ca0 <follow_path>
 800851a:	4603      	mov	r3, r0
 800851c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008520:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008524:	2b00      	cmp	r3, #0
 8008526:	d11a      	bne.n	800855e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008528:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800852c:	b25b      	sxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	da03      	bge.n	800853a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008532:	2306      	movs	r3, #6
 8008534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008538:	e011      	b.n	800855e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	bf14      	ite	ne
 8008544:	2301      	movne	r3, #1
 8008546:	2300      	moveq	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	461a      	mov	r2, r3
 800854c:	f107 0318 	add.w	r3, r7, #24
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f7fd ff32 	bl	80063bc <chk_lock>
 8008558:	4603      	mov	r3, r0
 800855a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	f003 031c 	and.w	r3, r3, #28
 8008564:	2b00      	cmp	r3, #0
 8008566:	d07f      	beq.n	8008668 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008568:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800856c:	2b00      	cmp	r3, #0
 800856e:	d017      	beq.n	80085a0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008570:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008574:	2b04      	cmp	r3, #4
 8008576:	d10e      	bne.n	8008596 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008578:	f7fd ff7c 	bl	8006474 <enq_lock>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d006      	beq.n	8008590 <f_open+0xc8>
 8008582:	f107 0318 	add.w	r3, r7, #24
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff f8da 	bl	8007740 <dir_register>
 800858c:	4603      	mov	r3, r0
 800858e:	e000      	b.n	8008592 <f_open+0xca>
 8008590:	2312      	movs	r3, #18
 8008592:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	f043 0308 	orr.w	r3, r3, #8
 800859c:	71fb      	strb	r3, [r7, #7]
 800859e:	e010      	b.n	80085c2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80085a0:	7fbb      	ldrb	r3, [r7, #30]
 80085a2:	f003 0311 	and.w	r3, r3, #17
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <f_open+0xea>
					res = FR_DENIED;
 80085aa:	2307      	movs	r3, #7
 80085ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80085b0:	e007      	b.n	80085c2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <f_open+0xfa>
 80085bc:	2308      	movs	r3, #8
 80085be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80085c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d168      	bne.n	800869c <f_open+0x1d4>
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	f003 0308 	and.w	r3, r3, #8
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d063      	beq.n	800869c <f_open+0x1d4>
				dw = GET_FATTIME();
 80085d4:	f7fd fcf6 	bl	8005fc4 <get_fattime>
 80085d8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	330e      	adds	r3, #14
 80085de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fd fe41 	bl	8006268 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	3316      	adds	r3, #22
 80085ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fd fe3b 	bl	8006268 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	330b      	adds	r3, #11
 80085f6:	2220      	movs	r2, #32
 80085f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085fe:	4611      	mov	r1, r2
 8008600:	4618      	mov	r0, r3
 8008602:	f7fe fe13 	bl	800722c <ld_clust>
 8008606:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800860c:	2200      	movs	r2, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fe2b 	bl	800726a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	331c      	adds	r3, #28
 8008618:	2100      	movs	r1, #0
 800861a:	4618      	mov	r0, r3
 800861c:	f7fd fe24 	bl	8006268 <st_dword>
					fs->wflag = 1;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2201      	movs	r2, #1
 8008624:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008628:	2b00      	cmp	r3, #0
 800862a:	d037      	beq.n	800869c <f_open+0x1d4>
						dw = fs->winsect;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008630:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008632:	f107 0318 	add.w	r3, r7, #24
 8008636:	2200      	movs	r2, #0
 8008638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fb1b 	bl	8006c76 <remove_chain>
 8008640:	4603      	mov	r3, r0
 8008642:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008646:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800864a:	2b00      	cmp	r3, #0
 800864c:	d126      	bne.n	800869c <f_open+0x1d4>
							res = move_window(fs, dw);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe f862 	bl	800671c <move_window>
 8008658:	4603      	mov	r3, r0
 800865a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008662:	3a01      	subs	r2, #1
 8008664:	615a      	str	r2, [r3, #20]
 8008666:	e019      	b.n	800869c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008668:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800866c:	2b00      	cmp	r3, #0
 800866e:	d115      	bne.n	800869c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008670:	7fbb      	ldrb	r3, [r7, #30]
 8008672:	f003 0310 	and.w	r3, r3, #16
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <f_open+0x1ba>
					res = FR_NO_FILE;
 800867a:	2304      	movs	r3, #4
 800867c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008680:	e00c      	b.n	800869c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	f003 0302 	and.w	r3, r3, #2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d007      	beq.n	800869c <f_open+0x1d4>
 800868c:	7fbb      	ldrb	r3, [r7, #30]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d002      	beq.n	800869c <f_open+0x1d4>
						res = FR_DENIED;
 8008696:	2307      	movs	r3, #7
 8008698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800869c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d128      	bne.n	80086f6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	f003 0308 	and.w	r3, r3, #8
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80086be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	f023 0301 	bic.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bf14      	ite	ne
 80086ce:	2301      	movne	r3, #1
 80086d0:	2300      	moveq	r3, #0
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	f107 0318 	add.w	r3, r7, #24
 80086da:	4611      	mov	r1, r2
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fd feeb 	bl	80064b8 <inc_lock>
 80086e2:	4602      	mov	r2, r0
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <f_open+0x22e>
 80086f0:	2302      	movs	r3, #2
 80086f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80086f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f040 80a3 	bne.w	8008846 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fd90 	bl	800722c <ld_clust>
 800870c:	4602      	mov	r2, r0
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008714:	331c      	adds	r3, #28
 8008716:	4618      	mov	r0, r3
 8008718:	f7fd fd68 	bl	80061ec <ld_dword>
 800871c:	4602      	mov	r2, r0
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	88da      	ldrh	r2, [r3, #6]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	79fa      	ldrb	r2, [r7, #7]
 800873a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3330      	adds	r3, #48	; 0x30
 8008752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008756:	2100      	movs	r1, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f7fd fdd2 	bl	8006302 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d06e      	beq.n	8008846 <f_open+0x37e>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d06a      	beq.n	8008846 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	895b      	ldrh	r3, [r3, #10]
 800877c:	461a      	mov	r2, r3
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	899b      	ldrh	r3, [r3, #12]
 8008782:	fb03 f302 	mul.w	r3, r3, r2
 8008786:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008794:	e016      	b.n	80087c4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe f87b 	bl	8006896 <get_fat>
 80087a0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80087a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d802      	bhi.n	80087ae <f_open+0x2e6>
 80087a8:	2302      	movs	r3, #2
 80087aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80087ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b4:	d102      	bne.n	80087bc <f_open+0x2f4>
 80087b6:	2301      	movs	r3, #1
 80087b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d103      	bne.n	80087d4 <f_open+0x30c>
 80087cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d8e0      	bhi.n	8008796 <f_open+0x2ce>
				}
				fp->clust = clst;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80087da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d131      	bne.n	8008846 <f_open+0x37e>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	899b      	ldrh	r3, [r3, #12]
 80087e6:	461a      	mov	r2, r3
 80087e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80087ee:	fb02 f201 	mul.w	r2, r2, r1
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d026      	beq.n	8008846 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fe f82b 	bl	8006858 <clust2sect>
 8008802:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d103      	bne.n	8008812 <f_open+0x34a>
						res = FR_INT_ERR;
 800880a:	2302      	movs	r3, #2
 800880c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008810:	e019      	b.n	8008846 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	899b      	ldrh	r3, [r3, #12]
 8008816:	461a      	mov	r2, r3
 8008818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800881a:	fbb3 f2f2 	udiv	r2, r3, r2
 800881e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008820:	441a      	add	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	7858      	ldrb	r0, [r3, #1]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a1a      	ldr	r2, [r3, #32]
 8008834:	2301      	movs	r3, #1
 8008836:	f7fd fc63 	bl	8006100 <disk_read>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <f_open+0x37e>
 8008840:	2301      	movs	r3, #1
 8008842:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008846:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <f_open+0x38c>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008854:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008858:	4618      	mov	r0, r3
 800885a:	3768      	adds	r7, #104	; 0x68
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08c      	sub	sp, #48	; 0x30
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
 800886c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f107 0210 	add.w	r2, r7, #16
 800887e:	4611      	mov	r1, r2
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fda5 	bl	80083d0 <validate>
 8008886:	4603      	mov	r3, r0
 8008888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800888c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008890:	2b00      	cmp	r3, #0
 8008892:	d107      	bne.n	80088a4 <f_write+0x44>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	7d5b      	ldrb	r3, [r3, #21]
 8008898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800889c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <f_write+0x4a>
 80088a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088a8:	e16a      	b.n	8008b80 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	7d1b      	ldrb	r3, [r3, #20]
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <f_write+0x5a>
 80088b6:	2307      	movs	r3, #7
 80088b8:	e162      	b.n	8008b80 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	441a      	add	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	f080 814c 	bcs.w	8008b64 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	43db      	mvns	r3, r3
 80088d2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80088d4:	e146      	b.n	8008b64 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	8992      	ldrh	r2, [r2, #12]
 80088de:	fbb3 f1f2 	udiv	r1, r3, r2
 80088e2:	fb02 f201 	mul.w	r2, r2, r1
 80088e6:	1a9b      	subs	r3, r3, r2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f040 80f1 	bne.w	8008ad0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	8992      	ldrh	r2, [r2, #12]
 80088f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	8952      	ldrh	r2, [r2, #10]
 80088fe:	3a01      	subs	r2, #1
 8008900:	4013      	ands	r3, r2
 8008902:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d143      	bne.n	8008992 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10c      	bne.n	800892c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	2b00      	cmp	r3, #0
 800891c:	d11a      	bne.n	8008954 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2100      	movs	r1, #0
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fa0c 	bl	8006d40 <create_chain>
 8008928:	62b8      	str	r0, [r7, #40]	; 0x28
 800892a:	e013      	b.n	8008954 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d007      	beq.n	8008944 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	4619      	mov	r1, r3
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7fe fa98 	bl	8006e70 <clmt_clust>
 8008940:	62b8      	str	r0, [r7, #40]	; 0x28
 8008942:	e007      	b.n	8008954 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	4619      	mov	r1, r3
 800894c:	4610      	mov	r0, r2
 800894e:	f7fe f9f7 	bl	8006d40 <create_chain>
 8008952:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 8109 	beq.w	8008b6e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	2b01      	cmp	r3, #1
 8008960:	d104      	bne.n	800896c <f_write+0x10c>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2202      	movs	r2, #2
 8008966:	755a      	strb	r2, [r3, #21]
 8008968:	2302      	movs	r3, #2
 800896a:	e109      	b.n	8008b80 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008972:	d104      	bne.n	800897e <f_write+0x11e>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	755a      	strb	r2, [r3, #21]
 800897a:	2301      	movs	r3, #1
 800897c:	e100      	b.n	8008b80 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008982:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d102      	bne.n	8008992 <f_write+0x132>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008990:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	7d1b      	ldrb	r3, [r3, #20]
 8008996:	b25b      	sxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	da18      	bge.n	80089ce <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	7858      	ldrb	r0, [r3, #1]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a1a      	ldr	r2, [r3, #32]
 80089aa:	2301      	movs	r3, #1
 80089ac:	f7fd fbc8 	bl	8006140 <disk_write>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d004      	beq.n	80089c0 <f_write+0x160>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2201      	movs	r2, #1
 80089ba:	755a      	strb	r2, [r3, #21]
 80089bc:	2301      	movs	r3, #1
 80089be:	e0df      	b.n	8008b80 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	7d1b      	ldrb	r3, [r3, #20]
 80089c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	4619      	mov	r1, r3
 80089d6:	4610      	mov	r0, r2
 80089d8:	f7fd ff3e 	bl	8006858 <clust2sect>
 80089dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <f_write+0x18e>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2202      	movs	r2, #2
 80089e8:	755a      	strb	r2, [r3, #21]
 80089ea:	2302      	movs	r3, #2
 80089ec:	e0c8      	b.n	8008b80 <f_write+0x320>
			sect += csect;
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	4413      	add	r3, r2
 80089f4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	899b      	ldrh	r3, [r3, #12]
 80089fa:	461a      	mov	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a02:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d043      	beq.n	8008a92 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	4413      	add	r3, r2
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	8952      	ldrh	r2, [r2, #10]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d905      	bls.n	8008a24 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	895b      	ldrh	r3, [r3, #10]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	7858      	ldrb	r0, [r3, #1]
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	69f9      	ldr	r1, [r7, #28]
 8008a2e:	f7fd fb87 	bl	8006140 <disk_write>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d004      	beq.n	8008a42 <f_write+0x1e2>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	755a      	strb	r2, [r3, #21]
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e09e      	b.n	8008b80 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6a1a      	ldr	r2, [r3, #32]
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	6a3a      	ldr	r2, [r7, #32]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d918      	bls.n	8008a82 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6a1a      	ldr	r2, [r3, #32]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	8992      	ldrh	r2, [r2, #12]
 8008a62:	fb02 f303 	mul.w	r3, r2, r3
 8008a66:	69fa      	ldr	r2, [r7, #28]
 8008a68:	18d1      	adds	r1, r2, r3
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	899b      	ldrh	r3, [r3, #12]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f7fd fc26 	bl	80062c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	7d1b      	ldrb	r3, [r3, #20]
 8008a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	899b      	ldrh	r3, [r3, #12]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	fb02 f303 	mul.w	r3, r2, r3
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008a90:	e04b      	b.n	8008b2a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d016      	beq.n	8008aca <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	699a      	ldr	r2, [r3, #24]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d210      	bcs.n	8008aca <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	7858      	ldrb	r0, [r3, #1]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	f7fd fb23 	bl	8006100 <disk_read>
 8008aba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	755a      	strb	r2, [r3, #21]
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e05a      	b.n	8008b80 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	899b      	ldrh	r3, [r3, #12]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	8992      	ldrh	r2, [r2, #12]
 8008ade:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ae2:	fb02 f201 	mul.w	r2, r2, r1
 8008ae6:	1a9b      	subs	r3, r3, r2
 8008ae8:	1ac3      	subs	r3, r0, r3
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d901      	bls.n	8008af8 <f_write+0x298>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	8992      	ldrh	r2, [r2, #12]
 8008b06:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b0a:	fb02 f200 	mul.w	r2, r2, r0
 8008b0e:	1a9b      	subs	r3, r3, r2
 8008b10:	440b      	add	r3, r1
 8008b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b14:	69f9      	ldr	r1, [r7, #28]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fd fbd2 	bl	80062c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	7d1b      	ldrb	r3, [r3, #20]
 8008b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b2a:	69fa      	ldr	r2, [r7, #28]
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	4413      	add	r3, r2
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	699a      	ldr	r2, [r3, #24]
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	441a      	add	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	619a      	str	r2, [r3, #24]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	bf38      	it	cc
 8008b4a:	461a      	movcc	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	60da      	str	r2, [r3, #12]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	441a      	add	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f47f aeb5 	bne.w	80088d6 <f_write+0x76>
 8008b6c:	e000      	b.n	8008b70 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b6e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	7d1b      	ldrb	r3, [r3, #20]
 8008b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3730      	adds	r7, #48	; 0x30
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f107 0208 	add.w	r2, r7, #8
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff fc19 	bl	80083d0 <validate>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d168      	bne.n	8008c7a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7d1b      	ldrb	r3, [r3, #20]
 8008bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d062      	beq.n	8008c7a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	7d1b      	ldrb	r3, [r3, #20]
 8008bb8:	b25b      	sxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	da15      	bge.n	8008bea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	7858      	ldrb	r0, [r3, #1]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a1a      	ldr	r2, [r3, #32]
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f7fd fab7 	bl	8006140 <disk_write>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <f_sync+0x54>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e04f      	b.n	8008c7c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7d1b      	ldrb	r3, [r3, #20]
 8008be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008bea:	f7fd f9eb 	bl	8005fc4 <get_fattime>
 8008bee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f7fd fd8f 	bl	800671c <move_window>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d138      	bne.n	8008c7a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	330b      	adds	r3, #11
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	330b      	adds	r3, #11
 8008c18:	f042 0220 	orr.w	r2, r2, #32
 8008c1c:	b2d2      	uxtb	r2, r2
 8008c1e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6818      	ldr	r0, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	f7fe fb1d 	bl	800726a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f103 021c 	add.w	r2, r3, #28
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	f7fd fb13 	bl	8006268 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3316      	adds	r3, #22
 8008c46:	6939      	ldr	r1, [r7, #16]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fd fb0d 	bl	8006268 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3312      	adds	r3, #18
 8008c52:	2100      	movs	r1, #0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fd faec 	bl	8006232 <st_word>
					fs->wflag = 1;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fd fd88 	bl	8006778 <sync_fs>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	7d1b      	ldrb	r3, [r3, #20]
 8008c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff ff7b 	bl	8008b88 <f_sync>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d118      	bne.n	8008cce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f107 0208 	add.w	r2, r7, #8
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff fb93 	bl	80083d0 <validate>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10c      	bne.n	8008cce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fd fc8b 	bl	80065d4 <dec_lock>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b092      	sub	sp, #72	; 0x48
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008ce4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008ce8:	f107 030c 	add.w	r3, r7, #12
 8008cec:	2200      	movs	r2, #0
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff f8e6 	bl	8007ec0 <find_volume>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008cfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f040 8099 	bne.w	8008e36 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	699a      	ldr	r2, [r3, #24]
 8008d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	3b02      	subs	r3, #2
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d804      	bhi.n	8008d22 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	699a      	ldr	r2, [r3, #24]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e089      	b.n	8008e36 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d128      	bne.n	8008d80 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008d2e:	2302      	movs	r3, #2
 8008d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008d36:	f107 0314 	add.w	r3, r7, #20
 8008d3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fd fdaa 	bl	8006896 <get_fat>
 8008d42:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4a:	d103      	bne.n	8008d54 <f_getfree+0x7c>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d52:	e063      	b.n	8008e1c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d103      	bne.n	8008d62 <f_getfree+0x8a>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d60:	e05c      	b.n	8008e1c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <f_getfree+0x96>
 8008d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d70:	3301      	adds	r3, #1
 8008d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	69db      	ldr	r3, [r3, #28]
 8008d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d3db      	bcc.n	8008d36 <f_getfree+0x5e>
 8008d7e:	e04d      	b.n	8008e1c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d90:	2300      	movs	r3, #0
 8008d92:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d113      	bne.n	8008dc2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	63ba      	str	r2, [r7, #56]	; 0x38
 8008da2:	4619      	mov	r1, r3
 8008da4:	f7fd fcba 	bl	800671c <move_window>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008dae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d131      	bne.n	8008e1a <f_getfree+0x142>
							p = fs->win;
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	3338      	adds	r3, #56	; 0x38
 8008dba:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	899b      	ldrh	r3, [r3, #12]
 8008dc0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d10f      	bne.n	8008dea <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dcc:	f7fd f9f6 	bl	80061bc <ld_word>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d102      	bne.n	8008ddc <f_getfree+0x104>
 8008dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd8:	3301      	adds	r3, #1
 8008dda:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	3302      	adds	r3, #2
 8008de0:	633b      	str	r3, [r7, #48]	; 0x30
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	3b02      	subs	r3, #2
 8008de6:	637b      	str	r3, [r7, #52]	; 0x34
 8008de8:	e010      	b.n	8008e0c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dec:	f7fd f9fe 	bl	80061ec <ld_dword>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d102      	bne.n	8008e00 <f_getfree+0x128>
 8008dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	3304      	adds	r3, #4
 8008e04:	633b      	str	r3, [r7, #48]	; 0x30
 8008e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e08:	3b04      	subs	r3, #4
 8008e0a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1bd      	bne.n	8008d94 <f_getfree+0xbc>
 8008e18:	e000      	b.n	8008e1c <f_getfree+0x144>
							if (res != FR_OK) break;
 8008e1a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e20:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e26:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	791a      	ldrb	r2, [r3, #4]
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	f042 0201 	orr.w	r2, r2, #1
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008e36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3748      	adds	r7, #72	; 0x48
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008e4e:	78fb      	ldrb	r3, [r7, #3]
 8008e50:	2b0a      	cmp	r3, #10
 8008e52:	d103      	bne.n	8008e5c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008e54:	210d      	movs	r1, #13
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7ff fff3 	bl	8008e42 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	db25      	blt.n	8008eb4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	60fa      	str	r2, [r7, #12]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	4413      	add	r3, r2
 8008e72:	78fa      	ldrb	r2, [r7, #3]
 8008e74:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b3c      	cmp	r3, #60	; 0x3c
 8008e7a:	dd12      	ble.n	8008ea2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6818      	ldr	r0, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f103 010c 	add.w	r1, r3, #12
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	f107 0308 	add.w	r3, r7, #8
 8008e8c:	f7ff fce8 	bl	8008860 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d101      	bne.n	8008e9c <putc_bfd+0x5a>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e001      	b.n	8008ea0 <putc_bfd+0x5e>
 8008e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	609a      	str	r2, [r3, #8]
 8008eb2:	e000      	b.n	8008eb6 <putc_bfd+0x74>
	if (i < 0) return;
 8008eb4:	bf00      	nop
}
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	db16      	blt.n	8008efa <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f103 010c 	add.w	r1, r3, #12
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	461a      	mov	r2, r3
 8008edc:	f107 030c 	add.w	r3, r7, #12
 8008ee0:	f7ff fcbe 	bl	8008860 <f_write>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d107      	bne.n	8008efa <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d102      	bne.n	8008efa <putc_flush+0x3e>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	e001      	b.n	8008efe <putc_flush+0x42>
	return EOF;
 8008efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	605a      	str	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	609a      	str	r2, [r3, #8]
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b096      	sub	sp, #88	; 0x58
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008f3a:	f107 030c 	add.w	r3, r7, #12
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff ffe0 	bl	8008f06 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008f46:	e009      	b.n	8008f5c <f_puts+0x2c>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	607a      	str	r2, [r7, #4]
 8008f4e:	781a      	ldrb	r2, [r3, #0]
 8008f50:	f107 030c 	add.w	r3, r7, #12
 8008f54:	4611      	mov	r1, r2
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff ff73 	bl	8008e42 <putc_bfd>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1f1      	bne.n	8008f48 <f_puts+0x18>
	return putc_flush(&pb);
 8008f64:	f107 030c 	add.w	r3, r7, #12
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff ffa7 	bl	8008ebc <putc_flush>
 8008f6e:	4603      	mov	r3, r0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3758      	adds	r7, #88	; 0x58
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b087      	sub	sp, #28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	4613      	mov	r3, r2
 8008f84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008f86:	2301      	movs	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008f8e:	4b1f      	ldr	r3, [pc, #124]	; (800900c <FATFS_LinkDriverEx+0x94>)
 8008f90:	7a5b      	ldrb	r3, [r3, #9]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d131      	bne.n	8008ffc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008f98:	4b1c      	ldr	r3, [pc, #112]	; (800900c <FATFS_LinkDriverEx+0x94>)
 8008f9a:	7a5b      	ldrb	r3, [r3, #9]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	4b1a      	ldr	r3, [pc, #104]	; (800900c <FATFS_LinkDriverEx+0x94>)
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008fa6:	4b19      	ldr	r3, [pc, #100]	; (800900c <FATFS_LinkDriverEx+0x94>)
 8008fa8:	7a5b      	ldrb	r3, [r3, #9]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	4a17      	ldr	r2, [pc, #92]	; (800900c <FATFS_LinkDriverEx+0x94>)
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008fb6:	4b15      	ldr	r3, [pc, #84]	; (800900c <FATFS_LinkDriverEx+0x94>)
 8008fb8:	7a5b      	ldrb	r3, [r3, #9]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	4b13      	ldr	r3, [pc, #76]	; (800900c <FATFS_LinkDriverEx+0x94>)
 8008fc0:	4413      	add	r3, r2
 8008fc2:	79fa      	ldrb	r2, [r7, #7]
 8008fc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008fc6:	4b11      	ldr	r3, [pc, #68]	; (800900c <FATFS_LinkDriverEx+0x94>)
 8008fc8:	7a5b      	ldrb	r3, [r3, #9]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	b2d1      	uxtb	r1, r2
 8008fd0:	4a0e      	ldr	r2, [pc, #56]	; (800900c <FATFS_LinkDriverEx+0x94>)
 8008fd2:	7251      	strb	r1, [r2, #9]
 8008fd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008fd6:	7dbb      	ldrb	r3, [r7, #22]
 8008fd8:	3330      	adds	r3, #48	; 0x30
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	223a      	movs	r2, #58	; 0x3a
 8008fe6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	3302      	adds	r3, #2
 8008fec:	222f      	movs	r2, #47	; 0x2f
 8008fee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	3303      	adds	r3, #3
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	2000044c 	.word	0x2000044c

08009010 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800901a:	2200      	movs	r2, #0
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff ffaa 	bl	8008f78 <FATFS_LinkDriverEx>
 8009024:	4603      	mov	r3, r0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	6039      	str	r1, [r7, #0]
 800903a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800903c:	88fb      	ldrh	r3, [r7, #6]
 800903e:	2b7f      	cmp	r3, #127	; 0x7f
 8009040:	d802      	bhi.n	8009048 <ff_convert+0x18>
		c = chr;
 8009042:	88fb      	ldrh	r3, [r7, #6]
 8009044:	81fb      	strh	r3, [r7, #14]
 8009046:	e025      	b.n	8009094 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00b      	beq.n	8009066 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800904e:	88fb      	ldrh	r3, [r7, #6]
 8009050:	2bff      	cmp	r3, #255	; 0xff
 8009052:	d805      	bhi.n	8009060 <ff_convert+0x30>
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	3b80      	subs	r3, #128	; 0x80
 8009058:	4a12      	ldr	r2, [pc, #72]	; (80090a4 <ff_convert+0x74>)
 800905a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905e:	e000      	b.n	8009062 <ff_convert+0x32>
 8009060:	2300      	movs	r3, #0
 8009062:	81fb      	strh	r3, [r7, #14]
 8009064:	e016      	b.n	8009094 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009066:	2300      	movs	r3, #0
 8009068:	81fb      	strh	r3, [r7, #14]
 800906a:	e009      	b.n	8009080 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800906c:	89fb      	ldrh	r3, [r7, #14]
 800906e:	4a0d      	ldr	r2, [pc, #52]	; (80090a4 <ff_convert+0x74>)
 8009070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009074:	88fa      	ldrh	r2, [r7, #6]
 8009076:	429a      	cmp	r2, r3
 8009078:	d006      	beq.n	8009088 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800907a:	89fb      	ldrh	r3, [r7, #14]
 800907c:	3301      	adds	r3, #1
 800907e:	81fb      	strh	r3, [r7, #14]
 8009080:	89fb      	ldrh	r3, [r7, #14]
 8009082:	2b7f      	cmp	r3, #127	; 0x7f
 8009084:	d9f2      	bls.n	800906c <ff_convert+0x3c>
 8009086:	e000      	b.n	800908a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009088:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800908a:	89fb      	ldrh	r3, [r7, #14]
 800908c:	3380      	adds	r3, #128	; 0x80
 800908e:	b29b      	uxth	r3, r3
 8009090:	b2db      	uxtb	r3, r3
 8009092:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009094:	89fb      	ldrh	r3, [r7, #14]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	0800c364 	.word	0x0800c364

080090a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80090b2:	88fb      	ldrh	r3, [r7, #6]
 80090b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b8:	d201      	bcs.n	80090be <ff_wtoupper+0x16>
 80090ba:	4b3e      	ldr	r3, [pc, #248]	; (80091b4 <ff_wtoupper+0x10c>)
 80090bc:	e000      	b.n	80090c0 <ff_wtoupper+0x18>
 80090be:	4b3e      	ldr	r3, [pc, #248]	; (80091b8 <ff_wtoupper+0x110>)
 80090c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	1c9a      	adds	r2, r3, #2
 80090c6:	617a      	str	r2, [r7, #20]
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80090cc:	8a7b      	ldrh	r3, [r7, #18]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d068      	beq.n	80091a4 <ff_wtoupper+0xfc>
 80090d2:	88fa      	ldrh	r2, [r7, #6]
 80090d4:	8a7b      	ldrh	r3, [r7, #18]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d364      	bcc.n	80091a4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	1c9a      	adds	r2, r3, #2
 80090de:	617a      	str	r2, [r7, #20]
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	823b      	strh	r3, [r7, #16]
 80090e4:	8a3b      	ldrh	r3, [r7, #16]
 80090e6:	0a1b      	lsrs	r3, r3, #8
 80090e8:	81fb      	strh	r3, [r7, #14]
 80090ea:	8a3b      	ldrh	r3, [r7, #16]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80090f0:	88fa      	ldrh	r2, [r7, #6]
 80090f2:	8a79      	ldrh	r1, [r7, #18]
 80090f4:	8a3b      	ldrh	r3, [r7, #16]
 80090f6:	440b      	add	r3, r1
 80090f8:	429a      	cmp	r2, r3
 80090fa:	da49      	bge.n	8009190 <ff_wtoupper+0xe8>
			switch (cmd) {
 80090fc:	89fb      	ldrh	r3, [r7, #14]
 80090fe:	2b08      	cmp	r3, #8
 8009100:	d84f      	bhi.n	80091a2 <ff_wtoupper+0xfa>
 8009102:	a201      	add	r2, pc, #4	; (adr r2, 8009108 <ff_wtoupper+0x60>)
 8009104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009108:	0800912d 	.word	0x0800912d
 800910c:	0800913f 	.word	0x0800913f
 8009110:	08009155 	.word	0x08009155
 8009114:	0800915d 	.word	0x0800915d
 8009118:	08009165 	.word	0x08009165
 800911c:	0800916d 	.word	0x0800916d
 8009120:	08009175 	.word	0x08009175
 8009124:	0800917d 	.word	0x0800917d
 8009128:	08009185 	.word	0x08009185
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800912c:	88fa      	ldrh	r2, [r7, #6]
 800912e:	8a7b      	ldrh	r3, [r7, #18]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4413      	add	r3, r2
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	80fb      	strh	r3, [r7, #6]
 800913c:	e027      	b.n	800918e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800913e:	88fa      	ldrh	r2, [r7, #6]
 8009140:	8a7b      	ldrh	r3, [r7, #18]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	b29b      	uxth	r3, r3
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	b29b      	uxth	r3, r3
 800914c:	88fa      	ldrh	r2, [r7, #6]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	80fb      	strh	r3, [r7, #6]
 8009152:	e01c      	b.n	800918e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	3b10      	subs	r3, #16
 8009158:	80fb      	strh	r3, [r7, #6]
 800915a:	e018      	b.n	800918e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800915c:	88fb      	ldrh	r3, [r7, #6]
 800915e:	3b20      	subs	r3, #32
 8009160:	80fb      	strh	r3, [r7, #6]
 8009162:	e014      	b.n	800918e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009164:	88fb      	ldrh	r3, [r7, #6]
 8009166:	3b30      	subs	r3, #48	; 0x30
 8009168:	80fb      	strh	r3, [r7, #6]
 800916a:	e010      	b.n	800918e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800916c:	88fb      	ldrh	r3, [r7, #6]
 800916e:	3b1a      	subs	r3, #26
 8009170:	80fb      	strh	r3, [r7, #6]
 8009172:	e00c      	b.n	800918e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	3308      	adds	r3, #8
 8009178:	80fb      	strh	r3, [r7, #6]
 800917a:	e008      	b.n	800918e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800917c:	88fb      	ldrh	r3, [r7, #6]
 800917e:	3b50      	subs	r3, #80	; 0x50
 8009180:	80fb      	strh	r3, [r7, #6]
 8009182:	e004      	b.n	800918e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009184:	88fb      	ldrh	r3, [r7, #6]
 8009186:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800918a:	80fb      	strh	r3, [r7, #6]
 800918c:	bf00      	nop
			}
			break;
 800918e:	e008      	b.n	80091a2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009190:	89fb      	ldrh	r3, [r7, #14]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d195      	bne.n	80090c2 <ff_wtoupper+0x1a>
 8009196:	8a3b      	ldrh	r3, [r7, #16]
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	4413      	add	r3, r2
 800919e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80091a0:	e78f      	b.n	80090c2 <ff_wtoupper+0x1a>
			break;
 80091a2:	bf00      	nop
	}

	return chr;
 80091a4:	88fb      	ldrh	r3, [r7, #6]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	0800c464 	.word	0x0800c464
 80091b8:	0800c658 	.word	0x0800c658

080091bc <__errno>:
 80091bc:	4b01      	ldr	r3, [pc, #4]	; (80091c4 <__errno+0x8>)
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20000024 	.word	0x20000024

080091c8 <__libc_init_array>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	4d0d      	ldr	r5, [pc, #52]	; (8009200 <__libc_init_array+0x38>)
 80091cc:	4c0d      	ldr	r4, [pc, #52]	; (8009204 <__libc_init_array+0x3c>)
 80091ce:	1b64      	subs	r4, r4, r5
 80091d0:	10a4      	asrs	r4, r4, #2
 80091d2:	2600      	movs	r6, #0
 80091d4:	42a6      	cmp	r6, r4
 80091d6:	d109      	bne.n	80091ec <__libc_init_array+0x24>
 80091d8:	4d0b      	ldr	r5, [pc, #44]	; (8009208 <__libc_init_array+0x40>)
 80091da:	4c0c      	ldr	r4, [pc, #48]	; (800920c <__libc_init_array+0x44>)
 80091dc:	f002 fddc 	bl	800bd98 <_init>
 80091e0:	1b64      	subs	r4, r4, r5
 80091e2:	10a4      	asrs	r4, r4, #2
 80091e4:	2600      	movs	r6, #0
 80091e6:	42a6      	cmp	r6, r4
 80091e8:	d105      	bne.n	80091f6 <__libc_init_array+0x2e>
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f0:	4798      	blx	r3
 80091f2:	3601      	adds	r6, #1
 80091f4:	e7ee      	b.n	80091d4 <__libc_init_array+0xc>
 80091f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fa:	4798      	blx	r3
 80091fc:	3601      	adds	r6, #1
 80091fe:	e7f2      	b.n	80091e6 <__libc_init_array+0x1e>
 8009200:	0800cafc 	.word	0x0800cafc
 8009204:	0800cafc 	.word	0x0800cafc
 8009208:	0800cafc 	.word	0x0800cafc
 800920c:	0800cb00 	.word	0x0800cb00

08009210 <memcpy>:
 8009210:	440a      	add	r2, r1
 8009212:	4291      	cmp	r1, r2
 8009214:	f100 33ff 	add.w	r3, r0, #4294967295
 8009218:	d100      	bne.n	800921c <memcpy+0xc>
 800921a:	4770      	bx	lr
 800921c:	b510      	push	{r4, lr}
 800921e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009226:	4291      	cmp	r1, r2
 8009228:	d1f9      	bne.n	800921e <memcpy+0xe>
 800922a:	bd10      	pop	{r4, pc}

0800922c <memset>:
 800922c:	4402      	add	r2, r0
 800922e:	4603      	mov	r3, r0
 8009230:	4293      	cmp	r3, r2
 8009232:	d100      	bne.n	8009236 <memset+0xa>
 8009234:	4770      	bx	lr
 8009236:	f803 1b01 	strb.w	r1, [r3], #1
 800923a:	e7f9      	b.n	8009230 <memset+0x4>

0800923c <__cvt>:
 800923c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009240:	ec55 4b10 	vmov	r4, r5, d0
 8009244:	2d00      	cmp	r5, #0
 8009246:	460e      	mov	r6, r1
 8009248:	4619      	mov	r1, r3
 800924a:	462b      	mov	r3, r5
 800924c:	bfbb      	ittet	lt
 800924e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009252:	461d      	movlt	r5, r3
 8009254:	2300      	movge	r3, #0
 8009256:	232d      	movlt	r3, #45	; 0x2d
 8009258:	700b      	strb	r3, [r1, #0]
 800925a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800925c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009260:	4691      	mov	r9, r2
 8009262:	f023 0820 	bic.w	r8, r3, #32
 8009266:	bfbc      	itt	lt
 8009268:	4622      	movlt	r2, r4
 800926a:	4614      	movlt	r4, r2
 800926c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009270:	d005      	beq.n	800927e <__cvt+0x42>
 8009272:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009276:	d100      	bne.n	800927a <__cvt+0x3e>
 8009278:	3601      	adds	r6, #1
 800927a:	2102      	movs	r1, #2
 800927c:	e000      	b.n	8009280 <__cvt+0x44>
 800927e:	2103      	movs	r1, #3
 8009280:	ab03      	add	r3, sp, #12
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	ab02      	add	r3, sp, #8
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	ec45 4b10 	vmov	d0, r4, r5
 800928c:	4653      	mov	r3, sl
 800928e:	4632      	mov	r2, r6
 8009290:	f000 fe2e 	bl	8009ef0 <_dtoa_r>
 8009294:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009298:	4607      	mov	r7, r0
 800929a:	d102      	bne.n	80092a2 <__cvt+0x66>
 800929c:	f019 0f01 	tst.w	r9, #1
 80092a0:	d022      	beq.n	80092e8 <__cvt+0xac>
 80092a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092a6:	eb07 0906 	add.w	r9, r7, r6
 80092aa:	d110      	bne.n	80092ce <__cvt+0x92>
 80092ac:	783b      	ldrb	r3, [r7, #0]
 80092ae:	2b30      	cmp	r3, #48	; 0x30
 80092b0:	d10a      	bne.n	80092c8 <__cvt+0x8c>
 80092b2:	2200      	movs	r2, #0
 80092b4:	2300      	movs	r3, #0
 80092b6:	4620      	mov	r0, r4
 80092b8:	4629      	mov	r1, r5
 80092ba:	f7f7 fc0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80092be:	b918      	cbnz	r0, 80092c8 <__cvt+0x8c>
 80092c0:	f1c6 0601 	rsb	r6, r6, #1
 80092c4:	f8ca 6000 	str.w	r6, [sl]
 80092c8:	f8da 3000 	ldr.w	r3, [sl]
 80092cc:	4499      	add	r9, r3
 80092ce:	2200      	movs	r2, #0
 80092d0:	2300      	movs	r3, #0
 80092d2:	4620      	mov	r0, r4
 80092d4:	4629      	mov	r1, r5
 80092d6:	f7f7 fbff 	bl	8000ad8 <__aeabi_dcmpeq>
 80092da:	b108      	cbz	r0, 80092e0 <__cvt+0xa4>
 80092dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80092e0:	2230      	movs	r2, #48	; 0x30
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	454b      	cmp	r3, r9
 80092e6:	d307      	bcc.n	80092f8 <__cvt+0xbc>
 80092e8:	9b03      	ldr	r3, [sp, #12]
 80092ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ec:	1bdb      	subs	r3, r3, r7
 80092ee:	4638      	mov	r0, r7
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	b004      	add	sp, #16
 80092f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f8:	1c59      	adds	r1, r3, #1
 80092fa:	9103      	str	r1, [sp, #12]
 80092fc:	701a      	strb	r2, [r3, #0]
 80092fe:	e7f0      	b.n	80092e2 <__cvt+0xa6>

08009300 <__exponent>:
 8009300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009302:	4603      	mov	r3, r0
 8009304:	2900      	cmp	r1, #0
 8009306:	bfb8      	it	lt
 8009308:	4249      	neglt	r1, r1
 800930a:	f803 2b02 	strb.w	r2, [r3], #2
 800930e:	bfb4      	ite	lt
 8009310:	222d      	movlt	r2, #45	; 0x2d
 8009312:	222b      	movge	r2, #43	; 0x2b
 8009314:	2909      	cmp	r1, #9
 8009316:	7042      	strb	r2, [r0, #1]
 8009318:	dd2a      	ble.n	8009370 <__exponent+0x70>
 800931a:	f10d 0407 	add.w	r4, sp, #7
 800931e:	46a4      	mov	ip, r4
 8009320:	270a      	movs	r7, #10
 8009322:	46a6      	mov	lr, r4
 8009324:	460a      	mov	r2, r1
 8009326:	fb91 f6f7 	sdiv	r6, r1, r7
 800932a:	fb07 1516 	mls	r5, r7, r6, r1
 800932e:	3530      	adds	r5, #48	; 0x30
 8009330:	2a63      	cmp	r2, #99	; 0x63
 8009332:	f104 34ff 	add.w	r4, r4, #4294967295
 8009336:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800933a:	4631      	mov	r1, r6
 800933c:	dcf1      	bgt.n	8009322 <__exponent+0x22>
 800933e:	3130      	adds	r1, #48	; 0x30
 8009340:	f1ae 0502 	sub.w	r5, lr, #2
 8009344:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009348:	1c44      	adds	r4, r0, #1
 800934a:	4629      	mov	r1, r5
 800934c:	4561      	cmp	r1, ip
 800934e:	d30a      	bcc.n	8009366 <__exponent+0x66>
 8009350:	f10d 0209 	add.w	r2, sp, #9
 8009354:	eba2 020e 	sub.w	r2, r2, lr
 8009358:	4565      	cmp	r5, ip
 800935a:	bf88      	it	hi
 800935c:	2200      	movhi	r2, #0
 800935e:	4413      	add	r3, r2
 8009360:	1a18      	subs	r0, r3, r0
 8009362:	b003      	add	sp, #12
 8009364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800936a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800936e:	e7ed      	b.n	800934c <__exponent+0x4c>
 8009370:	2330      	movs	r3, #48	; 0x30
 8009372:	3130      	adds	r1, #48	; 0x30
 8009374:	7083      	strb	r3, [r0, #2]
 8009376:	70c1      	strb	r1, [r0, #3]
 8009378:	1d03      	adds	r3, r0, #4
 800937a:	e7f1      	b.n	8009360 <__exponent+0x60>

0800937c <_printf_float>:
 800937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	ed2d 8b02 	vpush	{d8}
 8009384:	b08d      	sub	sp, #52	; 0x34
 8009386:	460c      	mov	r4, r1
 8009388:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800938c:	4616      	mov	r6, r2
 800938e:	461f      	mov	r7, r3
 8009390:	4605      	mov	r5, r0
 8009392:	f001 fd51 	bl	800ae38 <_localeconv_r>
 8009396:	f8d0 a000 	ldr.w	sl, [r0]
 800939a:	4650      	mov	r0, sl
 800939c:	f7f6 ff20 	bl	80001e0 <strlen>
 80093a0:	2300      	movs	r3, #0
 80093a2:	930a      	str	r3, [sp, #40]	; 0x28
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	9305      	str	r3, [sp, #20]
 80093a8:	f8d8 3000 	ldr.w	r3, [r8]
 80093ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093b0:	3307      	adds	r3, #7
 80093b2:	f023 0307 	bic.w	r3, r3, #7
 80093b6:	f103 0208 	add.w	r2, r3, #8
 80093ba:	f8c8 2000 	str.w	r2, [r8]
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093ce:	9307      	str	r3, [sp, #28]
 80093d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80093d4:	ee08 0a10 	vmov	s16, r0
 80093d8:	4b9f      	ldr	r3, [pc, #636]	; (8009658 <_printf_float+0x2dc>)
 80093da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093de:	f04f 32ff 	mov.w	r2, #4294967295
 80093e2:	f7f7 fbab 	bl	8000b3c <__aeabi_dcmpun>
 80093e6:	bb88      	cbnz	r0, 800944c <_printf_float+0xd0>
 80093e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093ec:	4b9a      	ldr	r3, [pc, #616]	; (8009658 <_printf_float+0x2dc>)
 80093ee:	f04f 32ff 	mov.w	r2, #4294967295
 80093f2:	f7f7 fb85 	bl	8000b00 <__aeabi_dcmple>
 80093f6:	bb48      	cbnz	r0, 800944c <_printf_float+0xd0>
 80093f8:	2200      	movs	r2, #0
 80093fa:	2300      	movs	r3, #0
 80093fc:	4640      	mov	r0, r8
 80093fe:	4649      	mov	r1, r9
 8009400:	f7f7 fb74 	bl	8000aec <__aeabi_dcmplt>
 8009404:	b110      	cbz	r0, 800940c <_printf_float+0x90>
 8009406:	232d      	movs	r3, #45	; 0x2d
 8009408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800940c:	4b93      	ldr	r3, [pc, #588]	; (800965c <_printf_float+0x2e0>)
 800940e:	4894      	ldr	r0, [pc, #592]	; (8009660 <_printf_float+0x2e4>)
 8009410:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009414:	bf94      	ite	ls
 8009416:	4698      	movls	r8, r3
 8009418:	4680      	movhi	r8, r0
 800941a:	2303      	movs	r3, #3
 800941c:	6123      	str	r3, [r4, #16]
 800941e:	9b05      	ldr	r3, [sp, #20]
 8009420:	f023 0204 	bic.w	r2, r3, #4
 8009424:	6022      	str	r2, [r4, #0]
 8009426:	f04f 0900 	mov.w	r9, #0
 800942a:	9700      	str	r7, [sp, #0]
 800942c:	4633      	mov	r3, r6
 800942e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009430:	4621      	mov	r1, r4
 8009432:	4628      	mov	r0, r5
 8009434:	f000 f9d8 	bl	80097e8 <_printf_common>
 8009438:	3001      	adds	r0, #1
 800943a:	f040 8090 	bne.w	800955e <_printf_float+0x1e2>
 800943e:	f04f 30ff 	mov.w	r0, #4294967295
 8009442:	b00d      	add	sp, #52	; 0x34
 8009444:	ecbd 8b02 	vpop	{d8}
 8009448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944c:	4642      	mov	r2, r8
 800944e:	464b      	mov	r3, r9
 8009450:	4640      	mov	r0, r8
 8009452:	4649      	mov	r1, r9
 8009454:	f7f7 fb72 	bl	8000b3c <__aeabi_dcmpun>
 8009458:	b140      	cbz	r0, 800946c <_printf_float+0xf0>
 800945a:	464b      	mov	r3, r9
 800945c:	2b00      	cmp	r3, #0
 800945e:	bfbc      	itt	lt
 8009460:	232d      	movlt	r3, #45	; 0x2d
 8009462:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009466:	487f      	ldr	r0, [pc, #508]	; (8009664 <_printf_float+0x2e8>)
 8009468:	4b7f      	ldr	r3, [pc, #508]	; (8009668 <_printf_float+0x2ec>)
 800946a:	e7d1      	b.n	8009410 <_printf_float+0x94>
 800946c:	6863      	ldr	r3, [r4, #4]
 800946e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009472:	9206      	str	r2, [sp, #24]
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	d13f      	bne.n	80094f8 <_printf_float+0x17c>
 8009478:	2306      	movs	r3, #6
 800947a:	6063      	str	r3, [r4, #4]
 800947c:	9b05      	ldr	r3, [sp, #20]
 800947e:	6861      	ldr	r1, [r4, #4]
 8009480:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009484:	2300      	movs	r3, #0
 8009486:	9303      	str	r3, [sp, #12]
 8009488:	ab0a      	add	r3, sp, #40	; 0x28
 800948a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800948e:	ab09      	add	r3, sp, #36	; 0x24
 8009490:	ec49 8b10 	vmov	d0, r8, r9
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	6022      	str	r2, [r4, #0]
 8009498:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800949c:	4628      	mov	r0, r5
 800949e:	f7ff fecd 	bl	800923c <__cvt>
 80094a2:	9b06      	ldr	r3, [sp, #24]
 80094a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094a6:	2b47      	cmp	r3, #71	; 0x47
 80094a8:	4680      	mov	r8, r0
 80094aa:	d108      	bne.n	80094be <_printf_float+0x142>
 80094ac:	1cc8      	adds	r0, r1, #3
 80094ae:	db02      	blt.n	80094b6 <_printf_float+0x13a>
 80094b0:	6863      	ldr	r3, [r4, #4]
 80094b2:	4299      	cmp	r1, r3
 80094b4:	dd41      	ble.n	800953a <_printf_float+0x1be>
 80094b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80094ba:	fa5f fb8b 	uxtb.w	fp, fp
 80094be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094c2:	d820      	bhi.n	8009506 <_printf_float+0x18a>
 80094c4:	3901      	subs	r1, #1
 80094c6:	465a      	mov	r2, fp
 80094c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094cc:	9109      	str	r1, [sp, #36]	; 0x24
 80094ce:	f7ff ff17 	bl	8009300 <__exponent>
 80094d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094d4:	1813      	adds	r3, r2, r0
 80094d6:	2a01      	cmp	r2, #1
 80094d8:	4681      	mov	r9, r0
 80094da:	6123      	str	r3, [r4, #16]
 80094dc:	dc02      	bgt.n	80094e4 <_printf_float+0x168>
 80094de:	6822      	ldr	r2, [r4, #0]
 80094e0:	07d2      	lsls	r2, r2, #31
 80094e2:	d501      	bpl.n	80094e8 <_printf_float+0x16c>
 80094e4:	3301      	adds	r3, #1
 80094e6:	6123      	str	r3, [r4, #16]
 80094e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d09c      	beq.n	800942a <_printf_float+0xae>
 80094f0:	232d      	movs	r3, #45	; 0x2d
 80094f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094f6:	e798      	b.n	800942a <_printf_float+0xae>
 80094f8:	9a06      	ldr	r2, [sp, #24]
 80094fa:	2a47      	cmp	r2, #71	; 0x47
 80094fc:	d1be      	bne.n	800947c <_printf_float+0x100>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1bc      	bne.n	800947c <_printf_float+0x100>
 8009502:	2301      	movs	r3, #1
 8009504:	e7b9      	b.n	800947a <_printf_float+0xfe>
 8009506:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800950a:	d118      	bne.n	800953e <_printf_float+0x1c2>
 800950c:	2900      	cmp	r1, #0
 800950e:	6863      	ldr	r3, [r4, #4]
 8009510:	dd0b      	ble.n	800952a <_printf_float+0x1ae>
 8009512:	6121      	str	r1, [r4, #16]
 8009514:	b913      	cbnz	r3, 800951c <_printf_float+0x1a0>
 8009516:	6822      	ldr	r2, [r4, #0]
 8009518:	07d0      	lsls	r0, r2, #31
 800951a:	d502      	bpl.n	8009522 <_printf_float+0x1a6>
 800951c:	3301      	adds	r3, #1
 800951e:	440b      	add	r3, r1
 8009520:	6123      	str	r3, [r4, #16]
 8009522:	65a1      	str	r1, [r4, #88]	; 0x58
 8009524:	f04f 0900 	mov.w	r9, #0
 8009528:	e7de      	b.n	80094e8 <_printf_float+0x16c>
 800952a:	b913      	cbnz	r3, 8009532 <_printf_float+0x1b6>
 800952c:	6822      	ldr	r2, [r4, #0]
 800952e:	07d2      	lsls	r2, r2, #31
 8009530:	d501      	bpl.n	8009536 <_printf_float+0x1ba>
 8009532:	3302      	adds	r3, #2
 8009534:	e7f4      	b.n	8009520 <_printf_float+0x1a4>
 8009536:	2301      	movs	r3, #1
 8009538:	e7f2      	b.n	8009520 <_printf_float+0x1a4>
 800953a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800953e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009540:	4299      	cmp	r1, r3
 8009542:	db05      	blt.n	8009550 <_printf_float+0x1d4>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	6121      	str	r1, [r4, #16]
 8009548:	07d8      	lsls	r0, r3, #31
 800954a:	d5ea      	bpl.n	8009522 <_printf_float+0x1a6>
 800954c:	1c4b      	adds	r3, r1, #1
 800954e:	e7e7      	b.n	8009520 <_printf_float+0x1a4>
 8009550:	2900      	cmp	r1, #0
 8009552:	bfd4      	ite	le
 8009554:	f1c1 0202 	rsble	r2, r1, #2
 8009558:	2201      	movgt	r2, #1
 800955a:	4413      	add	r3, r2
 800955c:	e7e0      	b.n	8009520 <_printf_float+0x1a4>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	055a      	lsls	r2, r3, #21
 8009562:	d407      	bmi.n	8009574 <_printf_float+0x1f8>
 8009564:	6923      	ldr	r3, [r4, #16]
 8009566:	4642      	mov	r2, r8
 8009568:	4631      	mov	r1, r6
 800956a:	4628      	mov	r0, r5
 800956c:	47b8      	blx	r7
 800956e:	3001      	adds	r0, #1
 8009570:	d12c      	bne.n	80095cc <_printf_float+0x250>
 8009572:	e764      	b.n	800943e <_printf_float+0xc2>
 8009574:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009578:	f240 80e0 	bls.w	800973c <_printf_float+0x3c0>
 800957c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009580:	2200      	movs	r2, #0
 8009582:	2300      	movs	r3, #0
 8009584:	f7f7 faa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009588:	2800      	cmp	r0, #0
 800958a:	d034      	beq.n	80095f6 <_printf_float+0x27a>
 800958c:	4a37      	ldr	r2, [pc, #220]	; (800966c <_printf_float+0x2f0>)
 800958e:	2301      	movs	r3, #1
 8009590:	4631      	mov	r1, r6
 8009592:	4628      	mov	r0, r5
 8009594:	47b8      	blx	r7
 8009596:	3001      	adds	r0, #1
 8009598:	f43f af51 	beq.w	800943e <_printf_float+0xc2>
 800959c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095a0:	429a      	cmp	r2, r3
 80095a2:	db02      	blt.n	80095aa <_printf_float+0x22e>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	07d8      	lsls	r0, r3, #31
 80095a8:	d510      	bpl.n	80095cc <_printf_float+0x250>
 80095aa:	ee18 3a10 	vmov	r3, s16
 80095ae:	4652      	mov	r2, sl
 80095b0:	4631      	mov	r1, r6
 80095b2:	4628      	mov	r0, r5
 80095b4:	47b8      	blx	r7
 80095b6:	3001      	adds	r0, #1
 80095b8:	f43f af41 	beq.w	800943e <_printf_float+0xc2>
 80095bc:	f04f 0800 	mov.w	r8, #0
 80095c0:	f104 091a 	add.w	r9, r4, #26
 80095c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c6:	3b01      	subs	r3, #1
 80095c8:	4543      	cmp	r3, r8
 80095ca:	dc09      	bgt.n	80095e0 <_printf_float+0x264>
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	079b      	lsls	r3, r3, #30
 80095d0:	f100 8105 	bmi.w	80097de <_printf_float+0x462>
 80095d4:	68e0      	ldr	r0, [r4, #12]
 80095d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095d8:	4298      	cmp	r0, r3
 80095da:	bfb8      	it	lt
 80095dc:	4618      	movlt	r0, r3
 80095de:	e730      	b.n	8009442 <_printf_float+0xc6>
 80095e0:	2301      	movs	r3, #1
 80095e2:	464a      	mov	r2, r9
 80095e4:	4631      	mov	r1, r6
 80095e6:	4628      	mov	r0, r5
 80095e8:	47b8      	blx	r7
 80095ea:	3001      	adds	r0, #1
 80095ec:	f43f af27 	beq.w	800943e <_printf_float+0xc2>
 80095f0:	f108 0801 	add.w	r8, r8, #1
 80095f4:	e7e6      	b.n	80095c4 <_printf_float+0x248>
 80095f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	dc39      	bgt.n	8009670 <_printf_float+0x2f4>
 80095fc:	4a1b      	ldr	r2, [pc, #108]	; (800966c <_printf_float+0x2f0>)
 80095fe:	2301      	movs	r3, #1
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	f43f af19 	beq.w	800943e <_printf_float+0xc2>
 800960c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009610:	4313      	orrs	r3, r2
 8009612:	d102      	bne.n	800961a <_printf_float+0x29e>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	07d9      	lsls	r1, r3, #31
 8009618:	d5d8      	bpl.n	80095cc <_printf_float+0x250>
 800961a:	ee18 3a10 	vmov	r3, s16
 800961e:	4652      	mov	r2, sl
 8009620:	4631      	mov	r1, r6
 8009622:	4628      	mov	r0, r5
 8009624:	47b8      	blx	r7
 8009626:	3001      	adds	r0, #1
 8009628:	f43f af09 	beq.w	800943e <_printf_float+0xc2>
 800962c:	f04f 0900 	mov.w	r9, #0
 8009630:	f104 0a1a 	add.w	sl, r4, #26
 8009634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009636:	425b      	negs	r3, r3
 8009638:	454b      	cmp	r3, r9
 800963a:	dc01      	bgt.n	8009640 <_printf_float+0x2c4>
 800963c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800963e:	e792      	b.n	8009566 <_printf_float+0x1ea>
 8009640:	2301      	movs	r3, #1
 8009642:	4652      	mov	r2, sl
 8009644:	4631      	mov	r1, r6
 8009646:	4628      	mov	r0, r5
 8009648:	47b8      	blx	r7
 800964a:	3001      	adds	r0, #1
 800964c:	f43f aef7 	beq.w	800943e <_printf_float+0xc2>
 8009650:	f109 0901 	add.w	r9, r9, #1
 8009654:	e7ee      	b.n	8009634 <_printf_float+0x2b8>
 8009656:	bf00      	nop
 8009658:	7fefffff 	.word	0x7fefffff
 800965c:	0800c718 	.word	0x0800c718
 8009660:	0800c71c 	.word	0x0800c71c
 8009664:	0800c724 	.word	0x0800c724
 8009668:	0800c720 	.word	0x0800c720
 800966c:	0800c728 	.word	0x0800c728
 8009670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009674:	429a      	cmp	r2, r3
 8009676:	bfa8      	it	ge
 8009678:	461a      	movge	r2, r3
 800967a:	2a00      	cmp	r2, #0
 800967c:	4691      	mov	r9, r2
 800967e:	dc37      	bgt.n	80096f0 <_printf_float+0x374>
 8009680:	f04f 0b00 	mov.w	fp, #0
 8009684:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009688:	f104 021a 	add.w	r2, r4, #26
 800968c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800968e:	9305      	str	r3, [sp, #20]
 8009690:	eba3 0309 	sub.w	r3, r3, r9
 8009694:	455b      	cmp	r3, fp
 8009696:	dc33      	bgt.n	8009700 <_printf_float+0x384>
 8009698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800969c:	429a      	cmp	r2, r3
 800969e:	db3b      	blt.n	8009718 <_printf_float+0x39c>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	07da      	lsls	r2, r3, #31
 80096a4:	d438      	bmi.n	8009718 <_printf_float+0x39c>
 80096a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096a8:	9b05      	ldr	r3, [sp, #20]
 80096aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	eba2 0901 	sub.w	r9, r2, r1
 80096b2:	4599      	cmp	r9, r3
 80096b4:	bfa8      	it	ge
 80096b6:	4699      	movge	r9, r3
 80096b8:	f1b9 0f00 	cmp.w	r9, #0
 80096bc:	dc35      	bgt.n	800972a <_printf_float+0x3ae>
 80096be:	f04f 0800 	mov.w	r8, #0
 80096c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096c6:	f104 0a1a 	add.w	sl, r4, #26
 80096ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	eba3 0309 	sub.w	r3, r3, r9
 80096d4:	4543      	cmp	r3, r8
 80096d6:	f77f af79 	ble.w	80095cc <_printf_float+0x250>
 80096da:	2301      	movs	r3, #1
 80096dc:	4652      	mov	r2, sl
 80096de:	4631      	mov	r1, r6
 80096e0:	4628      	mov	r0, r5
 80096e2:	47b8      	blx	r7
 80096e4:	3001      	adds	r0, #1
 80096e6:	f43f aeaa 	beq.w	800943e <_printf_float+0xc2>
 80096ea:	f108 0801 	add.w	r8, r8, #1
 80096ee:	e7ec      	b.n	80096ca <_printf_float+0x34e>
 80096f0:	4613      	mov	r3, r2
 80096f2:	4631      	mov	r1, r6
 80096f4:	4642      	mov	r2, r8
 80096f6:	4628      	mov	r0, r5
 80096f8:	47b8      	blx	r7
 80096fa:	3001      	adds	r0, #1
 80096fc:	d1c0      	bne.n	8009680 <_printf_float+0x304>
 80096fe:	e69e      	b.n	800943e <_printf_float+0xc2>
 8009700:	2301      	movs	r3, #1
 8009702:	4631      	mov	r1, r6
 8009704:	4628      	mov	r0, r5
 8009706:	9205      	str	r2, [sp, #20]
 8009708:	47b8      	blx	r7
 800970a:	3001      	adds	r0, #1
 800970c:	f43f ae97 	beq.w	800943e <_printf_float+0xc2>
 8009710:	9a05      	ldr	r2, [sp, #20]
 8009712:	f10b 0b01 	add.w	fp, fp, #1
 8009716:	e7b9      	b.n	800968c <_printf_float+0x310>
 8009718:	ee18 3a10 	vmov	r3, s16
 800971c:	4652      	mov	r2, sl
 800971e:	4631      	mov	r1, r6
 8009720:	4628      	mov	r0, r5
 8009722:	47b8      	blx	r7
 8009724:	3001      	adds	r0, #1
 8009726:	d1be      	bne.n	80096a6 <_printf_float+0x32a>
 8009728:	e689      	b.n	800943e <_printf_float+0xc2>
 800972a:	9a05      	ldr	r2, [sp, #20]
 800972c:	464b      	mov	r3, r9
 800972e:	4442      	add	r2, r8
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	47b8      	blx	r7
 8009736:	3001      	adds	r0, #1
 8009738:	d1c1      	bne.n	80096be <_printf_float+0x342>
 800973a:	e680      	b.n	800943e <_printf_float+0xc2>
 800973c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800973e:	2a01      	cmp	r2, #1
 8009740:	dc01      	bgt.n	8009746 <_printf_float+0x3ca>
 8009742:	07db      	lsls	r3, r3, #31
 8009744:	d538      	bpl.n	80097b8 <_printf_float+0x43c>
 8009746:	2301      	movs	r3, #1
 8009748:	4642      	mov	r2, r8
 800974a:	4631      	mov	r1, r6
 800974c:	4628      	mov	r0, r5
 800974e:	47b8      	blx	r7
 8009750:	3001      	adds	r0, #1
 8009752:	f43f ae74 	beq.w	800943e <_printf_float+0xc2>
 8009756:	ee18 3a10 	vmov	r3, s16
 800975a:	4652      	mov	r2, sl
 800975c:	4631      	mov	r1, r6
 800975e:	4628      	mov	r0, r5
 8009760:	47b8      	blx	r7
 8009762:	3001      	adds	r0, #1
 8009764:	f43f ae6b 	beq.w	800943e <_printf_float+0xc2>
 8009768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800976c:	2200      	movs	r2, #0
 800976e:	2300      	movs	r3, #0
 8009770:	f7f7 f9b2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009774:	b9d8      	cbnz	r0, 80097ae <_printf_float+0x432>
 8009776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009778:	f108 0201 	add.w	r2, r8, #1
 800977c:	3b01      	subs	r3, #1
 800977e:	4631      	mov	r1, r6
 8009780:	4628      	mov	r0, r5
 8009782:	47b8      	blx	r7
 8009784:	3001      	adds	r0, #1
 8009786:	d10e      	bne.n	80097a6 <_printf_float+0x42a>
 8009788:	e659      	b.n	800943e <_printf_float+0xc2>
 800978a:	2301      	movs	r3, #1
 800978c:	4652      	mov	r2, sl
 800978e:	4631      	mov	r1, r6
 8009790:	4628      	mov	r0, r5
 8009792:	47b8      	blx	r7
 8009794:	3001      	adds	r0, #1
 8009796:	f43f ae52 	beq.w	800943e <_printf_float+0xc2>
 800979a:	f108 0801 	add.w	r8, r8, #1
 800979e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a0:	3b01      	subs	r3, #1
 80097a2:	4543      	cmp	r3, r8
 80097a4:	dcf1      	bgt.n	800978a <_printf_float+0x40e>
 80097a6:	464b      	mov	r3, r9
 80097a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097ac:	e6dc      	b.n	8009568 <_printf_float+0x1ec>
 80097ae:	f04f 0800 	mov.w	r8, #0
 80097b2:	f104 0a1a 	add.w	sl, r4, #26
 80097b6:	e7f2      	b.n	800979e <_printf_float+0x422>
 80097b8:	2301      	movs	r3, #1
 80097ba:	4642      	mov	r2, r8
 80097bc:	e7df      	b.n	800977e <_printf_float+0x402>
 80097be:	2301      	movs	r3, #1
 80097c0:	464a      	mov	r2, r9
 80097c2:	4631      	mov	r1, r6
 80097c4:	4628      	mov	r0, r5
 80097c6:	47b8      	blx	r7
 80097c8:	3001      	adds	r0, #1
 80097ca:	f43f ae38 	beq.w	800943e <_printf_float+0xc2>
 80097ce:	f108 0801 	add.w	r8, r8, #1
 80097d2:	68e3      	ldr	r3, [r4, #12]
 80097d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097d6:	1a5b      	subs	r3, r3, r1
 80097d8:	4543      	cmp	r3, r8
 80097da:	dcf0      	bgt.n	80097be <_printf_float+0x442>
 80097dc:	e6fa      	b.n	80095d4 <_printf_float+0x258>
 80097de:	f04f 0800 	mov.w	r8, #0
 80097e2:	f104 0919 	add.w	r9, r4, #25
 80097e6:	e7f4      	b.n	80097d2 <_printf_float+0x456>

080097e8 <_printf_common>:
 80097e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ec:	4616      	mov	r6, r2
 80097ee:	4699      	mov	r9, r3
 80097f0:	688a      	ldr	r2, [r1, #8]
 80097f2:	690b      	ldr	r3, [r1, #16]
 80097f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	bfb8      	it	lt
 80097fc:	4613      	movlt	r3, r2
 80097fe:	6033      	str	r3, [r6, #0]
 8009800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009804:	4607      	mov	r7, r0
 8009806:	460c      	mov	r4, r1
 8009808:	b10a      	cbz	r2, 800980e <_printf_common+0x26>
 800980a:	3301      	adds	r3, #1
 800980c:	6033      	str	r3, [r6, #0]
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	0699      	lsls	r1, r3, #26
 8009812:	bf42      	ittt	mi
 8009814:	6833      	ldrmi	r3, [r6, #0]
 8009816:	3302      	addmi	r3, #2
 8009818:	6033      	strmi	r3, [r6, #0]
 800981a:	6825      	ldr	r5, [r4, #0]
 800981c:	f015 0506 	ands.w	r5, r5, #6
 8009820:	d106      	bne.n	8009830 <_printf_common+0x48>
 8009822:	f104 0a19 	add.w	sl, r4, #25
 8009826:	68e3      	ldr	r3, [r4, #12]
 8009828:	6832      	ldr	r2, [r6, #0]
 800982a:	1a9b      	subs	r3, r3, r2
 800982c:	42ab      	cmp	r3, r5
 800982e:	dc26      	bgt.n	800987e <_printf_common+0x96>
 8009830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009834:	1e13      	subs	r3, r2, #0
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	bf18      	it	ne
 800983a:	2301      	movne	r3, #1
 800983c:	0692      	lsls	r2, r2, #26
 800983e:	d42b      	bmi.n	8009898 <_printf_common+0xb0>
 8009840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009844:	4649      	mov	r1, r9
 8009846:	4638      	mov	r0, r7
 8009848:	47c0      	blx	r8
 800984a:	3001      	adds	r0, #1
 800984c:	d01e      	beq.n	800988c <_printf_common+0xa4>
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	68e5      	ldr	r5, [r4, #12]
 8009852:	6832      	ldr	r2, [r6, #0]
 8009854:	f003 0306 	and.w	r3, r3, #6
 8009858:	2b04      	cmp	r3, #4
 800985a:	bf08      	it	eq
 800985c:	1aad      	subeq	r5, r5, r2
 800985e:	68a3      	ldr	r3, [r4, #8]
 8009860:	6922      	ldr	r2, [r4, #16]
 8009862:	bf0c      	ite	eq
 8009864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009868:	2500      	movne	r5, #0
 800986a:	4293      	cmp	r3, r2
 800986c:	bfc4      	itt	gt
 800986e:	1a9b      	subgt	r3, r3, r2
 8009870:	18ed      	addgt	r5, r5, r3
 8009872:	2600      	movs	r6, #0
 8009874:	341a      	adds	r4, #26
 8009876:	42b5      	cmp	r5, r6
 8009878:	d11a      	bne.n	80098b0 <_printf_common+0xc8>
 800987a:	2000      	movs	r0, #0
 800987c:	e008      	b.n	8009890 <_printf_common+0xa8>
 800987e:	2301      	movs	r3, #1
 8009880:	4652      	mov	r2, sl
 8009882:	4649      	mov	r1, r9
 8009884:	4638      	mov	r0, r7
 8009886:	47c0      	blx	r8
 8009888:	3001      	adds	r0, #1
 800988a:	d103      	bne.n	8009894 <_printf_common+0xac>
 800988c:	f04f 30ff 	mov.w	r0, #4294967295
 8009890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009894:	3501      	adds	r5, #1
 8009896:	e7c6      	b.n	8009826 <_printf_common+0x3e>
 8009898:	18e1      	adds	r1, r4, r3
 800989a:	1c5a      	adds	r2, r3, #1
 800989c:	2030      	movs	r0, #48	; 0x30
 800989e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098a2:	4422      	add	r2, r4
 80098a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098ac:	3302      	adds	r3, #2
 80098ae:	e7c7      	b.n	8009840 <_printf_common+0x58>
 80098b0:	2301      	movs	r3, #1
 80098b2:	4622      	mov	r2, r4
 80098b4:	4649      	mov	r1, r9
 80098b6:	4638      	mov	r0, r7
 80098b8:	47c0      	blx	r8
 80098ba:	3001      	adds	r0, #1
 80098bc:	d0e6      	beq.n	800988c <_printf_common+0xa4>
 80098be:	3601      	adds	r6, #1
 80098c0:	e7d9      	b.n	8009876 <_printf_common+0x8e>
	...

080098c4 <_printf_i>:
 80098c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098c8:	460c      	mov	r4, r1
 80098ca:	4691      	mov	r9, r2
 80098cc:	7e27      	ldrb	r7, [r4, #24]
 80098ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098d0:	2f78      	cmp	r7, #120	; 0x78
 80098d2:	4680      	mov	r8, r0
 80098d4:	469a      	mov	sl, r3
 80098d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098da:	d807      	bhi.n	80098ec <_printf_i+0x28>
 80098dc:	2f62      	cmp	r7, #98	; 0x62
 80098de:	d80a      	bhi.n	80098f6 <_printf_i+0x32>
 80098e0:	2f00      	cmp	r7, #0
 80098e2:	f000 80d8 	beq.w	8009a96 <_printf_i+0x1d2>
 80098e6:	2f58      	cmp	r7, #88	; 0x58
 80098e8:	f000 80a3 	beq.w	8009a32 <_printf_i+0x16e>
 80098ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80098f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098f4:	e03a      	b.n	800996c <_printf_i+0xa8>
 80098f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098fa:	2b15      	cmp	r3, #21
 80098fc:	d8f6      	bhi.n	80098ec <_printf_i+0x28>
 80098fe:	a001      	add	r0, pc, #4	; (adr r0, 8009904 <_printf_i+0x40>)
 8009900:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009904:	0800995d 	.word	0x0800995d
 8009908:	08009971 	.word	0x08009971
 800990c:	080098ed 	.word	0x080098ed
 8009910:	080098ed 	.word	0x080098ed
 8009914:	080098ed 	.word	0x080098ed
 8009918:	080098ed 	.word	0x080098ed
 800991c:	08009971 	.word	0x08009971
 8009920:	080098ed 	.word	0x080098ed
 8009924:	080098ed 	.word	0x080098ed
 8009928:	080098ed 	.word	0x080098ed
 800992c:	080098ed 	.word	0x080098ed
 8009930:	08009a7d 	.word	0x08009a7d
 8009934:	080099a1 	.word	0x080099a1
 8009938:	08009a5f 	.word	0x08009a5f
 800993c:	080098ed 	.word	0x080098ed
 8009940:	080098ed 	.word	0x080098ed
 8009944:	08009a9f 	.word	0x08009a9f
 8009948:	080098ed 	.word	0x080098ed
 800994c:	080099a1 	.word	0x080099a1
 8009950:	080098ed 	.word	0x080098ed
 8009954:	080098ed 	.word	0x080098ed
 8009958:	08009a67 	.word	0x08009a67
 800995c:	680b      	ldr	r3, [r1, #0]
 800995e:	1d1a      	adds	r2, r3, #4
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	600a      	str	r2, [r1, #0]
 8009964:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800996c:	2301      	movs	r3, #1
 800996e:	e0a3      	b.n	8009ab8 <_printf_i+0x1f4>
 8009970:	6825      	ldr	r5, [r4, #0]
 8009972:	6808      	ldr	r0, [r1, #0]
 8009974:	062e      	lsls	r6, r5, #24
 8009976:	f100 0304 	add.w	r3, r0, #4
 800997a:	d50a      	bpl.n	8009992 <_printf_i+0xce>
 800997c:	6805      	ldr	r5, [r0, #0]
 800997e:	600b      	str	r3, [r1, #0]
 8009980:	2d00      	cmp	r5, #0
 8009982:	da03      	bge.n	800998c <_printf_i+0xc8>
 8009984:	232d      	movs	r3, #45	; 0x2d
 8009986:	426d      	negs	r5, r5
 8009988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800998c:	485e      	ldr	r0, [pc, #376]	; (8009b08 <_printf_i+0x244>)
 800998e:	230a      	movs	r3, #10
 8009990:	e019      	b.n	80099c6 <_printf_i+0x102>
 8009992:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009996:	6805      	ldr	r5, [r0, #0]
 8009998:	600b      	str	r3, [r1, #0]
 800999a:	bf18      	it	ne
 800999c:	b22d      	sxthne	r5, r5
 800999e:	e7ef      	b.n	8009980 <_printf_i+0xbc>
 80099a0:	680b      	ldr	r3, [r1, #0]
 80099a2:	6825      	ldr	r5, [r4, #0]
 80099a4:	1d18      	adds	r0, r3, #4
 80099a6:	6008      	str	r0, [r1, #0]
 80099a8:	0628      	lsls	r0, r5, #24
 80099aa:	d501      	bpl.n	80099b0 <_printf_i+0xec>
 80099ac:	681d      	ldr	r5, [r3, #0]
 80099ae:	e002      	b.n	80099b6 <_printf_i+0xf2>
 80099b0:	0669      	lsls	r1, r5, #25
 80099b2:	d5fb      	bpl.n	80099ac <_printf_i+0xe8>
 80099b4:	881d      	ldrh	r5, [r3, #0]
 80099b6:	4854      	ldr	r0, [pc, #336]	; (8009b08 <_printf_i+0x244>)
 80099b8:	2f6f      	cmp	r7, #111	; 0x6f
 80099ba:	bf0c      	ite	eq
 80099bc:	2308      	moveq	r3, #8
 80099be:	230a      	movne	r3, #10
 80099c0:	2100      	movs	r1, #0
 80099c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099c6:	6866      	ldr	r6, [r4, #4]
 80099c8:	60a6      	str	r6, [r4, #8]
 80099ca:	2e00      	cmp	r6, #0
 80099cc:	bfa2      	ittt	ge
 80099ce:	6821      	ldrge	r1, [r4, #0]
 80099d0:	f021 0104 	bicge.w	r1, r1, #4
 80099d4:	6021      	strge	r1, [r4, #0]
 80099d6:	b90d      	cbnz	r5, 80099dc <_printf_i+0x118>
 80099d8:	2e00      	cmp	r6, #0
 80099da:	d04d      	beq.n	8009a78 <_printf_i+0x1b4>
 80099dc:	4616      	mov	r6, r2
 80099de:	fbb5 f1f3 	udiv	r1, r5, r3
 80099e2:	fb03 5711 	mls	r7, r3, r1, r5
 80099e6:	5dc7      	ldrb	r7, [r0, r7]
 80099e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099ec:	462f      	mov	r7, r5
 80099ee:	42bb      	cmp	r3, r7
 80099f0:	460d      	mov	r5, r1
 80099f2:	d9f4      	bls.n	80099de <_printf_i+0x11a>
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d10b      	bne.n	8009a10 <_printf_i+0x14c>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	07df      	lsls	r7, r3, #31
 80099fc:	d508      	bpl.n	8009a10 <_printf_i+0x14c>
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	6861      	ldr	r1, [r4, #4]
 8009a02:	4299      	cmp	r1, r3
 8009a04:	bfde      	ittt	le
 8009a06:	2330      	movle	r3, #48	; 0x30
 8009a08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a10:	1b92      	subs	r2, r2, r6
 8009a12:	6122      	str	r2, [r4, #16]
 8009a14:	f8cd a000 	str.w	sl, [sp]
 8009a18:	464b      	mov	r3, r9
 8009a1a:	aa03      	add	r2, sp, #12
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4640      	mov	r0, r8
 8009a20:	f7ff fee2 	bl	80097e8 <_printf_common>
 8009a24:	3001      	adds	r0, #1
 8009a26:	d14c      	bne.n	8009ac2 <_printf_i+0x1fe>
 8009a28:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2c:	b004      	add	sp, #16
 8009a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a32:	4835      	ldr	r0, [pc, #212]	; (8009b08 <_printf_i+0x244>)
 8009a34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	680e      	ldr	r6, [r1, #0]
 8009a3c:	061f      	lsls	r7, r3, #24
 8009a3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a42:	600e      	str	r6, [r1, #0]
 8009a44:	d514      	bpl.n	8009a70 <_printf_i+0x1ac>
 8009a46:	07d9      	lsls	r1, r3, #31
 8009a48:	bf44      	itt	mi
 8009a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a4e:	6023      	strmi	r3, [r4, #0]
 8009a50:	b91d      	cbnz	r5, 8009a5a <_printf_i+0x196>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	f023 0320 	bic.w	r3, r3, #32
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	2310      	movs	r3, #16
 8009a5c:	e7b0      	b.n	80099c0 <_printf_i+0xfc>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	f043 0320 	orr.w	r3, r3, #32
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	2378      	movs	r3, #120	; 0x78
 8009a68:	4828      	ldr	r0, [pc, #160]	; (8009b0c <_printf_i+0x248>)
 8009a6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a6e:	e7e3      	b.n	8009a38 <_printf_i+0x174>
 8009a70:	065e      	lsls	r6, r3, #25
 8009a72:	bf48      	it	mi
 8009a74:	b2ad      	uxthmi	r5, r5
 8009a76:	e7e6      	b.n	8009a46 <_printf_i+0x182>
 8009a78:	4616      	mov	r6, r2
 8009a7a:	e7bb      	b.n	80099f4 <_printf_i+0x130>
 8009a7c:	680b      	ldr	r3, [r1, #0]
 8009a7e:	6826      	ldr	r6, [r4, #0]
 8009a80:	6960      	ldr	r0, [r4, #20]
 8009a82:	1d1d      	adds	r5, r3, #4
 8009a84:	600d      	str	r5, [r1, #0]
 8009a86:	0635      	lsls	r5, r6, #24
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	d501      	bpl.n	8009a90 <_printf_i+0x1cc>
 8009a8c:	6018      	str	r0, [r3, #0]
 8009a8e:	e002      	b.n	8009a96 <_printf_i+0x1d2>
 8009a90:	0671      	lsls	r1, r6, #25
 8009a92:	d5fb      	bpl.n	8009a8c <_printf_i+0x1c8>
 8009a94:	8018      	strh	r0, [r3, #0]
 8009a96:	2300      	movs	r3, #0
 8009a98:	6123      	str	r3, [r4, #16]
 8009a9a:	4616      	mov	r6, r2
 8009a9c:	e7ba      	b.n	8009a14 <_printf_i+0x150>
 8009a9e:	680b      	ldr	r3, [r1, #0]
 8009aa0:	1d1a      	adds	r2, r3, #4
 8009aa2:	600a      	str	r2, [r1, #0]
 8009aa4:	681e      	ldr	r6, [r3, #0]
 8009aa6:	6862      	ldr	r2, [r4, #4]
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f7f6 fba0 	bl	80001f0 <memchr>
 8009ab0:	b108      	cbz	r0, 8009ab6 <_printf_i+0x1f2>
 8009ab2:	1b80      	subs	r0, r0, r6
 8009ab4:	6060      	str	r0, [r4, #4]
 8009ab6:	6863      	ldr	r3, [r4, #4]
 8009ab8:	6123      	str	r3, [r4, #16]
 8009aba:	2300      	movs	r3, #0
 8009abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ac0:	e7a8      	b.n	8009a14 <_printf_i+0x150>
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	4640      	mov	r0, r8
 8009aca:	47d0      	blx	sl
 8009acc:	3001      	adds	r0, #1
 8009ace:	d0ab      	beq.n	8009a28 <_printf_i+0x164>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	079b      	lsls	r3, r3, #30
 8009ad4:	d413      	bmi.n	8009afe <_printf_i+0x23a>
 8009ad6:	68e0      	ldr	r0, [r4, #12]
 8009ad8:	9b03      	ldr	r3, [sp, #12]
 8009ada:	4298      	cmp	r0, r3
 8009adc:	bfb8      	it	lt
 8009ade:	4618      	movlt	r0, r3
 8009ae0:	e7a4      	b.n	8009a2c <_printf_i+0x168>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	4632      	mov	r2, r6
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	4640      	mov	r0, r8
 8009aea:	47d0      	blx	sl
 8009aec:	3001      	adds	r0, #1
 8009aee:	d09b      	beq.n	8009a28 <_printf_i+0x164>
 8009af0:	3501      	adds	r5, #1
 8009af2:	68e3      	ldr	r3, [r4, #12]
 8009af4:	9903      	ldr	r1, [sp, #12]
 8009af6:	1a5b      	subs	r3, r3, r1
 8009af8:	42ab      	cmp	r3, r5
 8009afa:	dcf2      	bgt.n	8009ae2 <_printf_i+0x21e>
 8009afc:	e7eb      	b.n	8009ad6 <_printf_i+0x212>
 8009afe:	2500      	movs	r5, #0
 8009b00:	f104 0619 	add.w	r6, r4, #25
 8009b04:	e7f5      	b.n	8009af2 <_printf_i+0x22e>
 8009b06:	bf00      	nop
 8009b08:	0800c72a 	.word	0x0800c72a
 8009b0c:	0800c73b 	.word	0x0800c73b

08009b10 <iprintf>:
 8009b10:	b40f      	push	{r0, r1, r2, r3}
 8009b12:	4b0a      	ldr	r3, [pc, #40]	; (8009b3c <iprintf+0x2c>)
 8009b14:	b513      	push	{r0, r1, r4, lr}
 8009b16:	681c      	ldr	r4, [r3, #0]
 8009b18:	b124      	cbz	r4, 8009b24 <iprintf+0x14>
 8009b1a:	69a3      	ldr	r3, [r4, #24]
 8009b1c:	b913      	cbnz	r3, 8009b24 <iprintf+0x14>
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f001 f8ec 	bl	800acfc <__sinit>
 8009b24:	ab05      	add	r3, sp, #20
 8009b26:	9a04      	ldr	r2, [sp, #16]
 8009b28:	68a1      	ldr	r1, [r4, #8]
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f001 fe59 	bl	800b7e4 <_vfiprintf_r>
 8009b32:	b002      	add	sp, #8
 8009b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b38:	b004      	add	sp, #16
 8009b3a:	4770      	bx	lr
 8009b3c:	20000024 	.word	0x20000024

08009b40 <putchar>:
 8009b40:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <putchar+0x28>)
 8009b42:	b513      	push	{r0, r1, r4, lr}
 8009b44:	681c      	ldr	r4, [r3, #0]
 8009b46:	4601      	mov	r1, r0
 8009b48:	b134      	cbz	r4, 8009b58 <putchar+0x18>
 8009b4a:	69a3      	ldr	r3, [r4, #24]
 8009b4c:	b923      	cbnz	r3, 8009b58 <putchar+0x18>
 8009b4e:	9001      	str	r0, [sp, #4]
 8009b50:	4620      	mov	r0, r4
 8009b52:	f001 f8d3 	bl	800acfc <__sinit>
 8009b56:	9901      	ldr	r1, [sp, #4]
 8009b58:	68a2      	ldr	r2, [r4, #8]
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	b002      	add	sp, #8
 8009b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b62:	f001 bf6f 	b.w	800ba44 <_putc_r>
 8009b66:	bf00      	nop
 8009b68:	20000024 	.word	0x20000024

08009b6c <_puts_r>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	460e      	mov	r6, r1
 8009b70:	4605      	mov	r5, r0
 8009b72:	b118      	cbz	r0, 8009b7c <_puts_r+0x10>
 8009b74:	6983      	ldr	r3, [r0, #24]
 8009b76:	b90b      	cbnz	r3, 8009b7c <_puts_r+0x10>
 8009b78:	f001 f8c0 	bl	800acfc <__sinit>
 8009b7c:	69ab      	ldr	r3, [r5, #24]
 8009b7e:	68ac      	ldr	r4, [r5, #8]
 8009b80:	b913      	cbnz	r3, 8009b88 <_puts_r+0x1c>
 8009b82:	4628      	mov	r0, r5
 8009b84:	f001 f8ba 	bl	800acfc <__sinit>
 8009b88:	4b2c      	ldr	r3, [pc, #176]	; (8009c3c <_puts_r+0xd0>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	d120      	bne.n	8009bd0 <_puts_r+0x64>
 8009b8e:	686c      	ldr	r4, [r5, #4]
 8009b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b92:	07db      	lsls	r3, r3, #31
 8009b94:	d405      	bmi.n	8009ba2 <_puts_r+0x36>
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	0598      	lsls	r0, r3, #22
 8009b9a:	d402      	bmi.n	8009ba2 <_puts_r+0x36>
 8009b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b9e:	f001 f950 	bl	800ae42 <__retarget_lock_acquire_recursive>
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	0719      	lsls	r1, r3, #28
 8009ba6:	d51d      	bpl.n	8009be4 <_puts_r+0x78>
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	b1db      	cbz	r3, 8009be4 <_puts_r+0x78>
 8009bac:	3e01      	subs	r6, #1
 8009bae:	68a3      	ldr	r3, [r4, #8]
 8009bb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	60a3      	str	r3, [r4, #8]
 8009bb8:	bb39      	cbnz	r1, 8009c0a <_puts_r+0x9e>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	da38      	bge.n	8009c30 <_puts_r+0xc4>
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	210a      	movs	r1, #10
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f000 f848 	bl	8009c58 <__swbuf_r>
 8009bc8:	3001      	adds	r0, #1
 8009bca:	d011      	beq.n	8009bf0 <_puts_r+0x84>
 8009bcc:	250a      	movs	r5, #10
 8009bce:	e011      	b.n	8009bf4 <_puts_r+0x88>
 8009bd0:	4b1b      	ldr	r3, [pc, #108]	; (8009c40 <_puts_r+0xd4>)
 8009bd2:	429c      	cmp	r4, r3
 8009bd4:	d101      	bne.n	8009bda <_puts_r+0x6e>
 8009bd6:	68ac      	ldr	r4, [r5, #8]
 8009bd8:	e7da      	b.n	8009b90 <_puts_r+0x24>
 8009bda:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <_puts_r+0xd8>)
 8009bdc:	429c      	cmp	r4, r3
 8009bde:	bf08      	it	eq
 8009be0:	68ec      	ldreq	r4, [r5, #12]
 8009be2:	e7d5      	b.n	8009b90 <_puts_r+0x24>
 8009be4:	4621      	mov	r1, r4
 8009be6:	4628      	mov	r0, r5
 8009be8:	f000 f888 	bl	8009cfc <__swsetup_r>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d0dd      	beq.n	8009bac <_puts_r+0x40>
 8009bf0:	f04f 35ff 	mov.w	r5, #4294967295
 8009bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bf6:	07da      	lsls	r2, r3, #31
 8009bf8:	d405      	bmi.n	8009c06 <_puts_r+0x9a>
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	059b      	lsls	r3, r3, #22
 8009bfe:	d402      	bmi.n	8009c06 <_puts_r+0x9a>
 8009c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c02:	f001 f91f 	bl	800ae44 <__retarget_lock_release_recursive>
 8009c06:	4628      	mov	r0, r5
 8009c08:	bd70      	pop	{r4, r5, r6, pc}
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	da04      	bge.n	8009c18 <_puts_r+0xac>
 8009c0e:	69a2      	ldr	r2, [r4, #24]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	dc06      	bgt.n	8009c22 <_puts_r+0xb6>
 8009c14:	290a      	cmp	r1, #10
 8009c16:	d004      	beq.n	8009c22 <_puts_r+0xb6>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	6022      	str	r2, [r4, #0]
 8009c1e:	7019      	strb	r1, [r3, #0]
 8009c20:	e7c5      	b.n	8009bae <_puts_r+0x42>
 8009c22:	4622      	mov	r2, r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 f817 	bl	8009c58 <__swbuf_r>
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	d1bf      	bne.n	8009bae <_puts_r+0x42>
 8009c2e:	e7df      	b.n	8009bf0 <_puts_r+0x84>
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	250a      	movs	r5, #10
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	6022      	str	r2, [r4, #0]
 8009c38:	701d      	strb	r5, [r3, #0]
 8009c3a:	e7db      	b.n	8009bf4 <_puts_r+0x88>
 8009c3c:	0800c800 	.word	0x0800c800
 8009c40:	0800c820 	.word	0x0800c820
 8009c44:	0800c7e0 	.word	0x0800c7e0

08009c48 <puts>:
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <puts+0xc>)
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	f7ff bf8d 	b.w	8009b6c <_puts_r>
 8009c52:	bf00      	nop
 8009c54:	20000024 	.word	0x20000024

08009c58 <__swbuf_r>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	460e      	mov	r6, r1
 8009c5c:	4614      	mov	r4, r2
 8009c5e:	4605      	mov	r5, r0
 8009c60:	b118      	cbz	r0, 8009c6a <__swbuf_r+0x12>
 8009c62:	6983      	ldr	r3, [r0, #24]
 8009c64:	b90b      	cbnz	r3, 8009c6a <__swbuf_r+0x12>
 8009c66:	f001 f849 	bl	800acfc <__sinit>
 8009c6a:	4b21      	ldr	r3, [pc, #132]	; (8009cf0 <__swbuf_r+0x98>)
 8009c6c:	429c      	cmp	r4, r3
 8009c6e:	d12b      	bne.n	8009cc8 <__swbuf_r+0x70>
 8009c70:	686c      	ldr	r4, [r5, #4]
 8009c72:	69a3      	ldr	r3, [r4, #24]
 8009c74:	60a3      	str	r3, [r4, #8]
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	071a      	lsls	r2, r3, #28
 8009c7a:	d52f      	bpl.n	8009cdc <__swbuf_r+0x84>
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	b36b      	cbz	r3, 8009cdc <__swbuf_r+0x84>
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	6820      	ldr	r0, [r4, #0]
 8009c84:	1ac0      	subs	r0, r0, r3
 8009c86:	6963      	ldr	r3, [r4, #20]
 8009c88:	b2f6      	uxtb	r6, r6
 8009c8a:	4283      	cmp	r3, r0
 8009c8c:	4637      	mov	r7, r6
 8009c8e:	dc04      	bgt.n	8009c9a <__swbuf_r+0x42>
 8009c90:	4621      	mov	r1, r4
 8009c92:	4628      	mov	r0, r5
 8009c94:	f000 ff9e 	bl	800abd4 <_fflush_r>
 8009c98:	bb30      	cbnz	r0, 8009ce8 <__swbuf_r+0x90>
 8009c9a:	68a3      	ldr	r3, [r4, #8]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	60a3      	str	r3, [r4, #8]
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	6022      	str	r2, [r4, #0]
 8009ca6:	701e      	strb	r6, [r3, #0]
 8009ca8:	6963      	ldr	r3, [r4, #20]
 8009caa:	3001      	adds	r0, #1
 8009cac:	4283      	cmp	r3, r0
 8009cae:	d004      	beq.n	8009cba <__swbuf_r+0x62>
 8009cb0:	89a3      	ldrh	r3, [r4, #12]
 8009cb2:	07db      	lsls	r3, r3, #31
 8009cb4:	d506      	bpl.n	8009cc4 <__swbuf_r+0x6c>
 8009cb6:	2e0a      	cmp	r6, #10
 8009cb8:	d104      	bne.n	8009cc4 <__swbuf_r+0x6c>
 8009cba:	4621      	mov	r1, r4
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f000 ff89 	bl	800abd4 <_fflush_r>
 8009cc2:	b988      	cbnz	r0, 8009ce8 <__swbuf_r+0x90>
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc8:	4b0a      	ldr	r3, [pc, #40]	; (8009cf4 <__swbuf_r+0x9c>)
 8009cca:	429c      	cmp	r4, r3
 8009ccc:	d101      	bne.n	8009cd2 <__swbuf_r+0x7a>
 8009cce:	68ac      	ldr	r4, [r5, #8]
 8009cd0:	e7cf      	b.n	8009c72 <__swbuf_r+0x1a>
 8009cd2:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <__swbuf_r+0xa0>)
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	bf08      	it	eq
 8009cd8:	68ec      	ldreq	r4, [r5, #12]
 8009cda:	e7ca      	b.n	8009c72 <__swbuf_r+0x1a>
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f000 f80c 	bl	8009cfc <__swsetup_r>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d0cb      	beq.n	8009c80 <__swbuf_r+0x28>
 8009ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8009cec:	e7ea      	b.n	8009cc4 <__swbuf_r+0x6c>
 8009cee:	bf00      	nop
 8009cf0:	0800c800 	.word	0x0800c800
 8009cf4:	0800c820 	.word	0x0800c820
 8009cf8:	0800c7e0 	.word	0x0800c7e0

08009cfc <__swsetup_r>:
 8009cfc:	4b32      	ldr	r3, [pc, #200]	; (8009dc8 <__swsetup_r+0xcc>)
 8009cfe:	b570      	push	{r4, r5, r6, lr}
 8009d00:	681d      	ldr	r5, [r3, #0]
 8009d02:	4606      	mov	r6, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	b125      	cbz	r5, 8009d12 <__swsetup_r+0x16>
 8009d08:	69ab      	ldr	r3, [r5, #24]
 8009d0a:	b913      	cbnz	r3, 8009d12 <__swsetup_r+0x16>
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f000 fff5 	bl	800acfc <__sinit>
 8009d12:	4b2e      	ldr	r3, [pc, #184]	; (8009dcc <__swsetup_r+0xd0>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	d10f      	bne.n	8009d38 <__swsetup_r+0x3c>
 8009d18:	686c      	ldr	r4, [r5, #4]
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d20:	0719      	lsls	r1, r3, #28
 8009d22:	d42c      	bmi.n	8009d7e <__swsetup_r+0x82>
 8009d24:	06dd      	lsls	r5, r3, #27
 8009d26:	d411      	bmi.n	8009d4c <__swsetup_r+0x50>
 8009d28:	2309      	movs	r3, #9
 8009d2a:	6033      	str	r3, [r6, #0]
 8009d2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d30:	81a3      	strh	r3, [r4, #12]
 8009d32:	f04f 30ff 	mov.w	r0, #4294967295
 8009d36:	e03e      	b.n	8009db6 <__swsetup_r+0xba>
 8009d38:	4b25      	ldr	r3, [pc, #148]	; (8009dd0 <__swsetup_r+0xd4>)
 8009d3a:	429c      	cmp	r4, r3
 8009d3c:	d101      	bne.n	8009d42 <__swsetup_r+0x46>
 8009d3e:	68ac      	ldr	r4, [r5, #8]
 8009d40:	e7eb      	b.n	8009d1a <__swsetup_r+0x1e>
 8009d42:	4b24      	ldr	r3, [pc, #144]	; (8009dd4 <__swsetup_r+0xd8>)
 8009d44:	429c      	cmp	r4, r3
 8009d46:	bf08      	it	eq
 8009d48:	68ec      	ldreq	r4, [r5, #12]
 8009d4a:	e7e6      	b.n	8009d1a <__swsetup_r+0x1e>
 8009d4c:	0758      	lsls	r0, r3, #29
 8009d4e:	d512      	bpl.n	8009d76 <__swsetup_r+0x7a>
 8009d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d52:	b141      	cbz	r1, 8009d66 <__swsetup_r+0x6a>
 8009d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d58:	4299      	cmp	r1, r3
 8009d5a:	d002      	beq.n	8009d62 <__swsetup_r+0x66>
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f001 fc6d 	bl	800b63c <_free_r>
 8009d62:	2300      	movs	r3, #0
 8009d64:	6363      	str	r3, [r4, #52]	; 0x34
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	6063      	str	r3, [r4, #4]
 8009d72:	6923      	ldr	r3, [r4, #16]
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f043 0308 	orr.w	r3, r3, #8
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	6923      	ldr	r3, [r4, #16]
 8009d80:	b94b      	cbnz	r3, 8009d96 <__swsetup_r+0x9a>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d8c:	d003      	beq.n	8009d96 <__swsetup_r+0x9a>
 8009d8e:	4621      	mov	r1, r4
 8009d90:	4630      	mov	r0, r6
 8009d92:	f001 f87d 	bl	800ae90 <__smakebuf_r>
 8009d96:	89a0      	ldrh	r0, [r4, #12]
 8009d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d9c:	f010 0301 	ands.w	r3, r0, #1
 8009da0:	d00a      	beq.n	8009db8 <__swsetup_r+0xbc>
 8009da2:	2300      	movs	r3, #0
 8009da4:	60a3      	str	r3, [r4, #8]
 8009da6:	6963      	ldr	r3, [r4, #20]
 8009da8:	425b      	negs	r3, r3
 8009daa:	61a3      	str	r3, [r4, #24]
 8009dac:	6923      	ldr	r3, [r4, #16]
 8009dae:	b943      	cbnz	r3, 8009dc2 <__swsetup_r+0xc6>
 8009db0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009db4:	d1ba      	bne.n	8009d2c <__swsetup_r+0x30>
 8009db6:	bd70      	pop	{r4, r5, r6, pc}
 8009db8:	0781      	lsls	r1, r0, #30
 8009dba:	bf58      	it	pl
 8009dbc:	6963      	ldrpl	r3, [r4, #20]
 8009dbe:	60a3      	str	r3, [r4, #8]
 8009dc0:	e7f4      	b.n	8009dac <__swsetup_r+0xb0>
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	e7f7      	b.n	8009db6 <__swsetup_r+0xba>
 8009dc6:	bf00      	nop
 8009dc8:	20000024 	.word	0x20000024
 8009dcc:	0800c800 	.word	0x0800c800
 8009dd0:	0800c820 	.word	0x0800c820
 8009dd4:	0800c7e0 	.word	0x0800c7e0

08009dd8 <quorem>:
 8009dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	6903      	ldr	r3, [r0, #16]
 8009dde:	690c      	ldr	r4, [r1, #16]
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	4607      	mov	r7, r0
 8009de4:	f2c0 8081 	blt.w	8009eea <quorem+0x112>
 8009de8:	3c01      	subs	r4, #1
 8009dea:	f101 0814 	add.w	r8, r1, #20
 8009dee:	f100 0514 	add.w	r5, r0, #20
 8009df2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e00:	3301      	adds	r3, #1
 8009e02:	429a      	cmp	r2, r3
 8009e04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e10:	d331      	bcc.n	8009e76 <quorem+0x9e>
 8009e12:	f04f 0e00 	mov.w	lr, #0
 8009e16:	4640      	mov	r0, r8
 8009e18:	46ac      	mov	ip, r5
 8009e1a:	46f2      	mov	sl, lr
 8009e1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e20:	b293      	uxth	r3, r2
 8009e22:	fb06 e303 	mla	r3, r6, r3, lr
 8009e26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	ebaa 0303 	sub.w	r3, sl, r3
 8009e30:	0c12      	lsrs	r2, r2, #16
 8009e32:	f8dc a000 	ldr.w	sl, [ip]
 8009e36:	fb06 e202 	mla	r2, r6, r2, lr
 8009e3a:	fa13 f38a 	uxtah	r3, r3, sl
 8009e3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e42:	fa1f fa82 	uxth.w	sl, r2
 8009e46:	f8dc 2000 	ldr.w	r2, [ip]
 8009e4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009e4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e58:	4581      	cmp	r9, r0
 8009e5a:	f84c 3b04 	str.w	r3, [ip], #4
 8009e5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e62:	d2db      	bcs.n	8009e1c <quorem+0x44>
 8009e64:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e68:	b92b      	cbnz	r3, 8009e76 <quorem+0x9e>
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	3b04      	subs	r3, #4
 8009e6e:	429d      	cmp	r5, r3
 8009e70:	461a      	mov	r2, r3
 8009e72:	d32e      	bcc.n	8009ed2 <quorem+0xfa>
 8009e74:	613c      	str	r4, [r7, #16]
 8009e76:	4638      	mov	r0, r7
 8009e78:	f001 fad0 	bl	800b41c <__mcmp>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	db24      	blt.n	8009eca <quorem+0xf2>
 8009e80:	3601      	adds	r6, #1
 8009e82:	4628      	mov	r0, r5
 8009e84:	f04f 0c00 	mov.w	ip, #0
 8009e88:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e8c:	f8d0 e000 	ldr.w	lr, [r0]
 8009e90:	b293      	uxth	r3, r2
 8009e92:	ebac 0303 	sub.w	r3, ip, r3
 8009e96:	0c12      	lsrs	r2, r2, #16
 8009e98:	fa13 f38e 	uxtah	r3, r3, lr
 8009e9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ea0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eaa:	45c1      	cmp	r9, r8
 8009eac:	f840 3b04 	str.w	r3, [r0], #4
 8009eb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009eb4:	d2e8      	bcs.n	8009e88 <quorem+0xb0>
 8009eb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ebe:	b922      	cbnz	r2, 8009eca <quorem+0xf2>
 8009ec0:	3b04      	subs	r3, #4
 8009ec2:	429d      	cmp	r5, r3
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	d30a      	bcc.n	8009ede <quorem+0x106>
 8009ec8:	613c      	str	r4, [r7, #16]
 8009eca:	4630      	mov	r0, r6
 8009ecc:	b003      	add	sp, #12
 8009ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	3b04      	subs	r3, #4
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	d1cc      	bne.n	8009e74 <quorem+0x9c>
 8009eda:	3c01      	subs	r4, #1
 8009edc:	e7c7      	b.n	8009e6e <quorem+0x96>
 8009ede:	6812      	ldr	r2, [r2, #0]
 8009ee0:	3b04      	subs	r3, #4
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	d1f0      	bne.n	8009ec8 <quorem+0xf0>
 8009ee6:	3c01      	subs	r4, #1
 8009ee8:	e7eb      	b.n	8009ec2 <quorem+0xea>
 8009eea:	2000      	movs	r0, #0
 8009eec:	e7ee      	b.n	8009ecc <quorem+0xf4>
	...

08009ef0 <_dtoa_r>:
 8009ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	ed2d 8b02 	vpush	{d8}
 8009ef8:	ec57 6b10 	vmov	r6, r7, d0
 8009efc:	b095      	sub	sp, #84	; 0x54
 8009efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f04:	9105      	str	r1, [sp, #20]
 8009f06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f10:	b975      	cbnz	r5, 8009f30 <_dtoa_r+0x40>
 8009f12:	2010      	movs	r0, #16
 8009f14:	f000 fffc 	bl	800af10 <malloc>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	6260      	str	r0, [r4, #36]	; 0x24
 8009f1c:	b920      	cbnz	r0, 8009f28 <_dtoa_r+0x38>
 8009f1e:	4bb2      	ldr	r3, [pc, #712]	; (800a1e8 <_dtoa_r+0x2f8>)
 8009f20:	21ea      	movs	r1, #234	; 0xea
 8009f22:	48b2      	ldr	r0, [pc, #712]	; (800a1ec <_dtoa_r+0x2fc>)
 8009f24:	f001 fe3c 	bl	800bba0 <__assert_func>
 8009f28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f2c:	6005      	str	r5, [r0, #0]
 8009f2e:	60c5      	str	r5, [r0, #12]
 8009f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f32:	6819      	ldr	r1, [r3, #0]
 8009f34:	b151      	cbz	r1, 8009f4c <_dtoa_r+0x5c>
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	604a      	str	r2, [r1, #4]
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	4093      	lsls	r3, r2
 8009f3e:	608b      	str	r3, [r1, #8]
 8009f40:	4620      	mov	r0, r4
 8009f42:	f001 f82d 	bl	800afa0 <_Bfree>
 8009f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	1e3b      	subs	r3, r7, #0
 8009f4e:	bfb9      	ittee	lt
 8009f50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f54:	9303      	strlt	r3, [sp, #12]
 8009f56:	2300      	movge	r3, #0
 8009f58:	f8c8 3000 	strge.w	r3, [r8]
 8009f5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009f60:	4ba3      	ldr	r3, [pc, #652]	; (800a1f0 <_dtoa_r+0x300>)
 8009f62:	bfbc      	itt	lt
 8009f64:	2201      	movlt	r2, #1
 8009f66:	f8c8 2000 	strlt.w	r2, [r8]
 8009f6a:	ea33 0309 	bics.w	r3, r3, r9
 8009f6e:	d11b      	bne.n	8009fa8 <_dtoa_r+0xb8>
 8009f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f72:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f7c:	4333      	orrs	r3, r6
 8009f7e:	f000 857a 	beq.w	800aa76 <_dtoa_r+0xb86>
 8009f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f84:	b963      	cbnz	r3, 8009fa0 <_dtoa_r+0xb0>
 8009f86:	4b9b      	ldr	r3, [pc, #620]	; (800a1f4 <_dtoa_r+0x304>)
 8009f88:	e024      	b.n	8009fd4 <_dtoa_r+0xe4>
 8009f8a:	4b9b      	ldr	r3, [pc, #620]	; (800a1f8 <_dtoa_r+0x308>)
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	3308      	adds	r3, #8
 8009f90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	9800      	ldr	r0, [sp, #0]
 8009f96:	b015      	add	sp, #84	; 0x54
 8009f98:	ecbd 8b02 	vpop	{d8}
 8009f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa0:	4b94      	ldr	r3, [pc, #592]	; (800a1f4 <_dtoa_r+0x304>)
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	3303      	adds	r3, #3
 8009fa6:	e7f3      	b.n	8009f90 <_dtoa_r+0xa0>
 8009fa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fac:	2200      	movs	r2, #0
 8009fae:	ec51 0b17 	vmov	r0, r1, d7
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009fb8:	f7f6 fd8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fbc:	4680      	mov	r8, r0
 8009fbe:	b158      	cbz	r0, 8009fd8 <_dtoa_r+0xe8>
 8009fc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 8551 	beq.w	800aa70 <_dtoa_r+0xb80>
 8009fce:	488b      	ldr	r0, [pc, #556]	; (800a1fc <_dtoa_r+0x30c>)
 8009fd0:	6018      	str	r0, [r3, #0]
 8009fd2:	1e43      	subs	r3, r0, #1
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	e7dd      	b.n	8009f94 <_dtoa_r+0xa4>
 8009fd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009fdc:	aa12      	add	r2, sp, #72	; 0x48
 8009fde:	a913      	add	r1, sp, #76	; 0x4c
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f001 fabf 	bl	800b564 <__d2b>
 8009fe6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fea:	4683      	mov	fp, r0
 8009fec:	2d00      	cmp	r5, #0
 8009fee:	d07c      	beq.n	800a0ea <_dtoa_r+0x1fa>
 8009ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ffa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009ffe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a002:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a00a:	4b7d      	ldr	r3, [pc, #500]	; (800a200 <_dtoa_r+0x310>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	4630      	mov	r0, r6
 800a010:	4639      	mov	r1, r7
 800a012:	f7f6 f941 	bl	8000298 <__aeabi_dsub>
 800a016:	a36e      	add	r3, pc, #440	; (adr r3, 800a1d0 <_dtoa_r+0x2e0>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f7f6 faf4 	bl	8000608 <__aeabi_dmul>
 800a020:	a36d      	add	r3, pc, #436	; (adr r3, 800a1d8 <_dtoa_r+0x2e8>)
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f7f6 f939 	bl	800029c <__adddf3>
 800a02a:	4606      	mov	r6, r0
 800a02c:	4628      	mov	r0, r5
 800a02e:	460f      	mov	r7, r1
 800a030:	f7f6 fa80 	bl	8000534 <__aeabi_i2d>
 800a034:	a36a      	add	r3, pc, #424	; (adr r3, 800a1e0 <_dtoa_r+0x2f0>)
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	f7f6 fae5 	bl	8000608 <__aeabi_dmul>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4630      	mov	r0, r6
 800a044:	4639      	mov	r1, r7
 800a046:	f7f6 f929 	bl	800029c <__adddf3>
 800a04a:	4606      	mov	r6, r0
 800a04c:	460f      	mov	r7, r1
 800a04e:	f7f6 fd8b 	bl	8000b68 <__aeabi_d2iz>
 800a052:	2200      	movs	r2, #0
 800a054:	4682      	mov	sl, r0
 800a056:	2300      	movs	r3, #0
 800a058:	4630      	mov	r0, r6
 800a05a:	4639      	mov	r1, r7
 800a05c:	f7f6 fd46 	bl	8000aec <__aeabi_dcmplt>
 800a060:	b148      	cbz	r0, 800a076 <_dtoa_r+0x186>
 800a062:	4650      	mov	r0, sl
 800a064:	f7f6 fa66 	bl	8000534 <__aeabi_i2d>
 800a068:	4632      	mov	r2, r6
 800a06a:	463b      	mov	r3, r7
 800a06c:	f7f6 fd34 	bl	8000ad8 <__aeabi_dcmpeq>
 800a070:	b908      	cbnz	r0, 800a076 <_dtoa_r+0x186>
 800a072:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a076:	f1ba 0f16 	cmp.w	sl, #22
 800a07a:	d854      	bhi.n	800a126 <_dtoa_r+0x236>
 800a07c:	4b61      	ldr	r3, [pc, #388]	; (800a204 <_dtoa_r+0x314>)
 800a07e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a08a:	f7f6 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d04b      	beq.n	800a12a <_dtoa_r+0x23a>
 800a092:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a096:	2300      	movs	r3, #0
 800a098:	930e      	str	r3, [sp, #56]	; 0x38
 800a09a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a09c:	1b5d      	subs	r5, r3, r5
 800a09e:	1e6b      	subs	r3, r5, #1
 800a0a0:	9304      	str	r3, [sp, #16]
 800a0a2:	bf43      	ittte	mi
 800a0a4:	2300      	movmi	r3, #0
 800a0a6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a0aa:	9304      	strmi	r3, [sp, #16]
 800a0ac:	f04f 0800 	movpl.w	r8, #0
 800a0b0:	f1ba 0f00 	cmp.w	sl, #0
 800a0b4:	db3b      	blt.n	800a12e <_dtoa_r+0x23e>
 800a0b6:	9b04      	ldr	r3, [sp, #16]
 800a0b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a0bc:	4453      	add	r3, sl
 800a0be:	9304      	str	r3, [sp, #16]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	9306      	str	r3, [sp, #24]
 800a0c4:	9b05      	ldr	r3, [sp, #20]
 800a0c6:	2b09      	cmp	r3, #9
 800a0c8:	d869      	bhi.n	800a19e <_dtoa_r+0x2ae>
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	bfc4      	itt	gt
 800a0ce:	3b04      	subgt	r3, #4
 800a0d0:	9305      	strgt	r3, [sp, #20]
 800a0d2:	9b05      	ldr	r3, [sp, #20]
 800a0d4:	f1a3 0302 	sub.w	r3, r3, #2
 800a0d8:	bfcc      	ite	gt
 800a0da:	2500      	movgt	r5, #0
 800a0dc:	2501      	movle	r5, #1
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d869      	bhi.n	800a1b6 <_dtoa_r+0x2c6>
 800a0e2:	e8df f003 	tbb	[pc, r3]
 800a0e6:	4e2c      	.short	0x4e2c
 800a0e8:	5a4c      	.short	0x5a4c
 800a0ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a0ee:	441d      	add	r5, r3
 800a0f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0f4:	2b20      	cmp	r3, #32
 800a0f6:	bfc1      	itttt	gt
 800a0f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a100:	fa09 f303 	lslgt.w	r3, r9, r3
 800a104:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a108:	bfda      	itte	le
 800a10a:	f1c3 0320 	rsble	r3, r3, #32
 800a10e:	fa06 f003 	lslle.w	r0, r6, r3
 800a112:	4318      	orrgt	r0, r3
 800a114:	f7f6 f9fe 	bl	8000514 <__aeabi_ui2d>
 800a118:	2301      	movs	r3, #1
 800a11a:	4606      	mov	r6, r0
 800a11c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a120:	3d01      	subs	r5, #1
 800a122:	9310      	str	r3, [sp, #64]	; 0x40
 800a124:	e771      	b.n	800a00a <_dtoa_r+0x11a>
 800a126:	2301      	movs	r3, #1
 800a128:	e7b6      	b.n	800a098 <_dtoa_r+0x1a8>
 800a12a:	900e      	str	r0, [sp, #56]	; 0x38
 800a12c:	e7b5      	b.n	800a09a <_dtoa_r+0x1aa>
 800a12e:	f1ca 0300 	rsb	r3, sl, #0
 800a132:	9306      	str	r3, [sp, #24]
 800a134:	2300      	movs	r3, #0
 800a136:	eba8 080a 	sub.w	r8, r8, sl
 800a13a:	930d      	str	r3, [sp, #52]	; 0x34
 800a13c:	e7c2      	b.n	800a0c4 <_dtoa_r+0x1d4>
 800a13e:	2300      	movs	r3, #0
 800a140:	9308      	str	r3, [sp, #32]
 800a142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a144:	2b00      	cmp	r3, #0
 800a146:	dc39      	bgt.n	800a1bc <_dtoa_r+0x2cc>
 800a148:	f04f 0901 	mov.w	r9, #1
 800a14c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a150:	464b      	mov	r3, r9
 800a152:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a156:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a158:	2200      	movs	r2, #0
 800a15a:	6042      	str	r2, [r0, #4]
 800a15c:	2204      	movs	r2, #4
 800a15e:	f102 0614 	add.w	r6, r2, #20
 800a162:	429e      	cmp	r6, r3
 800a164:	6841      	ldr	r1, [r0, #4]
 800a166:	d92f      	bls.n	800a1c8 <_dtoa_r+0x2d8>
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fed9 	bl	800af20 <_Balloc>
 800a16e:	9000      	str	r0, [sp, #0]
 800a170:	2800      	cmp	r0, #0
 800a172:	d14b      	bne.n	800a20c <_dtoa_r+0x31c>
 800a174:	4b24      	ldr	r3, [pc, #144]	; (800a208 <_dtoa_r+0x318>)
 800a176:	4602      	mov	r2, r0
 800a178:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a17c:	e6d1      	b.n	8009f22 <_dtoa_r+0x32>
 800a17e:	2301      	movs	r3, #1
 800a180:	e7de      	b.n	800a140 <_dtoa_r+0x250>
 800a182:	2300      	movs	r3, #0
 800a184:	9308      	str	r3, [sp, #32]
 800a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a188:	eb0a 0903 	add.w	r9, sl, r3
 800a18c:	f109 0301 	add.w	r3, r9, #1
 800a190:	2b01      	cmp	r3, #1
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	bfb8      	it	lt
 800a196:	2301      	movlt	r3, #1
 800a198:	e7dd      	b.n	800a156 <_dtoa_r+0x266>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e7f2      	b.n	800a184 <_dtoa_r+0x294>
 800a19e:	2501      	movs	r5, #1
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9305      	str	r3, [sp, #20]
 800a1a4:	9508      	str	r5, [sp, #32]
 800a1a6:	f04f 39ff 	mov.w	r9, #4294967295
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1b0:	2312      	movs	r3, #18
 800a1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b4:	e7cf      	b.n	800a156 <_dtoa_r+0x266>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	9308      	str	r3, [sp, #32]
 800a1ba:	e7f4      	b.n	800a1a6 <_dtoa_r+0x2b6>
 800a1bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a1c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1c4:	464b      	mov	r3, r9
 800a1c6:	e7c6      	b.n	800a156 <_dtoa_r+0x266>
 800a1c8:	3101      	adds	r1, #1
 800a1ca:	6041      	str	r1, [r0, #4]
 800a1cc:	0052      	lsls	r2, r2, #1
 800a1ce:	e7c6      	b.n	800a15e <_dtoa_r+0x26e>
 800a1d0:	636f4361 	.word	0x636f4361
 800a1d4:	3fd287a7 	.word	0x3fd287a7
 800a1d8:	8b60c8b3 	.word	0x8b60c8b3
 800a1dc:	3fc68a28 	.word	0x3fc68a28
 800a1e0:	509f79fb 	.word	0x509f79fb
 800a1e4:	3fd34413 	.word	0x3fd34413
 800a1e8:	0800c759 	.word	0x0800c759
 800a1ec:	0800c770 	.word	0x0800c770
 800a1f0:	7ff00000 	.word	0x7ff00000
 800a1f4:	0800c755 	.word	0x0800c755
 800a1f8:	0800c74c 	.word	0x0800c74c
 800a1fc:	0800c729 	.word	0x0800c729
 800a200:	3ff80000 	.word	0x3ff80000
 800a204:	0800c8c8 	.word	0x0800c8c8
 800a208:	0800c7cf 	.word	0x0800c7cf
 800a20c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a20e:	9a00      	ldr	r2, [sp, #0]
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	9b01      	ldr	r3, [sp, #4]
 800a214:	2b0e      	cmp	r3, #14
 800a216:	f200 80ad 	bhi.w	800a374 <_dtoa_r+0x484>
 800a21a:	2d00      	cmp	r5, #0
 800a21c:	f000 80aa 	beq.w	800a374 <_dtoa_r+0x484>
 800a220:	f1ba 0f00 	cmp.w	sl, #0
 800a224:	dd36      	ble.n	800a294 <_dtoa_r+0x3a4>
 800a226:	4ac3      	ldr	r2, [pc, #780]	; (800a534 <_dtoa_r+0x644>)
 800a228:	f00a 030f 	and.w	r3, sl, #15
 800a22c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a230:	ed93 7b00 	vldr	d7, [r3]
 800a234:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a238:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a23c:	eeb0 8a47 	vmov.f32	s16, s14
 800a240:	eef0 8a67 	vmov.f32	s17, s15
 800a244:	d016      	beq.n	800a274 <_dtoa_r+0x384>
 800a246:	4bbc      	ldr	r3, [pc, #752]	; (800a538 <_dtoa_r+0x648>)
 800a248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a24c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a250:	f7f6 fb04 	bl	800085c <__aeabi_ddiv>
 800a254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a258:	f007 070f 	and.w	r7, r7, #15
 800a25c:	2503      	movs	r5, #3
 800a25e:	4eb6      	ldr	r6, [pc, #728]	; (800a538 <_dtoa_r+0x648>)
 800a260:	b957      	cbnz	r7, 800a278 <_dtoa_r+0x388>
 800a262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a266:	ec53 2b18 	vmov	r2, r3, d8
 800a26a:	f7f6 faf7 	bl	800085c <__aeabi_ddiv>
 800a26e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a272:	e029      	b.n	800a2c8 <_dtoa_r+0x3d8>
 800a274:	2502      	movs	r5, #2
 800a276:	e7f2      	b.n	800a25e <_dtoa_r+0x36e>
 800a278:	07f9      	lsls	r1, r7, #31
 800a27a:	d508      	bpl.n	800a28e <_dtoa_r+0x39e>
 800a27c:	ec51 0b18 	vmov	r0, r1, d8
 800a280:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a284:	f7f6 f9c0 	bl	8000608 <__aeabi_dmul>
 800a288:	ec41 0b18 	vmov	d8, r0, r1
 800a28c:	3501      	adds	r5, #1
 800a28e:	107f      	asrs	r7, r7, #1
 800a290:	3608      	adds	r6, #8
 800a292:	e7e5      	b.n	800a260 <_dtoa_r+0x370>
 800a294:	f000 80a6 	beq.w	800a3e4 <_dtoa_r+0x4f4>
 800a298:	f1ca 0600 	rsb	r6, sl, #0
 800a29c:	4ba5      	ldr	r3, [pc, #660]	; (800a534 <_dtoa_r+0x644>)
 800a29e:	4fa6      	ldr	r7, [pc, #664]	; (800a538 <_dtoa_r+0x648>)
 800a2a0:	f006 020f 	and.w	r2, r6, #15
 800a2a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2b0:	f7f6 f9aa 	bl	8000608 <__aeabi_dmul>
 800a2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2b8:	1136      	asrs	r6, r6, #4
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2502      	movs	r5, #2
 800a2be:	2e00      	cmp	r6, #0
 800a2c0:	f040 8085 	bne.w	800a3ce <_dtoa_r+0x4de>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1d2      	bne.n	800a26e <_dtoa_r+0x37e>
 800a2c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 808c 	beq.w	800a3e8 <_dtoa_r+0x4f8>
 800a2d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a2d4:	4b99      	ldr	r3, [pc, #612]	; (800a53c <_dtoa_r+0x64c>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	4630      	mov	r0, r6
 800a2da:	4639      	mov	r1, r7
 800a2dc:	f7f6 fc06 	bl	8000aec <__aeabi_dcmplt>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	f000 8081 	beq.w	800a3e8 <_dtoa_r+0x4f8>
 800a2e6:	9b01      	ldr	r3, [sp, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d07d      	beq.n	800a3e8 <_dtoa_r+0x4f8>
 800a2ec:	f1b9 0f00 	cmp.w	r9, #0
 800a2f0:	dd3c      	ble.n	800a36c <_dtoa_r+0x47c>
 800a2f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a2f6:	9307      	str	r3, [sp, #28]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	4b91      	ldr	r3, [pc, #580]	; (800a540 <_dtoa_r+0x650>)
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4639      	mov	r1, r7
 800a300:	f7f6 f982 	bl	8000608 <__aeabi_dmul>
 800a304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a308:	3501      	adds	r5, #1
 800a30a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a30e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a312:	4628      	mov	r0, r5
 800a314:	f7f6 f90e 	bl	8000534 <__aeabi_i2d>
 800a318:	4632      	mov	r2, r6
 800a31a:	463b      	mov	r3, r7
 800a31c:	f7f6 f974 	bl	8000608 <__aeabi_dmul>
 800a320:	4b88      	ldr	r3, [pc, #544]	; (800a544 <_dtoa_r+0x654>)
 800a322:	2200      	movs	r2, #0
 800a324:	f7f5 ffba 	bl	800029c <__adddf3>
 800a328:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a32c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a330:	9303      	str	r3, [sp, #12]
 800a332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a334:	2b00      	cmp	r3, #0
 800a336:	d15c      	bne.n	800a3f2 <_dtoa_r+0x502>
 800a338:	4b83      	ldr	r3, [pc, #524]	; (800a548 <_dtoa_r+0x658>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	4630      	mov	r0, r6
 800a33e:	4639      	mov	r1, r7
 800a340:	f7f5 ffaa 	bl	8000298 <__aeabi_dsub>
 800a344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a348:	4606      	mov	r6, r0
 800a34a:	460f      	mov	r7, r1
 800a34c:	f7f6 fbec 	bl	8000b28 <__aeabi_dcmpgt>
 800a350:	2800      	cmp	r0, #0
 800a352:	f040 8296 	bne.w	800a882 <_dtoa_r+0x992>
 800a356:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a35a:	4630      	mov	r0, r6
 800a35c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a360:	4639      	mov	r1, r7
 800a362:	f7f6 fbc3 	bl	8000aec <__aeabi_dcmplt>
 800a366:	2800      	cmp	r0, #0
 800a368:	f040 8288 	bne.w	800a87c <_dtoa_r+0x98c>
 800a36c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a370:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a376:	2b00      	cmp	r3, #0
 800a378:	f2c0 8158 	blt.w	800a62c <_dtoa_r+0x73c>
 800a37c:	f1ba 0f0e 	cmp.w	sl, #14
 800a380:	f300 8154 	bgt.w	800a62c <_dtoa_r+0x73c>
 800a384:	4b6b      	ldr	r3, [pc, #428]	; (800a534 <_dtoa_r+0x644>)
 800a386:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a38a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a390:	2b00      	cmp	r3, #0
 800a392:	f280 80e3 	bge.w	800a55c <_dtoa_r+0x66c>
 800a396:	9b01      	ldr	r3, [sp, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f300 80df 	bgt.w	800a55c <_dtoa_r+0x66c>
 800a39e:	f040 826d 	bne.w	800a87c <_dtoa_r+0x98c>
 800a3a2:	4b69      	ldr	r3, [pc, #420]	; (800a548 <_dtoa_r+0x658>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	f7f6 f92d 	bl	8000608 <__aeabi_dmul>
 800a3ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3b2:	f7f6 fbaf 	bl	8000b14 <__aeabi_dcmpge>
 800a3b6:	9e01      	ldr	r6, [sp, #4]
 800a3b8:	4637      	mov	r7, r6
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	f040 8243 	bne.w	800a846 <_dtoa_r+0x956>
 800a3c0:	9d00      	ldr	r5, [sp, #0]
 800a3c2:	2331      	movs	r3, #49	; 0x31
 800a3c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a3c8:	f10a 0a01 	add.w	sl, sl, #1
 800a3cc:	e23f      	b.n	800a84e <_dtoa_r+0x95e>
 800a3ce:	07f2      	lsls	r2, r6, #31
 800a3d0:	d505      	bpl.n	800a3de <_dtoa_r+0x4ee>
 800a3d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d6:	f7f6 f917 	bl	8000608 <__aeabi_dmul>
 800a3da:	3501      	adds	r5, #1
 800a3dc:	2301      	movs	r3, #1
 800a3de:	1076      	asrs	r6, r6, #1
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	e76c      	b.n	800a2be <_dtoa_r+0x3ce>
 800a3e4:	2502      	movs	r5, #2
 800a3e6:	e76f      	b.n	800a2c8 <_dtoa_r+0x3d8>
 800a3e8:	9b01      	ldr	r3, [sp, #4]
 800a3ea:	f8cd a01c 	str.w	sl, [sp, #28]
 800a3ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a3f0:	e78d      	b.n	800a30e <_dtoa_r+0x41e>
 800a3f2:	9900      	ldr	r1, [sp, #0]
 800a3f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a3f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3f8:	4b4e      	ldr	r3, [pc, #312]	; (800a534 <_dtoa_r+0x644>)
 800a3fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3fe:	4401      	add	r1, r0
 800a400:	9102      	str	r1, [sp, #8]
 800a402:	9908      	ldr	r1, [sp, #32]
 800a404:	eeb0 8a47 	vmov.f32	s16, s14
 800a408:	eef0 8a67 	vmov.f32	s17, s15
 800a40c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a410:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a414:	2900      	cmp	r1, #0
 800a416:	d045      	beq.n	800a4a4 <_dtoa_r+0x5b4>
 800a418:	494c      	ldr	r1, [pc, #304]	; (800a54c <_dtoa_r+0x65c>)
 800a41a:	2000      	movs	r0, #0
 800a41c:	f7f6 fa1e 	bl	800085c <__aeabi_ddiv>
 800a420:	ec53 2b18 	vmov	r2, r3, d8
 800a424:	f7f5 ff38 	bl	8000298 <__aeabi_dsub>
 800a428:	9d00      	ldr	r5, [sp, #0]
 800a42a:	ec41 0b18 	vmov	d8, r0, r1
 800a42e:	4639      	mov	r1, r7
 800a430:	4630      	mov	r0, r6
 800a432:	f7f6 fb99 	bl	8000b68 <__aeabi_d2iz>
 800a436:	900c      	str	r0, [sp, #48]	; 0x30
 800a438:	f7f6 f87c 	bl	8000534 <__aeabi_i2d>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4630      	mov	r0, r6
 800a442:	4639      	mov	r1, r7
 800a444:	f7f5 ff28 	bl	8000298 <__aeabi_dsub>
 800a448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a44a:	3330      	adds	r3, #48	; 0x30
 800a44c:	f805 3b01 	strb.w	r3, [r5], #1
 800a450:	ec53 2b18 	vmov	r2, r3, d8
 800a454:	4606      	mov	r6, r0
 800a456:	460f      	mov	r7, r1
 800a458:	f7f6 fb48 	bl	8000aec <__aeabi_dcmplt>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d165      	bne.n	800a52c <_dtoa_r+0x63c>
 800a460:	4632      	mov	r2, r6
 800a462:	463b      	mov	r3, r7
 800a464:	4935      	ldr	r1, [pc, #212]	; (800a53c <_dtoa_r+0x64c>)
 800a466:	2000      	movs	r0, #0
 800a468:	f7f5 ff16 	bl	8000298 <__aeabi_dsub>
 800a46c:	ec53 2b18 	vmov	r2, r3, d8
 800a470:	f7f6 fb3c 	bl	8000aec <__aeabi_dcmplt>
 800a474:	2800      	cmp	r0, #0
 800a476:	f040 80b9 	bne.w	800a5ec <_dtoa_r+0x6fc>
 800a47a:	9b02      	ldr	r3, [sp, #8]
 800a47c:	429d      	cmp	r5, r3
 800a47e:	f43f af75 	beq.w	800a36c <_dtoa_r+0x47c>
 800a482:	4b2f      	ldr	r3, [pc, #188]	; (800a540 <_dtoa_r+0x650>)
 800a484:	ec51 0b18 	vmov	r0, r1, d8
 800a488:	2200      	movs	r2, #0
 800a48a:	f7f6 f8bd 	bl	8000608 <__aeabi_dmul>
 800a48e:	4b2c      	ldr	r3, [pc, #176]	; (800a540 <_dtoa_r+0x650>)
 800a490:	ec41 0b18 	vmov	d8, r0, r1
 800a494:	2200      	movs	r2, #0
 800a496:	4630      	mov	r0, r6
 800a498:	4639      	mov	r1, r7
 800a49a:	f7f6 f8b5 	bl	8000608 <__aeabi_dmul>
 800a49e:	4606      	mov	r6, r0
 800a4a0:	460f      	mov	r7, r1
 800a4a2:	e7c4      	b.n	800a42e <_dtoa_r+0x53e>
 800a4a4:	ec51 0b17 	vmov	r0, r1, d7
 800a4a8:	f7f6 f8ae 	bl	8000608 <__aeabi_dmul>
 800a4ac:	9b02      	ldr	r3, [sp, #8]
 800a4ae:	9d00      	ldr	r5, [sp, #0]
 800a4b0:	930c      	str	r3, [sp, #48]	; 0x30
 800a4b2:	ec41 0b18 	vmov	d8, r0, r1
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f7f6 fb55 	bl	8000b68 <__aeabi_d2iz>
 800a4be:	9011      	str	r0, [sp, #68]	; 0x44
 800a4c0:	f7f6 f838 	bl	8000534 <__aeabi_i2d>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f7f5 fee4 	bl	8000298 <__aeabi_dsub>
 800a4d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4d2:	3330      	adds	r3, #48	; 0x30
 800a4d4:	f805 3b01 	strb.w	r3, [r5], #1
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	429d      	cmp	r5, r3
 800a4dc:	4606      	mov	r6, r0
 800a4de:	460f      	mov	r7, r1
 800a4e0:	f04f 0200 	mov.w	r2, #0
 800a4e4:	d134      	bne.n	800a550 <_dtoa_r+0x660>
 800a4e6:	4b19      	ldr	r3, [pc, #100]	; (800a54c <_dtoa_r+0x65c>)
 800a4e8:	ec51 0b18 	vmov	r0, r1, d8
 800a4ec:	f7f5 fed6 	bl	800029c <__adddf3>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	4639      	mov	r1, r7
 800a4f8:	f7f6 fb16 	bl	8000b28 <__aeabi_dcmpgt>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d175      	bne.n	800a5ec <_dtoa_r+0x6fc>
 800a500:	ec53 2b18 	vmov	r2, r3, d8
 800a504:	4911      	ldr	r1, [pc, #68]	; (800a54c <_dtoa_r+0x65c>)
 800a506:	2000      	movs	r0, #0
 800a508:	f7f5 fec6 	bl	8000298 <__aeabi_dsub>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	4630      	mov	r0, r6
 800a512:	4639      	mov	r1, r7
 800a514:	f7f6 faea 	bl	8000aec <__aeabi_dcmplt>
 800a518:	2800      	cmp	r0, #0
 800a51a:	f43f af27 	beq.w	800a36c <_dtoa_r+0x47c>
 800a51e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a520:	1e6b      	subs	r3, r5, #1
 800a522:	930c      	str	r3, [sp, #48]	; 0x30
 800a524:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a528:	2b30      	cmp	r3, #48	; 0x30
 800a52a:	d0f8      	beq.n	800a51e <_dtoa_r+0x62e>
 800a52c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a530:	e04a      	b.n	800a5c8 <_dtoa_r+0x6d8>
 800a532:	bf00      	nop
 800a534:	0800c8c8 	.word	0x0800c8c8
 800a538:	0800c8a0 	.word	0x0800c8a0
 800a53c:	3ff00000 	.word	0x3ff00000
 800a540:	40240000 	.word	0x40240000
 800a544:	401c0000 	.word	0x401c0000
 800a548:	40140000 	.word	0x40140000
 800a54c:	3fe00000 	.word	0x3fe00000
 800a550:	4baf      	ldr	r3, [pc, #700]	; (800a810 <_dtoa_r+0x920>)
 800a552:	f7f6 f859 	bl	8000608 <__aeabi_dmul>
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	e7ac      	b.n	800a4b6 <_dtoa_r+0x5c6>
 800a55c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a560:	9d00      	ldr	r5, [sp, #0]
 800a562:	4642      	mov	r2, r8
 800a564:	464b      	mov	r3, r9
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 f977 	bl	800085c <__aeabi_ddiv>
 800a56e:	f7f6 fafb 	bl	8000b68 <__aeabi_d2iz>
 800a572:	9002      	str	r0, [sp, #8]
 800a574:	f7f5 ffde 	bl	8000534 <__aeabi_i2d>
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	f7f6 f844 	bl	8000608 <__aeabi_dmul>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f7f5 fe86 	bl	8000298 <__aeabi_dsub>
 800a58c:	9e02      	ldr	r6, [sp, #8]
 800a58e:	9f01      	ldr	r7, [sp, #4]
 800a590:	3630      	adds	r6, #48	; 0x30
 800a592:	f805 6b01 	strb.w	r6, [r5], #1
 800a596:	9e00      	ldr	r6, [sp, #0]
 800a598:	1bae      	subs	r6, r5, r6
 800a59a:	42b7      	cmp	r7, r6
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	d137      	bne.n	800a612 <_dtoa_r+0x722>
 800a5a2:	f7f5 fe7b 	bl	800029c <__adddf3>
 800a5a6:	4642      	mov	r2, r8
 800a5a8:	464b      	mov	r3, r9
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	460f      	mov	r7, r1
 800a5ae:	f7f6 fabb 	bl	8000b28 <__aeabi_dcmpgt>
 800a5b2:	b9c8      	cbnz	r0, 800a5e8 <_dtoa_r+0x6f8>
 800a5b4:	4642      	mov	r2, r8
 800a5b6:	464b      	mov	r3, r9
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	f7f6 fa8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5c0:	b110      	cbz	r0, 800a5c8 <_dtoa_r+0x6d8>
 800a5c2:	9b02      	ldr	r3, [sp, #8]
 800a5c4:	07d9      	lsls	r1, r3, #31
 800a5c6:	d40f      	bmi.n	800a5e8 <_dtoa_r+0x6f8>
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	4659      	mov	r1, fp
 800a5cc:	f000 fce8 	bl	800afa0 <_Bfree>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	702b      	strb	r3, [r5, #0]
 800a5d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5d6:	f10a 0001 	add.w	r0, sl, #1
 800a5da:	6018      	str	r0, [r3, #0]
 800a5dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f43f acd8 	beq.w	8009f94 <_dtoa_r+0xa4>
 800a5e4:	601d      	str	r5, [r3, #0]
 800a5e6:	e4d5      	b.n	8009f94 <_dtoa_r+0xa4>
 800a5e8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	461d      	mov	r5, r3
 800a5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5f4:	2a39      	cmp	r2, #57	; 0x39
 800a5f6:	d108      	bne.n	800a60a <_dtoa_r+0x71a>
 800a5f8:	9a00      	ldr	r2, [sp, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d1f7      	bne.n	800a5ee <_dtoa_r+0x6fe>
 800a5fe:	9a07      	ldr	r2, [sp, #28]
 800a600:	9900      	ldr	r1, [sp, #0]
 800a602:	3201      	adds	r2, #1
 800a604:	9207      	str	r2, [sp, #28]
 800a606:	2230      	movs	r2, #48	; 0x30
 800a608:	700a      	strb	r2, [r1, #0]
 800a60a:	781a      	ldrb	r2, [r3, #0]
 800a60c:	3201      	adds	r2, #1
 800a60e:	701a      	strb	r2, [r3, #0]
 800a610:	e78c      	b.n	800a52c <_dtoa_r+0x63c>
 800a612:	4b7f      	ldr	r3, [pc, #508]	; (800a810 <_dtoa_r+0x920>)
 800a614:	2200      	movs	r2, #0
 800a616:	f7f5 fff7 	bl	8000608 <__aeabi_dmul>
 800a61a:	2200      	movs	r2, #0
 800a61c:	2300      	movs	r3, #0
 800a61e:	4606      	mov	r6, r0
 800a620:	460f      	mov	r7, r1
 800a622:	f7f6 fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 800a626:	2800      	cmp	r0, #0
 800a628:	d09b      	beq.n	800a562 <_dtoa_r+0x672>
 800a62a:	e7cd      	b.n	800a5c8 <_dtoa_r+0x6d8>
 800a62c:	9a08      	ldr	r2, [sp, #32]
 800a62e:	2a00      	cmp	r2, #0
 800a630:	f000 80c4 	beq.w	800a7bc <_dtoa_r+0x8cc>
 800a634:	9a05      	ldr	r2, [sp, #20]
 800a636:	2a01      	cmp	r2, #1
 800a638:	f300 80a8 	bgt.w	800a78c <_dtoa_r+0x89c>
 800a63c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a63e:	2a00      	cmp	r2, #0
 800a640:	f000 80a0 	beq.w	800a784 <_dtoa_r+0x894>
 800a644:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a648:	9e06      	ldr	r6, [sp, #24]
 800a64a:	4645      	mov	r5, r8
 800a64c:	9a04      	ldr	r2, [sp, #16]
 800a64e:	2101      	movs	r1, #1
 800a650:	441a      	add	r2, r3
 800a652:	4620      	mov	r0, r4
 800a654:	4498      	add	r8, r3
 800a656:	9204      	str	r2, [sp, #16]
 800a658:	f000 fd5e 	bl	800b118 <__i2b>
 800a65c:	4607      	mov	r7, r0
 800a65e:	2d00      	cmp	r5, #0
 800a660:	dd0b      	ble.n	800a67a <_dtoa_r+0x78a>
 800a662:	9b04      	ldr	r3, [sp, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	dd08      	ble.n	800a67a <_dtoa_r+0x78a>
 800a668:	42ab      	cmp	r3, r5
 800a66a:	9a04      	ldr	r2, [sp, #16]
 800a66c:	bfa8      	it	ge
 800a66e:	462b      	movge	r3, r5
 800a670:	eba8 0803 	sub.w	r8, r8, r3
 800a674:	1aed      	subs	r5, r5, r3
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	9304      	str	r3, [sp, #16]
 800a67a:	9b06      	ldr	r3, [sp, #24]
 800a67c:	b1fb      	cbz	r3, 800a6be <_dtoa_r+0x7ce>
 800a67e:	9b08      	ldr	r3, [sp, #32]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 809f 	beq.w	800a7c4 <_dtoa_r+0x8d4>
 800a686:	2e00      	cmp	r6, #0
 800a688:	dd11      	ble.n	800a6ae <_dtoa_r+0x7be>
 800a68a:	4639      	mov	r1, r7
 800a68c:	4632      	mov	r2, r6
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 fdfe 	bl	800b290 <__pow5mult>
 800a694:	465a      	mov	r2, fp
 800a696:	4601      	mov	r1, r0
 800a698:	4607      	mov	r7, r0
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fd52 	bl	800b144 <__multiply>
 800a6a0:	4659      	mov	r1, fp
 800a6a2:	9007      	str	r0, [sp, #28]
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fc7b 	bl	800afa0 <_Bfree>
 800a6aa:	9b07      	ldr	r3, [sp, #28]
 800a6ac:	469b      	mov	fp, r3
 800a6ae:	9b06      	ldr	r3, [sp, #24]
 800a6b0:	1b9a      	subs	r2, r3, r6
 800a6b2:	d004      	beq.n	800a6be <_dtoa_r+0x7ce>
 800a6b4:	4659      	mov	r1, fp
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f000 fdea 	bl	800b290 <__pow5mult>
 800a6bc:	4683      	mov	fp, r0
 800a6be:	2101      	movs	r1, #1
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f000 fd29 	bl	800b118 <__i2b>
 800a6c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	dd7c      	ble.n	800a7c8 <_dtoa_r+0x8d8>
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fddc 	bl	800b290 <__pow5mult>
 800a6d8:	9b05      	ldr	r3, [sp, #20]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	4606      	mov	r6, r0
 800a6de:	dd76      	ble.n	800a7ce <_dtoa_r+0x8de>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9306      	str	r3, [sp, #24]
 800a6e4:	6933      	ldr	r3, [r6, #16]
 800a6e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6ea:	6918      	ldr	r0, [r3, #16]
 800a6ec:	f000 fcc4 	bl	800b078 <__hi0bits>
 800a6f0:	f1c0 0020 	rsb	r0, r0, #32
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	4418      	add	r0, r3
 800a6f8:	f010 001f 	ands.w	r0, r0, #31
 800a6fc:	f000 8086 	beq.w	800a80c <_dtoa_r+0x91c>
 800a700:	f1c0 0320 	rsb	r3, r0, #32
 800a704:	2b04      	cmp	r3, #4
 800a706:	dd7f      	ble.n	800a808 <_dtoa_r+0x918>
 800a708:	f1c0 001c 	rsb	r0, r0, #28
 800a70c:	9b04      	ldr	r3, [sp, #16]
 800a70e:	4403      	add	r3, r0
 800a710:	4480      	add	r8, r0
 800a712:	4405      	add	r5, r0
 800a714:	9304      	str	r3, [sp, #16]
 800a716:	f1b8 0f00 	cmp.w	r8, #0
 800a71a:	dd05      	ble.n	800a728 <_dtoa_r+0x838>
 800a71c:	4659      	mov	r1, fp
 800a71e:	4642      	mov	r2, r8
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fe0f 	bl	800b344 <__lshift>
 800a726:	4683      	mov	fp, r0
 800a728:	9b04      	ldr	r3, [sp, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	dd05      	ble.n	800a73a <_dtoa_r+0x84a>
 800a72e:	4631      	mov	r1, r6
 800a730:	461a      	mov	r2, r3
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fe06 	bl	800b344 <__lshift>
 800a738:	4606      	mov	r6, r0
 800a73a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d069      	beq.n	800a814 <_dtoa_r+0x924>
 800a740:	4631      	mov	r1, r6
 800a742:	4658      	mov	r0, fp
 800a744:	f000 fe6a 	bl	800b41c <__mcmp>
 800a748:	2800      	cmp	r0, #0
 800a74a:	da63      	bge.n	800a814 <_dtoa_r+0x924>
 800a74c:	2300      	movs	r3, #0
 800a74e:	4659      	mov	r1, fp
 800a750:	220a      	movs	r2, #10
 800a752:	4620      	mov	r0, r4
 800a754:	f000 fc46 	bl	800afe4 <__multadd>
 800a758:	9b08      	ldr	r3, [sp, #32]
 800a75a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a75e:	4683      	mov	fp, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 818f 	beq.w	800aa84 <_dtoa_r+0xb94>
 800a766:	4639      	mov	r1, r7
 800a768:	2300      	movs	r3, #0
 800a76a:	220a      	movs	r2, #10
 800a76c:	4620      	mov	r0, r4
 800a76e:	f000 fc39 	bl	800afe4 <__multadd>
 800a772:	f1b9 0f00 	cmp.w	r9, #0
 800a776:	4607      	mov	r7, r0
 800a778:	f300 808e 	bgt.w	800a898 <_dtoa_r+0x9a8>
 800a77c:	9b05      	ldr	r3, [sp, #20]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	dc50      	bgt.n	800a824 <_dtoa_r+0x934>
 800a782:	e089      	b.n	800a898 <_dtoa_r+0x9a8>
 800a784:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a78a:	e75d      	b.n	800a648 <_dtoa_r+0x758>
 800a78c:	9b01      	ldr	r3, [sp, #4]
 800a78e:	1e5e      	subs	r6, r3, #1
 800a790:	9b06      	ldr	r3, [sp, #24]
 800a792:	42b3      	cmp	r3, r6
 800a794:	bfbf      	itttt	lt
 800a796:	9b06      	ldrlt	r3, [sp, #24]
 800a798:	9606      	strlt	r6, [sp, #24]
 800a79a:	1af2      	sublt	r2, r6, r3
 800a79c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a79e:	bfb6      	itet	lt
 800a7a0:	189b      	addlt	r3, r3, r2
 800a7a2:	1b9e      	subge	r6, r3, r6
 800a7a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	bfb8      	it	lt
 800a7aa:	2600      	movlt	r6, #0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	bfb5      	itete	lt
 800a7b0:	eba8 0503 	sublt.w	r5, r8, r3
 800a7b4:	9b01      	ldrge	r3, [sp, #4]
 800a7b6:	2300      	movlt	r3, #0
 800a7b8:	4645      	movge	r5, r8
 800a7ba:	e747      	b.n	800a64c <_dtoa_r+0x75c>
 800a7bc:	9e06      	ldr	r6, [sp, #24]
 800a7be:	9f08      	ldr	r7, [sp, #32]
 800a7c0:	4645      	mov	r5, r8
 800a7c2:	e74c      	b.n	800a65e <_dtoa_r+0x76e>
 800a7c4:	9a06      	ldr	r2, [sp, #24]
 800a7c6:	e775      	b.n	800a6b4 <_dtoa_r+0x7c4>
 800a7c8:	9b05      	ldr	r3, [sp, #20]
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	dc18      	bgt.n	800a800 <_dtoa_r+0x910>
 800a7ce:	9b02      	ldr	r3, [sp, #8]
 800a7d0:	b9b3      	cbnz	r3, 800a800 <_dtoa_r+0x910>
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7d8:	b9a3      	cbnz	r3, 800a804 <_dtoa_r+0x914>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7e0:	0d1b      	lsrs	r3, r3, #20
 800a7e2:	051b      	lsls	r3, r3, #20
 800a7e4:	b12b      	cbz	r3, 800a7f2 <_dtoa_r+0x902>
 800a7e6:	9b04      	ldr	r3, [sp, #16]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	9304      	str	r3, [sp, #16]
 800a7ec:	f108 0801 	add.w	r8, r8, #1
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	9306      	str	r3, [sp, #24]
 800a7f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f47f af74 	bne.w	800a6e4 <_dtoa_r+0x7f4>
 800a7fc:	2001      	movs	r0, #1
 800a7fe:	e779      	b.n	800a6f4 <_dtoa_r+0x804>
 800a800:	2300      	movs	r3, #0
 800a802:	e7f6      	b.n	800a7f2 <_dtoa_r+0x902>
 800a804:	9b02      	ldr	r3, [sp, #8]
 800a806:	e7f4      	b.n	800a7f2 <_dtoa_r+0x902>
 800a808:	d085      	beq.n	800a716 <_dtoa_r+0x826>
 800a80a:	4618      	mov	r0, r3
 800a80c:	301c      	adds	r0, #28
 800a80e:	e77d      	b.n	800a70c <_dtoa_r+0x81c>
 800a810:	40240000 	.word	0x40240000
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dc38      	bgt.n	800a88c <_dtoa_r+0x99c>
 800a81a:	9b05      	ldr	r3, [sp, #20]
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	dd35      	ble.n	800a88c <_dtoa_r+0x99c>
 800a820:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a824:	f1b9 0f00 	cmp.w	r9, #0
 800a828:	d10d      	bne.n	800a846 <_dtoa_r+0x956>
 800a82a:	4631      	mov	r1, r6
 800a82c:	464b      	mov	r3, r9
 800a82e:	2205      	movs	r2, #5
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fbd7 	bl	800afe4 <__multadd>
 800a836:	4601      	mov	r1, r0
 800a838:	4606      	mov	r6, r0
 800a83a:	4658      	mov	r0, fp
 800a83c:	f000 fdee 	bl	800b41c <__mcmp>
 800a840:	2800      	cmp	r0, #0
 800a842:	f73f adbd 	bgt.w	800a3c0 <_dtoa_r+0x4d0>
 800a846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a848:	9d00      	ldr	r5, [sp, #0]
 800a84a:	ea6f 0a03 	mvn.w	sl, r3
 800a84e:	f04f 0800 	mov.w	r8, #0
 800a852:	4631      	mov	r1, r6
 800a854:	4620      	mov	r0, r4
 800a856:	f000 fba3 	bl	800afa0 <_Bfree>
 800a85a:	2f00      	cmp	r7, #0
 800a85c:	f43f aeb4 	beq.w	800a5c8 <_dtoa_r+0x6d8>
 800a860:	f1b8 0f00 	cmp.w	r8, #0
 800a864:	d005      	beq.n	800a872 <_dtoa_r+0x982>
 800a866:	45b8      	cmp	r8, r7
 800a868:	d003      	beq.n	800a872 <_dtoa_r+0x982>
 800a86a:	4641      	mov	r1, r8
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 fb97 	bl	800afa0 <_Bfree>
 800a872:	4639      	mov	r1, r7
 800a874:	4620      	mov	r0, r4
 800a876:	f000 fb93 	bl	800afa0 <_Bfree>
 800a87a:	e6a5      	b.n	800a5c8 <_dtoa_r+0x6d8>
 800a87c:	2600      	movs	r6, #0
 800a87e:	4637      	mov	r7, r6
 800a880:	e7e1      	b.n	800a846 <_dtoa_r+0x956>
 800a882:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a884:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a888:	4637      	mov	r7, r6
 800a88a:	e599      	b.n	800a3c0 <_dtoa_r+0x4d0>
 800a88c:	9b08      	ldr	r3, [sp, #32]
 800a88e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 80fd 	beq.w	800aa92 <_dtoa_r+0xba2>
 800a898:	2d00      	cmp	r5, #0
 800a89a:	dd05      	ble.n	800a8a8 <_dtoa_r+0x9b8>
 800a89c:	4639      	mov	r1, r7
 800a89e:	462a      	mov	r2, r5
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f000 fd4f 	bl	800b344 <__lshift>
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	9b06      	ldr	r3, [sp, #24]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d05c      	beq.n	800a968 <_dtoa_r+0xa78>
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 fb35 	bl	800af20 <_Balloc>
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	b928      	cbnz	r0, 800a8c6 <_dtoa_r+0x9d6>
 800a8ba:	4b80      	ldr	r3, [pc, #512]	; (800aabc <_dtoa_r+0xbcc>)
 800a8bc:	4602      	mov	r2, r0
 800a8be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8c2:	f7ff bb2e 	b.w	8009f22 <_dtoa_r+0x32>
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	3202      	adds	r2, #2
 800a8ca:	0092      	lsls	r2, r2, #2
 800a8cc:	f107 010c 	add.w	r1, r7, #12
 800a8d0:	300c      	adds	r0, #12
 800a8d2:	f7fe fc9d 	bl	8009210 <memcpy>
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 fd32 	bl	800b344 <__lshift>
 800a8e0:	9b00      	ldr	r3, [sp, #0]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	444b      	add	r3, r9
 800a8ea:	9307      	str	r3, [sp, #28]
 800a8ec:	9b02      	ldr	r3, [sp, #8]
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	46b8      	mov	r8, r7
 800a8f4:	9306      	str	r3, [sp, #24]
 800a8f6:	4607      	mov	r7, r0
 800a8f8:	9b01      	ldr	r3, [sp, #4]
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	4658      	mov	r0, fp
 800a900:	9302      	str	r3, [sp, #8]
 800a902:	f7ff fa69 	bl	8009dd8 <quorem>
 800a906:	4603      	mov	r3, r0
 800a908:	3330      	adds	r3, #48	; 0x30
 800a90a:	9004      	str	r0, [sp, #16]
 800a90c:	4641      	mov	r1, r8
 800a90e:	4658      	mov	r0, fp
 800a910:	9308      	str	r3, [sp, #32]
 800a912:	f000 fd83 	bl	800b41c <__mcmp>
 800a916:	463a      	mov	r2, r7
 800a918:	4681      	mov	r9, r0
 800a91a:	4631      	mov	r1, r6
 800a91c:	4620      	mov	r0, r4
 800a91e:	f000 fd99 	bl	800b454 <__mdiff>
 800a922:	68c2      	ldr	r2, [r0, #12]
 800a924:	9b08      	ldr	r3, [sp, #32]
 800a926:	4605      	mov	r5, r0
 800a928:	bb02      	cbnz	r2, 800a96c <_dtoa_r+0xa7c>
 800a92a:	4601      	mov	r1, r0
 800a92c:	4658      	mov	r0, fp
 800a92e:	f000 fd75 	bl	800b41c <__mcmp>
 800a932:	9b08      	ldr	r3, [sp, #32]
 800a934:	4602      	mov	r2, r0
 800a936:	4629      	mov	r1, r5
 800a938:	4620      	mov	r0, r4
 800a93a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a93e:	f000 fb2f 	bl	800afa0 <_Bfree>
 800a942:	9b05      	ldr	r3, [sp, #20]
 800a944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a946:	9d01      	ldr	r5, [sp, #4]
 800a948:	ea43 0102 	orr.w	r1, r3, r2
 800a94c:	9b06      	ldr	r3, [sp, #24]
 800a94e:	430b      	orrs	r3, r1
 800a950:	9b08      	ldr	r3, [sp, #32]
 800a952:	d10d      	bne.n	800a970 <_dtoa_r+0xa80>
 800a954:	2b39      	cmp	r3, #57	; 0x39
 800a956:	d029      	beq.n	800a9ac <_dtoa_r+0xabc>
 800a958:	f1b9 0f00 	cmp.w	r9, #0
 800a95c:	dd01      	ble.n	800a962 <_dtoa_r+0xa72>
 800a95e:	9b04      	ldr	r3, [sp, #16]
 800a960:	3331      	adds	r3, #49	; 0x31
 800a962:	9a02      	ldr	r2, [sp, #8]
 800a964:	7013      	strb	r3, [r2, #0]
 800a966:	e774      	b.n	800a852 <_dtoa_r+0x962>
 800a968:	4638      	mov	r0, r7
 800a96a:	e7b9      	b.n	800a8e0 <_dtoa_r+0x9f0>
 800a96c:	2201      	movs	r2, #1
 800a96e:	e7e2      	b.n	800a936 <_dtoa_r+0xa46>
 800a970:	f1b9 0f00 	cmp.w	r9, #0
 800a974:	db06      	blt.n	800a984 <_dtoa_r+0xa94>
 800a976:	9905      	ldr	r1, [sp, #20]
 800a978:	ea41 0909 	orr.w	r9, r1, r9
 800a97c:	9906      	ldr	r1, [sp, #24]
 800a97e:	ea59 0101 	orrs.w	r1, r9, r1
 800a982:	d120      	bne.n	800a9c6 <_dtoa_r+0xad6>
 800a984:	2a00      	cmp	r2, #0
 800a986:	ddec      	ble.n	800a962 <_dtoa_r+0xa72>
 800a988:	4659      	mov	r1, fp
 800a98a:	2201      	movs	r2, #1
 800a98c:	4620      	mov	r0, r4
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	f000 fcd8 	bl	800b344 <__lshift>
 800a994:	4631      	mov	r1, r6
 800a996:	4683      	mov	fp, r0
 800a998:	f000 fd40 	bl	800b41c <__mcmp>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	9b01      	ldr	r3, [sp, #4]
 800a9a0:	dc02      	bgt.n	800a9a8 <_dtoa_r+0xab8>
 800a9a2:	d1de      	bne.n	800a962 <_dtoa_r+0xa72>
 800a9a4:	07da      	lsls	r2, r3, #31
 800a9a6:	d5dc      	bpl.n	800a962 <_dtoa_r+0xa72>
 800a9a8:	2b39      	cmp	r3, #57	; 0x39
 800a9aa:	d1d8      	bne.n	800a95e <_dtoa_r+0xa6e>
 800a9ac:	9a02      	ldr	r2, [sp, #8]
 800a9ae:	2339      	movs	r3, #57	; 0x39
 800a9b0:	7013      	strb	r3, [r2, #0]
 800a9b2:	462b      	mov	r3, r5
 800a9b4:	461d      	mov	r5, r3
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9bc:	2a39      	cmp	r2, #57	; 0x39
 800a9be:	d050      	beq.n	800aa62 <_dtoa_r+0xb72>
 800a9c0:	3201      	adds	r2, #1
 800a9c2:	701a      	strb	r2, [r3, #0]
 800a9c4:	e745      	b.n	800a852 <_dtoa_r+0x962>
 800a9c6:	2a00      	cmp	r2, #0
 800a9c8:	dd03      	ble.n	800a9d2 <_dtoa_r+0xae2>
 800a9ca:	2b39      	cmp	r3, #57	; 0x39
 800a9cc:	d0ee      	beq.n	800a9ac <_dtoa_r+0xabc>
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	e7c7      	b.n	800a962 <_dtoa_r+0xa72>
 800a9d2:	9a01      	ldr	r2, [sp, #4]
 800a9d4:	9907      	ldr	r1, [sp, #28]
 800a9d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a9da:	428a      	cmp	r2, r1
 800a9dc:	d02a      	beq.n	800aa34 <_dtoa_r+0xb44>
 800a9de:	4659      	mov	r1, fp
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	220a      	movs	r2, #10
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f000 fafd 	bl	800afe4 <__multadd>
 800a9ea:	45b8      	cmp	r8, r7
 800a9ec:	4683      	mov	fp, r0
 800a9ee:	f04f 0300 	mov.w	r3, #0
 800a9f2:	f04f 020a 	mov.w	r2, #10
 800a9f6:	4641      	mov	r1, r8
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	d107      	bne.n	800aa0c <_dtoa_r+0xb1c>
 800a9fc:	f000 faf2 	bl	800afe4 <__multadd>
 800aa00:	4680      	mov	r8, r0
 800aa02:	4607      	mov	r7, r0
 800aa04:	9b01      	ldr	r3, [sp, #4]
 800aa06:	3301      	adds	r3, #1
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	e775      	b.n	800a8f8 <_dtoa_r+0xa08>
 800aa0c:	f000 faea 	bl	800afe4 <__multadd>
 800aa10:	4639      	mov	r1, r7
 800aa12:	4680      	mov	r8, r0
 800aa14:	2300      	movs	r3, #0
 800aa16:	220a      	movs	r2, #10
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f000 fae3 	bl	800afe4 <__multadd>
 800aa1e:	4607      	mov	r7, r0
 800aa20:	e7f0      	b.n	800aa04 <_dtoa_r+0xb14>
 800aa22:	f1b9 0f00 	cmp.w	r9, #0
 800aa26:	9a00      	ldr	r2, [sp, #0]
 800aa28:	bfcc      	ite	gt
 800aa2a:	464d      	movgt	r5, r9
 800aa2c:	2501      	movle	r5, #1
 800aa2e:	4415      	add	r5, r2
 800aa30:	f04f 0800 	mov.w	r8, #0
 800aa34:	4659      	mov	r1, fp
 800aa36:	2201      	movs	r2, #1
 800aa38:	4620      	mov	r0, r4
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	f000 fc82 	bl	800b344 <__lshift>
 800aa40:	4631      	mov	r1, r6
 800aa42:	4683      	mov	fp, r0
 800aa44:	f000 fcea 	bl	800b41c <__mcmp>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	dcb2      	bgt.n	800a9b2 <_dtoa_r+0xac2>
 800aa4c:	d102      	bne.n	800aa54 <_dtoa_r+0xb64>
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	07db      	lsls	r3, r3, #31
 800aa52:	d4ae      	bmi.n	800a9b2 <_dtoa_r+0xac2>
 800aa54:	462b      	mov	r3, r5
 800aa56:	461d      	mov	r5, r3
 800aa58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa5c:	2a30      	cmp	r2, #48	; 0x30
 800aa5e:	d0fa      	beq.n	800aa56 <_dtoa_r+0xb66>
 800aa60:	e6f7      	b.n	800a852 <_dtoa_r+0x962>
 800aa62:	9a00      	ldr	r2, [sp, #0]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d1a5      	bne.n	800a9b4 <_dtoa_r+0xac4>
 800aa68:	f10a 0a01 	add.w	sl, sl, #1
 800aa6c:	2331      	movs	r3, #49	; 0x31
 800aa6e:	e779      	b.n	800a964 <_dtoa_r+0xa74>
 800aa70:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <_dtoa_r+0xbd0>)
 800aa72:	f7ff baaf 	b.w	8009fd4 <_dtoa_r+0xe4>
 800aa76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f47f aa86 	bne.w	8009f8a <_dtoa_r+0x9a>
 800aa7e:	4b11      	ldr	r3, [pc, #68]	; (800aac4 <_dtoa_r+0xbd4>)
 800aa80:	f7ff baa8 	b.w	8009fd4 <_dtoa_r+0xe4>
 800aa84:	f1b9 0f00 	cmp.w	r9, #0
 800aa88:	dc03      	bgt.n	800aa92 <_dtoa_r+0xba2>
 800aa8a:	9b05      	ldr	r3, [sp, #20]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	f73f aec9 	bgt.w	800a824 <_dtoa_r+0x934>
 800aa92:	9d00      	ldr	r5, [sp, #0]
 800aa94:	4631      	mov	r1, r6
 800aa96:	4658      	mov	r0, fp
 800aa98:	f7ff f99e 	bl	8009dd8 <quorem>
 800aa9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aaa0:	f805 3b01 	strb.w	r3, [r5], #1
 800aaa4:	9a00      	ldr	r2, [sp, #0]
 800aaa6:	1aaa      	subs	r2, r5, r2
 800aaa8:	4591      	cmp	r9, r2
 800aaaa:	ddba      	ble.n	800aa22 <_dtoa_r+0xb32>
 800aaac:	4659      	mov	r1, fp
 800aaae:	2300      	movs	r3, #0
 800aab0:	220a      	movs	r2, #10
 800aab2:	4620      	mov	r0, r4
 800aab4:	f000 fa96 	bl	800afe4 <__multadd>
 800aab8:	4683      	mov	fp, r0
 800aaba:	e7eb      	b.n	800aa94 <_dtoa_r+0xba4>
 800aabc:	0800c7cf 	.word	0x0800c7cf
 800aac0:	0800c728 	.word	0x0800c728
 800aac4:	0800c74c 	.word	0x0800c74c

0800aac8 <__sflush_r>:
 800aac8:	898a      	ldrh	r2, [r1, #12]
 800aaca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aace:	4605      	mov	r5, r0
 800aad0:	0710      	lsls	r0, r2, #28
 800aad2:	460c      	mov	r4, r1
 800aad4:	d458      	bmi.n	800ab88 <__sflush_r+0xc0>
 800aad6:	684b      	ldr	r3, [r1, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dc05      	bgt.n	800aae8 <__sflush_r+0x20>
 800aadc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aade:	2b00      	cmp	r3, #0
 800aae0:	dc02      	bgt.n	800aae8 <__sflush_r+0x20>
 800aae2:	2000      	movs	r0, #0
 800aae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaea:	2e00      	cmp	r6, #0
 800aaec:	d0f9      	beq.n	800aae2 <__sflush_r+0x1a>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aaf4:	682f      	ldr	r7, [r5, #0]
 800aaf6:	602b      	str	r3, [r5, #0]
 800aaf8:	d032      	beq.n	800ab60 <__sflush_r+0x98>
 800aafa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aafc:	89a3      	ldrh	r3, [r4, #12]
 800aafe:	075a      	lsls	r2, r3, #29
 800ab00:	d505      	bpl.n	800ab0e <__sflush_r+0x46>
 800ab02:	6863      	ldr	r3, [r4, #4]
 800ab04:	1ac0      	subs	r0, r0, r3
 800ab06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab08:	b10b      	cbz	r3, 800ab0e <__sflush_r+0x46>
 800ab0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab0c:	1ac0      	subs	r0, r0, r3
 800ab0e:	2300      	movs	r3, #0
 800ab10:	4602      	mov	r2, r0
 800ab12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab14:	6a21      	ldr	r1, [r4, #32]
 800ab16:	4628      	mov	r0, r5
 800ab18:	47b0      	blx	r6
 800ab1a:	1c43      	adds	r3, r0, #1
 800ab1c:	89a3      	ldrh	r3, [r4, #12]
 800ab1e:	d106      	bne.n	800ab2e <__sflush_r+0x66>
 800ab20:	6829      	ldr	r1, [r5, #0]
 800ab22:	291d      	cmp	r1, #29
 800ab24:	d82c      	bhi.n	800ab80 <__sflush_r+0xb8>
 800ab26:	4a2a      	ldr	r2, [pc, #168]	; (800abd0 <__sflush_r+0x108>)
 800ab28:	40ca      	lsrs	r2, r1
 800ab2a:	07d6      	lsls	r6, r2, #31
 800ab2c:	d528      	bpl.n	800ab80 <__sflush_r+0xb8>
 800ab2e:	2200      	movs	r2, #0
 800ab30:	6062      	str	r2, [r4, #4]
 800ab32:	04d9      	lsls	r1, r3, #19
 800ab34:	6922      	ldr	r2, [r4, #16]
 800ab36:	6022      	str	r2, [r4, #0]
 800ab38:	d504      	bpl.n	800ab44 <__sflush_r+0x7c>
 800ab3a:	1c42      	adds	r2, r0, #1
 800ab3c:	d101      	bne.n	800ab42 <__sflush_r+0x7a>
 800ab3e:	682b      	ldr	r3, [r5, #0]
 800ab40:	b903      	cbnz	r3, 800ab44 <__sflush_r+0x7c>
 800ab42:	6560      	str	r0, [r4, #84]	; 0x54
 800ab44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab46:	602f      	str	r7, [r5, #0]
 800ab48:	2900      	cmp	r1, #0
 800ab4a:	d0ca      	beq.n	800aae2 <__sflush_r+0x1a>
 800ab4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab50:	4299      	cmp	r1, r3
 800ab52:	d002      	beq.n	800ab5a <__sflush_r+0x92>
 800ab54:	4628      	mov	r0, r5
 800ab56:	f000 fd71 	bl	800b63c <_free_r>
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	6360      	str	r0, [r4, #52]	; 0x34
 800ab5e:	e7c1      	b.n	800aae4 <__sflush_r+0x1c>
 800ab60:	6a21      	ldr	r1, [r4, #32]
 800ab62:	2301      	movs	r3, #1
 800ab64:	4628      	mov	r0, r5
 800ab66:	47b0      	blx	r6
 800ab68:	1c41      	adds	r1, r0, #1
 800ab6a:	d1c7      	bne.n	800aafc <__sflush_r+0x34>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0c4      	beq.n	800aafc <__sflush_r+0x34>
 800ab72:	2b1d      	cmp	r3, #29
 800ab74:	d001      	beq.n	800ab7a <__sflush_r+0xb2>
 800ab76:	2b16      	cmp	r3, #22
 800ab78:	d101      	bne.n	800ab7e <__sflush_r+0xb6>
 800ab7a:	602f      	str	r7, [r5, #0]
 800ab7c:	e7b1      	b.n	800aae2 <__sflush_r+0x1a>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab84:	81a3      	strh	r3, [r4, #12]
 800ab86:	e7ad      	b.n	800aae4 <__sflush_r+0x1c>
 800ab88:	690f      	ldr	r7, [r1, #16]
 800ab8a:	2f00      	cmp	r7, #0
 800ab8c:	d0a9      	beq.n	800aae2 <__sflush_r+0x1a>
 800ab8e:	0793      	lsls	r3, r2, #30
 800ab90:	680e      	ldr	r6, [r1, #0]
 800ab92:	bf08      	it	eq
 800ab94:	694b      	ldreq	r3, [r1, #20]
 800ab96:	600f      	str	r7, [r1, #0]
 800ab98:	bf18      	it	ne
 800ab9a:	2300      	movne	r3, #0
 800ab9c:	eba6 0807 	sub.w	r8, r6, r7
 800aba0:	608b      	str	r3, [r1, #8]
 800aba2:	f1b8 0f00 	cmp.w	r8, #0
 800aba6:	dd9c      	ble.n	800aae2 <__sflush_r+0x1a>
 800aba8:	6a21      	ldr	r1, [r4, #32]
 800abaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abac:	4643      	mov	r3, r8
 800abae:	463a      	mov	r2, r7
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b0      	blx	r6
 800abb4:	2800      	cmp	r0, #0
 800abb6:	dc06      	bgt.n	800abc6 <__sflush_r+0xfe>
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abbe:	81a3      	strh	r3, [r4, #12]
 800abc0:	f04f 30ff 	mov.w	r0, #4294967295
 800abc4:	e78e      	b.n	800aae4 <__sflush_r+0x1c>
 800abc6:	4407      	add	r7, r0
 800abc8:	eba8 0800 	sub.w	r8, r8, r0
 800abcc:	e7e9      	b.n	800aba2 <__sflush_r+0xda>
 800abce:	bf00      	nop
 800abd0:	20400001 	.word	0x20400001

0800abd4 <_fflush_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	690b      	ldr	r3, [r1, #16]
 800abd8:	4605      	mov	r5, r0
 800abda:	460c      	mov	r4, r1
 800abdc:	b913      	cbnz	r3, 800abe4 <_fflush_r+0x10>
 800abde:	2500      	movs	r5, #0
 800abe0:	4628      	mov	r0, r5
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	b118      	cbz	r0, 800abee <_fflush_r+0x1a>
 800abe6:	6983      	ldr	r3, [r0, #24]
 800abe8:	b90b      	cbnz	r3, 800abee <_fflush_r+0x1a>
 800abea:	f000 f887 	bl	800acfc <__sinit>
 800abee:	4b14      	ldr	r3, [pc, #80]	; (800ac40 <_fflush_r+0x6c>)
 800abf0:	429c      	cmp	r4, r3
 800abf2:	d11b      	bne.n	800ac2c <_fflush_r+0x58>
 800abf4:	686c      	ldr	r4, [r5, #4]
 800abf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0ef      	beq.n	800abde <_fflush_r+0xa>
 800abfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac00:	07d0      	lsls	r0, r2, #31
 800ac02:	d404      	bmi.n	800ac0e <_fflush_r+0x3a>
 800ac04:	0599      	lsls	r1, r3, #22
 800ac06:	d402      	bmi.n	800ac0e <_fflush_r+0x3a>
 800ac08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac0a:	f000 f91a 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800ac0e:	4628      	mov	r0, r5
 800ac10:	4621      	mov	r1, r4
 800ac12:	f7ff ff59 	bl	800aac8 <__sflush_r>
 800ac16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac18:	07da      	lsls	r2, r3, #31
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	d4e0      	bmi.n	800abe0 <_fflush_r+0xc>
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	059b      	lsls	r3, r3, #22
 800ac22:	d4dd      	bmi.n	800abe0 <_fflush_r+0xc>
 800ac24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac26:	f000 f90d 	bl	800ae44 <__retarget_lock_release_recursive>
 800ac2a:	e7d9      	b.n	800abe0 <_fflush_r+0xc>
 800ac2c:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <_fflush_r+0x70>)
 800ac2e:	429c      	cmp	r4, r3
 800ac30:	d101      	bne.n	800ac36 <_fflush_r+0x62>
 800ac32:	68ac      	ldr	r4, [r5, #8]
 800ac34:	e7df      	b.n	800abf6 <_fflush_r+0x22>
 800ac36:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <_fflush_r+0x74>)
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	bf08      	it	eq
 800ac3c:	68ec      	ldreq	r4, [r5, #12]
 800ac3e:	e7da      	b.n	800abf6 <_fflush_r+0x22>
 800ac40:	0800c800 	.word	0x0800c800
 800ac44:	0800c820 	.word	0x0800c820
 800ac48:	0800c7e0 	.word	0x0800c7e0

0800ac4c <std>:
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	b510      	push	{r4, lr}
 800ac50:	4604      	mov	r4, r0
 800ac52:	e9c0 3300 	strd	r3, r3, [r0]
 800ac56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac5a:	6083      	str	r3, [r0, #8]
 800ac5c:	8181      	strh	r1, [r0, #12]
 800ac5e:	6643      	str	r3, [r0, #100]	; 0x64
 800ac60:	81c2      	strh	r2, [r0, #14]
 800ac62:	6183      	str	r3, [r0, #24]
 800ac64:	4619      	mov	r1, r3
 800ac66:	2208      	movs	r2, #8
 800ac68:	305c      	adds	r0, #92	; 0x5c
 800ac6a:	f7fe fadf 	bl	800922c <memset>
 800ac6e:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <std+0x38>)
 800ac70:	6263      	str	r3, [r4, #36]	; 0x24
 800ac72:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <std+0x3c>)
 800ac74:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac76:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <std+0x40>)
 800ac78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac7a:	4b05      	ldr	r3, [pc, #20]	; (800ac90 <std+0x44>)
 800ac7c:	6224      	str	r4, [r4, #32]
 800ac7e:	6323      	str	r3, [r4, #48]	; 0x30
 800ac80:	bd10      	pop	{r4, pc}
 800ac82:	bf00      	nop
 800ac84:	0800baf5 	.word	0x0800baf5
 800ac88:	0800bb17 	.word	0x0800bb17
 800ac8c:	0800bb4f 	.word	0x0800bb4f
 800ac90:	0800bb73 	.word	0x0800bb73

0800ac94 <_cleanup_r>:
 800ac94:	4901      	ldr	r1, [pc, #4]	; (800ac9c <_cleanup_r+0x8>)
 800ac96:	f000 b8af 	b.w	800adf8 <_fwalk_reent>
 800ac9a:	bf00      	nop
 800ac9c:	0800abd5 	.word	0x0800abd5

0800aca0 <__sfmoreglue>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	1e4a      	subs	r2, r1, #1
 800aca4:	2568      	movs	r5, #104	; 0x68
 800aca6:	4355      	muls	r5, r2
 800aca8:	460e      	mov	r6, r1
 800acaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acae:	f000 fd15 	bl	800b6dc <_malloc_r>
 800acb2:	4604      	mov	r4, r0
 800acb4:	b140      	cbz	r0, 800acc8 <__sfmoreglue+0x28>
 800acb6:	2100      	movs	r1, #0
 800acb8:	e9c0 1600 	strd	r1, r6, [r0]
 800acbc:	300c      	adds	r0, #12
 800acbe:	60a0      	str	r0, [r4, #8]
 800acc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acc4:	f7fe fab2 	bl	800922c <memset>
 800acc8:	4620      	mov	r0, r4
 800acca:	bd70      	pop	{r4, r5, r6, pc}

0800accc <__sfp_lock_acquire>:
 800accc:	4801      	ldr	r0, [pc, #4]	; (800acd4 <__sfp_lock_acquire+0x8>)
 800acce:	f000 b8b8 	b.w	800ae42 <__retarget_lock_acquire_recursive>
 800acd2:	bf00      	nop
 800acd4:	20004ca8 	.word	0x20004ca8

0800acd8 <__sfp_lock_release>:
 800acd8:	4801      	ldr	r0, [pc, #4]	; (800ace0 <__sfp_lock_release+0x8>)
 800acda:	f000 b8b3 	b.w	800ae44 <__retarget_lock_release_recursive>
 800acde:	bf00      	nop
 800ace0:	20004ca8 	.word	0x20004ca8

0800ace4 <__sinit_lock_acquire>:
 800ace4:	4801      	ldr	r0, [pc, #4]	; (800acec <__sinit_lock_acquire+0x8>)
 800ace6:	f000 b8ac 	b.w	800ae42 <__retarget_lock_acquire_recursive>
 800acea:	bf00      	nop
 800acec:	20004ca3 	.word	0x20004ca3

0800acf0 <__sinit_lock_release>:
 800acf0:	4801      	ldr	r0, [pc, #4]	; (800acf8 <__sinit_lock_release+0x8>)
 800acf2:	f000 b8a7 	b.w	800ae44 <__retarget_lock_release_recursive>
 800acf6:	bf00      	nop
 800acf8:	20004ca3 	.word	0x20004ca3

0800acfc <__sinit>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	4604      	mov	r4, r0
 800ad00:	f7ff fff0 	bl	800ace4 <__sinit_lock_acquire>
 800ad04:	69a3      	ldr	r3, [r4, #24]
 800ad06:	b11b      	cbz	r3, 800ad10 <__sinit+0x14>
 800ad08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad0c:	f7ff bff0 	b.w	800acf0 <__sinit_lock_release>
 800ad10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad14:	6523      	str	r3, [r4, #80]	; 0x50
 800ad16:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <__sinit+0x68>)
 800ad18:	4a13      	ldr	r2, [pc, #76]	; (800ad68 <__sinit+0x6c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad1e:	42a3      	cmp	r3, r4
 800ad20:	bf04      	itt	eq
 800ad22:	2301      	moveq	r3, #1
 800ad24:	61a3      	streq	r3, [r4, #24]
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 f820 	bl	800ad6c <__sfp>
 800ad2c:	6060      	str	r0, [r4, #4]
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 f81c 	bl	800ad6c <__sfp>
 800ad34:	60a0      	str	r0, [r4, #8]
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 f818 	bl	800ad6c <__sfp>
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	60e0      	str	r0, [r4, #12]
 800ad40:	2104      	movs	r1, #4
 800ad42:	6860      	ldr	r0, [r4, #4]
 800ad44:	f7ff ff82 	bl	800ac4c <std>
 800ad48:	68a0      	ldr	r0, [r4, #8]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	2109      	movs	r1, #9
 800ad4e:	f7ff ff7d 	bl	800ac4c <std>
 800ad52:	68e0      	ldr	r0, [r4, #12]
 800ad54:	2202      	movs	r2, #2
 800ad56:	2112      	movs	r1, #18
 800ad58:	f7ff ff78 	bl	800ac4c <std>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	61a3      	str	r3, [r4, #24]
 800ad60:	e7d2      	b.n	800ad08 <__sinit+0xc>
 800ad62:	bf00      	nop
 800ad64:	0800c714 	.word	0x0800c714
 800ad68:	0800ac95 	.word	0x0800ac95

0800ad6c <__sfp>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	4607      	mov	r7, r0
 800ad70:	f7ff ffac 	bl	800accc <__sfp_lock_acquire>
 800ad74:	4b1e      	ldr	r3, [pc, #120]	; (800adf0 <__sfp+0x84>)
 800ad76:	681e      	ldr	r6, [r3, #0]
 800ad78:	69b3      	ldr	r3, [r6, #24]
 800ad7a:	b913      	cbnz	r3, 800ad82 <__sfp+0x16>
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	f7ff ffbd 	bl	800acfc <__sinit>
 800ad82:	3648      	adds	r6, #72	; 0x48
 800ad84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	d503      	bpl.n	800ad94 <__sfp+0x28>
 800ad8c:	6833      	ldr	r3, [r6, #0]
 800ad8e:	b30b      	cbz	r3, 800add4 <__sfp+0x68>
 800ad90:	6836      	ldr	r6, [r6, #0]
 800ad92:	e7f7      	b.n	800ad84 <__sfp+0x18>
 800ad94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad98:	b9d5      	cbnz	r5, 800add0 <__sfp+0x64>
 800ad9a:	4b16      	ldr	r3, [pc, #88]	; (800adf4 <__sfp+0x88>)
 800ad9c:	60e3      	str	r3, [r4, #12]
 800ad9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ada2:	6665      	str	r5, [r4, #100]	; 0x64
 800ada4:	f000 f84c 	bl	800ae40 <__retarget_lock_init_recursive>
 800ada8:	f7ff ff96 	bl	800acd8 <__sfp_lock_release>
 800adac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adb4:	6025      	str	r5, [r4, #0]
 800adb6:	61a5      	str	r5, [r4, #24]
 800adb8:	2208      	movs	r2, #8
 800adba:	4629      	mov	r1, r5
 800adbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adc0:	f7fe fa34 	bl	800922c <memset>
 800adc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800adc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800adcc:	4620      	mov	r0, r4
 800adce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add0:	3468      	adds	r4, #104	; 0x68
 800add2:	e7d9      	b.n	800ad88 <__sfp+0x1c>
 800add4:	2104      	movs	r1, #4
 800add6:	4638      	mov	r0, r7
 800add8:	f7ff ff62 	bl	800aca0 <__sfmoreglue>
 800addc:	4604      	mov	r4, r0
 800adde:	6030      	str	r0, [r6, #0]
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d1d5      	bne.n	800ad90 <__sfp+0x24>
 800ade4:	f7ff ff78 	bl	800acd8 <__sfp_lock_release>
 800ade8:	230c      	movs	r3, #12
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	e7ee      	b.n	800adcc <__sfp+0x60>
 800adee:	bf00      	nop
 800adf0:	0800c714 	.word	0x0800c714
 800adf4:	ffff0001 	.word	0xffff0001

0800adf8 <_fwalk_reent>:
 800adf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adfc:	4606      	mov	r6, r0
 800adfe:	4688      	mov	r8, r1
 800ae00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae04:	2700      	movs	r7, #0
 800ae06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae0a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae0e:	d505      	bpl.n	800ae1c <_fwalk_reent+0x24>
 800ae10:	6824      	ldr	r4, [r4, #0]
 800ae12:	2c00      	cmp	r4, #0
 800ae14:	d1f7      	bne.n	800ae06 <_fwalk_reent+0xe>
 800ae16:	4638      	mov	r0, r7
 800ae18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae1c:	89ab      	ldrh	r3, [r5, #12]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d907      	bls.n	800ae32 <_fwalk_reent+0x3a>
 800ae22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae26:	3301      	adds	r3, #1
 800ae28:	d003      	beq.n	800ae32 <_fwalk_reent+0x3a>
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	47c0      	blx	r8
 800ae30:	4307      	orrs	r7, r0
 800ae32:	3568      	adds	r5, #104	; 0x68
 800ae34:	e7e9      	b.n	800ae0a <_fwalk_reent+0x12>
	...

0800ae38 <_localeconv_r>:
 800ae38:	4800      	ldr	r0, [pc, #0]	; (800ae3c <_localeconv_r+0x4>)
 800ae3a:	4770      	bx	lr
 800ae3c:	20000178 	.word	0x20000178

0800ae40 <__retarget_lock_init_recursive>:
 800ae40:	4770      	bx	lr

0800ae42 <__retarget_lock_acquire_recursive>:
 800ae42:	4770      	bx	lr

0800ae44 <__retarget_lock_release_recursive>:
 800ae44:	4770      	bx	lr

0800ae46 <__swhatbuf_r>:
 800ae46:	b570      	push	{r4, r5, r6, lr}
 800ae48:	460e      	mov	r6, r1
 800ae4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae4e:	2900      	cmp	r1, #0
 800ae50:	b096      	sub	sp, #88	; 0x58
 800ae52:	4614      	mov	r4, r2
 800ae54:	461d      	mov	r5, r3
 800ae56:	da07      	bge.n	800ae68 <__swhatbuf_r+0x22>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	602b      	str	r3, [r5, #0]
 800ae5c:	89b3      	ldrh	r3, [r6, #12]
 800ae5e:	061a      	lsls	r2, r3, #24
 800ae60:	d410      	bmi.n	800ae84 <__swhatbuf_r+0x3e>
 800ae62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae66:	e00e      	b.n	800ae86 <__swhatbuf_r+0x40>
 800ae68:	466a      	mov	r2, sp
 800ae6a:	f000 fed9 	bl	800bc20 <_fstat_r>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	dbf2      	blt.n	800ae58 <__swhatbuf_r+0x12>
 800ae72:	9a01      	ldr	r2, [sp, #4]
 800ae74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae7c:	425a      	negs	r2, r3
 800ae7e:	415a      	adcs	r2, r3
 800ae80:	602a      	str	r2, [r5, #0]
 800ae82:	e7ee      	b.n	800ae62 <__swhatbuf_r+0x1c>
 800ae84:	2340      	movs	r3, #64	; 0x40
 800ae86:	2000      	movs	r0, #0
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	b016      	add	sp, #88	; 0x58
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae90 <__smakebuf_r>:
 800ae90:	898b      	ldrh	r3, [r1, #12]
 800ae92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae94:	079d      	lsls	r5, r3, #30
 800ae96:	4606      	mov	r6, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	d507      	bpl.n	800aeac <__smakebuf_r+0x1c>
 800ae9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	6123      	str	r3, [r4, #16]
 800aea4:	2301      	movs	r3, #1
 800aea6:	6163      	str	r3, [r4, #20]
 800aea8:	b002      	add	sp, #8
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}
 800aeac:	ab01      	add	r3, sp, #4
 800aeae:	466a      	mov	r2, sp
 800aeb0:	f7ff ffc9 	bl	800ae46 <__swhatbuf_r>
 800aeb4:	9900      	ldr	r1, [sp, #0]
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f000 fc0f 	bl	800b6dc <_malloc_r>
 800aebe:	b948      	cbnz	r0, 800aed4 <__smakebuf_r+0x44>
 800aec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec4:	059a      	lsls	r2, r3, #22
 800aec6:	d4ef      	bmi.n	800aea8 <__smakebuf_r+0x18>
 800aec8:	f023 0303 	bic.w	r3, r3, #3
 800aecc:	f043 0302 	orr.w	r3, r3, #2
 800aed0:	81a3      	strh	r3, [r4, #12]
 800aed2:	e7e3      	b.n	800ae9c <__smakebuf_r+0xc>
 800aed4:	4b0d      	ldr	r3, [pc, #52]	; (800af0c <__smakebuf_r+0x7c>)
 800aed6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	6020      	str	r0, [r4, #0]
 800aedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee0:	81a3      	strh	r3, [r4, #12]
 800aee2:	9b00      	ldr	r3, [sp, #0]
 800aee4:	6163      	str	r3, [r4, #20]
 800aee6:	9b01      	ldr	r3, [sp, #4]
 800aee8:	6120      	str	r0, [r4, #16]
 800aeea:	b15b      	cbz	r3, 800af04 <__smakebuf_r+0x74>
 800aeec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aef0:	4630      	mov	r0, r6
 800aef2:	f000 fea7 	bl	800bc44 <_isatty_r>
 800aef6:	b128      	cbz	r0, 800af04 <__smakebuf_r+0x74>
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	f023 0303 	bic.w	r3, r3, #3
 800aefe:	f043 0301 	orr.w	r3, r3, #1
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	89a0      	ldrh	r0, [r4, #12]
 800af06:	4305      	orrs	r5, r0
 800af08:	81a5      	strh	r5, [r4, #12]
 800af0a:	e7cd      	b.n	800aea8 <__smakebuf_r+0x18>
 800af0c:	0800ac95 	.word	0x0800ac95

0800af10 <malloc>:
 800af10:	4b02      	ldr	r3, [pc, #8]	; (800af1c <malloc+0xc>)
 800af12:	4601      	mov	r1, r0
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	f000 bbe1 	b.w	800b6dc <_malloc_r>
 800af1a:	bf00      	nop
 800af1c:	20000024 	.word	0x20000024

0800af20 <_Balloc>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af24:	4604      	mov	r4, r0
 800af26:	460d      	mov	r5, r1
 800af28:	b976      	cbnz	r6, 800af48 <_Balloc+0x28>
 800af2a:	2010      	movs	r0, #16
 800af2c:	f7ff fff0 	bl	800af10 <malloc>
 800af30:	4602      	mov	r2, r0
 800af32:	6260      	str	r0, [r4, #36]	; 0x24
 800af34:	b920      	cbnz	r0, 800af40 <_Balloc+0x20>
 800af36:	4b18      	ldr	r3, [pc, #96]	; (800af98 <_Balloc+0x78>)
 800af38:	4818      	ldr	r0, [pc, #96]	; (800af9c <_Balloc+0x7c>)
 800af3a:	2166      	movs	r1, #102	; 0x66
 800af3c:	f000 fe30 	bl	800bba0 <__assert_func>
 800af40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af44:	6006      	str	r6, [r0, #0]
 800af46:	60c6      	str	r6, [r0, #12]
 800af48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af4a:	68f3      	ldr	r3, [r6, #12]
 800af4c:	b183      	cbz	r3, 800af70 <_Balloc+0x50>
 800af4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af56:	b9b8      	cbnz	r0, 800af88 <_Balloc+0x68>
 800af58:	2101      	movs	r1, #1
 800af5a:	fa01 f605 	lsl.w	r6, r1, r5
 800af5e:	1d72      	adds	r2, r6, #5
 800af60:	0092      	lsls	r2, r2, #2
 800af62:	4620      	mov	r0, r4
 800af64:	f000 fb5a 	bl	800b61c <_calloc_r>
 800af68:	b160      	cbz	r0, 800af84 <_Balloc+0x64>
 800af6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af6e:	e00e      	b.n	800af8e <_Balloc+0x6e>
 800af70:	2221      	movs	r2, #33	; 0x21
 800af72:	2104      	movs	r1, #4
 800af74:	4620      	mov	r0, r4
 800af76:	f000 fb51 	bl	800b61c <_calloc_r>
 800af7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af7c:	60f0      	str	r0, [r6, #12]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1e4      	bne.n	800af4e <_Balloc+0x2e>
 800af84:	2000      	movs	r0, #0
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	6802      	ldr	r2, [r0, #0]
 800af8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af8e:	2300      	movs	r3, #0
 800af90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af94:	e7f7      	b.n	800af86 <_Balloc+0x66>
 800af96:	bf00      	nop
 800af98:	0800c759 	.word	0x0800c759
 800af9c:	0800c840 	.word	0x0800c840

0800afa0 <_Bfree>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afa4:	4605      	mov	r5, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	b976      	cbnz	r6, 800afc8 <_Bfree+0x28>
 800afaa:	2010      	movs	r0, #16
 800afac:	f7ff ffb0 	bl	800af10 <malloc>
 800afb0:	4602      	mov	r2, r0
 800afb2:	6268      	str	r0, [r5, #36]	; 0x24
 800afb4:	b920      	cbnz	r0, 800afc0 <_Bfree+0x20>
 800afb6:	4b09      	ldr	r3, [pc, #36]	; (800afdc <_Bfree+0x3c>)
 800afb8:	4809      	ldr	r0, [pc, #36]	; (800afe0 <_Bfree+0x40>)
 800afba:	218a      	movs	r1, #138	; 0x8a
 800afbc:	f000 fdf0 	bl	800bba0 <__assert_func>
 800afc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afc4:	6006      	str	r6, [r0, #0]
 800afc6:	60c6      	str	r6, [r0, #12]
 800afc8:	b13c      	cbz	r4, 800afda <_Bfree+0x3a>
 800afca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afcc:	6862      	ldr	r2, [r4, #4]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afd4:	6021      	str	r1, [r4, #0]
 800afd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afda:	bd70      	pop	{r4, r5, r6, pc}
 800afdc:	0800c759 	.word	0x0800c759
 800afe0:	0800c840 	.word	0x0800c840

0800afe4 <__multadd>:
 800afe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe8:	690e      	ldr	r6, [r1, #16]
 800afea:	4607      	mov	r7, r0
 800afec:	4698      	mov	r8, r3
 800afee:	460c      	mov	r4, r1
 800aff0:	f101 0014 	add.w	r0, r1, #20
 800aff4:	2300      	movs	r3, #0
 800aff6:	6805      	ldr	r5, [r0, #0]
 800aff8:	b2a9      	uxth	r1, r5
 800affa:	fb02 8101 	mla	r1, r2, r1, r8
 800affe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b002:	0c2d      	lsrs	r5, r5, #16
 800b004:	fb02 c505 	mla	r5, r2, r5, ip
 800b008:	b289      	uxth	r1, r1
 800b00a:	3301      	adds	r3, #1
 800b00c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b010:	429e      	cmp	r6, r3
 800b012:	f840 1b04 	str.w	r1, [r0], #4
 800b016:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b01a:	dcec      	bgt.n	800aff6 <__multadd+0x12>
 800b01c:	f1b8 0f00 	cmp.w	r8, #0
 800b020:	d022      	beq.n	800b068 <__multadd+0x84>
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	42b3      	cmp	r3, r6
 800b026:	dc19      	bgt.n	800b05c <__multadd+0x78>
 800b028:	6861      	ldr	r1, [r4, #4]
 800b02a:	4638      	mov	r0, r7
 800b02c:	3101      	adds	r1, #1
 800b02e:	f7ff ff77 	bl	800af20 <_Balloc>
 800b032:	4605      	mov	r5, r0
 800b034:	b928      	cbnz	r0, 800b042 <__multadd+0x5e>
 800b036:	4602      	mov	r2, r0
 800b038:	4b0d      	ldr	r3, [pc, #52]	; (800b070 <__multadd+0x8c>)
 800b03a:	480e      	ldr	r0, [pc, #56]	; (800b074 <__multadd+0x90>)
 800b03c:	21b5      	movs	r1, #181	; 0xb5
 800b03e:	f000 fdaf 	bl	800bba0 <__assert_func>
 800b042:	6922      	ldr	r2, [r4, #16]
 800b044:	3202      	adds	r2, #2
 800b046:	f104 010c 	add.w	r1, r4, #12
 800b04a:	0092      	lsls	r2, r2, #2
 800b04c:	300c      	adds	r0, #12
 800b04e:	f7fe f8df 	bl	8009210 <memcpy>
 800b052:	4621      	mov	r1, r4
 800b054:	4638      	mov	r0, r7
 800b056:	f7ff ffa3 	bl	800afa0 <_Bfree>
 800b05a:	462c      	mov	r4, r5
 800b05c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b060:	3601      	adds	r6, #1
 800b062:	f8c3 8014 	str.w	r8, [r3, #20]
 800b066:	6126      	str	r6, [r4, #16]
 800b068:	4620      	mov	r0, r4
 800b06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b06e:	bf00      	nop
 800b070:	0800c7cf 	.word	0x0800c7cf
 800b074:	0800c840 	.word	0x0800c840

0800b078 <__hi0bits>:
 800b078:	0c03      	lsrs	r3, r0, #16
 800b07a:	041b      	lsls	r3, r3, #16
 800b07c:	b9d3      	cbnz	r3, 800b0b4 <__hi0bits+0x3c>
 800b07e:	0400      	lsls	r0, r0, #16
 800b080:	2310      	movs	r3, #16
 800b082:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b086:	bf04      	itt	eq
 800b088:	0200      	lsleq	r0, r0, #8
 800b08a:	3308      	addeq	r3, #8
 800b08c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b090:	bf04      	itt	eq
 800b092:	0100      	lsleq	r0, r0, #4
 800b094:	3304      	addeq	r3, #4
 800b096:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b09a:	bf04      	itt	eq
 800b09c:	0080      	lsleq	r0, r0, #2
 800b09e:	3302      	addeq	r3, #2
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	db05      	blt.n	800b0b0 <__hi0bits+0x38>
 800b0a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0a8:	f103 0301 	add.w	r3, r3, #1
 800b0ac:	bf08      	it	eq
 800b0ae:	2320      	moveq	r3, #32
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	4770      	bx	lr
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	e7e4      	b.n	800b082 <__hi0bits+0xa>

0800b0b8 <__lo0bits>:
 800b0b8:	6803      	ldr	r3, [r0, #0]
 800b0ba:	f013 0207 	ands.w	r2, r3, #7
 800b0be:	4601      	mov	r1, r0
 800b0c0:	d00b      	beq.n	800b0da <__lo0bits+0x22>
 800b0c2:	07da      	lsls	r2, r3, #31
 800b0c4:	d424      	bmi.n	800b110 <__lo0bits+0x58>
 800b0c6:	0798      	lsls	r0, r3, #30
 800b0c8:	bf49      	itett	mi
 800b0ca:	085b      	lsrmi	r3, r3, #1
 800b0cc:	089b      	lsrpl	r3, r3, #2
 800b0ce:	2001      	movmi	r0, #1
 800b0d0:	600b      	strmi	r3, [r1, #0]
 800b0d2:	bf5c      	itt	pl
 800b0d4:	600b      	strpl	r3, [r1, #0]
 800b0d6:	2002      	movpl	r0, #2
 800b0d8:	4770      	bx	lr
 800b0da:	b298      	uxth	r0, r3
 800b0dc:	b9b0      	cbnz	r0, 800b10c <__lo0bits+0x54>
 800b0de:	0c1b      	lsrs	r3, r3, #16
 800b0e0:	2010      	movs	r0, #16
 800b0e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b0e6:	bf04      	itt	eq
 800b0e8:	0a1b      	lsreq	r3, r3, #8
 800b0ea:	3008      	addeq	r0, #8
 800b0ec:	071a      	lsls	r2, r3, #28
 800b0ee:	bf04      	itt	eq
 800b0f0:	091b      	lsreq	r3, r3, #4
 800b0f2:	3004      	addeq	r0, #4
 800b0f4:	079a      	lsls	r2, r3, #30
 800b0f6:	bf04      	itt	eq
 800b0f8:	089b      	lsreq	r3, r3, #2
 800b0fa:	3002      	addeq	r0, #2
 800b0fc:	07da      	lsls	r2, r3, #31
 800b0fe:	d403      	bmi.n	800b108 <__lo0bits+0x50>
 800b100:	085b      	lsrs	r3, r3, #1
 800b102:	f100 0001 	add.w	r0, r0, #1
 800b106:	d005      	beq.n	800b114 <__lo0bits+0x5c>
 800b108:	600b      	str	r3, [r1, #0]
 800b10a:	4770      	bx	lr
 800b10c:	4610      	mov	r0, r2
 800b10e:	e7e8      	b.n	800b0e2 <__lo0bits+0x2a>
 800b110:	2000      	movs	r0, #0
 800b112:	4770      	bx	lr
 800b114:	2020      	movs	r0, #32
 800b116:	4770      	bx	lr

0800b118 <__i2b>:
 800b118:	b510      	push	{r4, lr}
 800b11a:	460c      	mov	r4, r1
 800b11c:	2101      	movs	r1, #1
 800b11e:	f7ff feff 	bl	800af20 <_Balloc>
 800b122:	4602      	mov	r2, r0
 800b124:	b928      	cbnz	r0, 800b132 <__i2b+0x1a>
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <__i2b+0x24>)
 800b128:	4805      	ldr	r0, [pc, #20]	; (800b140 <__i2b+0x28>)
 800b12a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b12e:	f000 fd37 	bl	800bba0 <__assert_func>
 800b132:	2301      	movs	r3, #1
 800b134:	6144      	str	r4, [r0, #20]
 800b136:	6103      	str	r3, [r0, #16]
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	bf00      	nop
 800b13c:	0800c7cf 	.word	0x0800c7cf
 800b140:	0800c840 	.word	0x0800c840

0800b144 <__multiply>:
 800b144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b148:	4614      	mov	r4, r2
 800b14a:	690a      	ldr	r2, [r1, #16]
 800b14c:	6923      	ldr	r3, [r4, #16]
 800b14e:	429a      	cmp	r2, r3
 800b150:	bfb8      	it	lt
 800b152:	460b      	movlt	r3, r1
 800b154:	460d      	mov	r5, r1
 800b156:	bfbc      	itt	lt
 800b158:	4625      	movlt	r5, r4
 800b15a:	461c      	movlt	r4, r3
 800b15c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b160:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b164:	68ab      	ldr	r3, [r5, #8]
 800b166:	6869      	ldr	r1, [r5, #4]
 800b168:	eb0a 0709 	add.w	r7, sl, r9
 800b16c:	42bb      	cmp	r3, r7
 800b16e:	b085      	sub	sp, #20
 800b170:	bfb8      	it	lt
 800b172:	3101      	addlt	r1, #1
 800b174:	f7ff fed4 	bl	800af20 <_Balloc>
 800b178:	b930      	cbnz	r0, 800b188 <__multiply+0x44>
 800b17a:	4602      	mov	r2, r0
 800b17c:	4b42      	ldr	r3, [pc, #264]	; (800b288 <__multiply+0x144>)
 800b17e:	4843      	ldr	r0, [pc, #268]	; (800b28c <__multiply+0x148>)
 800b180:	f240 115d 	movw	r1, #349	; 0x15d
 800b184:	f000 fd0c 	bl	800bba0 <__assert_func>
 800b188:	f100 0614 	add.w	r6, r0, #20
 800b18c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b190:	4633      	mov	r3, r6
 800b192:	2200      	movs	r2, #0
 800b194:	4543      	cmp	r3, r8
 800b196:	d31e      	bcc.n	800b1d6 <__multiply+0x92>
 800b198:	f105 0c14 	add.w	ip, r5, #20
 800b19c:	f104 0314 	add.w	r3, r4, #20
 800b1a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b1a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b1a8:	9202      	str	r2, [sp, #8]
 800b1aa:	ebac 0205 	sub.w	r2, ip, r5
 800b1ae:	3a15      	subs	r2, #21
 800b1b0:	f022 0203 	bic.w	r2, r2, #3
 800b1b4:	3204      	adds	r2, #4
 800b1b6:	f105 0115 	add.w	r1, r5, #21
 800b1ba:	458c      	cmp	ip, r1
 800b1bc:	bf38      	it	cc
 800b1be:	2204      	movcc	r2, #4
 800b1c0:	9201      	str	r2, [sp, #4]
 800b1c2:	9a02      	ldr	r2, [sp, #8]
 800b1c4:	9303      	str	r3, [sp, #12]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d808      	bhi.n	800b1dc <__multiply+0x98>
 800b1ca:	2f00      	cmp	r7, #0
 800b1cc:	dc55      	bgt.n	800b27a <__multiply+0x136>
 800b1ce:	6107      	str	r7, [r0, #16]
 800b1d0:	b005      	add	sp, #20
 800b1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d6:	f843 2b04 	str.w	r2, [r3], #4
 800b1da:	e7db      	b.n	800b194 <__multiply+0x50>
 800b1dc:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1e0:	f1ba 0f00 	cmp.w	sl, #0
 800b1e4:	d020      	beq.n	800b228 <__multiply+0xe4>
 800b1e6:	f105 0e14 	add.w	lr, r5, #20
 800b1ea:	46b1      	mov	r9, r6
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b1f2:	f8d9 b000 	ldr.w	fp, [r9]
 800b1f6:	b2a1      	uxth	r1, r4
 800b1f8:	fa1f fb8b 	uxth.w	fp, fp
 800b1fc:	fb0a b101 	mla	r1, sl, r1, fp
 800b200:	4411      	add	r1, r2
 800b202:	f8d9 2000 	ldr.w	r2, [r9]
 800b206:	0c24      	lsrs	r4, r4, #16
 800b208:	0c12      	lsrs	r2, r2, #16
 800b20a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b20e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b212:	b289      	uxth	r1, r1
 800b214:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b218:	45f4      	cmp	ip, lr
 800b21a:	f849 1b04 	str.w	r1, [r9], #4
 800b21e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b222:	d8e4      	bhi.n	800b1ee <__multiply+0xaa>
 800b224:	9901      	ldr	r1, [sp, #4]
 800b226:	5072      	str	r2, [r6, r1]
 800b228:	9a03      	ldr	r2, [sp, #12]
 800b22a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b22e:	3304      	adds	r3, #4
 800b230:	f1b9 0f00 	cmp.w	r9, #0
 800b234:	d01f      	beq.n	800b276 <__multiply+0x132>
 800b236:	6834      	ldr	r4, [r6, #0]
 800b238:	f105 0114 	add.w	r1, r5, #20
 800b23c:	46b6      	mov	lr, r6
 800b23e:	f04f 0a00 	mov.w	sl, #0
 800b242:	880a      	ldrh	r2, [r1, #0]
 800b244:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b248:	fb09 b202 	mla	r2, r9, r2, fp
 800b24c:	4492      	add	sl, r2
 800b24e:	b2a4      	uxth	r4, r4
 800b250:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b254:	f84e 4b04 	str.w	r4, [lr], #4
 800b258:	f851 4b04 	ldr.w	r4, [r1], #4
 800b25c:	f8be 2000 	ldrh.w	r2, [lr]
 800b260:	0c24      	lsrs	r4, r4, #16
 800b262:	fb09 2404 	mla	r4, r9, r4, r2
 800b266:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b26a:	458c      	cmp	ip, r1
 800b26c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b270:	d8e7      	bhi.n	800b242 <__multiply+0xfe>
 800b272:	9a01      	ldr	r2, [sp, #4]
 800b274:	50b4      	str	r4, [r6, r2]
 800b276:	3604      	adds	r6, #4
 800b278:	e7a3      	b.n	800b1c2 <__multiply+0x7e>
 800b27a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1a5      	bne.n	800b1ce <__multiply+0x8a>
 800b282:	3f01      	subs	r7, #1
 800b284:	e7a1      	b.n	800b1ca <__multiply+0x86>
 800b286:	bf00      	nop
 800b288:	0800c7cf 	.word	0x0800c7cf
 800b28c:	0800c840 	.word	0x0800c840

0800b290 <__pow5mult>:
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b294:	4615      	mov	r5, r2
 800b296:	f012 0203 	ands.w	r2, r2, #3
 800b29a:	4606      	mov	r6, r0
 800b29c:	460f      	mov	r7, r1
 800b29e:	d007      	beq.n	800b2b0 <__pow5mult+0x20>
 800b2a0:	4c25      	ldr	r4, [pc, #148]	; (800b338 <__pow5mult+0xa8>)
 800b2a2:	3a01      	subs	r2, #1
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2aa:	f7ff fe9b 	bl	800afe4 <__multadd>
 800b2ae:	4607      	mov	r7, r0
 800b2b0:	10ad      	asrs	r5, r5, #2
 800b2b2:	d03d      	beq.n	800b330 <__pow5mult+0xa0>
 800b2b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2b6:	b97c      	cbnz	r4, 800b2d8 <__pow5mult+0x48>
 800b2b8:	2010      	movs	r0, #16
 800b2ba:	f7ff fe29 	bl	800af10 <malloc>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	6270      	str	r0, [r6, #36]	; 0x24
 800b2c2:	b928      	cbnz	r0, 800b2d0 <__pow5mult+0x40>
 800b2c4:	4b1d      	ldr	r3, [pc, #116]	; (800b33c <__pow5mult+0xac>)
 800b2c6:	481e      	ldr	r0, [pc, #120]	; (800b340 <__pow5mult+0xb0>)
 800b2c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2cc:	f000 fc68 	bl	800bba0 <__assert_func>
 800b2d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2d4:	6004      	str	r4, [r0, #0]
 800b2d6:	60c4      	str	r4, [r0, #12]
 800b2d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2e0:	b94c      	cbnz	r4, 800b2f6 <__pow5mult+0x66>
 800b2e2:	f240 2171 	movw	r1, #625	; 0x271
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f7ff ff16 	bl	800b118 <__i2b>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	6003      	str	r3, [r0, #0]
 800b2f6:	f04f 0900 	mov.w	r9, #0
 800b2fa:	07eb      	lsls	r3, r5, #31
 800b2fc:	d50a      	bpl.n	800b314 <__pow5mult+0x84>
 800b2fe:	4639      	mov	r1, r7
 800b300:	4622      	mov	r2, r4
 800b302:	4630      	mov	r0, r6
 800b304:	f7ff ff1e 	bl	800b144 <__multiply>
 800b308:	4639      	mov	r1, r7
 800b30a:	4680      	mov	r8, r0
 800b30c:	4630      	mov	r0, r6
 800b30e:	f7ff fe47 	bl	800afa0 <_Bfree>
 800b312:	4647      	mov	r7, r8
 800b314:	106d      	asrs	r5, r5, #1
 800b316:	d00b      	beq.n	800b330 <__pow5mult+0xa0>
 800b318:	6820      	ldr	r0, [r4, #0]
 800b31a:	b938      	cbnz	r0, 800b32c <__pow5mult+0x9c>
 800b31c:	4622      	mov	r2, r4
 800b31e:	4621      	mov	r1, r4
 800b320:	4630      	mov	r0, r6
 800b322:	f7ff ff0f 	bl	800b144 <__multiply>
 800b326:	6020      	str	r0, [r4, #0]
 800b328:	f8c0 9000 	str.w	r9, [r0]
 800b32c:	4604      	mov	r4, r0
 800b32e:	e7e4      	b.n	800b2fa <__pow5mult+0x6a>
 800b330:	4638      	mov	r0, r7
 800b332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b336:	bf00      	nop
 800b338:	0800c990 	.word	0x0800c990
 800b33c:	0800c759 	.word	0x0800c759
 800b340:	0800c840 	.word	0x0800c840

0800b344 <__lshift>:
 800b344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b348:	460c      	mov	r4, r1
 800b34a:	6849      	ldr	r1, [r1, #4]
 800b34c:	6923      	ldr	r3, [r4, #16]
 800b34e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	4607      	mov	r7, r0
 800b356:	4691      	mov	r9, r2
 800b358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b35c:	f108 0601 	add.w	r6, r8, #1
 800b360:	42b3      	cmp	r3, r6
 800b362:	db0b      	blt.n	800b37c <__lshift+0x38>
 800b364:	4638      	mov	r0, r7
 800b366:	f7ff fddb 	bl	800af20 <_Balloc>
 800b36a:	4605      	mov	r5, r0
 800b36c:	b948      	cbnz	r0, 800b382 <__lshift+0x3e>
 800b36e:	4602      	mov	r2, r0
 800b370:	4b28      	ldr	r3, [pc, #160]	; (800b414 <__lshift+0xd0>)
 800b372:	4829      	ldr	r0, [pc, #164]	; (800b418 <__lshift+0xd4>)
 800b374:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b378:	f000 fc12 	bl	800bba0 <__assert_func>
 800b37c:	3101      	adds	r1, #1
 800b37e:	005b      	lsls	r3, r3, #1
 800b380:	e7ee      	b.n	800b360 <__lshift+0x1c>
 800b382:	2300      	movs	r3, #0
 800b384:	f100 0114 	add.w	r1, r0, #20
 800b388:	f100 0210 	add.w	r2, r0, #16
 800b38c:	4618      	mov	r0, r3
 800b38e:	4553      	cmp	r3, sl
 800b390:	db33      	blt.n	800b3fa <__lshift+0xb6>
 800b392:	6920      	ldr	r0, [r4, #16]
 800b394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b398:	f104 0314 	add.w	r3, r4, #20
 800b39c:	f019 091f 	ands.w	r9, r9, #31
 800b3a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3a8:	d02b      	beq.n	800b402 <__lshift+0xbe>
 800b3aa:	f1c9 0e20 	rsb	lr, r9, #32
 800b3ae:	468a      	mov	sl, r1
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	6818      	ldr	r0, [r3, #0]
 800b3b4:	fa00 f009 	lsl.w	r0, r0, r9
 800b3b8:	4302      	orrs	r2, r0
 800b3ba:	f84a 2b04 	str.w	r2, [sl], #4
 800b3be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c2:	459c      	cmp	ip, r3
 800b3c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3c8:	d8f3      	bhi.n	800b3b2 <__lshift+0x6e>
 800b3ca:	ebac 0304 	sub.w	r3, ip, r4
 800b3ce:	3b15      	subs	r3, #21
 800b3d0:	f023 0303 	bic.w	r3, r3, #3
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	f104 0015 	add.w	r0, r4, #21
 800b3da:	4584      	cmp	ip, r0
 800b3dc:	bf38      	it	cc
 800b3de:	2304      	movcc	r3, #4
 800b3e0:	50ca      	str	r2, [r1, r3]
 800b3e2:	b10a      	cbz	r2, 800b3e8 <__lshift+0xa4>
 800b3e4:	f108 0602 	add.w	r6, r8, #2
 800b3e8:	3e01      	subs	r6, #1
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	612e      	str	r6, [r5, #16]
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	f7ff fdd6 	bl	800afa0 <_Bfree>
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3fe:	3301      	adds	r3, #1
 800b400:	e7c5      	b.n	800b38e <__lshift+0x4a>
 800b402:	3904      	subs	r1, #4
 800b404:	f853 2b04 	ldr.w	r2, [r3], #4
 800b408:	f841 2f04 	str.w	r2, [r1, #4]!
 800b40c:	459c      	cmp	ip, r3
 800b40e:	d8f9      	bhi.n	800b404 <__lshift+0xc0>
 800b410:	e7ea      	b.n	800b3e8 <__lshift+0xa4>
 800b412:	bf00      	nop
 800b414:	0800c7cf 	.word	0x0800c7cf
 800b418:	0800c840 	.word	0x0800c840

0800b41c <__mcmp>:
 800b41c:	b530      	push	{r4, r5, lr}
 800b41e:	6902      	ldr	r2, [r0, #16]
 800b420:	690c      	ldr	r4, [r1, #16]
 800b422:	1b12      	subs	r2, r2, r4
 800b424:	d10e      	bne.n	800b444 <__mcmp+0x28>
 800b426:	f100 0314 	add.w	r3, r0, #20
 800b42a:	3114      	adds	r1, #20
 800b42c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b430:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b434:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b438:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b43c:	42a5      	cmp	r5, r4
 800b43e:	d003      	beq.n	800b448 <__mcmp+0x2c>
 800b440:	d305      	bcc.n	800b44e <__mcmp+0x32>
 800b442:	2201      	movs	r2, #1
 800b444:	4610      	mov	r0, r2
 800b446:	bd30      	pop	{r4, r5, pc}
 800b448:	4283      	cmp	r3, r0
 800b44a:	d3f3      	bcc.n	800b434 <__mcmp+0x18>
 800b44c:	e7fa      	b.n	800b444 <__mcmp+0x28>
 800b44e:	f04f 32ff 	mov.w	r2, #4294967295
 800b452:	e7f7      	b.n	800b444 <__mcmp+0x28>

0800b454 <__mdiff>:
 800b454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b458:	460c      	mov	r4, r1
 800b45a:	4606      	mov	r6, r0
 800b45c:	4611      	mov	r1, r2
 800b45e:	4620      	mov	r0, r4
 800b460:	4617      	mov	r7, r2
 800b462:	f7ff ffdb 	bl	800b41c <__mcmp>
 800b466:	1e05      	subs	r5, r0, #0
 800b468:	d110      	bne.n	800b48c <__mdiff+0x38>
 800b46a:	4629      	mov	r1, r5
 800b46c:	4630      	mov	r0, r6
 800b46e:	f7ff fd57 	bl	800af20 <_Balloc>
 800b472:	b930      	cbnz	r0, 800b482 <__mdiff+0x2e>
 800b474:	4b39      	ldr	r3, [pc, #228]	; (800b55c <__mdiff+0x108>)
 800b476:	4602      	mov	r2, r0
 800b478:	f240 2132 	movw	r1, #562	; 0x232
 800b47c:	4838      	ldr	r0, [pc, #224]	; (800b560 <__mdiff+0x10c>)
 800b47e:	f000 fb8f 	bl	800bba0 <__assert_func>
 800b482:	2301      	movs	r3, #1
 800b484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48c:	bfa4      	itt	ge
 800b48e:	463b      	movge	r3, r7
 800b490:	4627      	movge	r7, r4
 800b492:	4630      	mov	r0, r6
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	bfa6      	itte	ge
 800b498:	461c      	movge	r4, r3
 800b49a:	2500      	movge	r5, #0
 800b49c:	2501      	movlt	r5, #1
 800b49e:	f7ff fd3f 	bl	800af20 <_Balloc>
 800b4a2:	b920      	cbnz	r0, 800b4ae <__mdiff+0x5a>
 800b4a4:	4b2d      	ldr	r3, [pc, #180]	; (800b55c <__mdiff+0x108>)
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4ac:	e7e6      	b.n	800b47c <__mdiff+0x28>
 800b4ae:	693e      	ldr	r6, [r7, #16]
 800b4b0:	60c5      	str	r5, [r0, #12]
 800b4b2:	6925      	ldr	r5, [r4, #16]
 800b4b4:	f107 0114 	add.w	r1, r7, #20
 800b4b8:	f104 0914 	add.w	r9, r4, #20
 800b4bc:	f100 0e14 	add.w	lr, r0, #20
 800b4c0:	f107 0210 	add.w	r2, r7, #16
 800b4c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b4c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b4cc:	46f2      	mov	sl, lr
 800b4ce:	2700      	movs	r7, #0
 800b4d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4d8:	fa1f f883 	uxth.w	r8, r3
 800b4dc:	fa17 f78b 	uxtah	r7, r7, fp
 800b4e0:	0c1b      	lsrs	r3, r3, #16
 800b4e2:	eba7 0808 	sub.w	r8, r7, r8
 800b4e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4ee:	fa1f f888 	uxth.w	r8, r8
 800b4f2:	141f      	asrs	r7, r3, #16
 800b4f4:	454d      	cmp	r5, r9
 800b4f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4fa:	f84a 3b04 	str.w	r3, [sl], #4
 800b4fe:	d8e7      	bhi.n	800b4d0 <__mdiff+0x7c>
 800b500:	1b2b      	subs	r3, r5, r4
 800b502:	3b15      	subs	r3, #21
 800b504:	f023 0303 	bic.w	r3, r3, #3
 800b508:	3304      	adds	r3, #4
 800b50a:	3415      	adds	r4, #21
 800b50c:	42a5      	cmp	r5, r4
 800b50e:	bf38      	it	cc
 800b510:	2304      	movcc	r3, #4
 800b512:	4419      	add	r1, r3
 800b514:	4473      	add	r3, lr
 800b516:	469e      	mov	lr, r3
 800b518:	460d      	mov	r5, r1
 800b51a:	4565      	cmp	r5, ip
 800b51c:	d30e      	bcc.n	800b53c <__mdiff+0xe8>
 800b51e:	f10c 0203 	add.w	r2, ip, #3
 800b522:	1a52      	subs	r2, r2, r1
 800b524:	f022 0203 	bic.w	r2, r2, #3
 800b528:	3903      	subs	r1, #3
 800b52a:	458c      	cmp	ip, r1
 800b52c:	bf38      	it	cc
 800b52e:	2200      	movcc	r2, #0
 800b530:	441a      	add	r2, r3
 800b532:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b536:	b17b      	cbz	r3, 800b558 <__mdiff+0x104>
 800b538:	6106      	str	r6, [r0, #16]
 800b53a:	e7a5      	b.n	800b488 <__mdiff+0x34>
 800b53c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b540:	fa17 f488 	uxtah	r4, r7, r8
 800b544:	1422      	asrs	r2, r4, #16
 800b546:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b54a:	b2a4      	uxth	r4, r4
 800b54c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b550:	f84e 4b04 	str.w	r4, [lr], #4
 800b554:	1417      	asrs	r7, r2, #16
 800b556:	e7e0      	b.n	800b51a <__mdiff+0xc6>
 800b558:	3e01      	subs	r6, #1
 800b55a:	e7ea      	b.n	800b532 <__mdiff+0xde>
 800b55c:	0800c7cf 	.word	0x0800c7cf
 800b560:	0800c840 	.word	0x0800c840

0800b564 <__d2b>:
 800b564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b568:	4689      	mov	r9, r1
 800b56a:	2101      	movs	r1, #1
 800b56c:	ec57 6b10 	vmov	r6, r7, d0
 800b570:	4690      	mov	r8, r2
 800b572:	f7ff fcd5 	bl	800af20 <_Balloc>
 800b576:	4604      	mov	r4, r0
 800b578:	b930      	cbnz	r0, 800b588 <__d2b+0x24>
 800b57a:	4602      	mov	r2, r0
 800b57c:	4b25      	ldr	r3, [pc, #148]	; (800b614 <__d2b+0xb0>)
 800b57e:	4826      	ldr	r0, [pc, #152]	; (800b618 <__d2b+0xb4>)
 800b580:	f240 310a 	movw	r1, #778	; 0x30a
 800b584:	f000 fb0c 	bl	800bba0 <__assert_func>
 800b588:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b58c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b590:	bb35      	cbnz	r5, 800b5e0 <__d2b+0x7c>
 800b592:	2e00      	cmp	r6, #0
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	d028      	beq.n	800b5ea <__d2b+0x86>
 800b598:	4668      	mov	r0, sp
 800b59a:	9600      	str	r6, [sp, #0]
 800b59c:	f7ff fd8c 	bl	800b0b8 <__lo0bits>
 800b5a0:	9900      	ldr	r1, [sp, #0]
 800b5a2:	b300      	cbz	r0, 800b5e6 <__d2b+0x82>
 800b5a4:	9a01      	ldr	r2, [sp, #4]
 800b5a6:	f1c0 0320 	rsb	r3, r0, #32
 800b5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ae:	430b      	orrs	r3, r1
 800b5b0:	40c2      	lsrs	r2, r0
 800b5b2:	6163      	str	r3, [r4, #20]
 800b5b4:	9201      	str	r2, [sp, #4]
 800b5b6:	9b01      	ldr	r3, [sp, #4]
 800b5b8:	61a3      	str	r3, [r4, #24]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	bf14      	ite	ne
 800b5be:	2202      	movne	r2, #2
 800b5c0:	2201      	moveq	r2, #1
 800b5c2:	6122      	str	r2, [r4, #16]
 800b5c4:	b1d5      	cbz	r5, 800b5fc <__d2b+0x98>
 800b5c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5ca:	4405      	add	r5, r0
 800b5cc:	f8c9 5000 	str.w	r5, [r9]
 800b5d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5d4:	f8c8 0000 	str.w	r0, [r8]
 800b5d8:	4620      	mov	r0, r4
 800b5da:	b003      	add	sp, #12
 800b5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5e4:	e7d5      	b.n	800b592 <__d2b+0x2e>
 800b5e6:	6161      	str	r1, [r4, #20]
 800b5e8:	e7e5      	b.n	800b5b6 <__d2b+0x52>
 800b5ea:	a801      	add	r0, sp, #4
 800b5ec:	f7ff fd64 	bl	800b0b8 <__lo0bits>
 800b5f0:	9b01      	ldr	r3, [sp, #4]
 800b5f2:	6163      	str	r3, [r4, #20]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	6122      	str	r2, [r4, #16]
 800b5f8:	3020      	adds	r0, #32
 800b5fa:	e7e3      	b.n	800b5c4 <__d2b+0x60>
 800b5fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b600:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b604:	f8c9 0000 	str.w	r0, [r9]
 800b608:	6918      	ldr	r0, [r3, #16]
 800b60a:	f7ff fd35 	bl	800b078 <__hi0bits>
 800b60e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b612:	e7df      	b.n	800b5d4 <__d2b+0x70>
 800b614:	0800c7cf 	.word	0x0800c7cf
 800b618:	0800c840 	.word	0x0800c840

0800b61c <_calloc_r>:
 800b61c:	b513      	push	{r0, r1, r4, lr}
 800b61e:	434a      	muls	r2, r1
 800b620:	4611      	mov	r1, r2
 800b622:	9201      	str	r2, [sp, #4]
 800b624:	f000 f85a 	bl	800b6dc <_malloc_r>
 800b628:	4604      	mov	r4, r0
 800b62a:	b118      	cbz	r0, 800b634 <_calloc_r+0x18>
 800b62c:	9a01      	ldr	r2, [sp, #4]
 800b62e:	2100      	movs	r1, #0
 800b630:	f7fd fdfc 	bl	800922c <memset>
 800b634:	4620      	mov	r0, r4
 800b636:	b002      	add	sp, #8
 800b638:	bd10      	pop	{r4, pc}
	...

0800b63c <_free_r>:
 800b63c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b63e:	2900      	cmp	r1, #0
 800b640:	d048      	beq.n	800b6d4 <_free_r+0x98>
 800b642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b646:	9001      	str	r0, [sp, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f1a1 0404 	sub.w	r4, r1, #4
 800b64e:	bfb8      	it	lt
 800b650:	18e4      	addlt	r4, r4, r3
 800b652:	f000 fb2b 	bl	800bcac <__malloc_lock>
 800b656:	4a20      	ldr	r2, [pc, #128]	; (800b6d8 <_free_r+0x9c>)
 800b658:	9801      	ldr	r0, [sp, #4]
 800b65a:	6813      	ldr	r3, [r2, #0]
 800b65c:	4615      	mov	r5, r2
 800b65e:	b933      	cbnz	r3, 800b66e <_free_r+0x32>
 800b660:	6063      	str	r3, [r4, #4]
 800b662:	6014      	str	r4, [r2, #0]
 800b664:	b003      	add	sp, #12
 800b666:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b66a:	f000 bb25 	b.w	800bcb8 <__malloc_unlock>
 800b66e:	42a3      	cmp	r3, r4
 800b670:	d90b      	bls.n	800b68a <_free_r+0x4e>
 800b672:	6821      	ldr	r1, [r4, #0]
 800b674:	1862      	adds	r2, r4, r1
 800b676:	4293      	cmp	r3, r2
 800b678:	bf04      	itt	eq
 800b67a:	681a      	ldreq	r2, [r3, #0]
 800b67c:	685b      	ldreq	r3, [r3, #4]
 800b67e:	6063      	str	r3, [r4, #4]
 800b680:	bf04      	itt	eq
 800b682:	1852      	addeq	r2, r2, r1
 800b684:	6022      	streq	r2, [r4, #0]
 800b686:	602c      	str	r4, [r5, #0]
 800b688:	e7ec      	b.n	800b664 <_free_r+0x28>
 800b68a:	461a      	mov	r2, r3
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	b10b      	cbz	r3, 800b694 <_free_r+0x58>
 800b690:	42a3      	cmp	r3, r4
 800b692:	d9fa      	bls.n	800b68a <_free_r+0x4e>
 800b694:	6811      	ldr	r1, [r2, #0]
 800b696:	1855      	adds	r5, r2, r1
 800b698:	42a5      	cmp	r5, r4
 800b69a:	d10b      	bne.n	800b6b4 <_free_r+0x78>
 800b69c:	6824      	ldr	r4, [r4, #0]
 800b69e:	4421      	add	r1, r4
 800b6a0:	1854      	adds	r4, r2, r1
 800b6a2:	42a3      	cmp	r3, r4
 800b6a4:	6011      	str	r1, [r2, #0]
 800b6a6:	d1dd      	bne.n	800b664 <_free_r+0x28>
 800b6a8:	681c      	ldr	r4, [r3, #0]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	6053      	str	r3, [r2, #4]
 800b6ae:	4421      	add	r1, r4
 800b6b0:	6011      	str	r1, [r2, #0]
 800b6b2:	e7d7      	b.n	800b664 <_free_r+0x28>
 800b6b4:	d902      	bls.n	800b6bc <_free_r+0x80>
 800b6b6:	230c      	movs	r3, #12
 800b6b8:	6003      	str	r3, [r0, #0]
 800b6ba:	e7d3      	b.n	800b664 <_free_r+0x28>
 800b6bc:	6825      	ldr	r5, [r4, #0]
 800b6be:	1961      	adds	r1, r4, r5
 800b6c0:	428b      	cmp	r3, r1
 800b6c2:	bf04      	itt	eq
 800b6c4:	6819      	ldreq	r1, [r3, #0]
 800b6c6:	685b      	ldreq	r3, [r3, #4]
 800b6c8:	6063      	str	r3, [r4, #4]
 800b6ca:	bf04      	itt	eq
 800b6cc:	1949      	addeq	r1, r1, r5
 800b6ce:	6021      	streq	r1, [r4, #0]
 800b6d0:	6054      	str	r4, [r2, #4]
 800b6d2:	e7c7      	b.n	800b664 <_free_r+0x28>
 800b6d4:	b003      	add	sp, #12
 800b6d6:	bd30      	pop	{r4, r5, pc}
 800b6d8:	20000458 	.word	0x20000458

0800b6dc <_malloc_r>:
 800b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6de:	1ccd      	adds	r5, r1, #3
 800b6e0:	f025 0503 	bic.w	r5, r5, #3
 800b6e4:	3508      	adds	r5, #8
 800b6e6:	2d0c      	cmp	r5, #12
 800b6e8:	bf38      	it	cc
 800b6ea:	250c      	movcc	r5, #12
 800b6ec:	2d00      	cmp	r5, #0
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	db01      	blt.n	800b6f6 <_malloc_r+0x1a>
 800b6f2:	42a9      	cmp	r1, r5
 800b6f4:	d903      	bls.n	800b6fe <_malloc_r+0x22>
 800b6f6:	230c      	movs	r3, #12
 800b6f8:	6033      	str	r3, [r6, #0]
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6fe:	f000 fad5 	bl	800bcac <__malloc_lock>
 800b702:	4921      	ldr	r1, [pc, #132]	; (800b788 <_malloc_r+0xac>)
 800b704:	680a      	ldr	r2, [r1, #0]
 800b706:	4614      	mov	r4, r2
 800b708:	b99c      	cbnz	r4, 800b732 <_malloc_r+0x56>
 800b70a:	4f20      	ldr	r7, [pc, #128]	; (800b78c <_malloc_r+0xb0>)
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	b923      	cbnz	r3, 800b71a <_malloc_r+0x3e>
 800b710:	4621      	mov	r1, r4
 800b712:	4630      	mov	r0, r6
 800b714:	f000 f9de 	bl	800bad4 <_sbrk_r>
 800b718:	6038      	str	r0, [r7, #0]
 800b71a:	4629      	mov	r1, r5
 800b71c:	4630      	mov	r0, r6
 800b71e:	f000 f9d9 	bl	800bad4 <_sbrk_r>
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	d123      	bne.n	800b76e <_malloc_r+0x92>
 800b726:	230c      	movs	r3, #12
 800b728:	6033      	str	r3, [r6, #0]
 800b72a:	4630      	mov	r0, r6
 800b72c:	f000 fac4 	bl	800bcb8 <__malloc_unlock>
 800b730:	e7e3      	b.n	800b6fa <_malloc_r+0x1e>
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	1b5b      	subs	r3, r3, r5
 800b736:	d417      	bmi.n	800b768 <_malloc_r+0x8c>
 800b738:	2b0b      	cmp	r3, #11
 800b73a:	d903      	bls.n	800b744 <_malloc_r+0x68>
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	441c      	add	r4, r3
 800b740:	6025      	str	r5, [r4, #0]
 800b742:	e004      	b.n	800b74e <_malloc_r+0x72>
 800b744:	6863      	ldr	r3, [r4, #4]
 800b746:	42a2      	cmp	r2, r4
 800b748:	bf0c      	ite	eq
 800b74a:	600b      	streq	r3, [r1, #0]
 800b74c:	6053      	strne	r3, [r2, #4]
 800b74e:	4630      	mov	r0, r6
 800b750:	f000 fab2 	bl	800bcb8 <__malloc_unlock>
 800b754:	f104 000b 	add.w	r0, r4, #11
 800b758:	1d23      	adds	r3, r4, #4
 800b75a:	f020 0007 	bic.w	r0, r0, #7
 800b75e:	1ac2      	subs	r2, r0, r3
 800b760:	d0cc      	beq.n	800b6fc <_malloc_r+0x20>
 800b762:	1a1b      	subs	r3, r3, r0
 800b764:	50a3      	str	r3, [r4, r2]
 800b766:	e7c9      	b.n	800b6fc <_malloc_r+0x20>
 800b768:	4622      	mov	r2, r4
 800b76a:	6864      	ldr	r4, [r4, #4]
 800b76c:	e7cc      	b.n	800b708 <_malloc_r+0x2c>
 800b76e:	1cc4      	adds	r4, r0, #3
 800b770:	f024 0403 	bic.w	r4, r4, #3
 800b774:	42a0      	cmp	r0, r4
 800b776:	d0e3      	beq.n	800b740 <_malloc_r+0x64>
 800b778:	1a21      	subs	r1, r4, r0
 800b77a:	4630      	mov	r0, r6
 800b77c:	f000 f9aa 	bl	800bad4 <_sbrk_r>
 800b780:	3001      	adds	r0, #1
 800b782:	d1dd      	bne.n	800b740 <_malloc_r+0x64>
 800b784:	e7cf      	b.n	800b726 <_malloc_r+0x4a>
 800b786:	bf00      	nop
 800b788:	20000458 	.word	0x20000458
 800b78c:	2000045c 	.word	0x2000045c

0800b790 <__sfputc_r>:
 800b790:	6893      	ldr	r3, [r2, #8]
 800b792:	3b01      	subs	r3, #1
 800b794:	2b00      	cmp	r3, #0
 800b796:	b410      	push	{r4}
 800b798:	6093      	str	r3, [r2, #8]
 800b79a:	da08      	bge.n	800b7ae <__sfputc_r+0x1e>
 800b79c:	6994      	ldr	r4, [r2, #24]
 800b79e:	42a3      	cmp	r3, r4
 800b7a0:	db01      	blt.n	800b7a6 <__sfputc_r+0x16>
 800b7a2:	290a      	cmp	r1, #10
 800b7a4:	d103      	bne.n	800b7ae <__sfputc_r+0x1e>
 800b7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7aa:	f7fe ba55 	b.w	8009c58 <__swbuf_r>
 800b7ae:	6813      	ldr	r3, [r2, #0]
 800b7b0:	1c58      	adds	r0, r3, #1
 800b7b2:	6010      	str	r0, [r2, #0]
 800b7b4:	7019      	strb	r1, [r3, #0]
 800b7b6:	4608      	mov	r0, r1
 800b7b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <__sfputs_r>:
 800b7be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c0:	4606      	mov	r6, r0
 800b7c2:	460f      	mov	r7, r1
 800b7c4:	4614      	mov	r4, r2
 800b7c6:	18d5      	adds	r5, r2, r3
 800b7c8:	42ac      	cmp	r4, r5
 800b7ca:	d101      	bne.n	800b7d0 <__sfputs_r+0x12>
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	e007      	b.n	800b7e0 <__sfputs_r+0x22>
 800b7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d4:	463a      	mov	r2, r7
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f7ff ffda 	bl	800b790 <__sfputc_r>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d1f3      	bne.n	800b7c8 <__sfputs_r+0xa>
 800b7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7e4 <_vfiprintf_r>:
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	460d      	mov	r5, r1
 800b7ea:	b09d      	sub	sp, #116	; 0x74
 800b7ec:	4614      	mov	r4, r2
 800b7ee:	4698      	mov	r8, r3
 800b7f0:	4606      	mov	r6, r0
 800b7f2:	b118      	cbz	r0, 800b7fc <_vfiprintf_r+0x18>
 800b7f4:	6983      	ldr	r3, [r0, #24]
 800b7f6:	b90b      	cbnz	r3, 800b7fc <_vfiprintf_r+0x18>
 800b7f8:	f7ff fa80 	bl	800acfc <__sinit>
 800b7fc:	4b89      	ldr	r3, [pc, #548]	; (800ba24 <_vfiprintf_r+0x240>)
 800b7fe:	429d      	cmp	r5, r3
 800b800:	d11b      	bne.n	800b83a <_vfiprintf_r+0x56>
 800b802:	6875      	ldr	r5, [r6, #4]
 800b804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b806:	07d9      	lsls	r1, r3, #31
 800b808:	d405      	bmi.n	800b816 <_vfiprintf_r+0x32>
 800b80a:	89ab      	ldrh	r3, [r5, #12]
 800b80c:	059a      	lsls	r2, r3, #22
 800b80e:	d402      	bmi.n	800b816 <_vfiprintf_r+0x32>
 800b810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b812:	f7ff fb16 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800b816:	89ab      	ldrh	r3, [r5, #12]
 800b818:	071b      	lsls	r3, r3, #28
 800b81a:	d501      	bpl.n	800b820 <_vfiprintf_r+0x3c>
 800b81c:	692b      	ldr	r3, [r5, #16]
 800b81e:	b9eb      	cbnz	r3, 800b85c <_vfiprintf_r+0x78>
 800b820:	4629      	mov	r1, r5
 800b822:	4630      	mov	r0, r6
 800b824:	f7fe fa6a 	bl	8009cfc <__swsetup_r>
 800b828:	b1c0      	cbz	r0, 800b85c <_vfiprintf_r+0x78>
 800b82a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b82c:	07dc      	lsls	r4, r3, #31
 800b82e:	d50e      	bpl.n	800b84e <_vfiprintf_r+0x6a>
 800b830:	f04f 30ff 	mov.w	r0, #4294967295
 800b834:	b01d      	add	sp, #116	; 0x74
 800b836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83a:	4b7b      	ldr	r3, [pc, #492]	; (800ba28 <_vfiprintf_r+0x244>)
 800b83c:	429d      	cmp	r5, r3
 800b83e:	d101      	bne.n	800b844 <_vfiprintf_r+0x60>
 800b840:	68b5      	ldr	r5, [r6, #8]
 800b842:	e7df      	b.n	800b804 <_vfiprintf_r+0x20>
 800b844:	4b79      	ldr	r3, [pc, #484]	; (800ba2c <_vfiprintf_r+0x248>)
 800b846:	429d      	cmp	r5, r3
 800b848:	bf08      	it	eq
 800b84a:	68f5      	ldreq	r5, [r6, #12]
 800b84c:	e7da      	b.n	800b804 <_vfiprintf_r+0x20>
 800b84e:	89ab      	ldrh	r3, [r5, #12]
 800b850:	0598      	lsls	r0, r3, #22
 800b852:	d4ed      	bmi.n	800b830 <_vfiprintf_r+0x4c>
 800b854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b856:	f7ff faf5 	bl	800ae44 <__retarget_lock_release_recursive>
 800b85a:	e7e9      	b.n	800b830 <_vfiprintf_r+0x4c>
 800b85c:	2300      	movs	r3, #0
 800b85e:	9309      	str	r3, [sp, #36]	; 0x24
 800b860:	2320      	movs	r3, #32
 800b862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b866:	f8cd 800c 	str.w	r8, [sp, #12]
 800b86a:	2330      	movs	r3, #48	; 0x30
 800b86c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba30 <_vfiprintf_r+0x24c>
 800b870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b874:	f04f 0901 	mov.w	r9, #1
 800b878:	4623      	mov	r3, r4
 800b87a:	469a      	mov	sl, r3
 800b87c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b880:	b10a      	cbz	r2, 800b886 <_vfiprintf_r+0xa2>
 800b882:	2a25      	cmp	r2, #37	; 0x25
 800b884:	d1f9      	bne.n	800b87a <_vfiprintf_r+0x96>
 800b886:	ebba 0b04 	subs.w	fp, sl, r4
 800b88a:	d00b      	beq.n	800b8a4 <_vfiprintf_r+0xc0>
 800b88c:	465b      	mov	r3, fp
 800b88e:	4622      	mov	r2, r4
 800b890:	4629      	mov	r1, r5
 800b892:	4630      	mov	r0, r6
 800b894:	f7ff ff93 	bl	800b7be <__sfputs_r>
 800b898:	3001      	adds	r0, #1
 800b89a:	f000 80aa 	beq.w	800b9f2 <_vfiprintf_r+0x20e>
 800b89e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8a0:	445a      	add	r2, fp
 800b8a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 80a2 	beq.w	800b9f2 <_vfiprintf_r+0x20e>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8b8:	f10a 0a01 	add.w	sl, sl, #1
 800b8bc:	9304      	str	r3, [sp, #16]
 800b8be:	9307      	str	r3, [sp, #28]
 800b8c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8c4:	931a      	str	r3, [sp, #104]	; 0x68
 800b8c6:	4654      	mov	r4, sl
 800b8c8:	2205      	movs	r2, #5
 800b8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ce:	4858      	ldr	r0, [pc, #352]	; (800ba30 <_vfiprintf_r+0x24c>)
 800b8d0:	f7f4 fc8e 	bl	80001f0 <memchr>
 800b8d4:	9a04      	ldr	r2, [sp, #16]
 800b8d6:	b9d8      	cbnz	r0, 800b910 <_vfiprintf_r+0x12c>
 800b8d8:	06d1      	lsls	r1, r2, #27
 800b8da:	bf44      	itt	mi
 800b8dc:	2320      	movmi	r3, #32
 800b8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8e2:	0713      	lsls	r3, r2, #28
 800b8e4:	bf44      	itt	mi
 800b8e6:	232b      	movmi	r3, #43	; 0x2b
 800b8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f2:	d015      	beq.n	800b920 <_vfiprintf_r+0x13c>
 800b8f4:	9a07      	ldr	r2, [sp, #28]
 800b8f6:	4654      	mov	r4, sl
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	f04f 0c0a 	mov.w	ip, #10
 800b8fe:	4621      	mov	r1, r4
 800b900:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b904:	3b30      	subs	r3, #48	; 0x30
 800b906:	2b09      	cmp	r3, #9
 800b908:	d94e      	bls.n	800b9a8 <_vfiprintf_r+0x1c4>
 800b90a:	b1b0      	cbz	r0, 800b93a <_vfiprintf_r+0x156>
 800b90c:	9207      	str	r2, [sp, #28]
 800b90e:	e014      	b.n	800b93a <_vfiprintf_r+0x156>
 800b910:	eba0 0308 	sub.w	r3, r0, r8
 800b914:	fa09 f303 	lsl.w	r3, r9, r3
 800b918:	4313      	orrs	r3, r2
 800b91a:	9304      	str	r3, [sp, #16]
 800b91c:	46a2      	mov	sl, r4
 800b91e:	e7d2      	b.n	800b8c6 <_vfiprintf_r+0xe2>
 800b920:	9b03      	ldr	r3, [sp, #12]
 800b922:	1d19      	adds	r1, r3, #4
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	9103      	str	r1, [sp, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	bfbb      	ittet	lt
 800b92c:	425b      	neglt	r3, r3
 800b92e:	f042 0202 	orrlt.w	r2, r2, #2
 800b932:	9307      	strge	r3, [sp, #28]
 800b934:	9307      	strlt	r3, [sp, #28]
 800b936:	bfb8      	it	lt
 800b938:	9204      	strlt	r2, [sp, #16]
 800b93a:	7823      	ldrb	r3, [r4, #0]
 800b93c:	2b2e      	cmp	r3, #46	; 0x2e
 800b93e:	d10c      	bne.n	800b95a <_vfiprintf_r+0x176>
 800b940:	7863      	ldrb	r3, [r4, #1]
 800b942:	2b2a      	cmp	r3, #42	; 0x2a
 800b944:	d135      	bne.n	800b9b2 <_vfiprintf_r+0x1ce>
 800b946:	9b03      	ldr	r3, [sp, #12]
 800b948:	1d1a      	adds	r2, r3, #4
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	9203      	str	r2, [sp, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	bfb8      	it	lt
 800b952:	f04f 33ff 	movlt.w	r3, #4294967295
 800b956:	3402      	adds	r4, #2
 800b958:	9305      	str	r3, [sp, #20]
 800b95a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba40 <_vfiprintf_r+0x25c>
 800b95e:	7821      	ldrb	r1, [r4, #0]
 800b960:	2203      	movs	r2, #3
 800b962:	4650      	mov	r0, sl
 800b964:	f7f4 fc44 	bl	80001f0 <memchr>
 800b968:	b140      	cbz	r0, 800b97c <_vfiprintf_r+0x198>
 800b96a:	2340      	movs	r3, #64	; 0x40
 800b96c:	eba0 000a 	sub.w	r0, r0, sl
 800b970:	fa03 f000 	lsl.w	r0, r3, r0
 800b974:	9b04      	ldr	r3, [sp, #16]
 800b976:	4303      	orrs	r3, r0
 800b978:	3401      	adds	r4, #1
 800b97a:	9304      	str	r3, [sp, #16]
 800b97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b980:	482c      	ldr	r0, [pc, #176]	; (800ba34 <_vfiprintf_r+0x250>)
 800b982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b986:	2206      	movs	r2, #6
 800b988:	f7f4 fc32 	bl	80001f0 <memchr>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d03f      	beq.n	800ba10 <_vfiprintf_r+0x22c>
 800b990:	4b29      	ldr	r3, [pc, #164]	; (800ba38 <_vfiprintf_r+0x254>)
 800b992:	bb1b      	cbnz	r3, 800b9dc <_vfiprintf_r+0x1f8>
 800b994:	9b03      	ldr	r3, [sp, #12]
 800b996:	3307      	adds	r3, #7
 800b998:	f023 0307 	bic.w	r3, r3, #7
 800b99c:	3308      	adds	r3, #8
 800b99e:	9303      	str	r3, [sp, #12]
 800b9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a2:	443b      	add	r3, r7
 800b9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a6:	e767      	b.n	800b878 <_vfiprintf_r+0x94>
 800b9a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	e7a5      	b.n	800b8fe <_vfiprintf_r+0x11a>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	3401      	adds	r4, #1
 800b9b6:	9305      	str	r3, [sp, #20]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	f04f 0c0a 	mov.w	ip, #10
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9c4:	3a30      	subs	r2, #48	; 0x30
 800b9c6:	2a09      	cmp	r2, #9
 800b9c8:	d903      	bls.n	800b9d2 <_vfiprintf_r+0x1ee>
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d0c5      	beq.n	800b95a <_vfiprintf_r+0x176>
 800b9ce:	9105      	str	r1, [sp, #20]
 800b9d0:	e7c3      	b.n	800b95a <_vfiprintf_r+0x176>
 800b9d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e7f0      	b.n	800b9be <_vfiprintf_r+0x1da>
 800b9dc:	ab03      	add	r3, sp, #12
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	462a      	mov	r2, r5
 800b9e2:	4b16      	ldr	r3, [pc, #88]	; (800ba3c <_vfiprintf_r+0x258>)
 800b9e4:	a904      	add	r1, sp, #16
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	f7fd fcc8 	bl	800937c <_printf_float>
 800b9ec:	4607      	mov	r7, r0
 800b9ee:	1c78      	adds	r0, r7, #1
 800b9f0:	d1d6      	bne.n	800b9a0 <_vfiprintf_r+0x1bc>
 800b9f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9f4:	07d9      	lsls	r1, r3, #31
 800b9f6:	d405      	bmi.n	800ba04 <_vfiprintf_r+0x220>
 800b9f8:	89ab      	ldrh	r3, [r5, #12]
 800b9fa:	059a      	lsls	r2, r3, #22
 800b9fc:	d402      	bmi.n	800ba04 <_vfiprintf_r+0x220>
 800b9fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba00:	f7ff fa20 	bl	800ae44 <__retarget_lock_release_recursive>
 800ba04:	89ab      	ldrh	r3, [r5, #12]
 800ba06:	065b      	lsls	r3, r3, #25
 800ba08:	f53f af12 	bmi.w	800b830 <_vfiprintf_r+0x4c>
 800ba0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba0e:	e711      	b.n	800b834 <_vfiprintf_r+0x50>
 800ba10:	ab03      	add	r3, sp, #12
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	462a      	mov	r2, r5
 800ba16:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <_vfiprintf_r+0x258>)
 800ba18:	a904      	add	r1, sp, #16
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f7fd ff52 	bl	80098c4 <_printf_i>
 800ba20:	e7e4      	b.n	800b9ec <_vfiprintf_r+0x208>
 800ba22:	bf00      	nop
 800ba24:	0800c800 	.word	0x0800c800
 800ba28:	0800c820 	.word	0x0800c820
 800ba2c:	0800c7e0 	.word	0x0800c7e0
 800ba30:	0800c99c 	.word	0x0800c99c
 800ba34:	0800c9a6 	.word	0x0800c9a6
 800ba38:	0800937d 	.word	0x0800937d
 800ba3c:	0800b7bf 	.word	0x0800b7bf
 800ba40:	0800c9a2 	.word	0x0800c9a2

0800ba44 <_putc_r>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	460d      	mov	r5, r1
 800ba48:	4614      	mov	r4, r2
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	b118      	cbz	r0, 800ba56 <_putc_r+0x12>
 800ba4e:	6983      	ldr	r3, [r0, #24]
 800ba50:	b90b      	cbnz	r3, 800ba56 <_putc_r+0x12>
 800ba52:	f7ff f953 	bl	800acfc <__sinit>
 800ba56:	4b1c      	ldr	r3, [pc, #112]	; (800bac8 <_putc_r+0x84>)
 800ba58:	429c      	cmp	r4, r3
 800ba5a:	d124      	bne.n	800baa6 <_putc_r+0x62>
 800ba5c:	6874      	ldr	r4, [r6, #4]
 800ba5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba60:	07d8      	lsls	r0, r3, #31
 800ba62:	d405      	bmi.n	800ba70 <_putc_r+0x2c>
 800ba64:	89a3      	ldrh	r3, [r4, #12]
 800ba66:	0599      	lsls	r1, r3, #22
 800ba68:	d402      	bmi.n	800ba70 <_putc_r+0x2c>
 800ba6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba6c:	f7ff f9e9 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800ba70:	68a3      	ldr	r3, [r4, #8]
 800ba72:	3b01      	subs	r3, #1
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	60a3      	str	r3, [r4, #8]
 800ba78:	da05      	bge.n	800ba86 <_putc_r+0x42>
 800ba7a:	69a2      	ldr	r2, [r4, #24]
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	db1c      	blt.n	800baba <_putc_r+0x76>
 800ba80:	b2eb      	uxtb	r3, r5
 800ba82:	2b0a      	cmp	r3, #10
 800ba84:	d019      	beq.n	800baba <_putc_r+0x76>
 800ba86:	6823      	ldr	r3, [r4, #0]
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	6022      	str	r2, [r4, #0]
 800ba8c:	701d      	strb	r5, [r3, #0]
 800ba8e:	b2ed      	uxtb	r5, r5
 800ba90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba92:	07da      	lsls	r2, r3, #31
 800ba94:	d405      	bmi.n	800baa2 <_putc_r+0x5e>
 800ba96:	89a3      	ldrh	r3, [r4, #12]
 800ba98:	059b      	lsls	r3, r3, #22
 800ba9a:	d402      	bmi.n	800baa2 <_putc_r+0x5e>
 800ba9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba9e:	f7ff f9d1 	bl	800ae44 <__retarget_lock_release_recursive>
 800baa2:	4628      	mov	r0, r5
 800baa4:	bd70      	pop	{r4, r5, r6, pc}
 800baa6:	4b09      	ldr	r3, [pc, #36]	; (800bacc <_putc_r+0x88>)
 800baa8:	429c      	cmp	r4, r3
 800baaa:	d101      	bne.n	800bab0 <_putc_r+0x6c>
 800baac:	68b4      	ldr	r4, [r6, #8]
 800baae:	e7d6      	b.n	800ba5e <_putc_r+0x1a>
 800bab0:	4b07      	ldr	r3, [pc, #28]	; (800bad0 <_putc_r+0x8c>)
 800bab2:	429c      	cmp	r4, r3
 800bab4:	bf08      	it	eq
 800bab6:	68f4      	ldreq	r4, [r6, #12]
 800bab8:	e7d1      	b.n	800ba5e <_putc_r+0x1a>
 800baba:	4629      	mov	r1, r5
 800babc:	4622      	mov	r2, r4
 800babe:	4630      	mov	r0, r6
 800bac0:	f7fe f8ca 	bl	8009c58 <__swbuf_r>
 800bac4:	4605      	mov	r5, r0
 800bac6:	e7e3      	b.n	800ba90 <_putc_r+0x4c>
 800bac8:	0800c800 	.word	0x0800c800
 800bacc:	0800c820 	.word	0x0800c820
 800bad0:	0800c7e0 	.word	0x0800c7e0

0800bad4 <_sbrk_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4d06      	ldr	r5, [pc, #24]	; (800baf0 <_sbrk_r+0x1c>)
 800bad8:	2300      	movs	r3, #0
 800bada:	4604      	mov	r4, r0
 800badc:	4608      	mov	r0, r1
 800bade:	602b      	str	r3, [r5, #0]
 800bae0:	f7f7 f98c 	bl	8002dfc <_sbrk>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_sbrk_r+0x1a>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_sbrk_r+0x1a>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	20004cac 	.word	0x20004cac

0800baf4 <__sread>:
 800baf4:	b510      	push	{r4, lr}
 800baf6:	460c      	mov	r4, r1
 800baf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafc:	f000 f8e2 	bl	800bcc4 <_read_r>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	bfab      	itete	ge
 800bb04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb06:	89a3      	ldrhlt	r3, [r4, #12]
 800bb08:	181b      	addge	r3, r3, r0
 800bb0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb0e:	bfac      	ite	ge
 800bb10:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb12:	81a3      	strhlt	r3, [r4, #12]
 800bb14:	bd10      	pop	{r4, pc}

0800bb16 <__swrite>:
 800bb16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1a:	461f      	mov	r7, r3
 800bb1c:	898b      	ldrh	r3, [r1, #12]
 800bb1e:	05db      	lsls	r3, r3, #23
 800bb20:	4605      	mov	r5, r0
 800bb22:	460c      	mov	r4, r1
 800bb24:	4616      	mov	r6, r2
 800bb26:	d505      	bpl.n	800bb34 <__swrite+0x1e>
 800bb28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f000 f898 	bl	800bc64 <_lseek_r>
 800bb34:	89a3      	ldrh	r3, [r4, #12]
 800bb36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb3e:	81a3      	strh	r3, [r4, #12]
 800bb40:	4632      	mov	r2, r6
 800bb42:	463b      	mov	r3, r7
 800bb44:	4628      	mov	r0, r5
 800bb46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4a:	f000 b817 	b.w	800bb7c <_write_r>

0800bb4e <__sseek>:
 800bb4e:	b510      	push	{r4, lr}
 800bb50:	460c      	mov	r4, r1
 800bb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb56:	f000 f885 	bl	800bc64 <_lseek_r>
 800bb5a:	1c43      	adds	r3, r0, #1
 800bb5c:	89a3      	ldrh	r3, [r4, #12]
 800bb5e:	bf15      	itete	ne
 800bb60:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb6a:	81a3      	strheq	r3, [r4, #12]
 800bb6c:	bf18      	it	ne
 800bb6e:	81a3      	strhne	r3, [r4, #12]
 800bb70:	bd10      	pop	{r4, pc}

0800bb72 <__sclose>:
 800bb72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb76:	f000 b831 	b.w	800bbdc <_close_r>
	...

0800bb7c <_write_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4d07      	ldr	r5, [pc, #28]	; (800bb9c <_write_r+0x20>)
 800bb80:	4604      	mov	r4, r0
 800bb82:	4608      	mov	r0, r1
 800bb84:	4611      	mov	r1, r2
 800bb86:	2200      	movs	r2, #0
 800bb88:	602a      	str	r2, [r5, #0]
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	f7f6 fb18 	bl	80021c0 <_write>
 800bb90:	1c43      	adds	r3, r0, #1
 800bb92:	d102      	bne.n	800bb9a <_write_r+0x1e>
 800bb94:	682b      	ldr	r3, [r5, #0]
 800bb96:	b103      	cbz	r3, 800bb9a <_write_r+0x1e>
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	20004cac 	.word	0x20004cac

0800bba0 <__assert_func>:
 800bba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bba2:	4614      	mov	r4, r2
 800bba4:	461a      	mov	r2, r3
 800bba6:	4b09      	ldr	r3, [pc, #36]	; (800bbcc <__assert_func+0x2c>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4605      	mov	r5, r0
 800bbac:	68d8      	ldr	r0, [r3, #12]
 800bbae:	b14c      	cbz	r4, 800bbc4 <__assert_func+0x24>
 800bbb0:	4b07      	ldr	r3, [pc, #28]	; (800bbd0 <__assert_func+0x30>)
 800bbb2:	9100      	str	r1, [sp, #0]
 800bbb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbb8:	4906      	ldr	r1, [pc, #24]	; (800bbd4 <__assert_func+0x34>)
 800bbba:	462b      	mov	r3, r5
 800bbbc:	f000 f81e 	bl	800bbfc <fiprintf>
 800bbc0:	f000 f89f 	bl	800bd02 <abort>
 800bbc4:	4b04      	ldr	r3, [pc, #16]	; (800bbd8 <__assert_func+0x38>)
 800bbc6:	461c      	mov	r4, r3
 800bbc8:	e7f3      	b.n	800bbb2 <__assert_func+0x12>
 800bbca:	bf00      	nop
 800bbcc:	20000024 	.word	0x20000024
 800bbd0:	0800c9ad 	.word	0x0800c9ad
 800bbd4:	0800c9ba 	.word	0x0800c9ba
 800bbd8:	0800c9e8 	.word	0x0800c9e8

0800bbdc <_close_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4d06      	ldr	r5, [pc, #24]	; (800bbf8 <_close_r+0x1c>)
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	4608      	mov	r0, r1
 800bbe6:	602b      	str	r3, [r5, #0]
 800bbe8:	f7f7 f8d3 	bl	8002d92 <_close>
 800bbec:	1c43      	adds	r3, r0, #1
 800bbee:	d102      	bne.n	800bbf6 <_close_r+0x1a>
 800bbf0:	682b      	ldr	r3, [r5, #0]
 800bbf2:	b103      	cbz	r3, 800bbf6 <_close_r+0x1a>
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	bd38      	pop	{r3, r4, r5, pc}
 800bbf8:	20004cac 	.word	0x20004cac

0800bbfc <fiprintf>:
 800bbfc:	b40e      	push	{r1, r2, r3}
 800bbfe:	b503      	push	{r0, r1, lr}
 800bc00:	4601      	mov	r1, r0
 800bc02:	ab03      	add	r3, sp, #12
 800bc04:	4805      	ldr	r0, [pc, #20]	; (800bc1c <fiprintf+0x20>)
 800bc06:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc0a:	6800      	ldr	r0, [r0, #0]
 800bc0c:	9301      	str	r3, [sp, #4]
 800bc0e:	f7ff fde9 	bl	800b7e4 <_vfiprintf_r>
 800bc12:	b002      	add	sp, #8
 800bc14:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc18:	b003      	add	sp, #12
 800bc1a:	4770      	bx	lr
 800bc1c:	20000024 	.word	0x20000024

0800bc20 <_fstat_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d07      	ldr	r5, [pc, #28]	; (800bc40 <_fstat_r+0x20>)
 800bc24:	2300      	movs	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	602b      	str	r3, [r5, #0]
 800bc2e:	f7f7 f8bc 	bl	8002daa <_fstat>
 800bc32:	1c43      	adds	r3, r0, #1
 800bc34:	d102      	bne.n	800bc3c <_fstat_r+0x1c>
 800bc36:	682b      	ldr	r3, [r5, #0]
 800bc38:	b103      	cbz	r3, 800bc3c <_fstat_r+0x1c>
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	bd38      	pop	{r3, r4, r5, pc}
 800bc3e:	bf00      	nop
 800bc40:	20004cac 	.word	0x20004cac

0800bc44 <_isatty_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d06      	ldr	r5, [pc, #24]	; (800bc60 <_isatty_r+0x1c>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	602b      	str	r3, [r5, #0]
 800bc50:	f7f7 f8bb 	bl	8002dca <_isatty>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_isatty_r+0x1a>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_isatty_r+0x1a>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	20004cac 	.word	0x20004cac

0800bc64 <_lseek_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d07      	ldr	r5, [pc, #28]	; (800bc84 <_lseek_r+0x20>)
 800bc68:	4604      	mov	r4, r0
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	2200      	movs	r2, #0
 800bc70:	602a      	str	r2, [r5, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f7f7 f8b4 	bl	8002de0 <_lseek>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_lseek_r+0x1e>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_lseek_r+0x1e>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	20004cac 	.word	0x20004cac

0800bc88 <__ascii_mbtowc>:
 800bc88:	b082      	sub	sp, #8
 800bc8a:	b901      	cbnz	r1, 800bc8e <__ascii_mbtowc+0x6>
 800bc8c:	a901      	add	r1, sp, #4
 800bc8e:	b142      	cbz	r2, 800bca2 <__ascii_mbtowc+0x1a>
 800bc90:	b14b      	cbz	r3, 800bca6 <__ascii_mbtowc+0x1e>
 800bc92:	7813      	ldrb	r3, [r2, #0]
 800bc94:	600b      	str	r3, [r1, #0]
 800bc96:	7812      	ldrb	r2, [r2, #0]
 800bc98:	1e10      	subs	r0, r2, #0
 800bc9a:	bf18      	it	ne
 800bc9c:	2001      	movne	r0, #1
 800bc9e:	b002      	add	sp, #8
 800bca0:	4770      	bx	lr
 800bca2:	4610      	mov	r0, r2
 800bca4:	e7fb      	b.n	800bc9e <__ascii_mbtowc+0x16>
 800bca6:	f06f 0001 	mvn.w	r0, #1
 800bcaa:	e7f8      	b.n	800bc9e <__ascii_mbtowc+0x16>

0800bcac <__malloc_lock>:
 800bcac:	4801      	ldr	r0, [pc, #4]	; (800bcb4 <__malloc_lock+0x8>)
 800bcae:	f7ff b8c8 	b.w	800ae42 <__retarget_lock_acquire_recursive>
 800bcb2:	bf00      	nop
 800bcb4:	20004ca4 	.word	0x20004ca4

0800bcb8 <__malloc_unlock>:
 800bcb8:	4801      	ldr	r0, [pc, #4]	; (800bcc0 <__malloc_unlock+0x8>)
 800bcba:	f7ff b8c3 	b.w	800ae44 <__retarget_lock_release_recursive>
 800bcbe:	bf00      	nop
 800bcc0:	20004ca4 	.word	0x20004ca4

0800bcc4 <_read_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d07      	ldr	r5, [pc, #28]	; (800bce4 <_read_r+0x20>)
 800bcc8:	4604      	mov	r4, r0
 800bcca:	4608      	mov	r0, r1
 800bccc:	4611      	mov	r1, r2
 800bcce:	2200      	movs	r2, #0
 800bcd0:	602a      	str	r2, [r5, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	f7f7 f840 	bl	8002d58 <_read>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_read_r+0x1e>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_read_r+0x1e>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	20004cac 	.word	0x20004cac

0800bce8 <__ascii_wctomb>:
 800bce8:	b149      	cbz	r1, 800bcfe <__ascii_wctomb+0x16>
 800bcea:	2aff      	cmp	r2, #255	; 0xff
 800bcec:	bf85      	ittet	hi
 800bcee:	238a      	movhi	r3, #138	; 0x8a
 800bcf0:	6003      	strhi	r3, [r0, #0]
 800bcf2:	700a      	strbls	r2, [r1, #0]
 800bcf4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bcf8:	bf98      	it	ls
 800bcfa:	2001      	movls	r0, #1
 800bcfc:	4770      	bx	lr
 800bcfe:	4608      	mov	r0, r1
 800bd00:	4770      	bx	lr

0800bd02 <abort>:
 800bd02:	b508      	push	{r3, lr}
 800bd04:	2006      	movs	r0, #6
 800bd06:	f000 f82b 	bl	800bd60 <raise>
 800bd0a:	2001      	movs	r0, #1
 800bd0c:	f7f7 f81a 	bl	8002d44 <_exit>

0800bd10 <_raise_r>:
 800bd10:	291f      	cmp	r1, #31
 800bd12:	b538      	push	{r3, r4, r5, lr}
 800bd14:	4604      	mov	r4, r0
 800bd16:	460d      	mov	r5, r1
 800bd18:	d904      	bls.n	800bd24 <_raise_r+0x14>
 800bd1a:	2316      	movs	r3, #22
 800bd1c:	6003      	str	r3, [r0, #0]
 800bd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd26:	b112      	cbz	r2, 800bd2e <_raise_r+0x1e>
 800bd28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd2c:	b94b      	cbnz	r3, 800bd42 <_raise_r+0x32>
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 f830 	bl	800bd94 <_getpid_r>
 800bd34:	462a      	mov	r2, r5
 800bd36:	4601      	mov	r1, r0
 800bd38:	4620      	mov	r0, r4
 800bd3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd3e:	f000 b817 	b.w	800bd70 <_kill_r>
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d00a      	beq.n	800bd5c <_raise_r+0x4c>
 800bd46:	1c59      	adds	r1, r3, #1
 800bd48:	d103      	bne.n	800bd52 <_raise_r+0x42>
 800bd4a:	2316      	movs	r3, #22
 800bd4c:	6003      	str	r3, [r0, #0]
 800bd4e:	2001      	movs	r0, #1
 800bd50:	e7e7      	b.n	800bd22 <_raise_r+0x12>
 800bd52:	2400      	movs	r4, #0
 800bd54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd58:	4628      	mov	r0, r5
 800bd5a:	4798      	blx	r3
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e7e0      	b.n	800bd22 <_raise_r+0x12>

0800bd60 <raise>:
 800bd60:	4b02      	ldr	r3, [pc, #8]	; (800bd6c <raise+0xc>)
 800bd62:	4601      	mov	r1, r0
 800bd64:	6818      	ldr	r0, [r3, #0]
 800bd66:	f7ff bfd3 	b.w	800bd10 <_raise_r>
 800bd6a:	bf00      	nop
 800bd6c:	20000024 	.word	0x20000024

0800bd70 <_kill_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d07      	ldr	r5, [pc, #28]	; (800bd90 <_kill_r+0x20>)
 800bd74:	2300      	movs	r3, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	f7f6 ffd1 	bl	8002d24 <_kill>
 800bd82:	1c43      	adds	r3, r0, #1
 800bd84:	d102      	bne.n	800bd8c <_kill_r+0x1c>
 800bd86:	682b      	ldr	r3, [r5, #0]
 800bd88:	b103      	cbz	r3, 800bd8c <_kill_r+0x1c>
 800bd8a:	6023      	str	r3, [r4, #0]
 800bd8c:	bd38      	pop	{r3, r4, r5, pc}
 800bd8e:	bf00      	nop
 800bd90:	20004cac 	.word	0x20004cac

0800bd94 <_getpid_r>:
 800bd94:	f7f6 bfbe 	b.w	8002d14 <_getpid>

0800bd98 <_init>:
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9a:	bf00      	nop
 800bd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9e:	bc08      	pop	{r3}
 800bda0:	469e      	mov	lr, r3
 800bda2:	4770      	bx	lr

0800bda4 <_fini>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	bf00      	nop
 800bda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdaa:	bc08      	pop	{r3}
 800bdac:	469e      	mov	lr, r3
 800bdae:	4770      	bx	lr

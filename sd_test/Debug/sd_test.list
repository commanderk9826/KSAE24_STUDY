
sd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d3c  0800be98  0800be98  0001be98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbd4  0800cbd4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbd4  0800cbd4  0001cbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbdc  0800cbdc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbdc  0800cbdc  0001cbdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbe0  0800cbe0  0001cbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cbe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002988  200001f8  0800cdd8  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002b80  0800cdd8  00022b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a68  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ec  00000000  00000000  00032c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00035e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00036fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c8a  00000000  00000000  00037f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ad7  00000000  00000000  0005dc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5665  00000000  00000000  000746f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149d56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005650  00000000  00000000  00149da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be80 	.word	0x0800be80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800be80 	.word	0x0800be80

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <SX1278_SPIRead>:


#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	78fa      	ldrb	r2, [r7, #3]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fb39 	bl	8001588 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fb54 	bl	80015c8 <SX1278_hw_SPIReadByte>
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 faf1 	bl	8001512 <SX1278_hw_SetNSS>
	return tmp;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	70fb      	strb	r3, [r7, #3]
 8000f46:	4613      	mov	r3, r2
 8000f48:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fade 	bl	8001512 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	f000 fb0f 	bl	8001588 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	78ba      	ldrb	r2, [r7, #2]
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fb08 	bl	8001588 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fac7 	bl	8001512 <SX1278_hw_SetNSS>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	461a      	mov	r2, r3
 8000f98:	460b      	mov	r3, r1
 8000f9a:	72fb      	strb	r3, [r7, #11]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000fa0:	7abb      	ldrb	r3, [r7, #10]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d927      	bls.n	8000ff6 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fab0 	bl	8001512 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	7afa      	ldrb	r2, [r7, #11]
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fae4 	bl	8001588 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	75fb      	strb	r3, [r7, #23]
 8000fc4:	e00c      	b.n	8000fe0 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	18d4      	adds	r4, r2, r3
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	f000 faf9 	bl	80015c8 <SX1278_hw_SPIReadByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	75fb      	strb	r3, [r7, #23]
 8000fe0:	7dfa      	ldrb	r2, [r7, #23]
 8000fe2:	7abb      	ldrb	r3, [r7, #10]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d3ee      	bcc.n	8000fc6 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fa8f 	bl	8001512 <SX1278_hw_SetNSS>
 8000ff4:	e000      	b.n	8000ff8 <SX1278_SPIBurstRead+0x6c>
		return;
 8000ff6:	bf00      	nop
	}
}
 8000ff8:	371c      	adds	r7, #28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}

08000ffe <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	461a      	mov	r2, r3
 800100a:	460b      	mov	r3, r1
 800100c:	72fb      	strb	r3, [r7, #11]
 800100e:	4613      	mov	r3, r2
 8001010:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001012:	7abb      	ldrb	r3, [r7, #10]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d929      	bls.n	800106c <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fa77 	bl	8001512 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4619      	mov	r1, r3
 8001032:	4610      	mov	r0, r2
 8001034:	f000 faa8 	bl	8001588 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001038:	2300      	movs	r3, #0
 800103a:	75fb      	strb	r3, [r7, #23]
 800103c:	e00b      	b.n	8001056 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4619      	mov	r1, r3
 800104c:	f000 fa9c 	bl	8001588 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	3301      	adds	r3, #1
 8001054:	75fb      	strb	r3, [r7, #23]
 8001056:	7dfa      	ldrb	r2, [r7, #23]
 8001058:	7abb      	ldrb	r3, [r7, #10]
 800105a:	429a      	cmp	r2, r3
 800105c:	d3ef      	bcc.n	800103e <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2101      	movs	r1, #1
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fa54 	bl	8001512 <SX1278_hw_SetNSS>
 800106a:	e000      	b.n	800106e <SX1278_SPIBurstWrite+0x70>
		return;
 800106c:	bf00      	nop
	}
}
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f90d 	bl	800129c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001082:	200f      	movs	r0, #15
 8001084:	f000 fac6 	bl	8001614 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f917 	bl	80012bc <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	f04f 0100 	mov.w	r1, #0
 800109c:	04d9      	lsls	r1, r3, #19
 800109e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80010a2:	04d0      	lsls	r0, r2, #19
 80010a4:	4a6f      	ldr	r2, [pc, #444]	; (8001264 <SX1278_config+0x1f0>)
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	f7ff fda5 	bl	8000bf8 <__aeabi_uldivmod>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80010b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	0c02      	lsrs	r2, r0, #16
 80010c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010c8:	0c0b      	lsrs	r3, r1, #16
 80010ca:	b2d3      	uxtb	r3, r2
 80010cc:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80010ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	0a02      	lsrs	r2, r0, #8
 80010dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80010e0:	0a0b      	lsrs	r3, r1, #8
 80010e2:	b2d3      	uxtb	r3, r2
 80010e4:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80010e6:	7c3b      	ldrb	r3, [r7, #16]
 80010e8:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80010ea:	f107 020c 	add.w	r2, r7, #12
 80010ee:	2303      	movs	r3, #3
 80010f0:	2106      	movs	r1, #6
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff83 	bl	8000ffe <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80010f8:	2234      	movs	r2, #52	; 0x34
 80010fa:	2139      	movs	r1, #57	; 0x39
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff1c 	bl	8000f3a <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7c1b      	ldrb	r3, [r3, #16]
 8001106:	461a      	mov	r2, r3
 8001108:	4b57      	ldr	r3, [pc, #348]	; (8001268 <SX1278_config+0x1f4>)
 800110a:	5c9b      	ldrb	r3, [r3, r2]
 800110c:	461a      	mov	r2, r3
 800110e:	2109      	movs	r1, #9
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff12 	bl	8000f3a <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001116:	220b      	movs	r2, #11
 8001118:	210b      	movs	r1, #11
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff0d 	bl	8000f3a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001120:	2223      	movs	r2, #35	; 0x23
 8001122:	210c      	movs	r1, #12
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff08 	bl	8000f3a <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7c5b      	ldrb	r3, [r3, #17]
 800112e:	461a      	mov	r2, r3
 8001130:	4b4e      	ldr	r3, [pc, #312]	; (800126c <SX1278_config+0x1f8>)
 8001132:	5c9b      	ldrb	r3, [r3, r2]
 8001134:	2b06      	cmp	r3, #6
 8001136:	d147      	bne.n	80011c8 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7c9b      	ldrb	r3, [r3, #18]
 800113c:	461a      	mov	r2, r3
 800113e:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <SX1278_config+0x1fc>)
 8001140:	5c9b      	ldrb	r3, [r3, r2]
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7cdb      	ldrb	r3, [r3, #19]
 800114a:	4619      	mov	r1, r3
 800114c:	4b49      	ldr	r3, [pc, #292]	; (8001274 <SX1278_config+0x200>)
 800114e:	5c5b      	ldrb	r3, [r3, r1]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4413      	add	r3, r2
 8001156:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001158:	3301      	adds	r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	211d      	movs	r1, #29
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff feea 	bl	8000f3a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7c5b      	ldrb	r3, [r3, #17]
 800116a:	461a      	mov	r2, r3
 800116c:	4b3f      	ldr	r3, [pc, #252]	; (800126c <SX1278_config+0x1f8>)
 800116e:	5c9b      	ldrb	r3, [r3, r2]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7d1b      	ldrb	r3, [r3, #20]
 8001178:	4619      	mov	r1, r3
 800117a:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <SX1278_config+0x204>)
 800117c:	5c5b      	ldrb	r3, [r3, r1]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4413      	add	r3, r2
 8001184:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001186:	3303      	adds	r3, #3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	211e      	movs	r1, #30
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fed3 	bl	8000f3a <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8001194:	2131      	movs	r1, #49	; 0x31
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff feb0 	bl	8000efc <SX1278_SPIRead>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	f023 0307 	bic.w	r3, r3, #7
 80011a6:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f043 0305 	orr.w	r3, r3, #5
 80011ae:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	461a      	mov	r2, r3
 80011b4:	2131      	movs	r1, #49	; 0x31
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff febf 	bl	8000f3a <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80011bc:	220c      	movs	r2, #12
 80011be:	2137      	movs	r1, #55	; 0x37
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff feba 	bl	8000f3a <SX1278_SPIWrite>
 80011c6:	e029      	b.n	800121c <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7c9b      	ldrb	r3, [r3, #18]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <SX1278_config+0x1fc>)
 80011d0:	5c9b      	ldrb	r3, [r3, r2]
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7cdb      	ldrb	r3, [r3, #19]
 80011da:	4619      	mov	r1, r3
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <SX1278_config+0x200>)
 80011de:	5c5b      	ldrb	r3, [r3, r1]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80011e4:	4413      	add	r3, r2
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	211d      	movs	r1, #29
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fea4 	bl	8000f3a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7c5b      	ldrb	r3, [r3, #17]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <SX1278_config+0x1f8>)
 80011fa:	5c9b      	ldrb	r3, [r3, r2]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7d1b      	ldrb	r3, [r3, #20]
 8001204:	4619      	mov	r1, r3
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <SX1278_config+0x204>)
 8001208:	5c5b      	ldrb	r3, [r3, r1]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800120e:	4413      	add	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	211e      	movs	r1, #30
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fe8f 	bl	8000f3a <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800121c:	2204      	movs	r2, #4
 800121e:	2126      	movs	r1, #38	; 0x26
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fe8a 	bl	8000f3a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001226:	2208      	movs	r2, #8
 8001228:	211f      	movs	r1, #31
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fe85 	bl	8000f3a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001230:	2200      	movs	r2, #0
 8001232:	2120      	movs	r1, #32
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fe80 	bl	8000f3a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800123a:	2208      	movs	r2, #8
 800123c:	2121      	movs	r1, #33	; 0x21
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fe7b 	bl	8000f3a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001244:	2201      	movs	r2, #1
 8001246:	2141      	movs	r1, #65	; 0x41
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fe76 	bl	8000f3a <SX1278_SPIWrite>
	module->readBytes = 0;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f810 	bl	800127c <SX1278_standby>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	01e84800 	.word	0x01e84800
 8001268:	0800c354 	.word	0x0800c354
 800126c:	0800c358 	.word	0x0800c358
 8001270:	0800c360 	.word	0x0800c360
 8001274:	0800c36c 	.word	0x0800c36c
 8001278:	0800c370 	.word	0x0800c370

0800127c <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001284:	2209      	movs	r2, #9
 8001286:	2101      	movs	r1, #1
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fe56 	bl	8000f3a <SX1278_SPIWrite>
	module->status = STANDBY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	759a      	strb	r2, [r3, #22]
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80012a4:	2208      	movs	r2, #8
 80012a6:	2101      	movs	r1, #1
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fe46 	bl	8000f3a <SX1278_SPIWrite>
	module->status = SLEEP;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	759a      	strb	r2, [r3, #22]
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80012c4:	2288      	movs	r2, #136	; 0x88
 80012c6:	2101      	movs	r1, #1
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fe36 	bl	8000f3a <SX1278_SPIWrite>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80012de:	22ff      	movs	r2, #255	; 0xff
 80012e0:	2112      	movs	r1, #18
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fe29 	bl	8000f3a <SX1278_SPIWrite>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	460b      	mov	r3, r1
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	7afa      	ldrb	r2, [r7, #11]
 8001302:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f7ff feb5 	bl	8001074 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800130a:	2284      	movs	r2, #132	; 0x84
 800130c:	214d      	movs	r1, #77	; 0x4d
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f7ff fe13 	bl	8000f3a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001314:	22ff      	movs	r2, #255	; 0xff
 8001316:	2124      	movs	r1, #36	; 0x24
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f7ff fe0e 	bl	8000f3a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800131e:	2201      	movs	r2, #1
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff fe09 	bl	8000f3a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8001328:	223f      	movs	r2, #63	; 0x3f
 800132a:	2111      	movs	r1, #17
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7ff fe04 	bl	8000f3a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f7ff ffcf 	bl	80012d6 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001338:	7afb      	ldrb	r3, [r7, #11]
 800133a:	461a      	mov	r2, r3
 800133c:	2122      	movs	r1, #34	; 0x22
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f7ff fdfb 	bl	8000f3a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001344:	210f      	movs	r1, #15
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff fdd8 	bl	8000efc <SX1278_SPIRead>
 800134c:	4603      	mov	r3, r0
 800134e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	461a      	mov	r2, r3
 8001354:	210d      	movs	r1, #13
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f7ff fdef 	bl	8000f3a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800135c:	228d      	movs	r2, #141	; 0x8d
 800135e:	2101      	movs	r1, #1
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff fdea 	bl	8000f3a <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800136e:	2118      	movs	r1, #24
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f7ff fdc3 	bl	8000efc <SX1278_SPIRead>
 8001376:	4603      	mov	r3, r0
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b04      	cmp	r3, #4
 800137e:	d104      	bne.n	800138a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2203      	movs	r2, #3
 8001384:	759a      	strb	r2, [r3, #22]
			return 1;
 8001386:	2301      	movs	r3, #1
 8001388:	e013      	b.n	80013b2 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3b01      	subs	r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f8d0 	bl	8001540 <SX1278_hw_Reset>
			SX1278_config(module);
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff fe67 	bl	8001074 <SX1278_config>
			return 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e003      	b.n	80013b2 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f000 f932 	bl	8001614 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80013b0:	e7dd      	b.n	800136e <SX1278_LoRaEntryRx+0x7e>
	}
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f92f 	bl	800162a <SX1278_hw_GetDIO0>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d030      	beq.n	8001434 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3317      	adds	r3, #23
 80013d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f007 ff53 	bl	8009288 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80013e2:	2110      	movs	r1, #16
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fd89 	bl	8000efc <SX1278_SPIRead>
 80013ea:	4603      	mov	r3, r0
 80013ec:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	461a      	mov	r2, r3
 80013f2:	210d      	movs	r1, #13
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fda0 	bl	8000f3a <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7c5b      	ldrb	r3, [r3, #17]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d103      	bne.n	800140a <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7d5b      	ldrb	r3, [r3, #21]
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e005      	b.n	8001416 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800140a:	2113      	movs	r1, #19
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fd75 	bl	8000efc <SX1278_SPIRead>
 8001412:	4603      	mov	r3, r0
 8001414:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f103 0217 	add.w	r2, r3, #23
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2100      	movs	r1, #0
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fdb3 	bl	8000f8c <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff51 	bl	80012d6 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <SX1278_init>:
	}
}

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f848 	bl	80014e8 <SX1278_hw_init>
	module->frequency = frequency;
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800145e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	7e3a      	ldrb	r2, [r7, #24]
 8001466:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	7f3a      	ldrb	r2, [r7, #28]
 800146c:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001474:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800147c:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001484:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800148c:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f7ff fdf0 	bl	8001074 <SX1278_config>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	4613      	mov	r3, r2
 80014a8:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80014b0:	79fa      	ldrb	r2, [r7, #7]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d003      	beq.n	80014be <SX1278_read+0x22>
		length = module->readBytes;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80014bc:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3317      	adds	r3, #23
 80014c2:	79fa      	ldrb	r2, [r7, #7]
 80014c4:	4619      	mov	r1, r3
 80014c6:	68b8      	ldr	r0, [r7, #8]
 80014c8:	f007 fed0 	bl	800926c <memcpy>
	rxBuf[length] = '\0';
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	4413      	add	r3, r2
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 80014de:	79fb      	ldrb	r3, [r7, #7]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80014f0:	2101      	movs	r1, #1
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f80d 	bl	8001512 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6858      	ldr	r0, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	2201      	movs	r2, #1
 8001504:	4619      	mov	r1, r3
 8001506:	f002 f8e1 	bl	80036cc <HAL_GPIO_WritePin>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6958      	ldr	r0, [r3, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	b299      	uxth	r1, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	f002 f8ca 	bl	80036cc <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001548:	2101      	movs	r1, #1
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffe1 	bl	8001512 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6858      	ldr	r0, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	f002 f8b5 	bl	80036cc <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f000 f856 	bl	8001614 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6858      	ldr	r0, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	2201      	movs	r2, #1
 8001574:	4619      	mov	r1, r3
 8001576:	f002 f8a9 	bl	80036cc <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800157a:	2064      	movs	r0, #100	; 0x64
 800157c:	f000 f84a 	bl	8001614 <SX1278_hw_DelayMs>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001594:	2100      	movs	r1, #0
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffbb 	bl	8001512 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6998      	ldr	r0, [r3, #24]
 80015a0:	1cf9      	adds	r1, r7, #3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	2201      	movs	r2, #1
 80015a8:	f003 fb6b 	bl	8004c82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80015ac:	bf00      	nop
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fee6 	bl	8005384 <HAL_SPI_GetState>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d1f7      	bne.n	80015ae <SX1278_hw_SPICommand+0x26>
		;
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80015d8:	2100      	movs	r1, #0
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff99 	bl	8001512 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6998      	ldr	r0, [r3, #24]
 80015e4:	f107 020e 	add.w	r2, r7, #14
 80015e8:	f107 010f 	add.w	r1, r7, #15
 80015ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	f003 fcb3 	bl	8004f5e <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80015f8:	bf00      	nop
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fec0 	bl	8005384 <HAL_SPI_GetState>
 8001604:	4603      	mov	r3, r0
 8001606:	2b01      	cmp	r3, #1
 8001608:	d1f7      	bne.n	80015fa <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800160a:	7bbb      	ldrb	r3, [r7, #14]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f001 fd8d 	bl	800313c <HAL_Delay>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	b29b      	uxth	r3, r3
 800163c:	4619      	mov	r1, r3
 800163e:	4610      	mov	r0, r2
 8001640:	f002 f82c 	bl	800369c <HAL_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2db      	uxtb	r3, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f002 f831 	bl	80036cc <HAL_GPIO_WritePin>
  	HAL_Delay(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f001 fd66 	bl	800313c <HAL_Delay>

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f002 f823 	bl	80036cc <HAL_GPIO_WritePin>
  	HAL_Delay(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f001 fd58 	bl	800313c <HAL_Delay>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 800169a:	bf00      	nop
 800169c:	4808      	ldr	r0, [pc, #32]	; (80016c0 <SPI_TxByte+0x30>)
 800169e:	f003 fe71 	bl	8005384 <HAL_SPI_GetState>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d1f9      	bne.n	800169c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 80016a8:	1df9      	adds	r1, r7, #7
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	2201      	movs	r2, #1
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <SPI_TxByte+0x30>)
 80016b2:	f003 fae6 	bl	8004c82 <HAL_SPI_Transmit>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20002840 	.word	0x20002840

080016c4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80016ca:	23ff      	movs	r3, #255	; 0xff
 80016cc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 80016d2:	bf00      	nop
 80016d4:	4809      	ldr	r0, [pc, #36]	; (80016fc <SPI_RxByte+0x38>)
 80016d6:	f003 fe55 	bl	8005384 <HAL_SPI_GetState>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d1f9      	bne.n	80016d4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 80016e0:	1dba      	adds	r2, r7, #6
 80016e2:	1df9      	adds	r1, r7, #7
 80016e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <SPI_RxByte+0x38>)
 80016ee:	f003 fc36 	bl	8004f5e <HAL_SPI_TransmitReceive>

  return data;
 80016f2:	79bb      	ldrb	r3, [r7, #6]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20002840 	.word	0x20002840

08001700 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001708:	f7ff ffdc 	bl	80016c4 <SPI_RxByte>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	701a      	strb	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <SD_ReadyWait+0x34>)
 8001724:	2232      	movs	r2, #50	; 0x32
 8001726:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001728:	f7ff ffcc 	bl	80016c4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800172c:	f7ff ffca 	bl	80016c4 <SPI_RxByte>
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2bff      	cmp	r3, #255	; 0xff
 8001738:	d004      	beq.n	8001744 <SD_ReadyWait+0x28>
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SD_ReadyWait+0x34>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f3      	bne.n	800172c <SD_ReadyWait+0x10>

  return res;
 8001744:	79fb      	ldrb	r3, [r7, #7]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200028a6 	.word	0x200028a6

08001754 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800175a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800175e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001760:	f7ff ff88 	bl	8001674 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	e005      	b.n	8001776 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800176a:	20ff      	movs	r0, #255	; 0xff
 800176c:	f7ff ff90 	bl	8001690 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	3301      	adds	r3, #1
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2b09      	cmp	r3, #9
 800177a:	ddf6      	ble.n	800176a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 800177c:	f7ff ff6c 	bl	8001658 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001780:	2340      	movs	r3, #64	; 0x40
 8001782:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001794:	2395      	movs	r3, #149	; 0x95
 8001796:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e009      	b.n	80017b2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800179e:	1d3a      	adds	r2, r7, #4
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff72 	bl	8001690 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	ddf2      	ble.n	800179e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80017b8:	e002      	b.n	80017c0 <SD_PowerOn+0x6c>
  {
    Count--;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3b01      	subs	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80017c0:	f7ff ff80 	bl	80016c4 <SPI_RxByte>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d002      	beq.n	80017d0 <SD_PowerOn+0x7c>
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f4      	bne.n	80017ba <SD_PowerOn+0x66>
  }

  DESELECT();
 80017d0:	f7ff ff50 	bl	8001674 <DESELECT>
  SPI_TxByte(0XFF);
 80017d4:	20ff      	movs	r0, #255	; 0xff
 80017d6:	f7ff ff5b 	bl	8001690 <SPI_TxByte>

  PowerFlag = 1;
 80017da:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <SD_PowerOn+0x94>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000215 	.word	0x20000215

080017ec <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <SD_PowerOff+0x14>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	20000215 	.word	0x20000215

08001804 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <SD_CheckPower+0x14>)
 800180a:	781b      	ldrb	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000215 	.word	0x20000215

0800181c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <SD_RxDataBlock+0x68>)
 8001828:	220a      	movs	r2, #10
 800182a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800182c:	f7ff ff4a 	bl	80016c4 <SPI_RxByte>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2bff      	cmp	r3, #255	; 0xff
 8001838:	d104      	bne.n	8001844 <SD_RxDataBlock+0x28>
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <SD_RxDataBlock+0x68>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f3      	bne.n	800182c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	2bfe      	cmp	r3, #254	; 0xfe
 8001848:	d001      	beq.n	800184e <SD_RxDataBlock+0x32>
    return FALSE;
 800184a:	2300      	movs	r3, #0
 800184c:	e016      	b.n	800187c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff53 	bl	8001700 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff4d 	bl	8001700 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	3b02      	subs	r3, #2
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ed      	bne.n	800184e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001872:	f7ff ff27 	bl	80016c4 <SPI_RxByte>
  SPI_RxByte();
 8001876:	f7ff ff25 	bl	80016c4 <SPI_RxByte>

  return TRUE;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200028a5 	.word	0x200028a5

08001888 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001898:	f7ff ff40 	bl	800171c <SD_ReadyWait>
 800189c:	4603      	mov	r3, r0
 800189e:	2bff      	cmp	r3, #255	; 0xff
 80018a0:	d001      	beq.n	80018a6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e040      	b.n	8001928 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fef1 	bl	8001690 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	2bfd      	cmp	r3, #253	; 0xfd
 80018b2:	d031      	beq.n	8001918 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fee5 	bl	8001690 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fede 	bl	8001690 <SPI_TxByte>
    } while (--wc);
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	73bb      	strb	r3, [r7, #14]
 80018da:	7bbb      	ldrb	r3, [r7, #14]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1eb      	bne.n	80018b8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80018e0:	f7ff fef0 	bl	80016c4 <SPI_RxByte>
    SPI_RxByte();
 80018e4:	f7ff feee 	bl	80016c4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80018e8:	e00b      	b.n	8001902 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80018ea:	f7ff feeb 	bl	80016c4 <SPI_RxByte>
 80018ee:	4603      	mov	r3, r0
 80018f0:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d006      	beq.n	800190a <SD_TxDataBlock+0x82>
        break;

      i++;
 80018fc:	7b7b      	ldrb	r3, [r7, #13]
 80018fe:	3301      	adds	r3, #1
 8001900:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001902:	7b7b      	ldrb	r3, [r7, #13]
 8001904:	2b40      	cmp	r3, #64	; 0x40
 8001906:	d9f0      	bls.n	80018ea <SD_TxDataBlock+0x62>
 8001908:	e000      	b.n	800190c <SD_TxDataBlock+0x84>
        break;
 800190a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800190c:	bf00      	nop
 800190e:	f7ff fed9 	bl	80016c4 <SPI_RxByte>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0fa      	beq.n	800190e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	2b05      	cmp	r3, #5
 8001920:	d101      	bne.n	8001926 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <SD_SendCmd>:
#endif /* _READONLY */
/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800193c:	f7ff feee 	bl	800171c <SD_ReadyWait>
 8001940:	4603      	mov	r3, r0
 8001942:	2bff      	cmp	r3, #255	; 0xff
 8001944:	d001      	beq.n	800194a <SD_SendCmd+0x1a>
    return 0xFF;
 8001946:	23ff      	movs	r3, #255	; 0xff
 8001948:	e040      	b.n	80019cc <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe9f 	bl	8001690 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	0e1b      	lsrs	r3, r3, #24
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fe99 	bl	8001690 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	b2db      	uxtb	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fe93 	bl	8001690 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b2db      	uxtb	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fe8d 	bl	8001690 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fe88 	bl	8001690 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b40      	cmp	r3, #64	; 0x40
 8001988:	d101      	bne.n	800198e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800198a:	2395      	movs	r3, #149	; 0x95
 800198c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b48      	cmp	r3, #72	; 0x48
 8001992:	d101      	bne.n	8001998 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001994:	2387      	movs	r3, #135	; 0x87
 8001996:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fe78 	bl	8001690 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2b4c      	cmp	r3, #76	; 0x4c
 80019a4:	d101      	bne.n	80019aa <SD_SendCmd+0x7a>
    SPI_RxByte();
 80019a6:	f7ff fe8d 	bl	80016c4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80019aa:	230a      	movs	r3, #10
 80019ac:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80019ae:	f7ff fe89 	bl	80016c4 <SPI_RxByte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80019b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da05      	bge.n	80019ca <SD_SendCmd+0x9a>
 80019be:	7bbb      	ldrb	r3, [r7, #14]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	73bb      	strb	r3, [r7, #14]
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f1      	bne.n	80019ae <SD_SendCmd+0x7e>

  return res;
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0d5      	b.n	8001b94 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80019e8:	4b6c      	ldr	r3, [pc, #432]	; (8001b9c <SD_disk_initialize+0x1c8>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <SD_disk_initialize+0x2a>
    return Stat;
 80019f6:	4b69      	ldr	r3, [pc, #420]	; (8001b9c <SD_disk_initialize+0x1c8>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	e0ca      	b.n	8001b94 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80019fe:	f7ff fea9 	bl	8001754 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001a02:	f7ff fe29 	bl	8001658 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2040      	movs	r0, #64	; 0x40
 8001a0e:	f7ff ff8f 	bl	8001930 <SD_SendCmd>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	f040 80a5 	bne.w	8001b64 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001a1a:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <SD_disk_initialize+0x1cc>)
 8001a1c:	2264      	movs	r2, #100	; 0x64
 8001a1e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001a20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a24:	2048      	movs	r0, #72	; 0x48
 8001a26:	f7ff ff83 	bl	8001930 <SD_SendCmd>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d158      	bne.n	8001ae2 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e00c      	b.n	8001a50 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001a36:	7bfc      	ldrb	r4, [r7, #15]
 8001a38:	f7ff fe44 	bl	80016c4 <SPI_RxByte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f104 0310 	add.w	r3, r4, #16
 8001a44:	443b      	add	r3, r7
 8001a46:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d9ef      	bls.n	8001a36 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001a56:	7abb      	ldrb	r3, [r7, #10]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	f040 8083 	bne.w	8001b64 <SD_disk_initialize+0x190>
 8001a5e:	7afb      	ldrb	r3, [r7, #11]
 8001a60:	2baa      	cmp	r3, #170	; 0xaa
 8001a62:	d17f      	bne.n	8001b64 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001a64:	2100      	movs	r1, #0
 8001a66:	2077      	movs	r0, #119	; 0x77
 8001a68:	f7ff ff62 	bl	8001930 <SD_SendCmd>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d807      	bhi.n	8001a82 <SD_disk_initialize+0xae>
 8001a72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a76:	2069      	movs	r0, #105	; 0x69
 8001a78:	f7ff ff5a 	bl	8001930 <SD_SendCmd>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <SD_disk_initialize+0x1cc>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1eb      	bne.n	8001a64 <SD_disk_initialize+0x90>
 8001a8c:	e000      	b.n	8001a90 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001a8e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001a90:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <SD_disk_initialize+0x1cc>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d064      	beq.n	8001b64 <SD_disk_initialize+0x190>
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	207a      	movs	r0, #122	; 0x7a
 8001a9e:	f7ff ff47 	bl	8001930 <SD_SendCmd>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d15d      	bne.n	8001b64 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e00c      	b.n	8001ac8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001aae:	7bfc      	ldrb	r4, [r7, #15]
 8001ab0:	f7ff fe08 	bl	80016c4 <SPI_RxByte>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f104 0310 	add.w	r3, r4, #16
 8001abc:	443b      	add	r3, r7
 8001abe:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d9ef      	bls.n	8001aae <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001ace:	7a3b      	ldrb	r3, [r7, #8]
 8001ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SD_disk_initialize+0x108>
 8001ad8:	2306      	movs	r3, #6
 8001ada:	e000      	b.n	8001ade <SD_disk_initialize+0x10a>
 8001adc:	2302      	movs	r3, #2
 8001ade:	73bb      	strb	r3, [r7, #14]
 8001ae0:	e040      	b.n	8001b64 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2077      	movs	r0, #119	; 0x77
 8001ae6:	f7ff ff23 	bl	8001930 <SD_SendCmd>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d808      	bhi.n	8001b02 <SD_disk_initialize+0x12e>
 8001af0:	2100      	movs	r1, #0
 8001af2:	2069      	movs	r0, #105	; 0x69
 8001af4:	f7ff ff1c 	bl	8001930 <SD_SendCmd>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d801      	bhi.n	8001b02 <SD_disk_initialize+0x12e>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e000      	b.n	8001b04 <SD_disk_initialize+0x130>
 8001b02:	2301      	movs	r3, #1
 8001b04:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001b06:	7bbb      	ldrb	r3, [r7, #14]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d10e      	bne.n	8001b2a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2077      	movs	r0, #119	; 0x77
 8001b10:	f7ff ff0e 	bl	8001930 <SD_SendCmd>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d80e      	bhi.n	8001b38 <SD_disk_initialize+0x164>
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2069      	movs	r0, #105	; 0x69
 8001b1e:	f7ff ff07 	bl	8001930 <SD_SendCmd>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d107      	bne.n	8001b38 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001b28:	e00d      	b.n	8001b46 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2041      	movs	r0, #65	; 0x41
 8001b2e:	f7ff feff 	bl	8001930 <SD_SendCmd>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <SD_disk_initialize+0x1cc>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1e1      	bne.n	8001b06 <SD_disk_initialize+0x132>
 8001b42:	e000      	b.n	8001b46 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001b44:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <SD_disk_initialize+0x1cc>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <SD_disk_initialize+0x18c>
 8001b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b54:	2050      	movs	r0, #80	; 0x50
 8001b56:	f7ff feeb 	bl	8001930 <SD_SendCmd>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001b64:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <SD_disk_initialize+0x1d0>)
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001b6a:	f7ff fd83 	bl	8001674 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001b6e:	f7ff fda9 	bl	80016c4 <SPI_RxByte>

  if (type)
 8001b72:	7bbb      	ldrb	r3, [r7, #14]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <SD_disk_initialize+0x1c8>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SD_disk_initialize+0x1c8>)
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	e001      	b.n	8001b8e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001b8a:	f7ff fe2f 	bl	80017ec <SD_PowerOff>
  }

  return Stat;
 8001b8e:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <SD_disk_initialize+0x1c8>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	200028a5 	.word	0x200028a5
 8001ba4:	20000214 	.word	0x20000214

08001ba8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SD_disk_status+0x14>
    return STA_NOINIT;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e002      	b.n	8001bc2 <SD_disk_status+0x1a>

  return Stat;
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SD_disk_status+0x28>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	4603      	mov	r3, r0
 8001be2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <SD_disk_read+0x1c>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <SD_disk_read+0x20>
    return RES_PARERR;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	e051      	b.n	8001c98 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <SD_disk_read+0xcc>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e048      	b.n	8001c98 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <SD_disk_read+0xd0>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d102      	bne.n	8001c18 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	025b      	lsls	r3, r3, #9
 8001c16:	607b      	str	r3, [r7, #4]

  SELECT();
 8001c18:	f7ff fd1e 	bl	8001658 <SELECT>

  if (count == 1)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d111      	bne.n	8001c46 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	2051      	movs	r0, #81	; 0x51
 8001c26:	f7ff fe83 	bl	8001930 <SD_SendCmd>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d129      	bne.n	8001c84 <SD_disk_read+0xb0>
 8001c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c34:	68b8      	ldr	r0, [r7, #8]
 8001c36:	f7ff fdf1 	bl	800181c <SD_RxDataBlock>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d021      	beq.n	8001c84 <SD_disk_read+0xb0>
      count = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	e01e      	b.n	8001c84 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	2052      	movs	r0, #82	; 0x52
 8001c4a:	f7ff fe71 	bl	8001930 <SD_SendCmd>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d117      	bne.n	8001c84 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c58:	68b8      	ldr	r0, [r7, #8]
 8001c5a:	f7ff fddf 	bl	800181c <SD_RxDataBlock>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c6a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1ed      	bne.n	8001c54 <SD_disk_read+0x80>
 8001c78:	e000      	b.n	8001c7c <SD_disk_read+0xa8>
          break;
 8001c7a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	204c      	movs	r0, #76	; 0x4c
 8001c80:	f7ff fe56 	bl	8001930 <SD_SendCmd>
    }
  }

  DESELECT();
 8001c84:	f7ff fcf6 	bl	8001674 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001c88:	f7ff fd1c 	bl	80016c4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000214 	.word	0x20000214

08001ca8 <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <SD_disk_write+0x1c>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <SD_disk_write+0x20>
    return RES_PARERR;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e06b      	b.n	8001da0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <SD_disk_write+0x100>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e062      	b.n	8001da0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001cda:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <SD_disk_write+0x100>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SD_disk_write+0x44>
    return RES_WRPRT;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e059      	b.n	8001da0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001cec:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <SD_disk_write+0x104>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	025b      	lsls	r3, r3, #9
 8001cfc:	607b      	str	r3, [r7, #4]

  SELECT();
 8001cfe:	f7ff fcab 	bl	8001658 <SELECT>

  if (count == 1)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d110      	bne.n	8001d2a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	2058      	movs	r0, #88	; 0x58
 8001d0c:	f7ff fe10 	bl	8001930 <SD_SendCmd>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d13a      	bne.n	8001d8c <SD_disk_write+0xe4>
 8001d16:	21fe      	movs	r1, #254	; 0xfe
 8001d18:	68b8      	ldr	r0, [r7, #8]
 8001d1a:	f7ff fdb5 	bl	8001888 <SD_TxDataBlock>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d033      	beq.n	8001d8c <SD_disk_write+0xe4>
      count = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	e030      	b.n	8001d8c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <SD_disk_write+0x104>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001d36:	2100      	movs	r1, #0
 8001d38:	2077      	movs	r0, #119	; 0x77
 8001d3a:	f7ff fdf9 	bl	8001930 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001d3e:	6839      	ldr	r1, [r7, #0]
 8001d40:	2057      	movs	r0, #87	; 0x57
 8001d42:	f7ff fdf5 	bl	8001930 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	2059      	movs	r0, #89	; 0x59
 8001d4a:	f7ff fdf1 	bl	8001930 <SD_SendCmd>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d11b      	bne.n	8001d8c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001d54:	21fc      	movs	r1, #252	; 0xfc
 8001d56:	68b8      	ldr	r0, [r7, #8]
 8001d58:	f7ff fd96 	bl	8001888 <SD_TxDataBlock>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d68:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ee      	bne.n	8001d54 <SD_disk_write+0xac>
 8001d76:	e000      	b.n	8001d7a <SD_disk_write+0xd2>
          break;
 8001d78:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001d7a:	21fd      	movs	r1, #253	; 0xfd
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fd83 	bl	8001888 <SD_TxDataBlock>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <SD_disk_write+0xe4>
      {
        count = 1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001d8c:	f7ff fc72 	bl	8001674 <DESELECT>
  SPI_RxByte();
 8001d90:	f7ff fc98 	bl	80016c4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	bf14      	ite	ne
 8001d9a:	2301      	movne	r3, #1
 8001d9c:	2300      	moveq	r3, #0
 8001d9e:	b2db      	uxtb	r3, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000214 	.word	0x20000214

08001db0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b08b      	sub	sp, #44	; 0x2c
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	603a      	str	r2, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e11b      	b.n	8002006 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d129      	bne.n	8001e2e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d017      	beq.n	8001e12 <SD_disk_ioctl+0x62>
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	dc1f      	bgt.n	8001e26 <SD_disk_ioctl+0x76>
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <SD_disk_ioctl+0x40>
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d00b      	beq.n	8001e06 <SD_disk_ioctl+0x56>
 8001dee:	e01a      	b.n	8001e26 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001df0:	f7ff fd08 	bl	8001804 <SD_CheckPower>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001dfa:	f7ff fcf7 	bl	80017ec <SD_PowerOff>
      res = RES_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e04:	e0fd      	b.n	8002002 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001e06:	f7ff fca5 	bl	8001754 <SD_PowerOn>
      res = RES_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e10:	e0f7      	b.n	8002002 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	1c5c      	adds	r4, r3, #1
 8001e16:	f7ff fcf5 	bl	8001804 <SD_CheckPower>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e24:	e0ed      	b.n	8002002 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001e26:	2304      	movs	r3, #4
 8001e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e2c:	e0e9      	b.n	8002002 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001e2e:	4b78      	ldr	r3, [pc, #480]	; (8002010 <SD_disk_ioctl+0x260>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0e2      	b.n	8002006 <SD_disk_ioctl+0x256>

    SELECT();
 8001e40:	f7ff fc0a 	bl	8001658 <SELECT>

    switch (ctrl)
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	2b0d      	cmp	r3, #13
 8001e48:	f200 80cc 	bhi.w	8001fe4 <SD_disk_ioctl+0x234>
 8001e4c:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <SD_disk_ioctl+0xa4>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001f4f 	.word	0x08001f4f
 8001e58:	08001e8d 	.word	0x08001e8d
 8001e5c:	08001f3f 	.word	0x08001f3f
 8001e60:	08001fe5 	.word	0x08001fe5
 8001e64:	08001fe5 	.word	0x08001fe5
 8001e68:	08001fe5 	.word	0x08001fe5
 8001e6c:	08001fe5 	.word	0x08001fe5
 8001e70:	08001fe5 	.word	0x08001fe5
 8001e74:	08001fe5 	.word	0x08001fe5
 8001e78:	08001fe5 	.word	0x08001fe5
 8001e7c:	08001fe5 	.word	0x08001fe5
 8001e80:	08001f61 	.word	0x08001f61
 8001e84:	08001f85 	.word	0x08001f85
 8001e88:	08001fa9 	.word	0x08001fa9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2049      	movs	r0, #73	; 0x49
 8001e90:	f7ff fd4e 	bl	8001930 <SD_SendCmd>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 80a8 	bne.w	8001fec <SD_disk_ioctl+0x23c>
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	2110      	movs	r1, #16
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fcba 	bl	800181c <SD_RxDataBlock>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 809e 	beq.w	8001fec <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001eb0:	7b3b      	ldrb	r3, [r7, #12]
 8001eb2:	099b      	lsrs	r3, r3, #6
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d10e      	bne.n	8001ed8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001eba:	7d7b      	ldrb	r3, [r7, #21]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	7d3b      	ldrb	r3, [r7, #20]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001ece:	8bfb      	ldrh	r3, [r7, #30]
 8001ed0:	029a      	lsls	r2, r3, #10
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e02e      	b.n	8001f36 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ed8:	7c7b      	ldrb	r3, [r7, #17]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	7dbb      	ldrb	r3, [r7, #22]
 8001ee2:	09db      	lsrs	r3, r3, #7
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	7d7b      	ldrb	r3, [r7, #21]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f003 0306 	and.w	r3, r3, #6
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	3302      	adds	r3, #2
 8001efc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001f00:	7d3b      	ldrb	r3, [r7, #20]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	7cbb      	ldrb	r3, [r7, #18]
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001f28:	8bfa      	ldrh	r2, [r7, #30]
 8001f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f2e:	3b09      	subs	r3, #9
 8001f30:	409a      	lsls	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001f3c:	e056      	b.n	8001fec <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f44:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f4c:	e055      	b.n	8001ffa <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001f4e:	f7ff fbe5 	bl	800171c <SD_ReadyWait>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2bff      	cmp	r3, #255	; 0xff
 8001f56:	d14b      	bne.n	8001ff0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f5e:	e047      	b.n	8001ff0 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f60:	2100      	movs	r1, #0
 8001f62:	2049      	movs	r0, #73	; 0x49
 8001f64:	f7ff fce4 	bl	8001930 <SD_SendCmd>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d142      	bne.n	8001ff4 <SD_disk_ioctl+0x244>
 8001f6e:	2110      	movs	r1, #16
 8001f70:	6a38      	ldr	r0, [r7, #32]
 8001f72:	f7ff fc53 	bl	800181c <SD_RxDataBlock>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d03b      	beq.n	8001ff4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f82:	e037      	b.n	8001ff4 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f84:	2100      	movs	r1, #0
 8001f86:	204a      	movs	r0, #74	; 0x4a
 8001f88:	f7ff fcd2 	bl	8001930 <SD_SendCmd>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d132      	bne.n	8001ff8 <SD_disk_ioctl+0x248>
 8001f92:	2110      	movs	r1, #16
 8001f94:	6a38      	ldr	r0, [r7, #32]
 8001f96:	f7ff fc41 	bl	800181c <SD_RxDataBlock>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d02b      	beq.n	8001ff8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001fa6:	e027      	b.n	8001ff8 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001fa8:	2100      	movs	r1, #0
 8001faa:	207a      	movs	r0, #122	; 0x7a
 8001fac:	f7ff fcc0 	bl	8001930 <SD_SendCmd>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fbc:	e00b      	b.n	8001fd6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001fbe:	6a3c      	ldr	r4, [r7, #32]
 8001fc0:	1c63      	adds	r3, r4, #1
 8001fc2:	623b      	str	r3, [r7, #32]
 8001fc4:	f7ff fb7e 	bl	80016c4 <SPI_RxByte>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d9ef      	bls.n	8001fbe <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fea:	e006      	b.n	8001ffa <SD_disk_ioctl+0x24a>
      break;
 8001fec:	bf00      	nop
 8001fee:	e004      	b.n	8001ffa <SD_disk_ioctl+0x24a>
      break;
 8001ff0:	bf00      	nop
 8001ff2:	e002      	b.n	8001ffa <SD_disk_ioctl+0x24a>
      break;
 8001ff4:	bf00      	nop
 8001ff6:	e000      	b.n	8001ffa <SD_disk_ioctl+0x24a>
      break;
 8001ff8:	bf00      	nop
    }

    DESELECT();
 8001ffa:	f7ff fb3b 	bl	8001674 <DESELECT>
    SPI_RxByte();
 8001ffe:	f7ff fb61 	bl	80016c4 <SPI_RxByte>
  }

  return res;
 8002002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002006:	4618      	mov	r0, r3
 8002008:	372c      	adds	r7, #44	; 0x2c
 800200a:	46bd      	mov	sp, r7
 800200c:	bd90      	pop	{r4, r7, pc}
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000

08002014 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <MX_GPIO_Init+0x158>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	4a4f      	ldr	r2, [pc, #316]	; (800216c <MX_GPIO_Init+0x158>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002036:	4b4d      	ldr	r3, [pc, #308]	; (800216c <MX_GPIO_Init+0x158>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <MX_GPIO_Init+0x158>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	4a49      	ldr	r2, [pc, #292]	; (800216c <MX_GPIO_Init+0x158>)
 8002048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800204c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <MX_GPIO_Init+0x158>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <MX_GPIO_Init+0x158>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	4a43      	ldr	r2, [pc, #268]	; (800216c <MX_GPIO_Init+0x158>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <MX_GPIO_Init+0x158>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4b3e      	ldr	r3, [pc, #248]	; (800216c <MX_GPIO_Init+0x158>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4a3d      	ldr	r2, [pc, #244]	; (800216c <MX_GPIO_Init+0x158>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <MX_GPIO_Init+0x158>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|SD_CS_Pin, GPIO_PIN_SET);
 800208a:	2201      	movs	r2, #1
 800208c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002094:	f001 fb1a 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	2120      	movs	r1, #32
 800209c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a0:	f001 fb14 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	2102      	movs	r1, #2
 80020a8:	4831      	ldr	r0, [pc, #196]	; (8002170 <MX_GPIO_Init+0x15c>)
 80020aa:	f001 fb0f 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_Pin;
 80020ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <MX_GPIO_Init+0x160>)
 80020b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4619      	mov	r1, r3
 80020c2:	482d      	ldr	r0, [pc, #180]	; (8002178 <MX_GPIO_Init+0x164>)
 80020c4:	f001 f970 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|LED_Pin;
 80020c8:	2330      	movs	r3, #48	; 0x30
 80020ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e2:	f001 f961 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = register_Pin;
 80020e6:	2340      	movs	r3, #64	; 0x40
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(register_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fc:	f001 f954 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8002100:	2301      	movs	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	4817      	ldr	r0, [pc, #92]	; (8002170 <MX_GPIO_Init+0x15c>)
 8002114:	f001 f948 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8002118:	2302      	movs	r3, #2
 800211a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211c:	2301      	movs	r3, #1
 800211e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	4810      	ldr	r0, [pc, #64]	; (8002170 <MX_GPIO_Init+0x15c>)
 8002130:	f001 f93a 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002142:	2301      	movs	r3, #1
 8002144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002150:	f001 f92a 	bl	80033a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2028      	movs	r0, #40	; 0x28
 800215a:	f001 f8ee 	bl	800333a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800215e:	2028      	movs	r0, #40	; 0x28
 8002160:	f001 f907 	bl	8003372 <HAL_NVIC_EnableIRQ>

}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	48000400 	.word	0x48000400
 8002174:	10210000 	.word	0x10210000
 8002178:	48000800 	.word	0x48000800

0800217c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002184:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002188:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002194:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002198:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800219c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00b      	beq.n	80021bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80021a4:	e000      	b.n	80021a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80021a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80021a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f9      	beq.n	80021a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80021b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <_write>:
void SDcard(void);
/* USER CODE BEGIN PFP */

/* Private function prototypes -----------------------------------------------*/

int _write(int file, char *ptr, int len) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	2332      	movs	r3, #50	; 0x32
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <_write+0x48>)
 80021e2:	f003 fa8b 	bl	80056fc <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e009      	b.n	8002200 <_write+0x34>
		ITM_SendChar(*ptr++);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	60ba      	str	r2, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ffc1 	bl	800217c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	dbf1      	blt.n	80021ec <_write+0x20>
	}
	return len;
 8002208:	687b      	ldr	r3, [r7, #4]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200028ac 	.word	0x200028ac

08002218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800221e:	f000 ff11 	bl	8003044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002222:	f000 f85b 	bl	80022dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002226:	f7ff fef5 	bl	8002014 <MX_GPIO_Init>
  MX_SPI2_Init();
 800222a:	f000 fbdb 	bl	80029e4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800222e:	f000 fe53 	bl	8002ed8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8002232:	f000 fc15 	bl	8002a60 <MX_SPI3_Init>
  MX_FATFS_Init();
 8002236:	f003 fee5 	bl	8006004 <MX_FATFS_Init>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
		}
		*/

	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <main+0xa8>)
 800223c:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <main+0xac>)
 800223e:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <main+0xa8>)
 8002242:	2201      	movs	r2, #1
 8002244:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <main+0xa8>)
 8002248:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800224c:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <main+0xa8>)
 8002250:	2210      	movs	r2, #16
 8002252:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <main+0xa8>)
 8002256:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <main+0xac>)
 8002258:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <main+0xa8>)
 800225c:	2202      	movs	r2, #2
 800225e:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi2;
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <main+0xa8>)
 8002262:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <main+0xb0>)
 8002264:	619a      	str	r2, [r3, #24]

	SX1278.hw = &SX1278_hw;
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <main+0xb4>)
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <main+0xa8>)
 800226a:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 800226c:	4818      	ldr	r0, [pc, #96]	; (80022d0 <main+0xb8>)
 800226e:	f007 fd19 	bl	8009ca4 <puts>
	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
 8002272:	230a      	movs	r3, #10
 8002274:	9305      	str	r3, [sp, #20]
 8002276:	2300      	movs	r3, #0
 8002278:	9304      	str	r3, [sp, #16]
 800227a:	2300      	movs	r3, #0
 800227c:	9303      	str	r3, [sp, #12]
 800227e:	2307      	movs	r3, #7
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	2301      	movs	r3, #1
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	2301      	movs	r3, #1
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	a30b      	add	r3, pc, #44	; (adr r3, 80022b8 <main+0xa0>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	480e      	ldr	r0, [pc, #56]	; (80022cc <main+0xb4>)
 8002292:	f7ff f8d6 	bl	8001442 <SX1278_init>

	//	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
	printf("Done configuring LoRaModule\r\n");
 8002296:	480f      	ldr	r0, [pc, #60]	; (80022d4 <main+0xbc>)
 8002298:	f007 fd04 	bl	8009ca4 <puts>
//	ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);//16,2000
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 200);
 800229c:	22c8      	movs	r2, #200	; 0xc8
 800229e:	2110      	movs	r1, #16
 80022a0:	480a      	ldr	r0, [pc, #40]	; (80022cc <main+0xb4>)
 80022a2:	f7ff f825 	bl	80012f0 <SX1278_LoRaEntryRx>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <main+0xc0>)
 80022aa:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    LORA();
 80022ac:	f000 f878 	bl	80023a0 <LORA>
 80022b0:	e7fc      	b.n	80022ac <main+0x94>
 80022b2:	bf00      	nop
 80022b4:	f3af 8000 	nop.w
 80022b8:	19de5080 	.word	0x19de5080
 80022bc:	00000000 	.word	0x00000000
 80022c0:	20002298 	.word	0x20002298
 80022c4:	48000400 	.word	0x48000400
 80022c8:	200027dc 	.word	0x200027dc
 80022cc:	200022b8 	.word	0x200022b8
 80022d0:	0800be98 	.word	0x0800be98
 80022d4:	0800beb4 	.word	0x0800beb4
 80022d8:	200023d0 	.word	0x200023d0

080022dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b096      	sub	sp, #88	; 0x58
 80022e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	2244      	movs	r2, #68	; 0x44
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f006 ffcc 	bl	8009288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f0:	463b      	mov	r3, r7
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002302:	f001 fa31 	bl	8003768 <HAL_PWREx_ControlVoltageScaling>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800230c:	f000 fb64 	bl	80029d8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002310:	f001 fa0c 	bl	800372c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002314:	4b21      	ldr	r3, [pc, #132]	; (800239c <SystemClock_Config+0xc0>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	4a20      	ldr	r2, [pc, #128]	; (800239c <SystemClock_Config+0xc0>)
 800231c:	f023 0318 	bic.w	r3, r3, #24
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002324:	2314      	movs	r3, #20
 8002326:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002328:	2301      	movs	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800232c:	2301      	movs	r3, #1
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002334:	2360      	movs	r3, #96	; 0x60
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002338:	2302      	movs	r3, #2
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800233c:	2301      	movs	r3, #1
 800233e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002340:	2301      	movs	r3, #1
 8002342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002344:	2328      	movs	r3, #40	; 0x28
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002348:	2307      	movs	r3, #7
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800234c:	2302      	movs	r3, #2
 800234e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002350:	2302      	movs	r3, #2
 8002352:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4618      	mov	r0, r3
 800235a:	f001 fa5b 	bl	8003814 <HAL_RCC_OscConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002364:	f000 fb38 	bl	80029d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002368:	230f      	movs	r3, #15
 800236a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800236c:	2303      	movs	r3, #3
 800236e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800237c:	463b      	mov	r3, r7
 800237e:	2104      	movs	r1, #4
 8002380:	4618      	mov	r0, r3
 8002382:	f001 fe67 	bl	8004054 <HAL_RCC_ClockConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800238c:	f000 fb24 	bl	80029d8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002390:	f002 fad2 	bl	8004938 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002394:	bf00      	nop
 8002396:	3758      	adds	r7, #88	; 0x58
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000

080023a0 <LORA>:

/* USER CODE BEGIN 4 */
void LORA(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
		//ret = SX1278_LoRaEntryRx(&SX1278, 16, 200);
		//printf("Slave ...\r\n");

		printf("Receiving package...\r\n");
 80023a4:	488a      	ldr	r0, [pc, #552]	; (80025d0 <LORA+0x230>)
 80023a6:	f007 fc7d 	bl	8009ca4 <puts>
		HAL_Delay(1000);
 80023aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ae:	f000 fec5 	bl	800313c <HAL_Delay>
		ret = SX1278_LoRaRxPacket(&SX1278);
 80023b2:	4888      	ldr	r0, [pc, #544]	; (80025d4 <LORA+0x234>)
 80023b4:	f7ff f801 	bl	80013ba <SX1278_LoRaRxPacket>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b86      	ldr	r3, [pc, #536]	; (80025d8 <LORA+0x238>)
 80023be:	601a      	str	r2, [r3, #0]
        printf("Received: %d\r\n", ret);
 80023c0:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <LORA+0x238>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	4885      	ldr	r0, [pc, #532]	; (80025dc <LORA+0x23c>)
 80023c8:	f007 fbd0 	bl	8009b6c <iprintf>
        if (ret > 0) {
 80023cc:	4b82      	ldr	r3, [pc, #520]	; (80025d8 <LORA+0x238>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f340 8201 	ble.w	80027d8 <LORA+0x438>
        //	printf("Time Battery_Sum_voltage Battery_voltage_min Battery_voltage_max Battery_temp Motorcontroller_temp Motor_temp Motorcontroller_current Motorcontroller_voltage Motor_rpm Motor_Torque\r\n");
        //	printf("TIME Sum_of_Voltage Max_Voltage Min_Voltage Max_temp CAN_L_motor_temp, CAN_L_invertertemp, Motor_L_CommandedTorque, Motor_L_TorqueFeedback, CAN_L_current, CAN_L_voltage, CAN_L_VSM_State, CAN_L_Inverter_State, CAN_L_RPM, CAN_R_motor_temp, CAN_R_invertertemp, Motor_R_CommandedTorque, Motor_R_TorqueFeedback, CAN_R_current, CAN_R_voltage, CAN_R_VSM_State, CAN_R_Inverter_State, CAN_R_RPM\r\n");

            SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 80023d6:	4b80      	ldr	r3, [pc, #512]	; (80025d8 <LORA+0x238>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	4980      	ldr	r1, [pc, #512]	; (80025e0 <LORA+0x240>)
 80023e0:	487c      	ldr	r0, [pc, #496]	; (80025d4 <LORA+0x234>)
 80023e2:	f7ff f85b 	bl	800149c <SX1278_read>


       //     SX1278_read(&SX1278, (uint8_t*) buffer, ret);
           	printf("%s\r\n", buffer);
 80023e6:	497e      	ldr	r1, [pc, #504]	; (80025e0 <LORA+0x240>)
 80023e8:	487e      	ldr	r0, [pc, #504]	; (80025e4 <LORA+0x244>)
 80023ea:	f007 fbbf 	bl	8009b6c <iprintf>
                  		  								  t=1;
 80023ee:	4b7e      	ldr	r3, [pc, #504]	; (80025e8 <LORA+0x248>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
                  		  								 printf("\r\nTIME: ");
 80023f4:	487d      	ldr	r0, [pc, #500]	; (80025ec <LORA+0x24c>)
 80023f6:	f007 fbb9 	bl	8009b6c <iprintf>
                  		  								  for(i=0;i<246;i++){
 80023fa:	4b7d      	ldr	r3, [pc, #500]	; (80025f0 <LORA+0x250>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e1e3      	b.n	80027ca <LORA+0x42a>
                  		  								  if(buffer[i]==0) break;
 8002402:	4b7b      	ldr	r3, [pc, #492]	; (80025f0 <LORA+0x250>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a76      	ldr	r2, [pc, #472]	; (80025e0 <LORA+0x240>)
 8002408:	5cd3      	ldrb	r3, [r2, r3]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 81e3 	beq.w	80027d6 <LORA+0x436>

                  		  								  if(buffer[i]!=32){
 8002410:	4b77      	ldr	r3, [pc, #476]	; (80025f0 <LORA+0x250>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a72      	ldr	r2, [pc, #456]	; (80025e0 <LORA+0x240>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	2b20      	cmp	r3, #32
 800241a:	d007      	beq.n	800242c <LORA+0x8c>
                  		  									 printf("%c",buffer[i]);
 800241c:	4b74      	ldr	r3, [pc, #464]	; (80025f0 <LORA+0x250>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a6f      	ldr	r2, [pc, #444]	; (80025e0 <LORA+0x240>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	4618      	mov	r0, r3
 8002426:	f007 fbb9 	bl	8009b9c <putchar>
 800242a:	e1c9      	b.n	80027c0 <LORA+0x420>
                  		  									 }

                  		  								  else if(buffer[i]==32&&t==1){
 800242c:	4b70      	ldr	r3, [pc, #448]	; (80025f0 <LORA+0x250>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a6b      	ldr	r2, [pc, #428]	; (80025e0 <LORA+0x240>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	2b20      	cmp	r3, #32
 8002436:	d10c      	bne.n	8002452 <LORA+0xb2>
 8002438:	4b6b      	ldr	r3, [pc, #428]	; (80025e8 <LORA+0x248>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d108      	bne.n	8002452 <LORA+0xb2>
                  		  									 printf("\r\nSum_of_Voltage: ");
 8002440:	486c      	ldr	r0, [pc, #432]	; (80025f4 <LORA+0x254>)
 8002442:	f007 fb93 	bl	8009b6c <iprintf>
                  		  									 t++;
 8002446:	4b68      	ldr	r3, [pc, #416]	; (80025e8 <LORA+0x248>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	4a66      	ldr	r2, [pc, #408]	; (80025e8 <LORA+0x248>)
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	e1b6      	b.n	80027c0 <LORA+0x420>
                  		  								  }
                  		  								  else if(buffer[i]==32&&t==2){
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <LORA+0x250>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a62      	ldr	r2, [pc, #392]	; (80025e0 <LORA+0x240>)
 8002458:	5cd3      	ldrb	r3, [r2, r3]
 800245a:	2b20      	cmp	r3, #32
 800245c:	d10c      	bne.n	8002478 <LORA+0xd8>
 800245e:	4b62      	ldr	r3, [pc, #392]	; (80025e8 <LORA+0x248>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d108      	bne.n	8002478 <LORA+0xd8>
                  		  									 printf("\r\nMax_Voltage: ");
 8002466:	4864      	ldr	r0, [pc, #400]	; (80025f8 <LORA+0x258>)
 8002468:	f007 fb80 	bl	8009b6c <iprintf>
                  		  									 t++;
 800246c:	4b5e      	ldr	r3, [pc, #376]	; (80025e8 <LORA+0x248>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	4a5d      	ldr	r2, [pc, #372]	; (80025e8 <LORA+0x248>)
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e1a3      	b.n	80027c0 <LORA+0x420>
                  		  								  }
                  		  								  else if(buffer[i]==32&&t==3){
 8002478:	4b5d      	ldr	r3, [pc, #372]	; (80025f0 <LORA+0x250>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a58      	ldr	r2, [pc, #352]	; (80025e0 <LORA+0x240>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	2b20      	cmp	r3, #32
 8002482:	d10c      	bne.n	800249e <LORA+0xfe>
 8002484:	4b58      	ldr	r3, [pc, #352]	; (80025e8 <LORA+0x248>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d108      	bne.n	800249e <LORA+0xfe>
                  		  									 printf("\r\nMin_Voltage: ");
 800248c:	485b      	ldr	r0, [pc, #364]	; (80025fc <LORA+0x25c>)
 800248e:	f007 fb6d 	bl	8009b6c <iprintf>
                  		  									 t++;
 8002492:	4b55      	ldr	r3, [pc, #340]	; (80025e8 <LORA+0x248>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	4a53      	ldr	r2, [pc, #332]	; (80025e8 <LORA+0x248>)
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e190      	b.n	80027c0 <LORA+0x420>
                  		  								  }
                  		  								  else if(buffer[i]==32&&t==4){
 800249e:	4b54      	ldr	r3, [pc, #336]	; (80025f0 <LORA+0x250>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4f      	ldr	r2, [pc, #316]	; (80025e0 <LORA+0x240>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d10c      	bne.n	80024c4 <LORA+0x124>
 80024aa:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <LORA+0x248>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d108      	bne.n	80024c4 <LORA+0x124>
                  		  									 printf("\r\nMax_temp: ");
 80024b2:	4853      	ldr	r0, [pc, #332]	; (8002600 <LORA+0x260>)
 80024b4:	f007 fb5a 	bl	8009b6c <iprintf>
                  		  									 t++;
 80024b8:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <LORA+0x248>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a4a      	ldr	r2, [pc, #296]	; (80025e8 <LORA+0x248>)
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e17d      	b.n	80027c0 <LORA+0x420>
                  		  								  }

                  		  								  else if(buffer[i]==32&&t==5){
 80024c4:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <LORA+0x250>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a45      	ldr	r2, [pc, #276]	; (80025e0 <LORA+0x240>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d10c      	bne.n	80024ea <LORA+0x14a>
 80024d0:	4b45      	ldr	r3, [pc, #276]	; (80025e8 <LORA+0x248>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d108      	bne.n	80024ea <LORA+0x14a>
                  		  								 	 printf("\r\n\r\nCAN_L_motor_temp: ");
 80024d8:	484a      	ldr	r0, [pc, #296]	; (8002604 <LORA+0x264>)
 80024da:	f007 fb47 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 80024de:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <LORA+0x248>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	4a40      	ldr	r2, [pc, #256]	; (80025e8 <LORA+0x248>)
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e16a      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==6){
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <LORA+0x250>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3c      	ldr	r2, [pc, #240]	; (80025e0 <LORA+0x240>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d10c      	bne.n	8002510 <LORA+0x170>
 80024f6:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <LORA+0x248>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d108      	bne.n	8002510 <LORA+0x170>
                  		  								 	 printf("\r\nCAN_L_invertertemp: ");
 80024fe:	4842      	ldr	r0, [pc, #264]	; (8002608 <LORA+0x268>)
 8002500:	f007 fb34 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 8002504:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <LORA+0x248>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	4a37      	ldr	r2, [pc, #220]	; (80025e8 <LORA+0x248>)
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e157      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==7){
 8002510:	4b37      	ldr	r3, [pc, #220]	; (80025f0 <LORA+0x250>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <LORA+0x240>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	2b20      	cmp	r3, #32
 800251a:	d10c      	bne.n	8002536 <LORA+0x196>
 800251c:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <LORA+0x248>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b07      	cmp	r3, #7
 8002522:	d108      	bne.n	8002536 <LORA+0x196>
                   		  								 	 printf("\r\nMotor_L_CommandedTorque:  ");
 8002524:	4839      	ldr	r0, [pc, #228]	; (800260c <LORA+0x26c>)
 8002526:	f007 fb21 	bl	8009b6c <iprintf>
                   		  								 	 t++;
 800252a:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <LORA+0x248>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	4a2d      	ldr	r2, [pc, #180]	; (80025e8 <LORA+0x248>)
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e144      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==8){
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <LORA+0x250>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a29      	ldr	r2, [pc, #164]	; (80025e0 <LORA+0x240>)
 800253c:	5cd3      	ldrb	r3, [r2, r3]
 800253e:	2b20      	cmp	r3, #32
 8002540:	d10c      	bne.n	800255c <LORA+0x1bc>
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <LORA+0x248>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b08      	cmp	r3, #8
 8002548:	d108      	bne.n	800255c <LORA+0x1bc>
                   		  								 	 printf("\r\nMotor_L_TorqueFeedback: ");
 800254a:	4831      	ldr	r0, [pc, #196]	; (8002610 <LORA+0x270>)
 800254c:	f007 fb0e 	bl	8009b6c <iprintf>
                   		  								 	 t++;
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <LORA+0x248>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <LORA+0x248>)
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e131      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==9){
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <LORA+0x250>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <LORA+0x240>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	2b20      	cmp	r3, #32
 8002566:	d10c      	bne.n	8002582 <LORA+0x1e2>
 8002568:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <LORA+0x248>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b09      	cmp	r3, #9
 800256e:	d108      	bne.n	8002582 <LORA+0x1e2>
                   		  								 	 printf("\r\nCAN_L_current: ");
 8002570:	4828      	ldr	r0, [pc, #160]	; (8002614 <LORA+0x274>)
 8002572:	f007 fafb 	bl	8009b6c <iprintf>
                   		  								 	 t++;
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <LORA+0x248>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <LORA+0x248>)
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	e11e      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==10){
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <LORA+0x250>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <LORA+0x240>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	2b20      	cmp	r3, #32
 800258c:	d10c      	bne.n	80025a8 <LORA+0x208>
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <LORA+0x248>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b0a      	cmp	r3, #10
 8002594:	d108      	bne.n	80025a8 <LORA+0x208>
                   		  								 	 printf("\r\nCAN_L_voltage: ");
 8002596:	4820      	ldr	r0, [pc, #128]	; (8002618 <LORA+0x278>)
 8002598:	f007 fae8 	bl	8009b6c <iprintf>
                   		  								 	 t++;
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <LORA+0x248>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <LORA+0x248>)
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e10b      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==11){
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <LORA+0x250>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <LORA+0x240>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d135      	bne.n	8002620 <LORA+0x280>
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <LORA+0x248>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b0b      	cmp	r3, #11
 80025ba:	d131      	bne.n	8002620 <LORA+0x280>
                   		  								 	 printf("\r\nCAN_L_VSM_State : ");
 80025bc:	4817      	ldr	r0, [pc, #92]	; (800261c <LORA+0x27c>)
 80025be:	f007 fad5 	bl	8009b6c <iprintf>
                   		  								 	 t++;
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <LORA+0x248>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3301      	adds	r3, #1
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <LORA+0x248>)
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e0f8      	b.n	80027c0 <LORA+0x420>
 80025ce:	bf00      	nop
 80025d0:	0800bed4 	.word	0x0800bed4
 80025d4:	200022b8 	.word	0x200022b8
 80025d8:	200023d0 	.word	0x200023d0
 80025dc:	0800beec 	.word	0x0800beec
 80025e0:	200023dc 	.word	0x200023dc
 80025e4:	0800befc 	.word	0x0800befc
 80025e8:	200023d8 	.word	0x200023d8
 80025ec:	0800bf04 	.word	0x0800bf04
 80025f0:	200023d4 	.word	0x200023d4
 80025f4:	0800bf10 	.word	0x0800bf10
 80025f8:	0800bf24 	.word	0x0800bf24
 80025fc:	0800bf34 	.word	0x0800bf34
 8002600:	0800bf44 	.word	0x0800bf44
 8002604:	0800bf54 	.word	0x0800bf54
 8002608:	0800bf6c 	.word	0x0800bf6c
 800260c:	0800bf84 	.word	0x0800bf84
 8002610:	0800bfa4 	.word	0x0800bfa4
 8002614:	0800bfc0 	.word	0x0800bfc0
 8002618:	0800bfd4 	.word	0x0800bfd4
 800261c:	0800bfe8 	.word	0x0800bfe8
                  		  								}
                  		  								  else if(buffer[i]==32&&t==12){
 8002620:	4b71      	ldr	r3, [pc, #452]	; (80027e8 <LORA+0x448>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a71      	ldr	r2, [pc, #452]	; (80027ec <LORA+0x44c>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	2b20      	cmp	r3, #32
 800262a:	d10c      	bne.n	8002646 <LORA+0x2a6>
 800262c:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <LORA+0x450>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d108      	bne.n	8002646 <LORA+0x2a6>
                   		  								 	 printf("\r\nCAN_L_Inverter_State: ");
 8002634:	486f      	ldr	r0, [pc, #444]	; (80027f4 <LORA+0x454>)
 8002636:	f007 fa99 	bl	8009b6c <iprintf>
                   		  								 	 t++;
 800263a:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <LORA+0x450>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	4a6b      	ldr	r2, [pc, #428]	; (80027f0 <LORA+0x450>)
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	e0bc      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==13){
 8002646:	4b68      	ldr	r3, [pc, #416]	; (80027e8 <LORA+0x448>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a68      	ldr	r2, [pc, #416]	; (80027ec <LORA+0x44c>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	2b20      	cmp	r3, #32
 8002650:	d10c      	bne.n	800266c <LORA+0x2cc>
 8002652:	4b67      	ldr	r3, [pc, #412]	; (80027f0 <LORA+0x450>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b0d      	cmp	r3, #13
 8002658:	d108      	bne.n	800266c <LORA+0x2cc>
                  		  								 	 printf("\r\nCAN_L_RPM: ");
 800265a:	4867      	ldr	r0, [pc, #412]	; (80027f8 <LORA+0x458>)
 800265c:	f007 fa86 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 8002660:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <LORA+0x450>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	4a62      	ldr	r2, [pc, #392]	; (80027f0 <LORA+0x450>)
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e0a9      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==14){
 800266c:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <LORA+0x448>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a5e      	ldr	r2, [pc, #376]	; (80027ec <LORA+0x44c>)
 8002672:	5cd3      	ldrb	r3, [r2, r3]
 8002674:	2b20      	cmp	r3, #32
 8002676:	d10c      	bne.n	8002692 <LORA+0x2f2>
 8002678:	4b5d      	ldr	r3, [pc, #372]	; (80027f0 <LORA+0x450>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b0e      	cmp	r3, #14
 800267e:	d108      	bne.n	8002692 <LORA+0x2f2>
                  		  								 	 printf("\r\n\r\nCAN_R_motor_temp: ");
 8002680:	485e      	ldr	r0, [pc, #376]	; (80027fc <LORA+0x45c>)
 8002682:	f007 fa73 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 8002686:	4b5a      	ldr	r3, [pc, #360]	; (80027f0 <LORA+0x450>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <LORA+0x450>)
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	e096      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==15){
 8002692:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <LORA+0x448>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a55      	ldr	r2, [pc, #340]	; (80027ec <LORA+0x44c>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	2b20      	cmp	r3, #32
 800269c:	d10c      	bne.n	80026b8 <LORA+0x318>
 800269e:	4b54      	ldr	r3, [pc, #336]	; (80027f0 <LORA+0x450>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	d108      	bne.n	80026b8 <LORA+0x318>
                  		  								 	 printf("\r\nCAN_R_invertertemp: ");
 80026a6:	4856      	ldr	r0, [pc, #344]	; (8002800 <LORA+0x460>)
 80026a8:	f007 fa60 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <LORA+0x450>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	4a4f      	ldr	r2, [pc, #316]	; (80027f0 <LORA+0x450>)
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e083      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==16){
 80026b8:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <LORA+0x448>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a4b      	ldr	r2, [pc, #300]	; (80027ec <LORA+0x44c>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d10c      	bne.n	80026de <LORA+0x33e>
 80026c4:	4b4a      	ldr	r3, [pc, #296]	; (80027f0 <LORA+0x450>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d108      	bne.n	80026de <LORA+0x33e>
                  		  								 	 printf("\r\nMotor_R_CommandedTorque: ");
 80026cc:	484d      	ldr	r0, [pc, #308]	; (8002804 <LORA+0x464>)
 80026ce:	f007 fa4d 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <LORA+0x450>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	4a45      	ldr	r2, [pc, #276]	; (80027f0 <LORA+0x450>)
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	e070      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==17){
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <LORA+0x448>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a42      	ldr	r2, [pc, #264]	; (80027ec <LORA+0x44c>)
 80026e4:	5cd3      	ldrb	r3, [r2, r3]
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d10c      	bne.n	8002704 <LORA+0x364>
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <LORA+0x450>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b11      	cmp	r3, #17
 80026f0:	d108      	bne.n	8002704 <LORA+0x364>
                  		  								 	 printf("\r\nMotor_R_TorqueFeedback ");
 80026f2:	4845      	ldr	r0, [pc, #276]	; (8002808 <LORA+0x468>)
 80026f4:	f007 fa3a 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 80026f8:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <LORA+0x450>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	4a3c      	ldr	r2, [pc, #240]	; (80027f0 <LORA+0x450>)
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e05d      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==18){
 8002704:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <LORA+0x448>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a38      	ldr	r2, [pc, #224]	; (80027ec <LORA+0x44c>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	2b20      	cmp	r3, #32
 800270e:	d10c      	bne.n	800272a <LORA+0x38a>
 8002710:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <LORA+0x450>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b12      	cmp	r3, #18
 8002716:	d108      	bne.n	800272a <LORA+0x38a>
                  		  								 	 printf("\r\nCAN_R_current: ");
 8002718:	483c      	ldr	r0, [pc, #240]	; (800280c <LORA+0x46c>)
 800271a:	f007 fa27 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 800271e:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <LORA+0x450>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	4a32      	ldr	r2, [pc, #200]	; (80027f0 <LORA+0x450>)
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e04a      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==19){
 800272a:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <LORA+0x448>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2f      	ldr	r2, [pc, #188]	; (80027ec <LORA+0x44c>)
 8002730:	5cd3      	ldrb	r3, [r2, r3]
 8002732:	2b20      	cmp	r3, #32
 8002734:	d10c      	bne.n	8002750 <LORA+0x3b0>
 8002736:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <LORA+0x450>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b13      	cmp	r3, #19
 800273c:	d108      	bne.n	8002750 <LORA+0x3b0>
                  		  								 	 printf("\r\nCAN_R_voltage: ");
 800273e:	4834      	ldr	r0, [pc, #208]	; (8002810 <LORA+0x470>)
 8002740:	f007 fa14 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <LORA+0x450>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <LORA+0x450>)
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e037      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==20){
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <LORA+0x448>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <LORA+0x44c>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	2b20      	cmp	r3, #32
 800275a:	d10c      	bne.n	8002776 <LORA+0x3d6>
 800275c:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <LORA+0x450>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b14      	cmp	r3, #20
 8002762:	d108      	bne.n	8002776 <LORA+0x3d6>
                  		  								 	 printf("\r\nCAN_R_VSM_State: ");
 8002764:	482b      	ldr	r0, [pc, #172]	; (8002814 <LORA+0x474>)
 8002766:	f007 fa01 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <LORA+0x450>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <LORA+0x450>)
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e024      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==21){
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <LORA+0x448>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <LORA+0x44c>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	2b20      	cmp	r3, #32
 8002780:	d10c      	bne.n	800279c <LORA+0x3fc>
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <LORA+0x450>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b15      	cmp	r3, #21
 8002788:	d108      	bne.n	800279c <LORA+0x3fc>
                  		  								 	 printf("\r\nCAN_R_Inverter_State: ");
 800278a:	4823      	ldr	r0, [pc, #140]	; (8002818 <LORA+0x478>)
 800278c:	f007 f9ee 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <LORA+0x450>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <LORA+0x450>)
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e011      	b.n	80027c0 <LORA+0x420>
                  		  								}
                  		  								  else if(buffer[i]==32&&t==22){
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <LORA+0x448>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <LORA+0x44c>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d10b      	bne.n	80027c0 <LORA+0x420>
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <LORA+0x450>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b16      	cmp	r3, #22
 80027ae:	d107      	bne.n	80027c0 <LORA+0x420>
                  		  								 	 printf("\r\nCAN_R_RPM ");
 80027b0:	481a      	ldr	r0, [pc, #104]	; (800281c <LORA+0x47c>)
 80027b2:	f007 f9db 	bl	8009b6c <iprintf>
                  		  								 	 t++;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <LORA+0x450>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <LORA+0x450>)
 80027be:	6013      	str	r3, [r2, #0]
                  		  								  for(i=0;i<246;i++){
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <LORA+0x448>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <LORA+0x448>)
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <LORA+0x448>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2bf5      	cmp	r3, #245	; 0xf5
 80027d0:	f77f ae17 	ble.w	8002402 <LORA+0x62>
 80027d4:	e000      	b.n	80027d8 <LORA+0x438>
                  		  								  if(buffer[i]==0) break;
 80027d6:	bf00      	nop

                  		  						}

           // SDcard();
        }
        SDcard();
 80027d8:	f000 f824 	bl	8002824 <SDcard>
        		  }

*/


        printf("\r\n------------------------------------------------------------------------------------------------------------------------------------\r\n");
 80027dc:	4810      	ldr	r0, [pc, #64]	; (8002820 <LORA+0x480>)
 80027de:	f007 fa61 	bl	8009ca4 <puts>


}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200023d4 	.word	0x200023d4
 80027ec:	200023dc 	.word	0x200023dc
 80027f0:	200023d8 	.word	0x200023d8
 80027f4:	0800c000 	.word	0x0800c000
 80027f8:	0800c01c 	.word	0x0800c01c
 80027fc:	0800c02c 	.word	0x0800c02c
 8002800:	0800c044 	.word	0x0800c044
 8002804:	0800c05c 	.word	0x0800c05c
 8002808:	0800c078 	.word	0x0800c078
 800280c:	0800c094 	.word	0x0800c094
 8002810:	0800c0a8 	.word	0x0800c0a8
 8002814:	0800c0bc 	.word	0x0800c0bc
 8002818:	0800c0d0 	.word	0x0800c0d0
 800281c:	0800c0ec 	.word	0x0800c0ec
 8002820:	0800c0fc 	.word	0x0800c0fc

08002824 <SDcard>:
void SDcard(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	 /* SD card -------------------------------------------------------------------------------------------------------------------*/
	 /* SDcard logging -------------------------------------------------------------------------------------------------------------------*/
	 /* Mount SD Card */

	/* start */
	if(SDstate==1){
 8002828:	4b47      	ldr	r3, [pc, #284]	; (8002948 <SDcard+0x124>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d153      	bne.n	80028d8 <SDcard+0xb4>
		f_mount(&fs, "", 0);
 8002830:	2200      	movs	r2, #0
 8002832:	4946      	ldr	r1, [pc, #280]	; (800294c <SDcard+0x128>)
 8002834:	4846      	ldr	r0, [pc, #280]	; (8002950 <SDcard+0x12c>)
 8002836:	f005 fe2f 	bl	8008498 <f_mount>
		/* Open file to write */
		f_open(&fil, "DATA.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800283a:	2213      	movs	r2, #19
 800283c:	4945      	ldr	r1, [pc, #276]	; (8002954 <SDcard+0x130>)
 800283e:	4846      	ldr	r0, [pc, #280]	; (8002958 <SDcard+0x134>)
 8002840:	f005 fe70 	bl	8008524 <f_open>

	   /* Check free space */
	   f_getfree("", &fre_clust, &pfs);
 8002844:	4a45      	ldr	r2, [pc, #276]	; (800295c <SDcard+0x138>)
 8002846:	4946      	ldr	r1, [pc, #280]	; (8002960 <SDcard+0x13c>)
 8002848:	4840      	ldr	r0, [pc, #256]	; (800294c <SDcard+0x128>)
 800284a:	f006 fa73 	bl	8008d34 <f_getfree>
	   total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800284e:	4b43      	ldr	r3, [pc, #268]	; (800295c <SDcard+0x138>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	3b02      	subs	r3, #2
 8002856:	4a41      	ldr	r2, [pc, #260]	; (800295c <SDcard+0x138>)
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	8952      	ldrh	r2, [r2, #10]
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe57 	bl	8000514 <__aeabi_ui2d>
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <SDcard+0x140>)
 800286c:	f7fd fecc 	bl	8000608 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f99e 	bl	8000bb8 <__aeabi_d2uiz>
 800287c:	4603      	mov	r3, r0
 800287e:	4a3a      	ldr	r2, [pc, #232]	; (8002968 <SDcard+0x144>)
 8002880:	6013      	str	r3, [r2, #0]
	   freespace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002882:	4b36      	ldr	r3, [pc, #216]	; (800295c <SDcard+0x138>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	895b      	ldrh	r3, [r3, #10]
 8002888:	461a      	mov	r2, r3
 800288a:	4b35      	ldr	r3, [pc, #212]	; (8002960 <SDcard+0x13c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe3e 	bl	8000514 <__aeabi_ui2d>
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	4b31      	ldr	r3, [pc, #196]	; (8002964 <SDcard+0x140>)
 800289e:	f7fd feb3 	bl	8000608 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f985 	bl	8000bb8 <__aeabi_d2uiz>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4a2e      	ldr	r2, [pc, #184]	; (800296c <SDcard+0x148>)
 80028b2:	6013      	str	r3, [r2, #0]
	   // Free space is less than 1kb

	   /* show start logging */
	   SDstate=2;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <SDcard+0x124>)
 80028b6:	2202      	movs	r2, #2
 80028b8:	601a      	str	r2, [r3, #0]
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80028ba:	2201      	movs	r2, #1
 80028bc:	2120      	movs	r1, #32
 80028be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c2:	f000 ff03 	bl	80036cc <HAL_GPIO_WritePin>
	   f_puts("TIME Sum_of_Voltage Max_Voltage Min_Voltage Max_temp CAN_L_motor_temp CAN_L_invertertemp Motor_L_CommandedTorque Motor_L_TorqueFeedback CAN_L_current CAN_L_voltage CAN_L_VSM_State CAN_L_Inverter_State CAN_L_RPM CAN_R_motor_temp CAN_R_invertertemp Motor_R_CommandedTorque Motor_R_TorqueFeedback CAN_R_current CAN_R_voltage CAN_R_VSM_State CAN_R_Inverter_State CAN_R_RPM", &fil);
 80028c6:	4924      	ldr	r1, [pc, #144]	; (8002958 <SDcard+0x134>)
 80028c8:	4829      	ldr	r0, [pc, #164]	; (8002970 <SDcard+0x14c>)
 80028ca:	f006 fb5f 	bl	8008f8c <f_puts>
	   f_puts("\n", &fil);
 80028ce:	4922      	ldr	r1, [pc, #136]	; (8002958 <SDcard+0x134>)
 80028d0:	4828      	ldr	r0, [pc, #160]	; (8002974 <SDcard+0x150>)
 80028d2:	f006 fb5b 	bl	8008f8c <f_puts>
	     f_close(&fil);
	     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }


}
 80028d6:	e034      	b.n	8002942 <SDcard+0x11e>
	else if(SDstate==2){
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <SDcard+0x124>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d123      	bne.n	8002928 <SDcard+0x104>
			for(i=0;i<512;i++){
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <SDcard+0x154>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e00c      	b.n	8002902 <SDcard+0xde>
			SDbuffer[i]=buffer[i];
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <SDcard+0x154>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b22      	ldr	r3, [pc, #136]	; (8002978 <SDcard+0x154>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4922      	ldr	r1, [pc, #136]	; (800297c <SDcard+0x158>)
 80028f2:	5c89      	ldrb	r1, [r1, r2]
 80028f4:	4a22      	ldr	r2, [pc, #136]	; (8002980 <SDcard+0x15c>)
 80028f6:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<512;i++){
 80028f8:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <SDcard+0x154>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <SDcard+0x154>)
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <SDcard+0x154>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290a:	dbed      	blt.n	80028e8 <SDcard+0xc4>
			f_write(&fil, SDbuffer , strlen(SDbuffer), &bw);
 800290c:	481c      	ldr	r0, [pc, #112]	; (8002980 <SDcard+0x15c>)
 800290e:	f7fd fc67 	bl	80001e0 <strlen>
 8002912:	4602      	mov	r2, r0
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <SDcard+0x160>)
 8002916:	491a      	ldr	r1, [pc, #104]	; (8002980 <SDcard+0x15c>)
 8002918:	480f      	ldr	r0, [pc, #60]	; (8002958 <SDcard+0x134>)
 800291a:	f005 ffcf 	bl	80088bc <f_write>
			f_puts("\n", &fil);
 800291e:	490e      	ldr	r1, [pc, #56]	; (8002958 <SDcard+0x134>)
 8002920:	4814      	ldr	r0, [pc, #80]	; (8002974 <SDcard+0x150>)
 8002922:	f006 fb33 	bl	8008f8c <f_puts>
}
 8002926:	e00c      	b.n	8002942 <SDcard+0x11e>
	else if(SDstate==3){
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <SDcard+0x124>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d108      	bne.n	8002942 <SDcard+0x11e>
	     f_close(&fil);
 8002930:	4809      	ldr	r0, [pc, #36]	; (8002958 <SDcard+0x134>)
 8002932:	f006 f9d5 	bl	8008ce0 <f_close>
	     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002936:	2200      	movs	r2, #0
 8002938:	2120      	movs	r1, #32
 800293a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800293e:	f000 fec5 	bl	80036cc <HAL_GPIO_WritePin>
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20002294 	.word	0x20002294
 800294c:	0800c184 	.word	0x0800c184
 8002950:	2000021c 	.word	0x2000021c
 8002954:	0800c188 	.word	0x0800c188
 8002958:	20001258 	.word	0x20001258
 800295c:	20001254 	.word	0x20001254
 8002960:	20002288 	.word	0x20002288
 8002964:	3fe00000 	.word	0x3fe00000
 8002968:	2000228c 	.word	0x2000228c
 800296c:	20002290 	.word	0x20002290
 8002970:	0800c194 	.word	0x0800c194
 8002974:	0800c308 	.word	0x0800c308
 8002978:	200023d4 	.word	0x200023d4
 800297c:	200023dc 	.word	0x200023dc
 8002980:	200025dc 	.word	0x200025dc
 8002984:	20000218 	.word	0x20000218

08002988 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002998:	d116      	bne.n	80029c8 <HAL_GPIO_EXTI_Callback+0x40>
	{

		/*start*/
		if(SDstate==0){
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <HAL_GPIO_EXTI_Callback+0x22>
			SDstate=1;
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
		else if(SDstate==3){
			SDstate=0;
		}

	}
}
 80029a8:	e00e      	b.n	80029c8 <HAL_GPIO_EXTI_Callback+0x40>
		else if(SDstate==2){
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d103      	bne.n	80029ba <HAL_GPIO_EXTI_Callback+0x32>
			SDstate=3;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80029b4:	2203      	movs	r2, #3
 80029b6:	601a      	str	r2, [r3, #0]
}
 80029b8:	e006      	b.n	80029c8 <HAL_GPIO_EXTI_Callback+0x40>
		else if(SDstate==3){
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d102      	bne.n	80029c8 <HAL_GPIO_EXTI_Callback+0x40>
			SDstate=0;
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	20002294 	.word	0x20002294

080029d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029dc:	b672      	cpsid	i
}
 80029de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <Error_Handler+0x8>
	...

080029e4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <MX_SPI2_Init+0x74>)
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <MX_SPI2_Init+0x78>)
 80029ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <MX_SPI2_Init+0x74>)
 80029f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <MX_SPI2_Init+0x74>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <MX_SPI2_Init+0x74>)
 80029fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a1a:	2218      	movs	r2, #24
 8002a1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a32:	2207      	movs	r2, #7
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a3e:	2208      	movs	r2, #8
 8002a40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_SPI2_Init+0x74>)
 8002a44:	f002 f87a 	bl	8004b3c <HAL_SPI_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002a4e:	f7ff ffc3 	bl	80029d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200027dc 	.word	0x200027dc
 8002a5c:	40003800 	.word	0x40003800

08002a60 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002a66:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <MX_SPI3_Init+0x78>)
 8002a68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002a7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a7e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a92:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002a96:	2218      	movs	r2, #24
 8002a98:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002aae:	2207      	movs	r2, #7
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002aba:	2208      	movs	r2, #8
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <MX_SPI3_Init+0x74>)
 8002ac0:	f002 f83c 	bl	8004b3c <HAL_SPI_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002aca:	f7ff ff85 	bl	80029d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20002840 	.word	0x20002840
 8002ad8:	40003c00 	.word	0x40003c00

08002adc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	; 0x30
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a3d      	ldr	r2, [pc, #244]	; (8002bf0 <HAL_SPI_MspInit+0x114>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d145      	bne.n	8002b8a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	4a3c      	ldr	r2, [pc, #240]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b08:	6593      	str	r3, [r2, #88]	; 0x58
 8002b0a:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b16:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	4a36      	ldr	r2, [pc, #216]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b22:	4b34      	ldr	r3, [pc, #208]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	4a30      	ldr	r2, [pc, #192]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b3a:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b46:	230c      	movs	r3, #12
 8002b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b56:	2305      	movs	r3, #5
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5a:	f107 031c 	add.w	r3, r7, #28
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4825      	ldr	r0, [pc, #148]	; (8002bf8 <HAL_SPI_MspInit+0x11c>)
 8002b62:	f000 fc21 	bl	80033a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b74:	2303      	movs	r3, #3
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b78:	2305      	movs	r3, #5
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7c:	f107 031c 	add.w	r3, r7, #28
 8002b80:	4619      	mov	r1, r3
 8002b82:	481e      	ldr	r0, [pc, #120]	; (8002bfc <HAL_SPI_MspInit+0x120>)
 8002b84:	f000 fc10 	bl	80033a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002b88:	e02d      	b.n	8002be6 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	; (8002c00 <HAL_SPI_MspInit+0x124>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d128      	bne.n	8002be6 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb0:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <HAL_SPI_MspInit+0x118>)
 8002bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002bc4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bda:	f107 031c 	add.w	r3, r7, #28
 8002bde:	4619      	mov	r1, r3
 8002be0:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <HAL_SPI_MspInit+0x11c>)
 8002be2:	f000 fbe1 	bl	80033a8 <HAL_GPIO_Init>
}
 8002be6:	bf00      	nop
 8002be8:	3730      	adds	r7, #48	; 0x30
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40003800 	.word	0x40003800
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	48000800 	.word	0x48000800
 8002bfc:	48000400 	.word	0x48000400
 8002c00:	40003c00 	.word	0x40003c00

08002c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_MspInit+0x44>)
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <HAL_MspInit+0x44>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6613      	str	r3, [r2, #96]	; 0x60
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_MspInit+0x44>)
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_MspInit+0x44>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <HAL_MspInit+0x44>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_MspInit+0x44>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000

08002c4c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <SDTimer_Handler+0x40>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <SDTimer_Handler+0x1c>
    Timer1--;
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <SDTimer_Handler+0x40>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <SDTimer_Handler+0x40>)
 8002c66:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <SDTimer_Handler+0x44>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <SDTimer_Handler+0x34>
    Timer2--;
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <SDTimer_Handler+0x44>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <SDTimer_Handler+0x44>)
 8002c7e:	701a      	strb	r2, [r3, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	200028a5 	.word	0x200028a5
 8002c90:	200028a6 	.word	0x200028a6

08002c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <NMI_Handler+0x4>

08002c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <HardFault_Handler+0x4>

08002ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <MemManage_Handler+0x4>

08002ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <BusFault_Handler+0x4>

08002cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <UsageFault_Handler+0x4>

08002cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <SysTick_Handler+0x30>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <SysTick_Handler+0x30>)
 8002cec:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <SysTick_Handler+0x30>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b09      	cmp	r3, #9
 8002cf6:	d904      	bls.n	8002d02 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <SysTick_Handler+0x30>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002cfe:	f7ff ffa5 	bl	8002c4c <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d02:	f000 f9fb 	bl	80030fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200028a4 	.word	0x200028a4

08002d10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d18:	f000 fcf0 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d1c:	bf00      	nop
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
	return 1;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_kill>:

int _kill(int pid, int sig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d3a:	f006 fa6d 	bl	8009218 <__errno>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2216      	movs	r2, #22
 8002d42:	601a      	str	r2, [r3, #0]
	return -1;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_exit>:

void _exit (int status)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ffe7 	bl	8002d30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d62:	e7fe      	b.n	8002d62 <_exit+0x12>

08002d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e00a      	b.n	8002d8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d76:	f3af 8000 	nop.w
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	60ba      	str	r2, [r7, #8]
 8002d82:	b2ca      	uxtb	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dbf0      	blt.n	8002d76 <_read+0x12>
	}

return len;
 8002d94:	687b      	ldr	r3, [r7, #4]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
	return -1;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dc6:	605a      	str	r2, [r3, #4]
	return 0;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <_isatty>:

int _isatty(int file)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
	return 1;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
	return 0;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <_sbrk+0x5c>)
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <_sbrk+0x60>)
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <_sbrk+0x64>)
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <_sbrk+0x68>)
 8002e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <_sbrk+0x64>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d207      	bcs.n	8002e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e38:	f006 f9ee 	bl	8009218 <__errno>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	220c      	movs	r2, #12
 8002e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	e009      	b.n	8002e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <_sbrk+0x64>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <_sbrk+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <_sbrk+0x64>)
 8002e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20020000 	.word	0x20020000
 8002e68:	00000400 	.word	0x00000400
 8002e6c:	200028a8 	.word	0x200028a8
 8002e70:	20002b80 	.word	0x20002b80

08002e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <SystemInit+0x5c>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <SystemInit+0x5c>)
 8002e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <SystemInit+0x60>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <SystemInit+0x60>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e94:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <SystemInit+0x60>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <SystemInit+0x60>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <SystemInit+0x60>)
 8002ea0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002ea4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <SystemInit+0x60>)
 8002eac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eb0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <SystemInit+0x60>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <SystemInit+0x60>)
 8002eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <SystemInit+0x60>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000ed00 	.word	0xe000ed00
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <MX_USART2_UART_Init+0x5c>)
 8002ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002efe:	220c      	movs	r2, #12
 8002f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <MX_USART2_UART_Init+0x58>)
 8002f1c:	f002 fba0 	bl	8005660 <HAL_UART_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f26:	f7ff fd57 	bl	80029d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200028ac 	.word	0x200028ac
 8002f34:	40004400 	.word	0x40004400

08002f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b0a4      	sub	sp, #144	; 0x90
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	2268      	movs	r2, #104	; 0x68
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f006 f995 	bl	8009288 <memset>
  if(uartHandle->Instance==USART2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a21      	ldr	r2, [pc, #132]	; (8002fe8 <HAL_UART_MspInit+0xb0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d13a      	bne.n	8002fde <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 fa73 	bl	8004460 <HAL_RCCEx_PeriphCLKConfig>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f80:	f7ff fd2a 	bl	80029d8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_UART_MspInit+0xb4>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_UART_MspInit+0xb4>)
 8002f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_UART_MspInit+0xb4>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <HAL_UART_MspInit+0xb4>)
 8002f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa0:	4a12      	ldr	r2, [pc, #72]	; (8002fec <HAL_UART_MspInit+0xb4>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fa8:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_UART_MspInit+0xb4>)
 8002faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fb4:	230c      	movs	r3, #12
 8002fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fca:	2307      	movs	r3, #7
 8002fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fda:	f000 f9e5 	bl	80033a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fde:	bf00      	nop
 8002fe0:	3790      	adds	r7, #144	; 0x90
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40004400 	.word	0x40004400
 8002fec:	40021000 	.word	0x40021000

08002ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003028 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ff4:	f7ff ff3e 	bl	8002e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ff8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ffa:	e003      	b.n	8003004 <LoopCopyDataInit>

08002ffc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002ffe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003000:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003002:	3104      	adds	r1, #4

08003004 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003004:	480a      	ldr	r0, [pc, #40]	; (8003030 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003008:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800300a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800300c:	d3f6      	bcc.n	8002ffc <CopyDataInit>
	ldr	r2, =_sbss
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003010:	e002      	b.n	8003018 <LoopFillZerobss>

08003012 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003012:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003014:	f842 3b04 	str.w	r3, [r2], #4

08003018 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <LoopForever+0x16>)
	cmp	r2, r3
 800301a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800301c:	d3f9      	bcc.n	8003012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800301e:	f006 f901 	bl	8009224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003022:	f7ff f8f9 	bl	8002218 <main>

08003026 <LoopForever>:

LoopForever:
    b LoopForever
 8003026:	e7fe      	b.n	8003026 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003028:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 800302c:	0800cbe4 	.word	0x0800cbe4
	ldr	r0, =_sdata
 8003030:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003034:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8003038:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 800303c:	20002b80 	.word	0x20002b80

08003040 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003040:	e7fe      	b.n	8003040 <ADC1_IRQHandler>
	...

08003044 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <HAL_Init+0x3c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <HAL_Init+0x3c>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003058:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800305a:	2003      	movs	r0, #3
 800305c:	f000 f962 	bl	8003324 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003060:	2000      	movs	r0, #0
 8003062:	f000 f80f 	bl	8003084 <HAL_InitTick>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	71fb      	strb	r3, [r7, #7]
 8003070:	e001      	b.n	8003076 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003072:	f7ff fdc7 	bl	8002c04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003076:	79fb      	ldrb	r3, [r7, #7]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40022000 	.word	0x40022000

08003084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_InitTick+0x6c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d023      	beq.n	80030e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003098:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <HAL_InitTick+0x70>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <HAL_InitTick+0x6c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4619      	mov	r1, r3
 80030a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f96d 	bl	800338e <HAL_SYSTICK_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b0f      	cmp	r3, #15
 80030be:	d809      	bhi.n	80030d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030c0:	2200      	movs	r2, #0
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	f000 f937 	bl	800333a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <HAL_InitTick+0x74>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e007      	b.n	80030e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e004      	b.n	80030e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	e001      	b.n	80030e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2000000c 	.word	0x2000000c
 80030f4:	20000004 	.word	0x20000004
 80030f8:	20000008 	.word	0x20000008

080030fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_IncTick+0x20>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_IncTick+0x24>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4413      	add	r3, r2
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <HAL_IncTick+0x24>)
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	2000000c 	.word	0x2000000c
 8003120:	20002930 	.word	0x20002930

08003124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return uwTick;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_GetTick+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20002930 	.word	0x20002930

0800313c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff ffee 	bl	8003124 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d005      	beq.n	8003162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_Delay+0x44>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003162:	bf00      	nop
 8003164:	f7ff ffde 	bl	8003124 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d8f7      	bhi.n	8003164 <HAL_Delay+0x28>
  {
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	2000000c 	.word	0x2000000c

08003184 <__NVIC_SetPriorityGrouping>:
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_EnableIRQ>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db0b      	blt.n	8003212 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4907      	ldr	r1, [pc, #28]	; (8003220 <__NVIC_EnableIRQ+0x38>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2001      	movs	r0, #1
 800320a:	fa00 f202 	lsl.w	r2, r0, r2
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000e100 	.word	0xe000e100

08003224 <__NVIC_SetPriority>:
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	2b00      	cmp	r3, #0
 8003236:	db0a      	blt.n	800324e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	490c      	ldr	r1, [pc, #48]	; (8003270 <__NVIC_SetPriority+0x4c>)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	0112      	lsls	r2, r2, #4
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	440b      	add	r3, r1
 8003248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800324c:	e00a      	b.n	8003264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4908      	ldr	r1, [pc, #32]	; (8003274 <__NVIC_SetPriority+0x50>)
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	3b04      	subs	r3, #4
 800325c:	0112      	lsls	r2, r2, #4
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	440b      	add	r3, r1
 8003262:	761a      	strb	r2, [r3, #24]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000e100 	.word	0xe000e100
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <NVIC_EncodePriority>:
{
 8003278:	b480      	push	{r7}
 800327a:	b089      	sub	sp, #36	; 0x24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f1c3 0307 	rsb	r3, r3, #7
 8003292:	2b04      	cmp	r3, #4
 8003294:	bf28      	it	cs
 8003296:	2304      	movcs	r3, #4
 8003298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3304      	adds	r3, #4
 800329e:	2b06      	cmp	r3, #6
 80032a0:	d902      	bls.n	80032a8 <NVIC_EncodePriority+0x30>
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3b03      	subs	r3, #3
 80032a6:	e000      	b.n	80032aa <NVIC_EncodePriority+0x32>
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ac:	f04f 32ff 	mov.w	r2, #4294967295
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	401a      	ands	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c0:	f04f 31ff 	mov.w	r1, #4294967295
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	43d9      	mvns	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d0:	4313      	orrs	r3, r2
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3724      	adds	r7, #36	; 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <SysTick_Config>:
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f0:	d301      	bcc.n	80032f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80032f2:	2301      	movs	r3, #1
 80032f4:	e00f      	b.n	8003316 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f6:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <SysTick_Config+0x40>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032fe:	210f      	movs	r1, #15
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	f7ff ff8e 	bl	8003224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <SysTick_Config+0x40>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <SysTick_Config+0x40>)
 8003310:	2207      	movs	r2, #7
 8003312:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	e000e010 	.word	0xe000e010

08003324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff29 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800334c:	f7ff ff3e 	bl	80031cc <__NVIC_GetPriorityGrouping>
 8003350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	6978      	ldr	r0, [r7, #20]
 8003358:	f7ff ff8e 	bl	8003278 <NVIC_EncodePriority>
 800335c:	4602      	mov	r2, r0
 800335e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff5d 	bl	8003224 <__NVIC_SetPriority>
}
 800336a:	bf00      	nop
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff31 	bl	80031e8 <__NVIC_EnableIRQ>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ffa2 	bl	80032e0 <SysTick_Config>
 800339c:	4603      	mov	r3, r0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b6:	e154      	b.n	8003662 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2101      	movs	r1, #1
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8146 	beq.w	800365c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d00b      	beq.n	80033f0 <HAL_GPIO_Init+0x48>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d007      	beq.n	80033f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033e4:	2b11      	cmp	r3, #17
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b12      	cmp	r3, #18
 80033ee:	d130      	bne.n	8003452 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003426:	2201      	movs	r2, #1
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f003 0201 	and.w	r2, r3, #1
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2203      	movs	r2, #3
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0xea>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b12      	cmp	r3, #18
 8003490:	d123      	bne.n	80034da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	08da      	lsrs	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3208      	adds	r2, #8
 800349a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	08da      	lsrs	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3208      	adds	r2, #8
 80034d4:	6939      	ldr	r1, [r7, #16]
 80034d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	2203      	movs	r2, #3
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 0203 	and.w	r2, r3, #3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80a0 	beq.w	800365c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351c:	4b58      	ldr	r3, [pc, #352]	; (8003680 <HAL_GPIO_Init+0x2d8>)
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	4a57      	ldr	r2, [pc, #348]	; (8003680 <HAL_GPIO_Init+0x2d8>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6613      	str	r3, [r2, #96]	; 0x60
 8003528:	4b55      	ldr	r3, [pc, #340]	; (8003680 <HAL_GPIO_Init+0x2d8>)
 800352a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003534:	4a53      	ldr	r2, [pc, #332]	; (8003684 <HAL_GPIO_Init+0x2dc>)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3302      	adds	r3, #2
 800353c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	220f      	movs	r2, #15
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800355e:	d019      	beq.n	8003594 <HAL_GPIO_Init+0x1ec>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a49      	ldr	r2, [pc, #292]	; (8003688 <HAL_GPIO_Init+0x2e0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_GPIO_Init+0x1e8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a48      	ldr	r2, [pc, #288]	; (800368c <HAL_GPIO_Init+0x2e4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00d      	beq.n	800358c <HAL_GPIO_Init+0x1e4>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a47      	ldr	r2, [pc, #284]	; (8003690 <HAL_GPIO_Init+0x2e8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d007      	beq.n	8003588 <HAL_GPIO_Init+0x1e0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a46      	ldr	r2, [pc, #280]	; (8003694 <HAL_GPIO_Init+0x2ec>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_GPIO_Init+0x1dc>
 8003580:	2304      	movs	r3, #4
 8003582:	e008      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003584:	2307      	movs	r3, #7
 8003586:	e006      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003588:	2303      	movs	r3, #3
 800358a:	e004      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 800358c:	2302      	movs	r3, #2
 800358e:	e002      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003594:	2300      	movs	r3, #0
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	f002 0203 	and.w	r2, r2, #3
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	4093      	lsls	r3, r2
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035a6:	4937      	ldr	r1, [pc, #220]	; (8003684 <HAL_GPIO_Init+0x2dc>)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	3302      	adds	r3, #2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035b4:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	43db      	mvns	r3, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035d8:	4a2f      	ldr	r2, [pc, #188]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035de:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003602:	4a25      	ldr	r2, [pc, #148]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003608:	4b23      	ldr	r3, [pc, #140]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	43db      	mvns	r3, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800362c:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003656:	4a10      	ldr	r2, [pc, #64]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3301      	adds	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	f47f aea3 	bne.w	80033b8 <HAL_GPIO_Init+0x10>
  }
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40021000 	.word	0x40021000
 8003684:	40010000 	.word	0x40010000
 8003688:	48000400 	.word	0x48000400
 800368c:	48000800 	.word	0x48000800
 8003690:	48000c00 	.word	0x48000c00
 8003694:	48001000 	.word	0x48001000
 8003698:	40010400 	.word	0x40010400

0800369c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e001      	b.n	80036be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003712:	4a05      	ldr	r2, [pc, #20]	; (8003728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff f934 	bl	8002988 <HAL_GPIO_EXTI_Callback>
  }
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40010400 	.word	0x40010400

0800372c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40007000 	.word	0x40007000

0800374c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <HAL_PWREx_GetVoltageRange+0x18>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40007000 	.word	0x40007000

08003768 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003776:	d130      	bne.n	80037da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003778:	4b23      	ldr	r3, [pc, #140]	; (8003808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003784:	d038      	beq.n	80037f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800378e:	4a1e      	ldr	r2, [pc, #120]	; (8003808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003790:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003794:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003796:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2232      	movs	r2, #50	; 0x32
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0c9b      	lsrs	r3, r3, #18
 80037a8:	3301      	adds	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ac:	e002      	b.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c0:	d102      	bne.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f2      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d4:	d110      	bne.n	80037f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e00f      	b.n	80037fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e6:	d007      	beq.n	80037f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037e8:	4b07      	ldr	r3, [pc, #28]	; (8003808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037f0:	4a05      	ldr	r2, [pc, #20]	; (8003808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40007000 	.word	0x40007000
 800380c:	20000004 	.word	0x20000004
 8003810:	431bde83 	.word	0x431bde83

08003814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f000 bc10 	b.w	8004048 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003828:	4b96      	ldr	r3, [pc, #600]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003832:	4b94      	ldr	r3, [pc, #592]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80e4 	beq.w	8003a12 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <HAL_RCC_OscConfig+0x4c>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b0c      	cmp	r3, #12
 8003854:	f040 808b 	bne.w	800396e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b01      	cmp	r3, #1
 800385c:	f040 8087 	bne.w	800396e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003860:	4b88      	ldr	r3, [pc, #544]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_OscConfig+0x64>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e3e7      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1a      	ldr	r2, [r3, #32]
 800387c:	4b81      	ldr	r3, [pc, #516]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <HAL_RCC_OscConfig+0x7e>
 8003888:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003890:	e005      	b.n	800389e <HAL_RCC_OscConfig+0x8a>
 8003892:	4b7c      	ldr	r3, [pc, #496]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389e:	4293      	cmp	r3, r2
 80038a0:	d223      	bcs.n	80038ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fd7a 	bl	80043a0 <RCC_SetFlashLatencyFromMSIRange>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e3c8      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038b6:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a72      	ldr	r2, [pc, #456]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80038bc:	f043 0308 	orr.w	r3, r3, #8
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b70      	ldr	r3, [pc, #448]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	496d      	ldr	r1, [pc, #436]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038d4:	4b6b      	ldr	r3, [pc, #428]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	4968      	ldr	r1, [pc, #416]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
 80038e8:	e025      	b.n	8003936 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ea:	4b66      	ldr	r3, [pc, #408]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a65      	ldr	r2, [pc, #404]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80038f0:	f043 0308 	orr.w	r3, r3, #8
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4b63      	ldr	r3, [pc, #396]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	4960      	ldr	r1, [pc, #384]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003908:	4b5e      	ldr	r3, [pc, #376]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	495b      	ldr	r1, [pc, #364]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fd3a 	bl	80043a0 <RCC_SetFlashLatencyFromMSIRange>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e388      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003936:	f000 fc6f 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	4950      	ldr	r1, [pc, #320]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003948:	5ccb      	ldrb	r3, [r1, r3]
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	4a4e      	ldr	r2, [pc, #312]	; (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003954:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003956:	4b4e      	ldr	r3, [pc, #312]	; (8003a90 <HAL_RCC_OscConfig+0x27c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fb92 	bl	8003084 <HAL_InitTick>
 8003960:	4603      	mov	r3, r0
 8003962:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d052      	beq.n	8003a10 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	e36c      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d032      	beq.n	80039dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a42      	ldr	r2, [pc, #264]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003982:	f7ff fbcf 	bl	8003124 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800398a:	f7ff fbcb 	bl	8003124 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e355      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800399c:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a35      	ldr	r2, [pc, #212]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039ae:	f043 0308 	orr.w	r3, r3, #8
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b33      	ldr	r3, [pc, #204]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4930      	ldr	r1, [pc, #192]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039c6:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	492b      	ldr	r1, [pc, #172]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]
 80039da:	e01a      	b.n	8003a12 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039dc:	4b29      	ldr	r3, [pc, #164]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a28      	ldr	r2, [pc, #160]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039e8:	f7ff fb9c 	bl	8003124 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f0:	f7ff fb98 	bl	8003124 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e322      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x1dc>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d073      	beq.n	8003b06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_OscConfig+0x21c>
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d10e      	bne.n	8003a48 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d063      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2f0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d15f      	bne.n	8003b04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e2ff      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x24c>
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e025      	b.n	8003aac <HAL_RCC_OscConfig+0x298>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a68:	d114      	bne.n	8003a94 <HAL_RCC_OscConfig+0x280>
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a02      	ldr	r2, [pc, #8]	; (8003a84 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e013      	b.n	8003aac <HAL_RCC_OscConfig+0x298>
 8003a84:	40021000 	.word	0x40021000
 8003a88:	0800c374 	.word	0x0800c374
 8003a8c:	20000004 	.word	0x20000004
 8003a90:	20000008 	.word	0x20000008
 8003a94:	4ba0      	ldr	r3, [pc, #640]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a9f      	ldr	r2, [pc, #636]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b9d      	ldr	r3, [pc, #628]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a9c      	ldr	r2, [pc, #624]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d013      	beq.n	8003adc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7ff fb36 	bl	8003124 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7ff fb32 	bl	8003124 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e2bc      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ace:	4b92      	ldr	r3, [pc, #584]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x2a8>
 8003ada:	e014      	b.n	8003b06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7ff fb22 	bl	8003124 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7ff fb1e 	bl	8003124 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e2a8      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af6:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x2d0>
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d060      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_OscConfig+0x310>
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	d119      	bne.n	8003b52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d116      	bne.n	8003b52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b24:	4b7c      	ldr	r3, [pc, #496]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_OscConfig+0x328>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e285      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b76      	ldr	r3, [pc, #472]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	4973      	ldr	r1, [pc, #460]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b50:	e040      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d023      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5a:	4b6f      	ldr	r3, [pc, #444]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6e      	ldr	r2, [pc, #440]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7ff fadd 	bl	8003124 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7ff fad9 	bl	8003124 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e263      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b80:	4b65      	ldr	r3, [pc, #404]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8c:	4b62      	ldr	r3, [pc, #392]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	061b      	lsls	r3, r3, #24
 8003b9a:	495f      	ldr	r1, [pc, #380]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
 8003ba0:	e018      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba2:	4b5d      	ldr	r3, [pc, #372]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5c      	ldr	r2, [pc, #368]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7ff fab9 	bl	8003124 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb6:	f7ff fab5 	bl	8003124 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e23f      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bc8:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f0      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d03c      	beq.n	8003c5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01c      	beq.n	8003c22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bee:	4a4a      	ldr	r2, [pc, #296]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7ff fa94 	bl	8003124 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c00:	f7ff fa90 	bl	8003124 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e21a      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ef      	beq.n	8003c00 <HAL_RCC_OscConfig+0x3ec>
 8003c20:	e01b      	b.n	8003c5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c22:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c28:	4a3b      	ldr	r2, [pc, #236]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7ff fa77 	bl	8003124 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3a:	f7ff fa73 	bl	8003124 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1fd      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c4c:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1ef      	bne.n	8003c3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 80a6 	beq.w	8003db4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10d      	bne.n	8003c94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7c:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c82:	6593      	str	r3, [r2, #88]	; 0x58
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c90:	2301      	movs	r3, #1
 8003c92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c94:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <HAL_RCC_OscConfig+0x508>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d118      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca0:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <HAL_RCC_OscConfig+0x508>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <HAL_RCC_OscConfig+0x508>)
 8003ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cac:	f7ff fa3a 	bl	8003124 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb4:	f7ff fa36 	bl	8003124 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1c0      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc6:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <HAL_RCC_OscConfig+0x508>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d108      	bne.n	8003cec <HAL_RCC_OscConfig+0x4d8>
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cea:	e029      	b.n	8003d40 <HAL_RCC_OscConfig+0x52c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d115      	bne.n	8003d20 <HAL_RCC_OscConfig+0x50c>
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	4a07      	ldr	r2, [pc, #28]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003cfc:	f043 0304 	orr.w	r3, r3, #4
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	4a03      	ldr	r2, [pc, #12]	; (8003d18 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d14:	e014      	b.n	8003d40 <HAL_RCC_OscConfig+0x52c>
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	4b9a      	ldr	r3, [pc, #616]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	4a99      	ldr	r2, [pc, #612]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d30:	4b96      	ldr	r3, [pc, #600]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	4a95      	ldr	r2, [pc, #596]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003d38:	f023 0304 	bic.w	r3, r3, #4
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d016      	beq.n	8003d76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7ff f9ec 	bl	8003124 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d50:	f7ff f9e8 	bl	8003124 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e170      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d66:	4b89      	ldr	r3, [pc, #548]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ed      	beq.n	8003d50 <HAL_RCC_OscConfig+0x53c>
 8003d74:	e015      	b.n	8003da2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d76:	f7ff f9d5 	bl	8003124 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7ff f9d1 	bl	8003124 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e159      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d94:	4b7d      	ldr	r3, [pc, #500]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ed      	bne.n	8003d7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da2:	7ffb      	ldrb	r3, [r7, #31]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d105      	bne.n	8003db4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da8:	4b78      	ldr	r3, [pc, #480]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	4a77      	ldr	r2, [pc, #476]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d03c      	beq.n	8003e3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01c      	beq.n	8003e02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dc8:	4b70      	ldr	r3, [pc, #448]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dce:	4a6f      	ldr	r2, [pc, #444]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd8:	f7ff f9a4 	bl	8003124 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de0:	f7ff f9a0 	bl	8003124 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e12a      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003df2:	4b66      	ldr	r3, [pc, #408]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ef      	beq.n	8003de0 <HAL_RCC_OscConfig+0x5cc>
 8003e00:	e01b      	b.n	8003e3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e02:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e08:	4a60      	ldr	r2, [pc, #384]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e12:	f7ff f987 	bl	8003124 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e1a:	f7ff f983 	bl	8003124 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e10d      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e2c:	4b57      	ldr	r3, [pc, #348]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1ef      	bne.n	8003e1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8101 	beq.w	8004046 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	f040 80c9 	bne.w	8003fe0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e4e:	4b4f      	ldr	r3, [pc, #316]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f003 0203 	and.w	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d12c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d123      	bne.n	8003ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d11b      	bne.n	8003ebc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d113      	bne.n	8003ebc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d06b      	beq.n	8003f94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d062      	beq.n	8003f88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ec2:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0ba      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003edc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ede:	f7ff f921 	bl	8003124 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7ff f91d 	bl	8003124 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0a7      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f04:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <HAL_RCC_OscConfig+0x77c>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f14:	3a01      	subs	r2, #1
 8003f16:	0112      	lsls	r2, r2, #4
 8003f18:	4311      	orrs	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f1e:	0212      	lsls	r2, r2, #8
 8003f20:	4311      	orrs	r1, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f26:	0852      	lsrs	r2, r2, #1
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	0552      	lsls	r2, r2, #21
 8003f2c:	4311      	orrs	r1, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f32:	0852      	lsrs	r2, r2, #1
 8003f34:	3a01      	subs	r2, #1
 8003f36:	0652      	lsls	r2, r2, #25
 8003f38:	4311      	orrs	r1, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f3e:	06d2      	lsls	r2, r2, #27
 8003f40:	430a      	orrs	r2, r1
 8003f42:	4912      	ldr	r1, [pc, #72]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f48:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a0f      	ldr	r2, [pc, #60]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f54:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a0c      	ldr	r2, [pc, #48]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f60:	f7ff f8e0 	bl	8003124 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7ff f8dc 	bl	8003124 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e066      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7a:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <HAL_RCC_OscConfig+0x778>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f86:	e05e      	b.n	8004046 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e05d      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f94:	4b2e      	ldr	r3, [pc, #184]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d152      	bne.n	8004046 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2a      	ldr	r2, [pc, #168]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8003fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003faa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fac:	4b28      	ldr	r3, [pc, #160]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4a27      	ldr	r2, [pc, #156]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8003fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fb8:	f7ff f8b4 	bl	8003124 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7ff f8b0 	bl	8003124 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e03a      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd2:	4b1f      	ldr	r3, [pc, #124]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x7ac>
 8003fde:	e032      	b.n	8004046 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b0c      	cmp	r3, #12
 8003fe4:	d02d      	beq.n	8004042 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe6:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a19      	ldr	r2, [pc, #100]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8003fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d105      	bne.n	800400a <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ffe:	4b14      	ldr	r3, [pc, #80]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	4a13      	ldr	r2, [pc, #76]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8004004:	f023 0303 	bic.w	r3, r3, #3
 8004008:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800400a:	4b11      	ldr	r3, [pc, #68]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4a10      	ldr	r2, [pc, #64]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8004010:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004018:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7ff f883 	bl	8003124 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004022:	f7ff f87f 	bl	8003124 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e009      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_OscConfig+0x83c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f0      	bne.n	8004022 <HAL_RCC_OscConfig+0x80e>
 8004040:	e001      	b.n	8004046 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000

08004054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0c8      	b.n	80041fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b66      	ldr	r3, [pc, #408]	; (8004204 <HAL_RCC_ClockConfig+0x1b0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d910      	bls.n	8004098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b63      	ldr	r3, [pc, #396]	; (8004204 <HAL_RCC_ClockConfig+0x1b0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 0207 	bic.w	r2, r3, #7
 800407e:	4961      	ldr	r1, [pc, #388]	; (8004204 <HAL_RCC_ClockConfig+0x1b0>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b5f      	ldr	r3, [pc, #380]	; (8004204 <HAL_RCC_ClockConfig+0x1b0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0b0      	b.n	80041fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d04c      	beq.n	800413e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ac:	4b56      	ldr	r3, [pc, #344]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d121      	bne.n	80040fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e09e      	b.n	80041fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d107      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d115      	bne.n	80040fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e092      	b.n	80041fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040dc:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e086      	b.n	80041fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ec:	4b46      	ldr	r3, [pc, #280]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e07e      	b.n	80041fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040fc:	4b42      	ldr	r3, [pc, #264]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 0203 	bic.w	r2, r3, #3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	493f      	ldr	r1, [pc, #252]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410e:	f7ff f809 	bl	8003124 <HAL_GetTick>
 8004112:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004114:	e00a      	b.n	800412c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004116:	f7ff f805 	bl	8003124 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e066      	b.n	80041fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 020c 	and.w	r2, r3, #12
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	429a      	cmp	r2, r3
 800413c:	d1eb      	bne.n	8004116 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	492c      	ldr	r1, [pc, #176]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800415c:	4b29      	ldr	r3, [pc, #164]	; (8004204 <HAL_RCC_ClockConfig+0x1b0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d210      	bcs.n	800418c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b26      	ldr	r3, [pc, #152]	; (8004204 <HAL_RCC_ClockConfig+0x1b0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 0207 	bic.w	r2, r3, #7
 8004172:	4924      	ldr	r1, [pc, #144]	; (8004204 <HAL_RCC_ClockConfig+0x1b0>)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <HAL_RCC_ClockConfig+0x1b0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e036      	b.n	80041fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004198:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4918      	ldr	r1, [pc, #96]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b6:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4910      	ldr	r1, [pc, #64]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041ca:	f000 f825 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <HAL_RCC_ClockConfig+0x1b4>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	490c      	ldr	r1, [pc, #48]	; (800420c <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	fa22 f303 	lsr.w	r3, r2, r3
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe ff48 	bl	8003084 <HAL_InitTick>
 80041f4:	4603      	mov	r3, r0
 80041f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80041f8:	7afb      	ldrb	r3, [r7, #11]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40022000 	.word	0x40022000
 8004208:	40021000 	.word	0x40021000
 800420c:	0800c374 	.word	0x0800c374
 8004210:	20000004 	.word	0x20000004
 8004214:	20000008 	.word	0x20000008

08004218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	; 0x24
 800421c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	2300      	movs	r3, #0
 8004224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004226:	4b3e      	ldr	r3, [pc, #248]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004230:	4b3b      	ldr	r3, [pc, #236]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0x34>
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d121      	bne.n	800428a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d11e      	bne.n	800428a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800424c:	4b34      	ldr	r3, [pc, #208]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004258:	4b31      	ldr	r3, [pc, #196]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 800425a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	e005      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004268:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004274:	4a2b      	ldr	r2, [pc, #172]	; (8004324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10d      	bne.n	80042a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004288:	e00a      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b04      	cmp	r3, #4
 800428e:	d102      	bne.n	8004296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004290:	4b25      	ldr	r3, [pc, #148]	; (8004328 <HAL_RCC_GetSysClockFreq+0x110>)
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	e004      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b08      	cmp	r3, #8
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800429c:	4b23      	ldr	r3, [pc, #140]	; (800432c <HAL_RCC_GetSysClockFreq+0x114>)
 800429e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d134      	bne.n	8004310 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d003      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0xa6>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d003      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0xac>
 80042bc:	e005      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042be:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <HAL_RCC_GetSysClockFreq+0x110>)
 80042c0:	617b      	str	r3, [r7, #20]
      break;
 80042c2:	e005      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_RCC_GetSysClockFreq+0x114>)
 80042c6:	617b      	str	r3, [r7, #20]
      break;
 80042c8:	e002      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	617b      	str	r3, [r7, #20]
      break;
 80042ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042d0:	4b13      	ldr	r3, [pc, #76]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	3301      	adds	r3, #1
 80042dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	fb03 f202 	mul.w	r2, r3, r2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	0e5b      	lsrs	r3, r3, #25
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	3301      	adds	r3, #1
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	fbb2 f3f3 	udiv	r3, r2, r3
 800430e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004310:	69bb      	ldr	r3, [r7, #24]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3724      	adds	r7, #36	; 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
 8004324:	0800c38c 	.word	0x0800c38c
 8004328:	00f42400 	.word	0x00f42400
 800432c:	007a1200 	.word	0x007a1200

08004330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004334:	4b03      	ldr	r3, [pc, #12]	; (8004344 <HAL_RCC_GetHCLKFreq+0x14>)
 8004336:	681b      	ldr	r3, [r3, #0]
}
 8004338:	4618      	mov	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000004 	.word	0x20000004

08004348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800434c:	f7ff fff0 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 8004350:	4602      	mov	r2, r0
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	4904      	ldr	r1, [pc, #16]	; (8004370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800435e:	5ccb      	ldrb	r3, [r1, r3]
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000
 8004370:	0800c384 	.word	0x0800c384

08004374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004378:	f7ff ffda 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 800437c:	4602      	mov	r2, r0
 800437e:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	0adb      	lsrs	r3, r3, #11
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	4904      	ldr	r1, [pc, #16]	; (800439c <HAL_RCC_GetPCLK2Freq+0x28>)
 800438a:	5ccb      	ldrb	r3, [r1, r3]
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	0800c384 	.word	0x0800c384

080043a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043ac:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043b8:	f7ff f9c8 	bl	800374c <HAL_PWREx_GetVoltageRange>
 80043bc:	6178      	str	r0, [r7, #20]
 80043be:	e014      	b.n	80043ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	4a24      	ldr	r2, [pc, #144]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ca:	6593      	str	r3, [r2, #88]	; 0x58
 80043cc:	4b22      	ldr	r3, [pc, #136]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043d8:	f7ff f9b8 	bl	800374c <HAL_PWREx_GetVoltageRange>
 80043dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043de:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f0:	d10b      	bne.n	800440a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b80      	cmp	r3, #128	; 0x80
 80043f6:	d919      	bls.n	800442c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2ba0      	cmp	r3, #160	; 0xa0
 80043fc:	d902      	bls.n	8004404 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043fe:	2302      	movs	r3, #2
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e013      	b.n	800442c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004404:	2301      	movs	r3, #1
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	e010      	b.n	800442c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b80      	cmp	r3, #128	; 0x80
 800440e:	d902      	bls.n	8004416 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004410:	2303      	movs	r3, #3
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	e00a      	b.n	800442c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d102      	bne.n	8004422 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800441c:	2302      	movs	r3, #2
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	e004      	b.n	800442c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b70      	cmp	r3, #112	; 0x70
 8004426:	d101      	bne.n	800442c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004428:	2301      	movs	r3, #1
 800442a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 0207 	bic.w	r2, r3, #7
 8004434:	4909      	ldr	r1, [pc, #36]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	429a      	cmp	r2, r3
 8004448:	d001      	beq.n	800444e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	40022000 	.word	0x40022000

08004460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004468:	2300      	movs	r3, #0
 800446a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800446c:	2300      	movs	r3, #0
 800446e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004478:	2b00      	cmp	r3, #0
 800447a:	d031      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004480:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004484:	d01a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800448a:	d814      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004494:	d10f      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004496:	4b5d      	ldr	r3, [pc, #372]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	4a5c      	ldr	r2, [pc, #368]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044a2:	e00c      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fa54 	bl	8004958 <RCCEx_PLLSAI1_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b4:	e003      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	74fb      	strb	r3, [r7, #19]
      break;
 80044ba:	e000      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044c4:	4b51      	ldr	r3, [pc, #324]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d2:	494e      	ldr	r1, [pc, #312]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044da:	e001      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 809e 	beq.w	800462a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044f2:	4b46      	ldr	r3, [pc, #280]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004508:	4b40      	ldr	r3, [pc, #256]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	4a3f      	ldr	r2, [pc, #252]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004512:	6593      	str	r3, [r2, #88]	; 0x58
 8004514:	4b3d      	ldr	r3, [pc, #244]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004520:	2301      	movs	r3, #1
 8004522:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004524:	4b3a      	ldr	r3, [pc, #232]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a39      	ldr	r2, [pc, #228]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800452a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004530:	f7fe fdf8 	bl	8003124 <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004536:	e009      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004538:	f7fe fdf4 	bl	8003124 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d902      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	74fb      	strb	r3, [r7, #19]
        break;
 800454a:	e005      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800454c:	4b30      	ldr	r3, [pc, #192]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ef      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004558:	7cfb      	ldrb	r3, [r7, #19]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d15a      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800455e:	4b2b      	ldr	r3, [pc, #172]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004568:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01e      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	429a      	cmp	r2, r3
 8004578:	d019      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004584:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004586:	4b21      	ldr	r3, [pc, #132]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	4a1f      	ldr	r2, [pc, #124]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800458e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	4a1b      	ldr	r2, [pc, #108]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045a6:	4a19      	ldr	r2, [pc, #100]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d016      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fe fdb4 	bl	8003124 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045be:	e00b      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fe fdb0 	bl	8003124 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d902      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	74fb      	strb	r3, [r7, #19]
            break;
 80045d6:	e006      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ec      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ec:	4b07      	ldr	r3, [pc, #28]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045fa:	4904      	ldr	r1, [pc, #16]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004602:	e009      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	74bb      	strb	r3, [r7, #18]
 8004608:	e006      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004618:	7c7b      	ldrb	r3, [r7, #17]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d105      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461e:	4b9e      	ldr	r3, [pc, #632]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	4a9d      	ldr	r2, [pc, #628]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004628:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004636:	4b98      	ldr	r3, [pc, #608]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f023 0203 	bic.w	r2, r3, #3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	4994      	ldr	r1, [pc, #592]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004658:	4b8f      	ldr	r3, [pc, #572]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	f023 020c 	bic.w	r2, r3, #12
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	498c      	ldr	r1, [pc, #560]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467a:	4b87      	ldr	r3, [pc, #540]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	4983      	ldr	r1, [pc, #524]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800469c:	4b7e      	ldr	r3, [pc, #504]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	497b      	ldr	r1, [pc, #492]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046be:	4b76      	ldr	r3, [pc, #472]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	4972      	ldr	r1, [pc, #456]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046e0:	4b6d      	ldr	r3, [pc, #436]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	496a      	ldr	r1, [pc, #424]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004702:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	4961      	ldr	r1, [pc, #388]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004724:	4b5c      	ldr	r3, [pc, #368]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004732:	4959      	ldr	r1, [pc, #356]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004746:	4b54      	ldr	r3, [pc, #336]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	4950      	ldr	r1, [pc, #320]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004768:	4b4b      	ldr	r3, [pc, #300]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	4948      	ldr	r1, [pc, #288]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800478a:	4b43      	ldr	r3, [pc, #268]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800478c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004790:	f023 0203 	bic.w	r2, r3, #3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	493f      	ldr	r1, [pc, #252]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d028      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047ac:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	4937      	ldr	r1, [pc, #220]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ca:	d106      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047cc:	4b32      	ldr	r3, [pc, #200]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a31      	ldr	r2, [pc, #196]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d6:	60d3      	str	r3, [r2, #12]
 80047d8:	e011      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e2:	d10c      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	2101      	movs	r1, #1
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f8b4 	bl	8004958 <RCCEx_PLLSAI1_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d028      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800480a:	4b23      	ldr	r3, [pc, #140]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	491f      	ldr	r1, [pc, #124]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004828:	d106      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800482a:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	4a1a      	ldr	r2, [pc, #104]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004834:	60d3      	str	r3, [r2, #12]
 8004836:	e011      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004840:	d10c      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3304      	adds	r3, #4
 8004846:	2101      	movs	r1, #1
 8004848:	4618      	mov	r0, r3
 800484a:	f000 f885 	bl	8004958 <RCCEx_PLLSAI1_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004858:	7cfb      	ldrb	r3, [r7, #19]
 800485a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d02b      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004876:	4908      	ldr	r1, [pc, #32]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004886:	d109      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4a02      	ldr	r2, [pc, #8]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800488e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004892:	60d3      	str	r3, [r2, #12]
 8004894:	e014      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 f853 	bl	8004958 <RCCEx_PLLSAI1_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048b6:	7cfb      	ldrb	r3, [r7, #19]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01c      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	4916      	ldr	r1, [pc, #88]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ea:	d10c      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	2102      	movs	r1, #2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f830 	bl	8004958 <RCCEx_PLLSAI1_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004902:	7cfb      	ldrb	r3, [r7, #19]
 8004904:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004920:	4904      	ldr	r1, [pc, #16]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004928:	7cbb      	ldrb	r3, [r7, #18]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000

08004938 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a04      	ldr	r2, [pc, #16]	; (8004954 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004942:	f043 0304 	orr.w	r3, r3, #4
 8004946:	6013      	str	r3, [r2, #0]
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000

08004958 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004966:	4b74      	ldr	r3, [pc, #464]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004972:	4b71      	ldr	r3, [pc, #452]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0203 	and.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d10d      	bne.n	800499e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
       ||
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800498a:	4b6b      	ldr	r3, [pc, #428]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
       ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d047      	beq.n	8004a2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
 80049a2:	e044      	b.n	8004a2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d018      	beq.n	80049de <RCCEx_PLLSAI1_Config+0x86>
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d825      	bhi.n	80049fc <RCCEx_PLLSAI1_Config+0xa4>
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d002      	beq.n	80049ba <RCCEx_PLLSAI1_Config+0x62>
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d009      	beq.n	80049cc <RCCEx_PLLSAI1_Config+0x74>
 80049b8:	e020      	b.n	80049fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ba:	4b5f      	ldr	r3, [pc, #380]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d11d      	bne.n	8004a02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ca:	e01a      	b.n	8004a02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049cc:	4b5a      	ldr	r3, [pc, #360]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d116      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049dc:	e013      	b.n	8004a06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049de:	4b56      	ldr	r3, [pc, #344]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10f      	bne.n	8004a0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ea:	4b53      	ldr	r3, [pc, #332]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049fa:	e006      	b.n	8004a0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004a00:	e004      	b.n	8004a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a02:	bf00      	nop
 8004a04:	e002      	b.n	8004a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a06:	bf00      	nop
 8004a08:	e000      	b.n	8004a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10d      	bne.n	8004a2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a12:	4b49      	ldr	r3, [pc, #292]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6819      	ldr	r1, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	430b      	orrs	r3, r1
 8004a28:	4943      	ldr	r1, [pc, #268]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d17c      	bne.n	8004b2e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a34:	4b40      	ldr	r3, [pc, #256]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3f      	ldr	r2, [pc, #252]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fe fb70 	bl	8003124 <HAL_GetTick>
 8004a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a46:	e009      	b.n	8004a5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a48:	f7fe fb6c 	bl	8003124 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d902      	bls.n	8004a5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	73fb      	strb	r3, [r7, #15]
        break;
 8004a5a:	e005      	b.n	8004a68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a5c:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ef      	bne.n	8004a48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d15f      	bne.n	8004b2e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d110      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a74:	4b30      	ldr	r3, [pc, #192]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6892      	ldr	r2, [r2, #8]
 8004a84:	0211      	lsls	r1, r2, #8
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68d2      	ldr	r2, [r2, #12]
 8004a8a:	06d2      	lsls	r2, r2, #27
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	492a      	ldr	r1, [pc, #168]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	610b      	str	r3, [r1, #16]
 8004a94:	e027      	b.n	8004ae6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d112      	bne.n	8004ac2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a9c:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004aa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6892      	ldr	r2, [r2, #8]
 8004aac:	0211      	lsls	r1, r2, #8
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6912      	ldr	r2, [r2, #16]
 8004ab2:	0852      	lsrs	r2, r2, #1
 8004ab4:	3a01      	subs	r2, #1
 8004ab6:	0552      	lsls	r2, r2, #21
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	491f      	ldr	r1, [pc, #124]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	610b      	str	r3, [r1, #16]
 8004ac0:	e011      	b.n	8004ae6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ac2:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004aca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6892      	ldr	r2, [r2, #8]
 8004ad2:	0211      	lsls	r1, r2, #8
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6952      	ldr	r2, [r2, #20]
 8004ad8:	0852      	lsrs	r2, r2, #1
 8004ada:	3a01      	subs	r2, #1
 8004adc:	0652      	lsls	r2, r2, #25
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	4915      	ldr	r1, [pc, #84]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004af0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af2:	f7fe fb17 	bl	8003124 <HAL_GetTick>
 8004af6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004af8:	e009      	b.n	8004b0e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004afa:	f7fe fb13 	bl	8003124 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d902      	bls.n	8004b0e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b0c:	e005      	b.n	8004b1a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0ef      	beq.n	8004afa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d106      	bne.n	8004b2e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	4903      	ldr	r1, [pc, #12]	; (8004b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40021000 	.word	0x40021000

08004b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e095      	b.n	8004c7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d108      	bne.n	8004b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b5e:	d009      	beq.n	8004b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	61da      	str	r2, [r3, #28]
 8004b66:	e005      	b.n	8004b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fd ffa4 	bl	8002adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004baa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bb4:	d902      	bls.n	8004bbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	e002      	b.n	8004bc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bca:	d007      	beq.n	8004bdc <HAL_SPI_Init+0xa0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bd4:	d002      	beq.n	8004bdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	ea42 0103 	orr.w	r1, r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	f003 0204 	and.w	r2, r3, #4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c58:	ea42 0103 	orr.w	r1, r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b088      	sub	sp, #32
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_SPI_Transmit+0x22>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e158      	b.n	8004f56 <HAL_SPI_Transmit+0x2d4>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cac:	f7fe fa3a 	bl	8003124 <HAL_GetTick>
 8004cb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cc6:	e13d      	b.n	8004f44 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_SPI_Transmit+0x52>
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cd8:	e134      	b.n	8004f44 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2203      	movs	r2, #3
 8004cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d24:	d10f      	bne.n	8004d46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d007      	beq.n	8004d64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d6c:	d94b      	bls.n	8004e06 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_Transmit+0xfa>
 8004d76:	8afb      	ldrh	r3, [r7, #22]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d13e      	bne.n	8004dfa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004da0:	e02b      	b.n	8004dfa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d112      	bne.n	8004dd6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	881a      	ldrh	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	1c9a      	adds	r2, r3, #2
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dd4:	e011      	b.n	8004dfa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd6:	f7fe f9a5 	bl	8003124 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d803      	bhi.n	8004dee <HAL_SPI_Transmit+0x16c>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d102      	bne.n	8004df4 <HAL_SPI_Transmit+0x172>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004df8:	e0a4      	b.n	8004f44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ce      	bne.n	8004da2 <HAL_SPI_Transmit+0x120>
 8004e04:	e07c      	b.n	8004f00 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_SPI_Transmit+0x192>
 8004e0e:	8afb      	ldrh	r3, [r7, #22]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d170      	bne.n	8004ef6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d912      	bls.n	8004e44 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	881a      	ldrh	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	1c9a      	adds	r2, r3, #2
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b02      	subs	r3, #2
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e42:	e058      	b.n	8004ef6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	7812      	ldrb	r2, [r2, #0]
 8004e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e6a:	e044      	b.n	8004ef6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d12b      	bne.n	8004ed2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d912      	bls.n	8004eaa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	881a      	ldrh	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	1c9a      	adds	r2, r3, #2
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b02      	subs	r3, #2
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ea8:	e025      	b.n	8004ef6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	7812      	ldrb	r2, [r2, #0]
 8004eb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ed0:	e011      	b.n	8004ef6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed2:	f7fe f927 	bl	8003124 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d803      	bhi.n	8004eea <HAL_SPI_Transmit+0x268>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d102      	bne.n	8004ef0 <HAL_SPI_Transmit+0x26e>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ef4:	e026      	b.n	8004f44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1b5      	bne.n	8004e6c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	6839      	ldr	r1, [r7, #0]
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fb65 	bl	80055d4 <SPI_EndRxTxTransaction>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e000      	b.n	8004f44 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b08a      	sub	sp, #40	; 0x28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x26>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e1fb      	b.n	800537c <HAL_SPI_TransmitReceive+0x41e>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f8c:	f7fe f8ca 	bl	8003124 <HAL_GetTick>
 8004f90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004fa0:	887b      	ldrh	r3, [r7, #2]
 8004fa2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004fa4:	887b      	ldrh	r3, [r7, #2]
 8004fa6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fa8:	7efb      	ldrb	r3, [r7, #27]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d00e      	beq.n	8004fcc <HAL_SPI_TransmitReceive+0x6e>
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb4:	d106      	bne.n	8004fc4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <HAL_SPI_TransmitReceive+0x66>
 8004fbe:	7efb      	ldrb	r3, [r7, #27]
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d003      	beq.n	8004fcc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fca:	e1cd      	b.n	8005368 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_SPI_TransmitReceive+0x80>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_SPI_TransmitReceive+0x80>
 8004fd8:	887b      	ldrh	r3, [r7, #2]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fe4:	e1c0      	b.n	8005368 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d003      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2205      	movs	r2, #5
 8004ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	887a      	ldrh	r2, [r7, #2]
 800500a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	887a      	ldrh	r2, [r7, #2]
 8005012:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	887a      	ldrh	r2, [r7, #2]
 8005020:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	887a      	ldrh	r2, [r7, #2]
 8005026:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800503c:	d802      	bhi.n	8005044 <HAL_SPI_TransmitReceive+0xe6>
 800503e:	8a3b      	ldrh	r3, [r7, #16]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d908      	bls.n	8005056 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005052:	605a      	str	r2, [r3, #4]
 8005054:	e007      	b.n	8005066 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005064:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d007      	beq.n	8005084 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800508c:	d97c      	bls.n	8005188 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SPI_TransmitReceive+0x13e>
 8005096:	8a7b      	ldrh	r3, [r7, #18]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d169      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	881a      	ldrh	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	1c9a      	adds	r2, r3, #2
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050c0:	e056      	b.n	8005170 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d11b      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x1aa>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <HAL_SPI_TransmitReceive+0x1aa>
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d113      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	881a      	ldrh	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	1c9a      	adds	r2, r3, #2
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d11c      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x1f2>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	b292      	uxth	r2, r2
 800512e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	1c9a      	adds	r2, r3, #2
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800514c:	2301      	movs	r3, #1
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005150:	f7fd ffe8 	bl	8003124 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800515c:	429a      	cmp	r2, r3
 800515e:	d807      	bhi.n	8005170 <HAL_SPI_TransmitReceive+0x212>
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d003      	beq.n	8005170 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800516e:	e0fb      	b.n	8005368 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1a3      	bne.n	80050c2 <HAL_SPI_TransmitReceive+0x164>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d19d      	bne.n	80050c2 <HAL_SPI_TransmitReceive+0x164>
 8005186:	e0df      	b.n	8005348 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x23a>
 8005190:	8a7b      	ldrh	r3, [r7, #18]
 8005192:	2b01      	cmp	r3, #1
 8005194:	f040 80cb 	bne.w	800532e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d912      	bls.n	80051c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	881a      	ldrh	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	1c9a      	adds	r2, r3, #2
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b02      	subs	r3, #2
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051c6:	e0b2      	b.n	800532e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	7812      	ldrb	r2, [r2, #0]
 80051d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ee:	e09e      	b.n	800532e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d134      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x30a>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d02f      	beq.n	8005268 <HAL_SPI_TransmitReceive+0x30a>
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	2b01      	cmp	r3, #1
 800520c:	d12c      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d912      	bls.n	800523e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	881a      	ldrh	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b02      	subs	r3, #2
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800523c:	e012      	b.n	8005264 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	330c      	adds	r3, #12
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b01      	cmp	r3, #1
 8005274:	d148      	bne.n	8005308 <HAL_SPI_TransmitReceive+0x3aa>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d042      	beq.n	8005308 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d923      	bls.n	80052d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	b292      	uxth	r2, r2
 800529a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	1c9a      	adds	r2, r3, #2
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b02      	subs	r3, #2
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d81f      	bhi.n	8005304 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	e016      	b.n	8005304 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f103 020c 	add.w	r2, r3, #12
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	7812      	ldrb	r2, [r2, #0]
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005304:	2301      	movs	r3, #1
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005308:	f7fd ff0c 	bl	8003124 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005314:	429a      	cmp	r2, r3
 8005316:	d803      	bhi.n	8005320 <HAL_SPI_TransmitReceive+0x3c2>
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d102      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x3c8>
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	2b00      	cmp	r3, #0
 8005324:	d103      	bne.n	800532e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800532c:	e01c      	b.n	8005368 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	f47f af5b 	bne.w	80051f0 <HAL_SPI_TransmitReceive+0x292>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	f47f af54 	bne.w	80051f0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f941 	bl	80055d4 <SPI_EndRxTxTransaction>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d006      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	661a      	str	r2, [r3, #96]	; 0x60
 8005364:	e000      	b.n	8005368 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005366:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800537c:	4618      	mov	r0, r3
 800537e:	3728      	adds	r7, #40	; 0x28
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005392:	b2db      	uxtb	r3, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053b0:	f7fd feb8 	bl	8003124 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	4413      	add	r3, r2
 80053be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053c0:	f7fd feb0 	bl	8003124 <HAL_GetTick>
 80053c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053c6:	4b39      	ldr	r3, [pc, #228]	; (80054ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	015b      	lsls	r3, r3, #5
 80053cc:	0d1b      	lsrs	r3, r3, #20
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d6:	e054      	b.n	8005482 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	d050      	beq.n	8005482 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053e0:	f7fd fea0 	bl	8003124 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d902      	bls.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d13d      	bne.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005404:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800540e:	d111      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005418:	d004      	beq.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005422:	d107      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005432:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543c:	d10f      	bne.n	800545e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800545c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e017      	b.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	3b01      	subs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4013      	ands	r3, r2
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	bf0c      	ite	eq
 8005492:	2301      	moveq	r3, #1
 8005494:	2300      	movne	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	429a      	cmp	r2, r3
 800549e:	d19b      	bne.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000004 	.word	0x20000004

080054b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054be:	f7fd fe31 	bl	8003124 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	4413      	add	r3, r2
 80054cc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054ce:	f7fd fe29 	bl	8003124 <HAL_GetTick>
 80054d2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054d4:	4b3e      	ldr	r3, [pc, #248]	; (80055d0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	00da      	lsls	r2, r3, #3
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	0d1b      	lsrs	r3, r3, #20
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80054ec:	e062      	b.n	80055b4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054f4:	d109      	bne.n	800550a <SPI_WaitFifoStateUntilTimeout+0x5a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005508:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d050      	beq.n	80055b4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005512:	f7fd fe07 	bl	8003124 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	429a      	cmp	r2, r3
 8005520:	d902      	bls.n	8005528 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d13d      	bne.n	80055a4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005536:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005540:	d111      	bne.n	8005566 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554a:	d004      	beq.n	8005556 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005554:	d107      	bne.n	8005566 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005564:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556e:	d10f      	bne.n	8005590 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800558e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e010      	b.n	80055c6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d194      	bne.n	80054ee <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000004 	.word	0x20000004

080055d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff ff5f 	bl	80054b0 <SPI_WaitFifoStateUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e027      	b.n	8005658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	2180      	movs	r1, #128	; 0x80
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7ff fec4 	bl	80053a0 <SPI_WaitFlagStateUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005622:	f043 0220 	orr.w	r2, r3, #32
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e014      	b.n	8005658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2200      	movs	r2, #0
 8005636:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7ff ff38 	bl	80054b0 <SPI_WaitFifoStateUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564a:	f043 0220 	orr.w	r2, r3, #32
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e000      	b.n	8005658 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e040      	b.n	80056f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fd fc58 	bl	8002f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2224      	movs	r2, #36	; 0x24
 800568c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f8c0 	bl	8005824 <UART_SetConfig>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e022      	b.n	80056f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fb3c 	bl	8005d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fbc3 	bl	8005e78 <UART_CheckIdleState>
 80056f2:	4603      	mov	r3, r0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	; 0x28
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005710:	2b20      	cmp	r3, #32
 8005712:	f040 8082 	bne.w	800581a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_UART_Transmit+0x26>
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e07a      	b.n	800581c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_UART_Transmit+0x38>
 8005730:	2302      	movs	r3, #2
 8005732:	e073      	b.n	800581c <HAL_UART_Transmit+0x120>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2221      	movs	r2, #33	; 0x21
 8005748:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800574a:	f7fd fceb 	bl	8003124 <HAL_GetTick>
 800574e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005768:	d108      	bne.n	800577c <HAL_UART_Transmit+0x80>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d104      	bne.n	800577c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	e003      	b.n	8005784 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005780:	2300      	movs	r3, #0
 8005782:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800578c:	e02d      	b.n	80057ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2200      	movs	r2, #0
 8005796:	2180      	movs	r1, #128	; 0x80
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 fbb6 	bl	8005f0a <UART_WaitOnFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e039      	b.n	800581c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	881a      	ldrh	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ba:	b292      	uxth	r2, r2
 80057bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	3302      	adds	r3, #2
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	e008      	b.n	80057d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	781a      	ldrb	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	b292      	uxth	r2, r2
 80057d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3301      	adds	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1cb      	bne.n	800578e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2200      	movs	r2, #0
 80057fe:	2140      	movs	r1, #64	; 0x40
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fb82 	bl	8005f0a <UART_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e005      	b.n	800581c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e000      	b.n	800581c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800581a:	2302      	movs	r3, #2
  }
}
 800581c:	4618      	mov	r0, r3
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005828:	b08a      	sub	sp, #40	; 0x28
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	431a      	orrs	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	4313      	orrs	r3, r2
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4ba5      	ldr	r3, [pc, #660]	; (8005ae8 <UART_SetConfig+0x2c4>)
 8005854:	4013      	ands	r3, r2
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800585c:	430b      	orrs	r3, r1
 800585e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a9a      	ldr	r2, [pc, #616]	; (8005aec <UART_SetConfig+0x2c8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588c:	4313      	orrs	r3, r2
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a0:	430a      	orrs	r2, r1
 80058a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a91      	ldr	r2, [pc, #580]	; (8005af0 <UART_SetConfig+0x2cc>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d126      	bne.n	80058fc <UART_SetConfig+0xd8>
 80058ae:	4b91      	ldr	r3, [pc, #580]	; (8005af4 <UART_SetConfig+0x2d0>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d81b      	bhi.n	80058f4 <UART_SetConfig+0xd0>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0xa0>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	080058dd 	.word	0x080058dd
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058da:	e0d6      	b.n	8005a8a <UART_SetConfig+0x266>
 80058dc:	2302      	movs	r3, #2
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e2:	e0d2      	b.n	8005a8a <UART_SetConfig+0x266>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ea:	e0ce      	b.n	8005a8a <UART_SetConfig+0x266>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f2:	e0ca      	b.n	8005a8a <UART_SetConfig+0x266>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fa:	e0c6      	b.n	8005a8a <UART_SetConfig+0x266>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a7d      	ldr	r2, [pc, #500]	; (8005af8 <UART_SetConfig+0x2d4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d138      	bne.n	8005978 <UART_SetConfig+0x154>
 8005906:	4b7b      	ldr	r3, [pc, #492]	; (8005af4 <UART_SetConfig+0x2d0>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f003 030c 	and.w	r3, r3, #12
 8005910:	2b0c      	cmp	r3, #12
 8005912:	d82d      	bhi.n	8005970 <UART_SetConfig+0x14c>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <UART_SetConfig+0xf8>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005951 	.word	0x08005951
 8005920:	08005971 	.word	0x08005971
 8005924:	08005971 	.word	0x08005971
 8005928:	08005971 	.word	0x08005971
 800592c:	08005961 	.word	0x08005961
 8005930:	08005971 	.word	0x08005971
 8005934:	08005971 	.word	0x08005971
 8005938:	08005971 	.word	0x08005971
 800593c:	08005959 	.word	0x08005959
 8005940:	08005971 	.word	0x08005971
 8005944:	08005971 	.word	0x08005971
 8005948:	08005971 	.word	0x08005971
 800594c:	08005969 	.word	0x08005969
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	e098      	b.n	8005a8a <UART_SetConfig+0x266>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595e:	e094      	b.n	8005a8a <UART_SetConfig+0x266>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005966:	e090      	b.n	8005a8a <UART_SetConfig+0x266>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596e:	e08c      	b.n	8005a8a <UART_SetConfig+0x266>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005976:	e088      	b.n	8005a8a <UART_SetConfig+0x266>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a5f      	ldr	r2, [pc, #380]	; (8005afc <UART_SetConfig+0x2d8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d125      	bne.n	80059ce <UART_SetConfig+0x1aa>
 8005982:	4b5c      	ldr	r3, [pc, #368]	; (8005af4 <UART_SetConfig+0x2d0>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005988:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800598c:	2b30      	cmp	r3, #48	; 0x30
 800598e:	d016      	beq.n	80059be <UART_SetConfig+0x19a>
 8005990:	2b30      	cmp	r3, #48	; 0x30
 8005992:	d818      	bhi.n	80059c6 <UART_SetConfig+0x1a2>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d00a      	beq.n	80059ae <UART_SetConfig+0x18a>
 8005998:	2b20      	cmp	r3, #32
 800599a:	d814      	bhi.n	80059c6 <UART_SetConfig+0x1a2>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <UART_SetConfig+0x182>
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d008      	beq.n	80059b6 <UART_SetConfig+0x192>
 80059a4:	e00f      	b.n	80059c6 <UART_SetConfig+0x1a2>
 80059a6:	2300      	movs	r3, #0
 80059a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ac:	e06d      	b.n	8005a8a <UART_SetConfig+0x266>
 80059ae:	2302      	movs	r3, #2
 80059b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b4:	e069      	b.n	8005a8a <UART_SetConfig+0x266>
 80059b6:	2304      	movs	r3, #4
 80059b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059bc:	e065      	b.n	8005a8a <UART_SetConfig+0x266>
 80059be:	2308      	movs	r3, #8
 80059c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c4:	e061      	b.n	8005a8a <UART_SetConfig+0x266>
 80059c6:	2310      	movs	r3, #16
 80059c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059cc:	e05d      	b.n	8005a8a <UART_SetConfig+0x266>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a4b      	ldr	r2, [pc, #300]	; (8005b00 <UART_SetConfig+0x2dc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d125      	bne.n	8005a24 <UART_SetConfig+0x200>
 80059d8:	4b46      	ldr	r3, [pc, #280]	; (8005af4 <UART_SetConfig+0x2d0>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059e2:	2bc0      	cmp	r3, #192	; 0xc0
 80059e4:	d016      	beq.n	8005a14 <UART_SetConfig+0x1f0>
 80059e6:	2bc0      	cmp	r3, #192	; 0xc0
 80059e8:	d818      	bhi.n	8005a1c <UART_SetConfig+0x1f8>
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d00a      	beq.n	8005a04 <UART_SetConfig+0x1e0>
 80059ee:	2b80      	cmp	r3, #128	; 0x80
 80059f0:	d814      	bhi.n	8005a1c <UART_SetConfig+0x1f8>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <UART_SetConfig+0x1d8>
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d008      	beq.n	8005a0c <UART_SetConfig+0x1e8>
 80059fa:	e00f      	b.n	8005a1c <UART_SetConfig+0x1f8>
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a02:	e042      	b.n	8005a8a <UART_SetConfig+0x266>
 8005a04:	2302      	movs	r3, #2
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e03e      	b.n	8005a8a <UART_SetConfig+0x266>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a12:	e03a      	b.n	8005a8a <UART_SetConfig+0x266>
 8005a14:	2308      	movs	r3, #8
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1a:	e036      	b.n	8005a8a <UART_SetConfig+0x266>
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a22:	e032      	b.n	8005a8a <UART_SetConfig+0x266>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a30      	ldr	r2, [pc, #192]	; (8005aec <UART_SetConfig+0x2c8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d12a      	bne.n	8005a84 <UART_SetConfig+0x260>
 8005a2e:	4b31      	ldr	r3, [pc, #196]	; (8005af4 <UART_SetConfig+0x2d0>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a3c:	d01a      	beq.n	8005a74 <UART_SetConfig+0x250>
 8005a3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a42:	d81b      	bhi.n	8005a7c <UART_SetConfig+0x258>
 8005a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a48:	d00c      	beq.n	8005a64 <UART_SetConfig+0x240>
 8005a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4e:	d815      	bhi.n	8005a7c <UART_SetConfig+0x258>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <UART_SetConfig+0x238>
 8005a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a58:	d008      	beq.n	8005a6c <UART_SetConfig+0x248>
 8005a5a:	e00f      	b.n	8005a7c <UART_SetConfig+0x258>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a62:	e012      	b.n	8005a8a <UART_SetConfig+0x266>
 8005a64:	2302      	movs	r3, #2
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6a:	e00e      	b.n	8005a8a <UART_SetConfig+0x266>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a72:	e00a      	b.n	8005a8a <UART_SetConfig+0x266>
 8005a74:	2308      	movs	r3, #8
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7a:	e006      	b.n	8005a8a <UART_SetConfig+0x266>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e002      	b.n	8005a8a <UART_SetConfig+0x266>
 8005a84:	2310      	movs	r3, #16
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a17      	ldr	r2, [pc, #92]	; (8005aec <UART_SetConfig+0x2c8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	f040 808b 	bne.w	8005bac <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d834      	bhi.n	8005b08 <UART_SetConfig+0x2e4>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x280>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005b09 	.word	0x08005b09
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005b09 	.word	0x08005b09
 8005ab4:	08005ad7 	.word	0x08005ad7
 8005ab8:	08005b09 	.word	0x08005b09
 8005abc:	08005b09 	.word	0x08005b09
 8005ac0:	08005b09 	.word	0x08005b09
 8005ac4:	08005adf 	.word	0x08005adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fe fc3e 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 8005acc:	61f8      	str	r0, [r7, #28]
        break;
 8005ace:	e021      	b.n	8005b14 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <UART_SetConfig+0x2e0>)
 8005ad2:	61fb      	str	r3, [r7, #28]
        break;
 8005ad4:	e01e      	b.n	8005b14 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad6:	f7fe fb9f 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 8005ada:	61f8      	str	r0, [r7, #28]
        break;
 8005adc:	e01a      	b.n	8005b14 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae2:	61fb      	str	r3, [r7, #28]
        break;
 8005ae4:	e016      	b.n	8005b14 <UART_SetConfig+0x2f0>
 8005ae6:	bf00      	nop
 8005ae8:	efff69f3 	.word	0xefff69f3
 8005aec:	40008000 	.word	0x40008000
 8005af0:	40013800 	.word	0x40013800
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40004400 	.word	0x40004400
 8005afc:	40004800 	.word	0x40004800
 8005b00:	40004c00 	.word	0x40004c00
 8005b04:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 80fc 	beq.w	8005d14 <UART_SetConfig+0x4f0>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d305      	bcc.n	8005b38 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d903      	bls.n	8005b40 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b3e:	e0e9      	b.n	8005d14 <UART_SetConfig+0x4f0>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	2200      	movs	r2, #0
 8005b44:	461c      	mov	r4, r3
 8005b46:	4615      	mov	r5, r2
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	022b      	lsls	r3, r5, #8
 8005b52:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b56:	0222      	lsls	r2, r4, #8
 8005b58:	68f9      	ldr	r1, [r7, #12]
 8005b5a:	6849      	ldr	r1, [r1, #4]
 8005b5c:	0849      	lsrs	r1, r1, #1
 8005b5e:	2000      	movs	r0, #0
 8005b60:	4688      	mov	r8, r1
 8005b62:	4681      	mov	r9, r0
 8005b64:	eb12 0a08 	adds.w	sl, r2, r8
 8005b68:	eb43 0b09 	adc.w	fp, r3, r9
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	f7fb f83b 	bl	8000bf8 <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4613      	mov	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b90:	d308      	bcc.n	8005ba4 <UART_SetConfig+0x380>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b98:	d204      	bcs.n	8005ba4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	e0b7      	b.n	8005d14 <UART_SetConfig+0x4f0>
        }
        else
        {
          ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005baa:	e0b3      	b.n	8005d14 <UART_SetConfig+0x4f0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb4:	d15e      	bne.n	8005c74 <UART_SetConfig+0x450>
  {
    switch (clocksource)
 8005bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d827      	bhi.n	8005c0e <UART_SetConfig+0x3ea>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x3a0>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005c0f 	.word	0x08005c0f
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fe fbae 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 8005bec:	61f8      	str	r0, [r7, #28]
        break;
 8005bee:	e014      	b.n	8005c1a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fe fbc0 	bl	8004374 <HAL_RCC_GetPCLK2Freq>
 8005bf4:	61f8      	str	r0, [r7, #28]
        break;
 8005bf6:	e010      	b.n	8005c1a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b4d      	ldr	r3, [pc, #308]	; (8005d30 <UART_SetConfig+0x50c>)
 8005bfa:	61fb      	str	r3, [r7, #28]
        break;
 8005bfc:	e00d      	b.n	8005c1a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fe fb0b 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 8005c02:	61f8      	str	r0, [r7, #28]
        break;
 8005c04:	e009      	b.n	8005c1a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0a:	61fb      	str	r3, [r7, #28]
        break;
 8005c0c:	e005      	b.n	8005c1a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d079      	beq.n	8005d14 <UART_SetConfig+0x4f0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	005a      	lsls	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	085b      	lsrs	r3, r3, #1
 8005c2a:	441a      	add	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2b0f      	cmp	r3, #15
 8005c3c:	d916      	bls.n	8005c6c <UART_SetConfig+0x448>
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c44:	d212      	bcs.n	8005c6c <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f023 030f 	bic.w	r3, r3, #15
 8005c4e:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	8afb      	ldrh	r3, [r7, #22]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	8afa      	ldrh	r2, [r7, #22]
 8005c68:	60da      	str	r2, [r3, #12]
 8005c6a:	e053      	b.n	8005d14 <UART_SetConfig+0x4f0>
      }
      else
      {
        ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c72:	e04f      	b.n	8005d14 <UART_SetConfig+0x4f0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d828      	bhi.n	8005cce <UART_SetConfig+0x4aa>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <UART_SetConfig+0x460>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb9 	.word	0x08005cb9
 8005c90:	08005ccf 	.word	0x08005ccf
 8005c94:	08005cbf 	.word	0x08005cbf
 8005c98:	08005ccf 	.word	0x08005ccf
 8005c9c:	08005ccf 	.word	0x08005ccf
 8005ca0:	08005ccf 	.word	0x08005ccf
 8005ca4:	08005cc7 	.word	0x08005cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca8:	f7fe fb4e 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 8005cac:	61f8      	str	r0, [r7, #28]
        break;
 8005cae:	e014      	b.n	8005cda <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb0:	f7fe fb60 	bl	8004374 <HAL_RCC_GetPCLK2Freq>
 8005cb4:	61f8      	str	r0, [r7, #28]
        break;
 8005cb6:	e010      	b.n	8005cda <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb8:	4b1d      	ldr	r3, [pc, #116]	; (8005d30 <UART_SetConfig+0x50c>)
 8005cba:	61fb      	str	r3, [r7, #28]
        break;
 8005cbc:	e00d      	b.n	8005cda <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cbe:	f7fe faab 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 8005cc2:	61f8      	str	r0, [r7, #28]
        break;
 8005cc4:	e009      	b.n	8005cda <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cca:	61fb      	str	r3, [r7, #28]
        break;
 8005ccc:	e005      	b.n	8005cda <UART_SetConfig+0x4b6>
      default:
        pclk = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cd8:	bf00      	nop
    }

    if (pclk != 0U)
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d019      	beq.n	8005d14 <UART_SetConfig+0x4f0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	085a      	lsrs	r2, r3, #1
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	441a      	add	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b0f      	cmp	r3, #15
 8005cfa:	d908      	bls.n	8005d0e <UART_SetConfig+0x4ea>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d02:	d204      	bcs.n	8005d0e <UART_SetConfig+0x4ea>
      {
        huart->Instance->BRR = usartdiv;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	60da      	str	r2, [r3, #12]
 8005d0c:	e002      	b.n	8005d14 <UART_SetConfig+0x4f0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3728      	adds	r7, #40	; 0x28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d2e:	bf00      	nop
 8005d30:	00f42400 	.word	0x00f42400

08005d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e32:	d10a      	bne.n	8005e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e88:	f7fd f94c 	bl	8003124 <HAL_GetTick>
 8005e8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d10e      	bne.n	8005eba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f82d 	bl	8005f0a <UART_WaitOnFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e023      	b.n	8005f02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d10e      	bne.n	8005ee6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f817 	bl	8005f0a <UART_WaitOnFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e00d      	b.n	8005f02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4613      	mov	r3, r2
 8005f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1a:	e05e      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d05a      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f24:	f7fd f8fe 	bl	8003124 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d302      	bcc.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x30>
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d11b      	bne.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e043      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d02c      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8e:	d124      	bne.n	8005fda <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f98:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fa8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0201 	bic.w	r2, r2, #1
 8005fb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e00f      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	bf0c      	ite	eq
 8005fea:	2301      	moveq	r3, #1
 8005fec:	2300      	movne	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d091      	beq.n	8005f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006008:	4904      	ldr	r1, [pc, #16]	; (800601c <MX_FATFS_Init+0x18>)
 800600a:	4805      	ldr	r0, [pc, #20]	; (8006020 <MX_FATFS_Init+0x1c>)
 800600c:	f003 f82e 	bl	800906c <FATFS_LinkDriver>
 8006010:	4603      	mov	r3, r0
 8006012:	461a      	mov	r2, r3
 8006014:	4b03      	ldr	r3, [pc, #12]	; (8006024 <MX_FATFS_Init+0x20>)
 8006016:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006018:	bf00      	nop
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20002938 	.word	0x20002938
 8006020:	20000010 	.word	0x20000010
 8006024:	20002934 	.word	0x20002934

08006028 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800602c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800602e:	4618      	mov	r0, r3
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//    Stat = STA_NOINIT;
	//    return Stat;
	    return SD_disk_initialize(pdrv);
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	4618      	mov	r0, r3
 8006046:	f7fb fcc5 	bl	80019d4 <SD_disk_initialize>
 800604a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	//    Stat = STA_NOINIT;
	//    return Stat;
		 return SD_disk_status(pdrv);
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	4618      	mov	r0, r3
 8006062:	f7fb fda1 	bl	8001ba8 <SD_disk_status>
 8006066:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	//    return RES_OK;
		return SD_disk_read(pdrv, buff, sector, count);
 8006080:	7bf8      	ldrb	r0, [r7, #15]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	f7fb fda4 	bl	8001bd4 <SD_disk_read>
 800608c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
 80060a2:	4603      	mov	r3, r0
 80060a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	 //   return RES_OK;
		 return SD_disk_write(pdrv, buff, sector, count);
 80060a6:	7bf8      	ldrb	r0, [r7, #15]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	f7fb fdfb 	bl	8001ca8 <SD_disk_write>
 80060b2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	603a      	str	r2, [r7, #0]
 80060c6:	71fb      	strb	r3, [r7, #7]
 80060c8:	460b      	mov	r3, r1
 80060ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	//    DRESULT res = RES_ERROR;
	//    return res;
		 return SD_disk_ioctl(pdrv, cmd, buff);
 80060cc:	79b9      	ldrb	r1, [r7, #6]
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fb fe6c 	bl	8001db0 <SD_disk_ioctl>
 80060d8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	4a08      	ldr	r2, [pc, #32]	; (8006114 <disk_status+0x30>)
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	79fa      	ldrb	r2, [r7, #7]
 80060fc:	4905      	ldr	r1, [pc, #20]	; (8006114 <disk_status+0x30>)
 80060fe:	440a      	add	r2, r1
 8006100:	7a12      	ldrb	r2, [r2, #8]
 8006102:	4610      	mov	r0, r2
 8006104:	4798      	blx	r3
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]
  return stat;
 800610a:	7bfb      	ldrb	r3, [r7, #15]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20002b64 	.word	0x20002b64

08006118 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	4a0d      	ldr	r2, [pc, #52]	; (8006160 <disk_initialize+0x48>)
 800612a:	5cd3      	ldrb	r3, [r2, r3]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d111      	bne.n	8006154 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	4a0b      	ldr	r2, [pc, #44]	; (8006160 <disk_initialize+0x48>)
 8006134:	2101      	movs	r1, #1
 8006136:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	4a09      	ldr	r2, [pc, #36]	; (8006160 <disk_initialize+0x48>)
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	79fa      	ldrb	r2, [r7, #7]
 8006146:	4906      	ldr	r1, [pc, #24]	; (8006160 <disk_initialize+0x48>)
 8006148:	440a      	add	r2, r1
 800614a:	7a12      	ldrb	r2, [r2, #8]
 800614c:	4610      	mov	r0, r2
 800614e:	4798      	blx	r3
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20002b64 	.word	0x20002b64

08006164 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	4603      	mov	r3, r0
 8006172:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <disk_read+0x3c>)
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	689c      	ldr	r4, [r3, #8]
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	4a07      	ldr	r2, [pc, #28]	; (80061a0 <disk_read+0x3c>)
 8006184:	4413      	add	r3, r2
 8006186:	7a18      	ldrb	r0, [r3, #8]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	47a0      	blx	r4
 8006190:	4603      	mov	r3, r0
 8006192:	75fb      	strb	r3, [r7, #23]
  return res;
 8006194:	7dfb      	ldrb	r3, [r7, #23]
}
 8006196:	4618      	mov	r0, r3
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	bd90      	pop	{r4, r7, pc}
 800619e:	bf00      	nop
 80061a0:	20002b64 	.word	0x20002b64

080061a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	4603      	mov	r3, r0
 80061b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <disk_write+0x3c>)
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	68dc      	ldr	r4, [r3, #12]
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	4a07      	ldr	r2, [pc, #28]	; (80061e0 <disk_write+0x3c>)
 80061c4:	4413      	add	r3, r2
 80061c6:	7a18      	ldrb	r0, [r3, #8]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	47a0      	blx	r4
 80061d0:	4603      	mov	r3, r0
 80061d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd90      	pop	{r4, r7, pc}
 80061de:	bf00      	nop
 80061e0:	20002b64 	.word	0x20002b64

080061e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	603a      	str	r2, [r7, #0]
 80061ee:	71fb      	strb	r3, [r7, #7]
 80061f0:	460b      	mov	r3, r1
 80061f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <disk_ioctl+0x38>)
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	79fa      	ldrb	r2, [r7, #7]
 8006202:	4906      	ldr	r1, [pc, #24]	; (800621c <disk_ioctl+0x38>)
 8006204:	440a      	add	r2, r1
 8006206:	7a10      	ldrb	r0, [r2, #8]
 8006208:	79b9      	ldrb	r1, [r7, #6]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	4798      	blx	r3
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
  return res;
 8006212:	7bfb      	ldrb	r3, [r7, #15]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20002b64 	.word	0x20002b64

08006220 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3301      	adds	r3, #1
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006230:	89fb      	ldrh	r3, [r7, #14]
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	b21a      	sxth	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	b21b      	sxth	r3, r3
 800623c:	4313      	orrs	r3, r2
 800623e:	b21b      	sxth	r3, r3
 8006240:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006242:	89fb      	ldrh	r3, [r7, #14]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3303      	adds	r3, #3
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	3202      	adds	r2, #2
 8006268:	7812      	ldrb	r2, [r2, #0]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	3201      	adds	r2, #1
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
	return rv;
 8006288:	68fb      	ldr	r3, [r7, #12]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	887a      	ldrh	r2, [r7, #2]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	887b      	ldrh	r3, [r7, #2]
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	887a      	ldrh	r2, [r7, #2]
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	607a      	str	r2, [r7, #4]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	0a1b      	lsrs	r3, r3, #8
 800630a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00d      	beq.n	800635a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	1c53      	adds	r3, r2, #1
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	6179      	str	r1, [r7, #20]
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3b01      	subs	r3, #1
 8006352:	607b      	str	r3, [r7, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f1      	bne.n	800633e <mem_cpy+0x1a>
	}
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006366:	b480      	push	{r7}
 8006368:	b087      	sub	sp, #28
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	617a      	str	r2, [r7, #20]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3b01      	subs	r3, #1
 8006386:	607b      	str	r3, [r7, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f3      	bne.n	8006376 <mem_set+0x10>
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800639c:	b480      	push	{r7}
 800639e:	b089      	sub	sp, #36	; 0x24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	61fa      	str	r2, [r7, #28]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	4619      	mov	r1, r3
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	61ba      	str	r2, [r7, #24]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	1acb      	subs	r3, r1, r3
 80063c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	607b      	str	r3, [r7, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <mem_cmp+0x40>
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0eb      	beq.n	80063b4 <mem_cmp+0x18>

	return r;
 80063dc:	697b      	ldr	r3, [r7, #20]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3724      	adds	r7, #36	; 0x24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80063f4:	e002      	b.n	80063fc <chk_chr+0x12>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3301      	adds	r3, #1
 80063fa:	607b      	str	r3, [r7, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <chk_chr+0x26>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	4293      	cmp	r3, r2
 800640e:	d1f2      	bne.n	80063f6 <chk_chr+0xc>
	return *str;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	781b      	ldrb	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800642a:	2300      	movs	r3, #0
 800642c:	60bb      	str	r3, [r7, #8]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e029      	b.n	8006488 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006434:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <chk_lock+0xb4>)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	4413      	add	r3, r2
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01d      	beq.n	800647e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006442:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <chk_lock+0xb4>)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	4413      	add	r3, r2
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d116      	bne.n	8006482 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006454:	4a1f      	ldr	r2, [pc, #124]	; (80064d4 <chk_lock+0xb4>)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	4413      	add	r3, r2
 800645c:	3304      	adds	r3, #4
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006464:	429a      	cmp	r2, r3
 8006466:	d10c      	bne.n	8006482 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006468:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <chk_lock+0xb4>)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	4413      	add	r3, r2
 8006470:	3308      	adds	r3, #8
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006478:	429a      	cmp	r2, r3
 800647a:	d102      	bne.n	8006482 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800647c:	e007      	b.n	800648e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800647e:	2301      	movs	r3, #1
 8006480:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3301      	adds	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d9d2      	bls.n	8006434 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d109      	bne.n	80064a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <chk_lock+0x80>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d101      	bne.n	80064a4 <chk_lock+0x84>
 80064a0:	2300      	movs	r3, #0
 80064a2:	e010      	b.n	80064c6 <chk_lock+0xa6>
 80064a4:	2312      	movs	r3, #18
 80064a6:	e00e      	b.n	80064c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d108      	bne.n	80064c0 <chk_lock+0xa0>
 80064ae:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <chk_lock+0xb4>)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	4413      	add	r3, r2
 80064b6:	330c      	adds	r3, #12
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064be:	d101      	bne.n	80064c4 <chk_lock+0xa4>
 80064c0:	2310      	movs	r3, #16
 80064c2:	e000      	b.n	80064c6 <chk_lock+0xa6>
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20002944 	.word	0x20002944

080064d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80064de:	2300      	movs	r3, #0
 80064e0:	607b      	str	r3, [r7, #4]
 80064e2:	e002      	b.n	80064ea <enq_lock+0x12>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3301      	adds	r3, #1
 80064e8:	607b      	str	r3, [r7, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d806      	bhi.n	80064fe <enq_lock+0x26>
 80064f0:	4a09      	ldr	r2, [pc, #36]	; (8006518 <enq_lock+0x40>)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	4413      	add	r3, r2
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f2      	bne.n	80064e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b02      	cmp	r3, #2
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	20002944 	.word	0x20002944

0800651c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	e01f      	b.n	800656c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800652c:	4a41      	ldr	r2, [pc, #260]	; (8006634 <inc_lock+0x118>)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	4413      	add	r3, r2
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d113      	bne.n	8006566 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800653e:	4a3d      	ldr	r2, [pc, #244]	; (8006634 <inc_lock+0x118>)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	4413      	add	r3, r2
 8006546:	3304      	adds	r3, #4
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800654e:	429a      	cmp	r2, r3
 8006550:	d109      	bne.n	8006566 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006552:	4a38      	ldr	r2, [pc, #224]	; (8006634 <inc_lock+0x118>)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	4413      	add	r3, r2
 800655a:	3308      	adds	r3, #8
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006562:	429a      	cmp	r2, r3
 8006564:	d006      	beq.n	8006574 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d9dc      	bls.n	800652c <inc_lock+0x10>
 8006572:	e000      	b.n	8006576 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006574:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d132      	bne.n	80065e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	e002      	b.n	8006588 <inc_lock+0x6c>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3301      	adds	r3, #1
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d806      	bhi.n	800659c <inc_lock+0x80>
 800658e:	4a29      	ldr	r2, [pc, #164]	; (8006634 <inc_lock+0x118>)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	4413      	add	r3, r2
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f2      	bne.n	8006582 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d101      	bne.n	80065a6 <inc_lock+0x8a>
 80065a2:	2300      	movs	r3, #0
 80065a4:	e040      	b.n	8006628 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4922      	ldr	r1, [pc, #136]	; (8006634 <inc_lock+0x118>)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	440b      	add	r3, r1
 80065b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	491e      	ldr	r1, [pc, #120]	; (8006634 <inc_lock+0x118>)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	440b      	add	r3, r1
 80065c0:	3304      	adds	r3, #4
 80065c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	695a      	ldr	r2, [r3, #20]
 80065c8:	491a      	ldr	r1, [pc, #104]	; (8006634 <inc_lock+0x118>)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	440b      	add	r3, r1
 80065d0:	3308      	adds	r3, #8
 80065d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80065d4:	4a17      	ldr	r2, [pc, #92]	; (8006634 <inc_lock+0x118>)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	4413      	add	r3, r2
 80065dc:	330c      	adds	r3, #12
 80065de:	2200      	movs	r2, #0
 80065e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d009      	beq.n	80065fc <inc_lock+0xe0>
 80065e8:	4a12      	ldr	r2, [pc, #72]	; (8006634 <inc_lock+0x118>)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	4413      	add	r3, r2
 80065f0:	330c      	adds	r3, #12
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <inc_lock+0xe0>
 80065f8:	2300      	movs	r3, #0
 80065fa:	e015      	b.n	8006628 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d108      	bne.n	8006614 <inc_lock+0xf8>
 8006602:	4a0c      	ldr	r2, [pc, #48]	; (8006634 <inc_lock+0x118>)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	4413      	add	r3, r2
 800660a:	330c      	adds	r3, #12
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	3301      	adds	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	e001      	b.n	8006618 <inc_lock+0xfc>
 8006614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006618:	4906      	ldr	r1, [pc, #24]	; (8006634 <inc_lock+0x118>)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	440b      	add	r3, r1
 8006620:	330c      	adds	r3, #12
 8006622:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20002944 	.word	0x20002944

08006638 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3b01      	subs	r3, #1
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d825      	bhi.n	8006698 <dec_lock+0x60>
		n = Files[i].ctr;
 800664c:	4a17      	ldr	r2, [pc, #92]	; (80066ac <dec_lock+0x74>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	4413      	add	r3, r2
 8006654:	330c      	adds	r3, #12
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800665a:	89fb      	ldrh	r3, [r7, #14]
 800665c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006660:	d101      	bne.n	8006666 <dec_lock+0x2e>
 8006662:	2300      	movs	r3, #0
 8006664:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006666:	89fb      	ldrh	r3, [r7, #14]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <dec_lock+0x3a>
 800666c:	89fb      	ldrh	r3, [r7, #14]
 800666e:	3b01      	subs	r3, #1
 8006670:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006672:	4a0e      	ldr	r2, [pc, #56]	; (80066ac <dec_lock+0x74>)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	4413      	add	r3, r2
 800667a:	330c      	adds	r3, #12
 800667c:	89fa      	ldrh	r2, [r7, #14]
 800667e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006680:	89fb      	ldrh	r3, [r7, #14]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d105      	bne.n	8006692 <dec_lock+0x5a>
 8006686:	4a09      	ldr	r2, [pc, #36]	; (80066ac <dec_lock+0x74>)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	4413      	add	r3, r2
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	737b      	strb	r3, [r7, #13]
 8006696:	e001      	b.n	800669c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006698:	2302      	movs	r3, #2
 800669a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800669c:	7b7b      	ldrb	r3, [r7, #13]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	20002944 	.word	0x20002944

080066b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	e010      	b.n	80066e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80066be:	4a0d      	ldr	r2, [pc, #52]	; (80066f4 <clear_lock+0x44>)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	4413      	add	r3, r2
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d105      	bne.n	80066da <clear_lock+0x2a>
 80066ce:	4a09      	ldr	r2, [pc, #36]	; (80066f4 <clear_lock+0x44>)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	4413      	add	r3, r2
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3301      	adds	r3, #1
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d9eb      	bls.n	80066be <clear_lock+0xe>
	}
}
 80066e6:	bf00      	nop
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	20002944 	.word	0x20002944

080066f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	78db      	ldrb	r3, [r3, #3]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d034      	beq.n	8006776 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	7858      	ldrb	r0, [r3, #1]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800671c:	2301      	movs	r3, #1
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	f7ff fd40 	bl	80061a4 <disk_write>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <sync_window+0x38>
			res = FR_DISK_ERR;
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
 800672e:	e022      	b.n	8006776 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	1ad2      	subs	r2, r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	429a      	cmp	r2, r3
 8006744:	d217      	bcs.n	8006776 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	789b      	ldrb	r3, [r3, #2]
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	e010      	b.n	8006770 <sync_window+0x78>
					wsect += fs->fsize;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4413      	add	r3, r2
 8006756:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	7858      	ldrb	r0, [r3, #1]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006762:	2301      	movs	r3, #1
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	f7ff fd1d 	bl	80061a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	3b01      	subs	r3, #1
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d8eb      	bhi.n	800674e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d01b      	beq.n	80067d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff ffad 	bl	80066f8 <sync_window>
 800679e:	4603      	mov	r3, r0
 80067a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d113      	bne.n	80067d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7858      	ldrb	r0, [r3, #1]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067b2:	2301      	movs	r3, #1
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	f7ff fcd5 	bl	8006164 <disk_read>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d004      	beq.n	80067ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80067c0:	f04f 33ff 	mov.w	r3, #4294967295
 80067c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff ff87 	bl	80066f8 <sync_window>
 80067ea:	4603      	mov	r3, r0
 80067ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d159      	bne.n	80068a8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d149      	bne.n	8006890 <sync_fs+0xb4>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	791b      	ldrb	r3, [r3, #4]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d145      	bne.n	8006890 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	899b      	ldrh	r3, [r3, #12]
 800680e:	461a      	mov	r2, r3
 8006810:	2100      	movs	r1, #0
 8006812:	f7ff fda8 	bl	8006366 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3338      	adds	r3, #56	; 0x38
 800681a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800681e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff fd37 	bl	8006296 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3338      	adds	r3, #56	; 0x38
 800682c:	4921      	ldr	r1, [pc, #132]	; (80068b4 <sync_fs+0xd8>)
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fd4c 	bl	80062cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3338      	adds	r3, #56	; 0x38
 8006838:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800683c:	491e      	ldr	r1, [pc, #120]	; (80068b8 <sync_fs+0xdc>)
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fd44 	bl	80062cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3338      	adds	r3, #56	; 0x38
 8006848:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f7ff fd3a 	bl	80062cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3338      	adds	r3, #56	; 0x38
 800685c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f7ff fd30 	bl	80062cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	7858      	ldrb	r0, [r3, #1]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006884:	2301      	movs	r3, #1
 8006886:	f7ff fc8d 	bl	80061a4 <disk_write>
			fs->fsi_flag = 0;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	2200      	movs	r2, #0
 8006896:	2100      	movs	r1, #0
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fca3 	bl	80061e4 <disk_ioctl>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <sync_fs+0xcc>
 80068a4:	2301      	movs	r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	41615252 	.word	0x41615252
 80068b8:	61417272 	.word	0x61417272

080068bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	3b02      	subs	r3, #2
 80068ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	3b02      	subs	r3, #2
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d301      	bcc.n	80068dc <clust2sect+0x20>
 80068d8:	2300      	movs	r3, #0
 80068da:	e008      	b.n	80068ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	895b      	ldrh	r3, [r3, #10]
 80068e0:	461a      	mov	r2, r3
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	fb03 f202 	mul.w	r2, r3, r2
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	4413      	add	r3, r2
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d904      	bls.n	800691a <get_fat+0x20>
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <get_fat+0x26>
		val = 1;	/* Internal error */
 800691a:	2301      	movs	r3, #1
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	e0bb      	b.n	8006a98 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006920:	f04f 33ff 	mov.w	r3, #4294967295
 8006924:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b03      	cmp	r3, #3
 800692c:	f000 8083 	beq.w	8006a36 <get_fat+0x13c>
 8006930:	2b03      	cmp	r3, #3
 8006932:	f300 80a7 	bgt.w	8006a84 <get_fat+0x18a>
 8006936:	2b01      	cmp	r3, #1
 8006938:	d002      	beq.n	8006940 <get_fat+0x46>
 800693a:	2b02      	cmp	r3, #2
 800693c:	d056      	beq.n	80069ec <get_fat+0xf2>
 800693e:	e0a1      	b.n	8006a84 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	085b      	lsrs	r3, r3, #1
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	899b      	ldrh	r3, [r3, #12]
 8006956:	4619      	mov	r1, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	fbb3 f3f1 	udiv	r3, r3, r1
 800695e:	4413      	add	r3, r2
 8006960:	4619      	mov	r1, r3
 8006962:	6938      	ldr	r0, [r7, #16]
 8006964:	f7ff ff0c 	bl	8006780 <move_window>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 808d 	bne.w	8006a8a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	60fa      	str	r2, [r7, #12]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	8992      	ldrh	r2, [r2, #12]
 800697a:	fbb3 f1f2 	udiv	r1, r3, r2
 800697e:	fb01 f202 	mul.w	r2, r1, r2
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4413      	add	r3, r2
 8006988:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800698c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	899b      	ldrh	r3, [r3, #12]
 8006996:	4619      	mov	r1, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	fbb3 f3f1 	udiv	r3, r3, r1
 800699e:	4413      	add	r3, r2
 80069a0:	4619      	mov	r1, r3
 80069a2:	6938      	ldr	r0, [r7, #16]
 80069a4:	f7ff feec 	bl	8006780 <move_window>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d16f      	bne.n	8006a8e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	899b      	ldrh	r3, [r3, #12]
 80069b2:	461a      	mov	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80069ba:	fb01 f202 	mul.w	r2, r1, r2
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4413      	add	r3, r2
 80069c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	461a      	mov	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <get_fat+0xe8>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	091b      	lsrs	r3, r3, #4
 80069e0:	e002      	b.n	80069e8 <get_fat+0xee>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e8:	617b      	str	r3, [r7, #20]
			break;
 80069ea:	e055      	b.n	8006a98 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	899b      	ldrh	r3, [r3, #12]
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4619      	mov	r1, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a00:	4413      	add	r3, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	6938      	ldr	r0, [r7, #16]
 8006a06:	f7ff febb 	bl	8006780 <move_window>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d140      	bne.n	8006a92 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	8992      	ldrh	r2, [r2, #12]
 8006a1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a22:	fb00 f202 	mul.w	r2, r0, r2
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	440b      	add	r3, r1
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fbf8 	bl	8006220 <ld_word>
 8006a30:	4603      	mov	r3, r0
 8006a32:	617b      	str	r3, [r7, #20]
			break;
 8006a34:	e030      	b.n	8006a98 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	899b      	ldrh	r3, [r3, #12]
 8006a3e:	089b      	lsrs	r3, r3, #2
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	4619      	mov	r1, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a4a:	4413      	add	r3, r2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6938      	ldr	r0, [r7, #16]
 8006a50:	f7ff fe96 	bl	8006780 <move_window>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d11d      	bne.n	8006a96 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	8992      	ldrh	r2, [r2, #12]
 8006a68:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a6c:	fb00 f202 	mul.w	r2, r0, r2
 8006a70:	1a9b      	subs	r3, r3, r2
 8006a72:	440b      	add	r3, r1
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fbeb 	bl	8006250 <ld_dword>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a80:	617b      	str	r3, [r7, #20]
			break;
 8006a82:	e009      	b.n	8006a98 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006a84:	2301      	movs	r3, #1
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	e006      	b.n	8006a98 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a8a:	bf00      	nop
 8006a8c:	e004      	b.n	8006a98 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a8e:	bf00      	nop
 8006a90:	e002      	b.n	8006a98 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a92:	bf00      	nop
 8006a94:	e000      	b.n	8006a98 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a96:	bf00      	nop
		}
	}

	return val;
 8006a98:	697b      	ldr	r3, [r7, #20]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006aa2:	b590      	push	{r4, r7, lr}
 8006aa4:	b089      	sub	sp, #36	; 0x24
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	f240 8102 	bls.w	8006cbe <put_fat+0x21c>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	f080 80fc 	bcs.w	8006cbe <put_fat+0x21c>
		switch (fs->fs_type) {
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	f000 80b6 	beq.w	8006c3c <put_fat+0x19a>
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	f300 80fd 	bgt.w	8006cd0 <put_fat+0x22e>
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d003      	beq.n	8006ae2 <put_fat+0x40>
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	f000 8083 	beq.w	8006be6 <put_fat+0x144>
 8006ae0:	e0f6      	b.n	8006cd0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	4413      	add	r3, r2
 8006aee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	899b      	ldrh	r3, [r3, #12]
 8006af8:	4619      	mov	r1, r3
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b00:	4413      	add	r3, r2
 8006b02:	4619      	mov	r1, r3
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f7ff fe3b 	bl	8006780 <move_window>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b0e:	7ffb      	ldrb	r3, [r7, #31]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f040 80d6 	bne.w	8006cc2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	61ba      	str	r2, [r7, #24]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	8992      	ldrh	r2, [r2, #12]
 8006b26:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b2a:	fb00 f202 	mul.w	r2, r0, r2
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	440b      	add	r3, r1
 8006b32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00d      	beq.n	8006b5a <put_fat+0xb8>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	b25b      	sxtb	r3, r3
 8006b44:	f003 030f 	and.w	r3, r3, #15
 8006b48:	b25a      	sxtb	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	b25b      	sxtb	r3, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b25b      	sxtb	r3, r3
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	e001      	b.n	8006b5e <put_fat+0xbc>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	899b      	ldrh	r3, [r3, #12]
 8006b70:	4619      	mov	r1, r3
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b78:	4413      	add	r3, r2
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7ff fdff 	bl	8006780 <move_window>
 8006b82:	4603      	mov	r3, r0
 8006b84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b86:	7ffb      	ldrb	r3, [r7, #31]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f040 809c 	bne.w	8006cc6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	899b      	ldrh	r3, [r3, #12]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ba0:	fb00 f202 	mul.w	r2, r0, r2
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <put_fat+0x11a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	091b      	lsrs	r3, r3, #4
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	e00e      	b.n	8006bda <put_fat+0x138>
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	b25b      	sxtb	r3, r3
 8006bc2:	f023 030f 	bic.w	r3, r3, #15
 8006bc6:	b25a      	sxtb	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	b25b      	sxtb	r3, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b25b      	sxtb	r3, r3
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	70da      	strb	r2, [r3, #3]
			break;
 8006be4:	e074      	b.n	8006cd0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	899b      	ldrh	r3, [r3, #12]
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fdbe 	bl	8006780 <move_window>
 8006c04:	4603      	mov	r3, r0
 8006c06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c08:	7ffb      	ldrb	r3, [r7, #31]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d15d      	bne.n	8006cca <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	8992      	ldrh	r2, [r2, #12]
 8006c1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c20:	fb00 f202 	mul.w	r2, r0, r2
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	440b      	add	r3, r1
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	b292      	uxth	r2, r2
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fb31 	bl	8006296 <st_word>
			fs->wflag = 1;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2201      	movs	r2, #1
 8006c38:	70da      	strb	r2, [r3, #3]
			break;
 8006c3a:	e049      	b.n	8006cd0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	899b      	ldrh	r3, [r3, #12]
 8006c44:	089b      	lsrs	r3, r3, #2
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	4619      	mov	r1, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c50:	4413      	add	r3, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff fd93 	bl	8006780 <move_window>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c5e:	7ffb      	ldrb	r3, [r7, #31]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d134      	bne.n	8006cce <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	8992      	ldrh	r2, [r2, #12]
 8006c78:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c7c:	fb00 f202 	mul.w	r2, r0, r2
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	440b      	add	r3, r1
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fae3 	bl	8006250 <ld_dword>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006c90:	4323      	orrs	r3, r4
 8006c92:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	8992      	ldrh	r2, [r2, #12]
 8006ca2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ca6:	fb00 f202 	mul.w	r2, r0, r2
 8006caa:	1a9b      	subs	r3, r3, r2
 8006cac:	440b      	add	r3, r1
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fb0b 	bl	80062cc <st_dword>
			fs->wflag = 1;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	70da      	strb	r2, [r3, #3]
			break;
 8006cbc:	e008      	b.n	8006cd0 <put_fat+0x22e>
		}
	}
 8006cbe:	bf00      	nop
 8006cc0:	e006      	b.n	8006cd0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006cc2:	bf00      	nop
 8006cc4:	e004      	b.n	8006cd0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006cc6:	bf00      	nop
 8006cc8:	e002      	b.n	8006cd0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006cca:	bf00      	nop
 8006ccc:	e000      	b.n	8006cd0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006cce:	bf00      	nop
	return res;
 8006cd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3724      	adds	r7, #36	; 0x24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd90      	pop	{r4, r7, pc}

08006cda <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b088      	sub	sp, #32
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d904      	bls.n	8006d00 <remove_chain+0x26>
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d301      	bcc.n	8006d04 <remove_chain+0x2a>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e04b      	b.n	8006d9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00c      	beq.n	8006d24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	69b8      	ldr	r0, [r7, #24]
 8006d12:	f7ff fec6 	bl	8006aa2 <put_fat>
 8006d16:	4603      	mov	r3, r0
 8006d18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006d1a:	7ffb      	ldrb	r3, [r7, #31]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <remove_chain+0x4a>
 8006d20:	7ffb      	ldrb	r3, [r7, #31]
 8006d22:	e03b      	b.n	8006d9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7ff fde7 	bl	80068fa <get_fat>
 8006d2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d031      	beq.n	8006d98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <remove_chain+0x64>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e02e      	b.n	8006d9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d101      	bne.n	8006d4a <remove_chain+0x70>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e028      	b.n	8006d9c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	69b8      	ldr	r0, [r7, #24]
 8006d50:	f7ff fea7 	bl	8006aa2 <put_fat>
 8006d54:	4603      	mov	r3, r0
 8006d56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006d58:	7ffb      	ldrb	r3, [r7, #31]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <remove_chain+0x88>
 8006d5e:	7ffb      	ldrb	r3, [r7, #31]
 8006d60:	e01c      	b.n	8006d9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	699a      	ldr	r2, [r3, #24]
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	3b02      	subs	r3, #2
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d20b      	bcs.n	8006d88 <remove_chain+0xae>
			fs->free_clst++;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	791b      	ldrb	r3, [r3, #4]
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d3c6      	bcc.n	8006d24 <remove_chain+0x4a>
 8006d96:	e000      	b.n	8006d9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006d98:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <create_chain+0x2c>
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d31b      	bcc.n	8006e08 <create_chain+0x64>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	e018      	b.n	8006e08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fd8e 	bl	80068fa <get_fat>
 8006dde:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d801      	bhi.n	8006dea <create_chain+0x46>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e070      	b.n	8006ecc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d101      	bne.n	8006df6 <create_chain+0x52>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	e06a      	b.n	8006ecc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d201      	bcs.n	8006e04 <create_chain+0x60>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	e063      	b.n	8006ecc <create_chain+0x128>
		scl = clst;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d307      	bcc.n	8006e2c <create_chain+0x88>
				ncl = 2;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d901      	bls.n	8006e2c <create_chain+0x88>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e04f      	b.n	8006ecc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006e2c:	69f9      	ldr	r1, [r7, #28]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff fd63 	bl	80068fa <get_fat>
 8006e34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00e      	beq.n	8006e5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d003      	beq.n	8006e4a <create_chain+0xa6>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d101      	bne.n	8006e4e <create_chain+0xaa>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	e03e      	b.n	8006ecc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d1da      	bne.n	8006e0c <create_chain+0x68>
 8006e56:	2300      	movs	r3, #0
 8006e58:	e038      	b.n	8006ecc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006e5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e60:	69f9      	ldr	r1, [r7, #28]
 8006e62:	6938      	ldr	r0, [r7, #16]
 8006e64:	f7ff fe1d 	bl	8006aa2 <put_fat>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <create_chain+0xe2>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d006      	beq.n	8006e86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6938      	ldr	r0, [r7, #16]
 8006e7e:	f7ff fe10 	bl	8006aa2 <put_fat>
 8006e82:	4603      	mov	r3, r0
 8006e84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d116      	bne.n	8006eba <create_chain+0x116>
		fs->last_clst = ncl;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	3b02      	subs	r3, #2
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d804      	bhi.n	8006eaa <create_chain+0x106>
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	1e5a      	subs	r2, r3, #1
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	791b      	ldrb	r3, [r3, #4]
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	711a      	strb	r2, [r3, #4]
 8006eb8:	e007      	b.n	8006eca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d102      	bne.n	8006ec6 <create_chain+0x122>
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec4:	e000      	b.n	8006ec8 <create_chain+0x124>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006eca:	69fb      	ldr	r3, [r7, #28]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	3304      	adds	r3, #4
 8006eea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	899b      	ldrh	r3, [r3, #12]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	8952      	ldrh	r2, [r2, #10]
 8006efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1d1a      	adds	r2, r3, #4
 8006f06:	613a      	str	r2, [r7, #16]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <clmt_clust+0x42>
 8006f12:	2300      	movs	r3, #0
 8006f14:	e010      	b.n	8006f38 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d307      	bcc.n	8006f2e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	3304      	adds	r3, #4
 8006f2a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f2c:	e7e9      	b.n	8006f02 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006f2e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	4413      	add	r3, r2
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f5a:	d204      	bcs.n	8006f66 <dir_sdi+0x22>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006f66:	2302      	movs	r3, #2
 8006f68:	e071      	b.n	800704e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <dir_sdi+0x46>
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d902      	bls.n	8006f8a <dir_sdi+0x46>
		clst = fs->dirbase;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10c      	bne.n	8006faa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	8912      	ldrh	r2, [r2, #8]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d301      	bcc.n	8006fa0 <dir_sdi+0x5c>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e056      	b.n	800704e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	61da      	str	r2, [r3, #28]
 8006fa8:	e02d      	b.n	8007006 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	895b      	ldrh	r3, [r3, #10]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	899b      	ldrh	r3, [r3, #12]
 8006fb4:	fb02 f303 	mul.w	r3, r2, r3
 8006fb8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006fba:	e019      	b.n	8006ff0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6979      	ldr	r1, [r7, #20]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff fc9a 	bl	80068fa <get_fat>
 8006fc6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fce:	d101      	bne.n	8006fd4 <dir_sdi+0x90>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e03c      	b.n	800704e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d904      	bls.n	8006fe4 <dir_sdi+0xa0>
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d301      	bcc.n	8006fe8 <dir_sdi+0xa4>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e032      	b.n	800704e <dir_sdi+0x10a>
			ofs -= csz;
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d2e1      	bcs.n	8006fbc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006ff8:	6979      	ldr	r1, [r7, #20]
 8006ffa:	6938      	ldr	r0, [r7, #16]
 8006ffc:	f7ff fc5e 	bl	80068bc <clust2sect>
 8007000:	4602      	mov	r2, r0
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <dir_sdi+0xd4>
 8007014:	2302      	movs	r3, #2
 8007016:	e01a      	b.n	800704e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	69da      	ldr	r2, [r3, #28]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	899b      	ldrh	r3, [r3, #12]
 8007020:	4619      	mov	r1, r3
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	fbb3 f3f1 	udiv	r3, r3, r1
 8007028:	441a      	add	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	899b      	ldrh	r3, [r3, #12]
 8007038:	461a      	mov	r2, r3
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007040:	fb00 f202 	mul.w	r2, r0, r2
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	18ca      	adds	r2, r1, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b086      	sub	sp, #24
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	3320      	adds	r3, #32
 800706c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <dir_next+0x28>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800707c:	d301      	bcc.n	8007082 <dir_next+0x2c>
 800707e:	2304      	movs	r3, #4
 8007080:	e0bb      	b.n	80071fa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	899b      	ldrh	r3, [r3, #12]
 8007086:	461a      	mov	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	fbb3 f1f2 	udiv	r1, r3, r2
 800708e:	fb01 f202 	mul.w	r2, r1, r2
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	f040 809d 	bne.w	80071d4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	8912      	ldrh	r2, [r2, #8]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	f0c0 808d 	bcc.w	80071d4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	61da      	str	r2, [r3, #28]
 80070c0:	2304      	movs	r3, #4
 80070c2:	e09a      	b.n	80071fa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	899b      	ldrh	r3, [r3, #12]
 80070c8:	461a      	mov	r2, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	8952      	ldrh	r2, [r2, #10]
 80070d4:	3a01      	subs	r2, #1
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d17b      	bne.n	80071d4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f7ff fc08 	bl	80068fa <get_fat>
 80070ea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d801      	bhi.n	80070f6 <dir_next+0xa0>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e081      	b.n	80071fa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fc:	d101      	bne.n	8007102 <dir_next+0xac>
 80070fe:	2301      	movs	r3, #1
 8007100:	e07b      	b.n	80071fa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	429a      	cmp	r2, r3
 800710a:	d359      	bcc.n	80071c0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d104      	bne.n	800711c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	61da      	str	r2, [r3, #28]
 8007118:	2304      	movs	r3, #4
 800711a:	e06e      	b.n	80071fa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	4619      	mov	r1, r3
 8007124:	4610      	mov	r0, r2
 8007126:	f7ff fe3d 	bl	8006da4 <create_chain>
 800712a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <dir_next+0xe0>
 8007132:	2307      	movs	r3, #7
 8007134:	e061      	b.n	80071fa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <dir_next+0xea>
 800713c:	2302      	movs	r3, #2
 800713e:	e05c      	b.n	80071fa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d101      	bne.n	800714c <dir_next+0xf6>
 8007148:	2301      	movs	r3, #1
 800714a:	e056      	b.n	80071fa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff fad3 	bl	80066f8 <sync_window>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <dir_next+0x106>
 8007158:	2301      	movs	r3, #1
 800715a:	e04e      	b.n	80071fa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	899b      	ldrh	r3, [r3, #12]
 8007166:	461a      	mov	r2, r3
 8007168:	2100      	movs	r1, #0
 800716a:	f7ff f8fc 	bl	8006366 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800716e:	2300      	movs	r3, #0
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	6979      	ldr	r1, [r7, #20]
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f7ff fba1 	bl	80068bc <clust2sect>
 800717a:	4602      	mov	r2, r0
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	635a      	str	r2, [r3, #52]	; 0x34
 8007180:	e012      	b.n	80071a8 <dir_next+0x152>
						fs->wflag = 1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff fab5 	bl	80066f8 <sync_window>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <dir_next+0x142>
 8007194:	2301      	movs	r3, #1
 8007196:	e030      	b.n	80071fa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	3301      	adds	r3, #1
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	635a      	str	r2, [r3, #52]	; 0x34
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	895b      	ldrh	r3, [r3, #10]
 80071ac:	461a      	mov	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d3e6      	bcc.n	8007182 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad2      	subs	r2, r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80071c6:	6979      	ldr	r1, [r7, #20]
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff fb77 	bl	80068bc <clust2sect>
 80071ce:	4602      	mov	r2, r0
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	899b      	ldrh	r3, [r3, #12]
 80071e4:	461a      	mov	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80071ec:	fb00 f202 	mul.w	r2, r0, r2
 80071f0:	1a9b      	subs	r3, r3, r2
 80071f2:	18ca      	adds	r2, r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b086      	sub	sp, #24
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007212:	2100      	movs	r1, #0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff fe95 	bl	8006f44 <dir_sdi>
 800721a:	4603      	mov	r3, r0
 800721c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d12b      	bne.n	800727c <dir_alloc+0x7a>
		n = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	4619      	mov	r1, r3
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff faa6 	bl	8006780 <move_window>
 8007234:	4603      	mov	r3, r0
 8007236:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d11d      	bne.n	800727a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2be5      	cmp	r3, #229	; 0xe5
 8007246:	d004      	beq.n	8007252 <dir_alloc+0x50>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d107      	bne.n	8007262 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	3301      	adds	r3, #1
 8007256:	613b      	str	r3, [r7, #16]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d102      	bne.n	8007266 <dir_alloc+0x64>
 8007260:	e00c      	b.n	800727c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007262:	2300      	movs	r3, #0
 8007264:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007266:	2101      	movs	r1, #1
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff fef4 	bl	8007056 <dir_next>
 800726e:	4603      	mov	r3, r0
 8007270:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0d7      	beq.n	8007228 <dir_alloc+0x26>
 8007278:	e000      	b.n	800727c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800727a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	2b04      	cmp	r3, #4
 8007280:	d101      	bne.n	8007286 <dir_alloc+0x84>
 8007282:	2307      	movs	r3, #7
 8007284:	75fb      	strb	r3, [r7, #23]
	return res;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	331a      	adds	r3, #26
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe ffbe 	bl	8006220 <ld_word>
 80072a4:	4603      	mov	r3, r0
 80072a6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d109      	bne.n	80072c4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	3314      	adds	r3, #20
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe ffb3 	bl	8006220 <ld_word>
 80072ba:	4603      	mov	r3, r0
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80072c4:	68fb      	ldr	r3, [r7, #12]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	331a      	adds	r3, #26
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	b292      	uxth	r2, r2
 80072e2:	4611      	mov	r1, r2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe ffd6 	bl	8006296 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d109      	bne.n	8007306 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f103 0214 	add.w	r2, r3, #20
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	0c1b      	lsrs	r3, r3, #16
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	4619      	mov	r1, r3
 8007300:	4610      	mov	r0, r2
 8007302:	f7fe ffc8 	bl	8006296 <st_word>
	}
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007310:	b590      	push	{r4, r7, lr}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	331a      	adds	r3, #26
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe ff7e 	bl	8006220 <ld_word>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <cmp_lfn+0x1e>
 800732a:	2300      	movs	r3, #0
 800732c:	e059      	b.n	80073e2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007336:	1e5a      	subs	r2, r3, #1
 8007338:	4613      	mov	r3, r2
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007344:	2301      	movs	r3, #1
 8007346:	81fb      	strh	r3, [r7, #14]
 8007348:	2300      	movs	r3, #0
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	e033      	b.n	80073b6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800734e:	4a27      	ldr	r2, [pc, #156]	; (80073ec <cmp_lfn+0xdc>)
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	4413      	add	r3, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f7fe ff5f 	bl	8006220 <ld_word>
 8007362:	4603      	mov	r3, r0
 8007364:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007366:	89fb      	ldrh	r3, [r7, #14]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01a      	beq.n	80073a2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2bfe      	cmp	r3, #254	; 0xfe
 8007370:	d812      	bhi.n	8007398 <cmp_lfn+0x88>
 8007372:	89bb      	ldrh	r3, [r7, #12]
 8007374:	4618      	mov	r0, r3
 8007376:	f001 fec5 	bl	8009104 <ff_wtoupper>
 800737a:	4603      	mov	r3, r0
 800737c:	461c      	mov	r4, r3
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	617a      	str	r2, [r7, #20]
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f001 feb9 	bl	8009104 <ff_wtoupper>
 8007392:	4603      	mov	r3, r0
 8007394:	429c      	cmp	r4, r3
 8007396:	d001      	beq.n	800739c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007398:	2300      	movs	r3, #0
 800739a:	e022      	b.n	80073e2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800739c:	89bb      	ldrh	r3, [r7, #12]
 800739e:	81fb      	strh	r3, [r7, #14]
 80073a0:	e006      	b.n	80073b0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80073a2:	89bb      	ldrh	r3, [r7, #12]
 80073a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d001      	beq.n	80073b0 <cmp_lfn+0xa0>
 80073ac:	2300      	movs	r3, #0
 80073ae:	e018      	b.n	80073e2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	3301      	adds	r3, #1
 80073b4:	613b      	str	r3, [r7, #16]
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b0c      	cmp	r3, #12
 80073ba:	d9c8      	bls.n	800734e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <cmp_lfn+0xd0>
 80073c8:	89fb      	ldrh	r3, [r7, #14]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d008      	beq.n	80073e0 <cmp_lfn+0xd0>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	4413      	add	r3, r2
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <cmp_lfn+0xd0>
 80073dc:	2300      	movs	r3, #0
 80073de:	e000      	b.n	80073e2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80073e0:	2301      	movs	r3, #1
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd90      	pop	{r4, r7, pc}
 80073ea:	bf00      	nop
 80073ec:	0800c43c 	.word	0x0800c43c

080073f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4611      	mov	r1, r2
 80073fc:	461a      	mov	r2, r3
 80073fe:	460b      	mov	r3, r1
 8007400:	71fb      	strb	r3, [r7, #7]
 8007402:	4613      	mov	r3, r2
 8007404:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	330d      	adds	r3, #13
 800740a:	79ba      	ldrb	r2, [r7, #6]
 800740c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	330b      	adds	r3, #11
 8007412:	220f      	movs	r2, #15
 8007414:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	330c      	adds	r3, #12
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	331a      	adds	r3, #26
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f7fe ff36 	bl	8006296 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	1e5a      	subs	r2, r3, #1
 800742e:	4613      	mov	r3, r2
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	82fb      	strh	r3, [r7, #22]
 800743e:	2300      	movs	r3, #0
 8007440:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007442:	8afb      	ldrh	r3, [r7, #22]
 8007444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007448:	4293      	cmp	r3, r2
 800744a:	d007      	beq.n	800745c <put_lfn+0x6c>
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	61fa      	str	r2, [r7, #28]
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800745c:	4a17      	ldr	r2, [pc, #92]	; (80074bc <put_lfn+0xcc>)
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	4413      	add	r3, r2
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	4413      	add	r3, r2
 800746a:	8afa      	ldrh	r2, [r7, #22]
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe ff11 	bl	8006296 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007474:	8afb      	ldrh	r3, [r7, #22]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d102      	bne.n	8007480 <put_lfn+0x90>
 800747a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800747e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	3301      	adds	r3, #1
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b0c      	cmp	r3, #12
 800748a:	d9da      	bls.n	8007442 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800748c:	8afb      	ldrh	r3, [r7, #22]
 800748e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007492:	4293      	cmp	r3, r2
 8007494:	d006      	beq.n	80074a4 <put_lfn+0xb4>
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d103      	bne.n	80074ac <put_lfn+0xbc>
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	79fa      	ldrb	r2, [r7, #7]
 80074b0:	701a      	strb	r2, [r3, #0]
}
 80074b2:	bf00      	nop
 80074b4:	3720      	adds	r7, #32
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	0800c43c 	.word	0x0800c43c

080074c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08c      	sub	sp, #48	; 0x30
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80074ce:	220b      	movs	r2, #11
 80074d0:	68b9      	ldr	r1, [r7, #8]
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7fe ff26 	bl	8006324 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b05      	cmp	r3, #5
 80074dc:	d92b      	bls.n	8007536 <gen_numname+0x76>
		sr = seq;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80074e2:	e022      	b.n	800752a <gen_numname+0x6a>
			wc = *lfn++;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	1c9a      	adds	r2, r3, #2
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80074ee:	2300      	movs	r3, #0
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f2:	e017      	b.n	8007524 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	005a      	lsls	r2, r3, #1
 80074f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	4413      	add	r3, r2
 8007500:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007502:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <gen_numname+0x5e>
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007518:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800751c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	3301      	adds	r3, #1
 8007522:	62bb      	str	r3, [r7, #40]	; 0x28
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d9e4      	bls.n	80074f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1d8      	bne.n	80074e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007536:	2307      	movs	r3, #7
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	b2db      	uxtb	r3, r3
 8007544:	3330      	adds	r3, #48	; 0x30
 8007546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800754a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800754e:	2b39      	cmp	r3, #57	; 0x39
 8007550:	d904      	bls.n	800755c <gen_numname+0x9c>
 8007552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007556:	3307      	adds	r3, #7
 8007558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	1e5a      	subs	r2, r3, #1
 8007560:	62ba      	str	r2, [r7, #40]	; 0x28
 8007562:	3330      	adds	r3, #48	; 0x30
 8007564:	443b      	add	r3, r7
 8007566:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800756a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	091b      	lsrs	r3, r3, #4
 8007572:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1df      	bne.n	800753a <gen_numname+0x7a>
	ns[i] = '~';
 800757a:	f107 0214 	add.w	r2, r7, #20
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	4413      	add	r3, r2
 8007582:	227e      	movs	r2, #126	; 0x7e
 8007584:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007586:	2300      	movs	r3, #0
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
 800758a:	e002      	b.n	8007592 <gen_numname+0xd2>
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	3301      	adds	r3, #1
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
 8007592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	429a      	cmp	r2, r3
 8007598:	d205      	bcs.n	80075a6 <gen_numname+0xe6>
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	4413      	add	r3, r2
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	d1f2      	bne.n	800758c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	2b07      	cmp	r3, #7
 80075aa:	d807      	bhi.n	80075bc <gen_numname+0xfc>
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	62ba      	str	r2, [r7, #40]	; 0x28
 80075b2:	3330      	adds	r3, #48	; 0x30
 80075b4:	443b      	add	r3, r7
 80075b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80075ba:	e000      	b.n	80075be <gen_numname+0xfe>
 80075bc:	2120      	movs	r1, #32
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	627a      	str	r2, [r7, #36]	; 0x24
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	460a      	mov	r2, r1
 80075ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	2b07      	cmp	r3, #7
 80075d0:	d9e9      	bls.n	80075a6 <gen_numname+0xe6>
}
 80075d2:	bf00      	nop
 80075d4:	bf00      	nop
 80075d6:	3730      	adds	r7, #48	; 0x30
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80075e8:	230b      	movs	r3, #11
 80075ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	0852      	lsrs	r2, r2, #1
 80075f2:	01db      	lsls	r3, r3, #7
 80075f4:	4313      	orrs	r3, r2
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	1c59      	adds	r1, r3, #1
 80075fc:	6079      	str	r1, [r7, #4]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	4413      	add	r3, r2
 8007602:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	3b01      	subs	r3, #1
 8007608:	60bb      	str	r3, [r7, #8]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1ed      	bne.n	80075ec <sum_sfn+0x10>
	return sum;
 8007610:	7bfb      	ldrb	r3, [r7, #15]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800762c:	2100      	movs	r1, #0
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff fc88 	bl	8006f44 <dir_sdi>
 8007634:	4603      	mov	r3, r0
 8007636:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <dir_find+0x24>
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	e0a9      	b.n	8007796 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007642:	23ff      	movs	r3, #255	; 0xff
 8007644:	753b      	strb	r3, [r7, #20]
 8007646:	7d3b      	ldrb	r3, [r7, #20]
 8007648:	757b      	strb	r3, [r7, #21]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	4619      	mov	r1, r3
 8007658:	6938      	ldr	r0, [r7, #16]
 800765a:	f7ff f891 	bl	8006780 <move_window>
 800765e:	4603      	mov	r3, r0
 8007660:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007662:	7dfb      	ldrb	r3, [r7, #23]
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 8090 	bne.w	800778a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007672:	7dbb      	ldrb	r3, [r7, #22]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d102      	bne.n	800767e <dir_find+0x60>
 8007678:	2304      	movs	r3, #4
 800767a:	75fb      	strb	r3, [r7, #23]
 800767c:	e08a      	b.n	8007794 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	330b      	adds	r3, #11
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800768a:	73fb      	strb	r3, [r7, #15]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	7bfa      	ldrb	r2, [r7, #15]
 8007690:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007692:	7dbb      	ldrb	r3, [r7, #22]
 8007694:	2be5      	cmp	r3, #229	; 0xe5
 8007696:	d007      	beq.n	80076a8 <dir_find+0x8a>
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	f003 0308 	and.w	r3, r3, #8
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d009      	beq.n	80076b6 <dir_find+0x98>
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	2b0f      	cmp	r3, #15
 80076a6:	d006      	beq.n	80076b6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80076a8:	23ff      	movs	r3, #255	; 0xff
 80076aa:	757b      	strb	r3, [r7, #21]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f04f 32ff 	mov.w	r2, #4294967295
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
 80076b4:	e05e      	b.n	8007774 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	2b0f      	cmp	r3, #15
 80076ba:	d136      	bne.n	800772a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d154      	bne.n	8007774 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80076ca:	7dbb      	ldrb	r3, [r7, #22]
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00d      	beq.n	80076f0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	7b5b      	ldrb	r3, [r3, #13]
 80076da:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80076dc:	7dbb      	ldrb	r3, [r7, #22]
 80076de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e2:	75bb      	strb	r3, [r7, #22]
 80076e4:	7dbb      	ldrb	r3, [r7, #22]
 80076e6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	695a      	ldr	r2, [r3, #20]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80076f0:	7dba      	ldrb	r2, [r7, #22]
 80076f2:	7d7b      	ldrb	r3, [r7, #21]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d115      	bne.n	8007724 <dir_find+0x106>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	330d      	adds	r3, #13
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	7d3a      	ldrb	r2, [r7, #20]
 8007702:	429a      	cmp	r2, r3
 8007704:	d10e      	bne.n	8007724 <dir_find+0x106>
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7ff fdfd 	bl	8007310 <cmp_lfn>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <dir_find+0x106>
 800771c:	7d7b      	ldrb	r3, [r7, #21]
 800771e:	3b01      	subs	r3, #1
 8007720:	b2db      	uxtb	r3, r3
 8007722:	e000      	b.n	8007726 <dir_find+0x108>
 8007724:	23ff      	movs	r3, #255	; 0xff
 8007726:	757b      	strb	r3, [r7, #21]
 8007728:	e024      	b.n	8007774 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800772a:	7d7b      	ldrb	r3, [r7, #21]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <dir_find+0x126>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a1b      	ldr	r3, [r3, #32]
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff ff51 	bl	80075dc <sum_sfn>
 800773a:	4603      	mov	r3, r0
 800773c:	461a      	mov	r2, r3
 800773e:	7d3b      	ldrb	r3, [r7, #20]
 8007740:	4293      	cmp	r3, r2
 8007742:	d024      	beq.n	800778e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <dir_find+0x14a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a18      	ldr	r0, [r3, #32]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3324      	adds	r3, #36	; 0x24
 800775a:	220b      	movs	r2, #11
 800775c:	4619      	mov	r1, r3
 800775e:	f7fe fe1d 	bl	800639c <mem_cmp>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d014      	beq.n	8007792 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007768:	23ff      	movs	r3, #255	; 0xff
 800776a:	757b      	strb	r3, [r7, #21]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f04f 32ff 	mov.w	r2, #4294967295
 8007772:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007774:	2100      	movs	r1, #0
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff fc6d 	bl	8007056 <dir_next>
 800777c:	4603      	mov	r3, r0
 800777e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	2b00      	cmp	r3, #0
 8007784:	f43f af65 	beq.w	8007652 <dir_find+0x34>
 8007788:	e004      	b.n	8007794 <dir_find+0x176>
		if (res != FR_OK) break;
 800778a:	bf00      	nop
 800778c:	e002      	b.n	8007794 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800778e:	bf00      	nop
 8007790:	e000      	b.n	8007794 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007792:	bf00      	nop

	return res;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08c      	sub	sp, #48	; 0x30
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <dir_register+0x20>
 80077bc:	2306      	movs	r3, #6
 80077be:	e0e0      	b.n	8007982 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80077c0:	2300      	movs	r3, #0
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
 80077c4:	e002      	b.n	80077cc <dir_register+0x2c>
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	3301      	adds	r3, #1
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	691a      	ldr	r2, [r3, #16]
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	4413      	add	r3, r2
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f4      	bne.n	80077c6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80077e2:	f107 030c 	add.w	r3, r7, #12
 80077e6:	220c      	movs	r2, #12
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe fd9b 	bl	8006324 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d032      	beq.n	800785e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2240      	movs	r2, #64	; 0x40
 80077fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007800:	2301      	movs	r3, #1
 8007802:	62bb      	str	r3, [r7, #40]	; 0x28
 8007804:	e016      	b.n	8007834 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	f107 010c 	add.w	r1, r7, #12
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	f7ff fe53 	bl	80074c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff feff 	bl	800761e <dir_find>
 8007820:	4603      	mov	r3, r0
 8007822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800782a:	2b00      	cmp	r3, #0
 800782c:	d106      	bne.n	800783c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	3301      	adds	r3, #1
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	2b63      	cmp	r3, #99	; 0x63
 8007838:	d9e5      	bls.n	8007806 <dir_register+0x66>
 800783a:	e000      	b.n	800783e <dir_register+0x9e>
			if (res != FR_OK) break;
 800783c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	2b64      	cmp	r3, #100	; 0x64
 8007842:	d101      	bne.n	8007848 <dir_register+0xa8>
 8007844:	2307      	movs	r3, #7
 8007846:	e09c      	b.n	8007982 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800784c:	2b04      	cmp	r3, #4
 800784e:	d002      	beq.n	8007856 <dir_register+0xb6>
 8007850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007854:	e095      	b.n	8007982 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007856:	7dfa      	ldrb	r2, [r7, #23]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <dir_register+0xd8>
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	330c      	adds	r3, #12
 800786c:	4a47      	ldr	r2, [pc, #284]	; (800798c <dir_register+0x1ec>)
 800786e:	fba2 2303 	umull	r2, r3, r2, r3
 8007872:	089b      	lsrs	r3, r3, #2
 8007874:	3301      	adds	r3, #1
 8007876:	e000      	b.n	800787a <dir_register+0xda>
 8007878:	2301      	movs	r3, #1
 800787a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800787c:	6a39      	ldr	r1, [r7, #32]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff fcbf 	bl	8007202 <dir_alloc>
 8007884:	4603      	mov	r3, r0
 8007886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800788a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800788e:	2b00      	cmp	r3, #0
 8007890:	d148      	bne.n	8007924 <dir_register+0x184>
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	3b01      	subs	r3, #1
 8007896:	623b      	str	r3, [r7, #32]
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d042      	beq.n	8007924 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	695a      	ldr	r2, [r3, #20]
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	015b      	lsls	r3, r3, #5
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff fb4a 	bl	8006f44 <dir_sdi>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80078b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d132      	bne.n	8007924 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3324      	adds	r3, #36	; 0x24
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff fe8a 	bl	80075dc <sum_sfn>
 80078c8:	4603      	mov	r3, r0
 80078ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	4619      	mov	r1, r3
 80078d2:	69f8      	ldr	r0, [r7, #28]
 80078d4:	f7fe ff54 	bl	8006780 <move_window>
 80078d8:	4603      	mov	r3, r0
 80078da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80078de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d11d      	bne.n	8007922 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	6918      	ldr	r0, [r3, #16]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a19      	ldr	r1, [r3, #32]
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	7efb      	ldrb	r3, [r7, #27]
 80078f4:	f7ff fd7c 	bl	80073f0 <put_lfn>
				fs->wflag = 1;
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	2201      	movs	r2, #1
 80078fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80078fe:	2100      	movs	r1, #0
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff fba8 	bl	8007056 <dir_next>
 8007906:	4603      	mov	r3, r0
 8007908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800790c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007910:	2b00      	cmp	r3, #0
 8007912:	d107      	bne.n	8007924 <dir_register+0x184>
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	3b01      	subs	r3, #1
 8007918:	623b      	str	r3, [r7, #32]
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1d5      	bne.n	80078cc <dir_register+0x12c>
 8007920:	e000      	b.n	8007924 <dir_register+0x184>
				if (res != FR_OK) break;
 8007922:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007928:	2b00      	cmp	r3, #0
 800792a:	d128      	bne.n	800797e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	4619      	mov	r1, r3
 8007932:	69f8      	ldr	r0, [r7, #28]
 8007934:	f7fe ff24 	bl	8006780 <move_window>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800793e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007942:	2b00      	cmp	r3, #0
 8007944:	d11b      	bne.n	800797e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	2220      	movs	r2, #32
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fd09 	bl	8006366 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a18      	ldr	r0, [r3, #32]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3324      	adds	r3, #36	; 0x24
 800795c:	220b      	movs	r2, #11
 800795e:	4619      	mov	r1, r3
 8007960:	f7fe fce0 	bl	8006324 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	330c      	adds	r3, #12
 8007970:	f002 0218 	and.w	r2, r2, #24
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	2201      	movs	r2, #1
 800797c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800797e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007982:	4618      	mov	r0, r3
 8007984:	3730      	adds	r7, #48	; 0x30
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	4ec4ec4f 	.word	0x4ec4ec4f

08007990 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08a      	sub	sp, #40	; 0x28
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	2300      	movs	r3, #0
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	61ba      	str	r2, [r7, #24]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4413      	add	r3, r2
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80079be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079c0:	2b1f      	cmp	r3, #31
 80079c2:	d940      	bls.n	8007a46 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80079c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079c6:	2b2f      	cmp	r3, #47	; 0x2f
 80079c8:	d006      	beq.n	80079d8 <create_name+0x48>
 80079ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079cc:	2b5c      	cmp	r3, #92	; 0x5c
 80079ce:	d110      	bne.n	80079f2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80079d0:	e002      	b.n	80079d8 <create_name+0x48>
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	3301      	adds	r3, #1
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	4413      	add	r3, r2
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b2f      	cmp	r3, #47	; 0x2f
 80079e2:	d0f6      	beq.n	80079d2 <create_name+0x42>
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	4413      	add	r3, r2
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b5c      	cmp	r3, #92	; 0x5c
 80079ee:	d0f0      	beq.n	80079d2 <create_name+0x42>
			break;
 80079f0:	e02a      	b.n	8007a48 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2bfe      	cmp	r3, #254	; 0xfe
 80079f6:	d901      	bls.n	80079fc <create_name+0x6c>
 80079f8:	2306      	movs	r3, #6
 80079fa:	e17d      	b.n	8007cf8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80079fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a04:	2101      	movs	r1, #1
 8007a06:	4618      	mov	r0, r3
 8007a08:	f001 fb40 	bl	800908c <ff_convert>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <create_name+0x8a>
 8007a16:	2306      	movs	r3, #6
 8007a18:	e16e      	b.n	8007cf8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a1e:	d809      	bhi.n	8007a34 <create_name+0xa4>
 8007a20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a22:	4619      	mov	r1, r3
 8007a24:	488d      	ldr	r0, [pc, #564]	; (8007c5c <create_name+0x2cc>)
 8007a26:	f7fe fce0 	bl	80063ea <chk_chr>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <create_name+0xa4>
 8007a30:	2306      	movs	r3, #6
 8007a32:	e161      	b.n	8007cf8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	617a      	str	r2, [r7, #20]
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007a44:	e7b4      	b.n	80079b0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007a46:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	441a      	add	r2, r3
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a54:	2b1f      	cmp	r3, #31
 8007a56:	d801      	bhi.n	8007a5c <create_name+0xcc>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	e000      	b.n	8007a5e <create_name+0xce>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a62:	e011      	b.n	8007a88 <create_name+0xf8>
		w = lfn[di - 1];
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4413      	add	r3, r2
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d002      	beq.n	8007a82 <create_name+0xf2>
 8007a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a7e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a80:	d106      	bne.n	8007a90 <create_name+0x100>
		di--;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1ea      	bne.n	8007a64 <create_name+0xd4>
 8007a8e:	e000      	b.n	8007a92 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007a90:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <create_name+0x118>
 8007aa4:	2306      	movs	r3, #6
 8007aa6:	e127      	b.n	8007cf8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3324      	adds	r3, #36	; 0x24
 8007aac:	220b      	movs	r2, #11
 8007aae:	2120      	movs	r1, #32
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe fc58 	bl	8006366 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	e002      	b.n	8007ac2 <create_name+0x132>
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	61bb      	str	r3, [r7, #24]
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d0f5      	beq.n	8007abc <create_name+0x12c>
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	2b2e      	cmp	r3, #46	; 0x2e
 8007adc:	d0ee      	beq.n	8007abc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d009      	beq.n	8007af8 <create_name+0x168>
 8007ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ae8:	f043 0303 	orr.w	r3, r3, #3
 8007aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007af0:	e002      	b.n	8007af8 <create_name+0x168>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d009      	beq.n	8007b12 <create_name+0x182>
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b04:	3b01      	subs	r3, #1
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b10:	d1ef      	bne.n	8007af2 <create_name+0x162>

	i = b = 0; ni = 8;
 8007b12:	2300      	movs	r3, #0
 8007b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b18:	2300      	movs	r3, #0
 8007b1a:	623b      	str	r3, [r7, #32]
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	61ba      	str	r2, [r7, #24]
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8090 	beq.w	8007c58 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d006      	beq.n	8007b4c <create_name+0x1bc>
 8007b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b40:	2b2e      	cmp	r3, #46	; 0x2e
 8007b42:	d10a      	bne.n	8007b5a <create_name+0x1ca>
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d006      	beq.n	8007b5a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b50:	f043 0303 	orr.w	r3, r3, #3
 8007b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b58:	e07d      	b.n	8007c56 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007b5a:	6a3a      	ldr	r2, [r7, #32]
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d203      	bcs.n	8007b6a <create_name+0x1da>
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d123      	bne.n	8007bb2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	2b0b      	cmp	r3, #11
 8007b6e:	d106      	bne.n	8007b7e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b74:	f043 0303 	orr.w	r3, r3, #3
 8007b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b7c:	e075      	b.n	8007c6a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d005      	beq.n	8007b92 <create_name+0x202>
 8007b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b8a:	f043 0303 	orr.w	r3, r3, #3
 8007b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d866      	bhi.n	8007c68 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	623b      	str	r3, [r7, #32]
 8007ba2:	230b      	movs	r3, #11
 8007ba4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007ba6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007bb0:	e051      	b.n	8007c56 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8007bb6:	d914      	bls.n	8007be2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007bb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bba:	2100      	movs	r1, #0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 fa65 	bl	800908c <ff_convert>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d004      	beq.n	8007bd6 <create_name+0x246>
 8007bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bce:	3b80      	subs	r3, #128	; 0x80
 8007bd0:	4a23      	ldr	r2, [pc, #140]	; (8007c60 <create_name+0x2d0>)
 8007bd2:	5cd3      	ldrb	r3, [r2, r3]
 8007bd4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bda:	f043 0302 	orr.w	r3, r3, #2
 8007bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007be2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d007      	beq.n	8007bf8 <create_name+0x268>
 8007be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bea:	4619      	mov	r1, r3
 8007bec:	481d      	ldr	r0, [pc, #116]	; (8007c64 <create_name+0x2d4>)
 8007bee:	f7fe fbfc 	bl	80063ea <chk_chr>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d008      	beq.n	8007c0a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007bf8:	235f      	movs	r3, #95	; 0x5f
 8007bfa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c00:	f043 0303 	orr.w	r3, r3, #3
 8007c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c08:	e01b      	b.n	8007c42 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c0c:	2b40      	cmp	r3, #64	; 0x40
 8007c0e:	d909      	bls.n	8007c24 <create_name+0x294>
 8007c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c12:	2b5a      	cmp	r3, #90	; 0x5a
 8007c14:	d806      	bhi.n	8007c24 <create_name+0x294>
					b |= 2;
 8007c16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c1a:	f043 0302 	orr.w	r3, r3, #2
 8007c1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007c22:	e00e      	b.n	8007c42 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c26:	2b60      	cmp	r3, #96	; 0x60
 8007c28:	d90b      	bls.n	8007c42 <create_name+0x2b2>
 8007c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c2c:	2b7a      	cmp	r3, #122	; 0x7a
 8007c2e:	d808      	bhi.n	8007c42 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007c30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007c3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c3e:	3b20      	subs	r3, #32
 8007c40:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	623a      	str	r2, [r7, #32]
 8007c48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c4a:	b2d1      	uxtb	r1, r2
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	4413      	add	r3, r2
 8007c50:	460a      	mov	r2, r1
 8007c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007c56:	e763      	b.n	8007b20 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007c58:	bf00      	nop
 8007c5a:	e006      	b.n	8007c6a <create_name+0x2da>
 8007c5c:	0800c30c 	.word	0x0800c30c
 8007c60:	0800c3bc 	.word	0x0800c3bc
 8007c64:	0800c318 	.word	0x0800c318
			if (si > di) break;			/* No extension */
 8007c68:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c70:	2be5      	cmp	r3, #229	; 0xe5
 8007c72:	d103      	bne.n	8007c7c <create_name+0x2ec>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2205      	movs	r2, #5
 8007c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2b08      	cmp	r3, #8
 8007c80:	d104      	bne.n	8007c8c <create_name+0x2fc>
 8007c82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c90:	f003 030c 	and.w	r3, r3, #12
 8007c94:	2b0c      	cmp	r3, #12
 8007c96:	d005      	beq.n	8007ca4 <create_name+0x314>
 8007c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d105      	bne.n	8007cb0 <create_name+0x320>
 8007ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca8:	f043 0302 	orr.w	r3, r3, #2
 8007cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d117      	bne.n	8007cec <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007cbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d105      	bne.n	8007cd4 <create_name+0x344>
 8007cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ccc:	f043 0310 	orr.w	r3, r3, #16
 8007cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cd8:	f003 030c 	and.w	r3, r3, #12
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d105      	bne.n	8007cec <create_name+0x35c>
 8007ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ce4:	f043 0308 	orr.w	r3, r3, #8
 8007ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007cf2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007cf6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3728      	adds	r7, #40	; 0x28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d14:	e002      	b.n	8007d1c <follow_path+0x1c>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b2f      	cmp	r3, #47	; 0x2f
 8007d22:	d0f8      	beq.n	8007d16 <follow_path+0x16>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b5c      	cmp	r3, #92	; 0x5c
 8007d2a:	d0f4      	beq.n	8007d16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b1f      	cmp	r3, #31
 8007d38:	d80a      	bhi.n	8007d50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2280      	movs	r2, #128	; 0x80
 8007d3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007d42:	2100      	movs	r1, #0
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff f8fd 	bl	8006f44 <dir_sdi>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75fb      	strb	r3, [r7, #23]
 8007d4e:	e048      	b.n	8007de2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d50:	463b      	mov	r3, r7
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fe1b 	bl	8007990 <create_name>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d139      	bne.n	8007dd8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff fc5a 	bl	800761e <dir_find>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007d74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d12c      	bne.n	8007ddc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d127      	bne.n	8007ddc <follow_path+0xdc>
 8007d8c:	2305      	movs	r3, #5
 8007d8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007d90:	e024      	b.n	8007ddc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d121      	bne.n	8007de0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	799b      	ldrb	r3, [r3, #6]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007da8:	2305      	movs	r3, #5
 8007daa:	75fb      	strb	r3, [r7, #23]
 8007dac:	e019      	b.n	8007de2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	8992      	ldrh	r2, [r2, #12]
 8007dbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007dc0:	fb00 f202 	mul.w	r2, r0, r2
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	440b      	add	r3, r1
 8007dc8:	4619      	mov	r1, r3
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7ff fa60 	bl	8007290 <ld_clust>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007dd6:	e7bb      	b.n	8007d50 <follow_path+0x50>
			if (res != FR_OK) break;
 8007dd8:	bf00      	nop
 8007dda:	e002      	b.n	8007de2 <follow_path+0xe2>
				break;
 8007ddc:	bf00      	nop
 8007dde:	e000      	b.n	8007de2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007de0:	bf00      	nop
			}
		}
	}

	return res;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007df4:	f04f 33ff 	mov.w	r3, #4294967295
 8007df8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d031      	beq.n	8007e66 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	617b      	str	r3, [r7, #20]
 8007e08:	e002      	b.n	8007e10 <get_ldnumber+0x24>
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b1f      	cmp	r3, #31
 8007e16:	d903      	bls.n	8007e20 <get_ldnumber+0x34>
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b3a      	cmp	r3, #58	; 0x3a
 8007e1e:	d1f4      	bne.n	8007e0a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b3a      	cmp	r3, #58	; 0x3a
 8007e26:	d11c      	bne.n	8007e62 <get_ldnumber+0x76>
			tp = *path;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	60fa      	str	r2, [r7, #12]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	3b30      	subs	r3, #48	; 0x30
 8007e38:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b09      	cmp	r3, #9
 8007e3e:	d80e      	bhi.n	8007e5e <get_ldnumber+0x72>
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d10a      	bne.n	8007e5e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d107      	bne.n	8007e5e <get_ldnumber+0x72>
					vol = (int)i;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	3301      	adds	r3, #1
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	e002      	b.n	8007e68 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007e66:	693b      	ldr	r3, [r7, #16]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	70da      	strb	r2, [r3, #3]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fe fc76 	bl	8006780 <move_window>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <check_fs+0x2a>
 8007e9a:	2304      	movs	r3, #4
 8007e9c:	e038      	b.n	8007f10 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3338      	adds	r3, #56	; 0x38
 8007ea2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe f9ba 	bl	8006220 <ld_word>
 8007eac:	4603      	mov	r3, r0
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d001      	beq.n	8007ebc <check_fs+0x48>
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e029      	b.n	8007f10 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ec2:	2be9      	cmp	r3, #233	; 0xe9
 8007ec4:	d009      	beq.n	8007eda <check_fs+0x66>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ecc:	2beb      	cmp	r3, #235	; 0xeb
 8007ece:	d11e      	bne.n	8007f0e <check_fs+0x9a>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ed6:	2b90      	cmp	r3, #144	; 0x90
 8007ed8:	d119      	bne.n	8007f0e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3338      	adds	r3, #56	; 0x38
 8007ede:	3336      	adds	r3, #54	; 0x36
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe f9b5 	bl	8006250 <ld_dword>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007eec:	4a0a      	ldr	r2, [pc, #40]	; (8007f18 <check_fs+0xa4>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d101      	bne.n	8007ef6 <check_fs+0x82>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e00c      	b.n	8007f10 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3338      	adds	r3, #56	; 0x38
 8007efa:	3352      	adds	r3, #82	; 0x52
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe f9a7 	bl	8006250 <ld_dword>
 8007f02:	4603      	mov	r3, r0
 8007f04:	4a05      	ldr	r2, [pc, #20]	; (8007f1c <check_fs+0xa8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d101      	bne.n	8007f0e <check_fs+0x9a>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e000      	b.n	8007f10 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f0e:	2302      	movs	r3, #2
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	00544146 	.word	0x00544146
 8007f1c:	33544146 	.word	0x33544146

08007f20 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b096      	sub	sp, #88	; 0x58
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f7ff ff59 	bl	8007dec <get_ldnumber>
 8007f3a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da01      	bge.n	8007f46 <find_volume+0x26>
 8007f42:	230b      	movs	r3, #11
 8007f44:	e265      	b.n	8008412 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f46:	4a9f      	ldr	r2, [pc, #636]	; (80081c4 <find_volume+0x2a4>)
 8007f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f4e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <find_volume+0x3a>
 8007f56:	230c      	movs	r3, #12
 8007f58:	e25b      	b.n	8008412 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f5e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	f023 0301 	bic.w	r3, r3, #1
 8007f66:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01a      	beq.n	8007fa6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	785b      	ldrb	r3, [r3, #1]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe f8b5 	bl	80060e4 <disk_status>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007f80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10c      	bne.n	8007fa6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <find_volume+0x82>
 8007f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f96:	f003 0304 	and.w	r3, r3, #4
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007f9e:	230a      	movs	r3, #10
 8007fa0:	e237      	b.n	8008412 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e235      	b.n	8008412 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	2200      	movs	r2, #0
 8007faa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	785b      	ldrb	r3, [r3, #1]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe f8ad 	bl	8006118 <disk_initialize>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007fc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e21e      	b.n	8008412 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d007      	beq.n	8007fea <find_volume+0xca>
 8007fda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007fe6:	230a      	movs	r3, #10
 8007fe8:	e213      	b.n	8008412 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fec:	7858      	ldrb	r0, [r3, #1]
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	2102      	movs	r1, #2
 8007ff6:	f7fe f8f5 	bl	80061e4 <disk_ioctl>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <find_volume+0xe4>
 8008000:	2301      	movs	r3, #1
 8008002:	e206      	b.n	8008412 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008006:	899b      	ldrh	r3, [r3, #12]
 8008008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800c:	d80d      	bhi.n	800802a <find_volume+0x10a>
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	899b      	ldrh	r3, [r3, #12]
 8008012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008016:	d308      	bcc.n	800802a <find_volume+0x10a>
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	899b      	ldrh	r3, [r3, #12]
 800801c:	461a      	mov	r2, r3
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	899b      	ldrh	r3, [r3, #12]
 8008022:	3b01      	subs	r3, #1
 8008024:	4013      	ands	r3, r2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <find_volume+0x10e>
 800802a:	2301      	movs	r3, #1
 800802c:	e1f1      	b.n	8008412 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008032:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008036:	f7ff ff1d 	bl	8007e74 <check_fs>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008040:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008044:	2b02      	cmp	r3, #2
 8008046:	d149      	bne.n	80080dc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008048:	2300      	movs	r3, #0
 800804a:	643b      	str	r3, [r7, #64]	; 0x40
 800804c:	e01e      	b.n	800808c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008056:	011b      	lsls	r3, r3, #4
 8008058:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800805c:	4413      	add	r3, r2
 800805e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	3304      	adds	r3, #4
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d006      	beq.n	8008078 <find_volume+0x158>
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	3308      	adds	r3, #8
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe f8ee 	bl	8006250 <ld_dword>
 8008074:	4602      	mov	r2, r0
 8008076:	e000      	b.n	800807a <find_volume+0x15a>
 8008078:	2200      	movs	r2, #0
 800807a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	3358      	adds	r3, #88	; 0x58
 8008080:	443b      	add	r3, r7
 8008082:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008088:	3301      	adds	r3, #1
 800808a:	643b      	str	r3, [r7, #64]	; 0x40
 800808c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800808e:	2b03      	cmp	r3, #3
 8008090:	d9dd      	bls.n	800804e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008092:	2300      	movs	r3, #0
 8008094:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <find_volume+0x182>
 800809c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800809e:	3b01      	subs	r3, #1
 80080a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80080a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	3358      	adds	r3, #88	; 0x58
 80080a8:	443b      	add	r3, r7
 80080aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80080ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80080b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d005      	beq.n	80080c2 <find_volume+0x1a2>
 80080b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080ba:	f7ff fedb 	bl	8007e74 <check_fs>
 80080be:	4603      	mov	r3, r0
 80080c0:	e000      	b.n	80080c4 <find_volume+0x1a4>
 80080c2:	2303      	movs	r3, #3
 80080c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80080c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d905      	bls.n	80080dc <find_volume+0x1bc>
 80080d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d2:	3301      	adds	r3, #1
 80080d4:	643b      	str	r3, [r7, #64]	; 0x40
 80080d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d9e2      	bls.n	80080a2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80080dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d101      	bne.n	80080e8 <find_volume+0x1c8>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e194      	b.n	8008412 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80080e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d901      	bls.n	80080f4 <find_volume+0x1d4>
 80080f0:	230d      	movs	r3, #13
 80080f2:	e18e      	b.n	8008412 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	3338      	adds	r3, #56	; 0x38
 80080f8:	330b      	adds	r3, #11
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe f890 	bl	8006220 <ld_word>
 8008100:	4603      	mov	r3, r0
 8008102:	461a      	mov	r2, r3
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	899b      	ldrh	r3, [r3, #12]
 8008108:	429a      	cmp	r2, r3
 800810a:	d001      	beq.n	8008110 <find_volume+0x1f0>
 800810c:	230d      	movs	r3, #13
 800810e:	e180      	b.n	8008412 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	3338      	adds	r3, #56	; 0x38
 8008114:	3316      	adds	r3, #22
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe f882 	bl	8006220 <ld_word>
 800811c:	4603      	mov	r3, r0
 800811e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <find_volume+0x214>
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	3338      	adds	r3, #56	; 0x38
 800812a:	3324      	adds	r3, #36	; 0x24
 800812c:	4618      	mov	r0, r3
 800812e:	f7fe f88f 	bl	8006250 <ld_dword>
 8008132:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008138:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800813a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	789b      	ldrb	r3, [r3, #2]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d005      	beq.n	8008158 <find_volume+0x238>
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	789b      	ldrb	r3, [r3, #2]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d001      	beq.n	8008158 <find_volume+0x238>
 8008154:	230d      	movs	r3, #13
 8008156:	e15c      	b.n	8008412 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	789b      	ldrb	r3, [r3, #2]
 800815c:	461a      	mov	r2, r3
 800815e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008160:	fb02 f303 	mul.w	r3, r2, r3
 8008164:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800816c:	b29a      	uxth	r2, r3
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	895b      	ldrh	r3, [r3, #10]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d008      	beq.n	800818c <find_volume+0x26c>
 800817a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817c:	895b      	ldrh	r3, [r3, #10]
 800817e:	461a      	mov	r2, r3
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	895b      	ldrh	r3, [r3, #10]
 8008184:	3b01      	subs	r3, #1
 8008186:	4013      	ands	r3, r2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <find_volume+0x270>
 800818c:	230d      	movs	r3, #13
 800818e:	e140      	b.n	8008412 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	3338      	adds	r3, #56	; 0x38
 8008194:	3311      	adds	r3, #17
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe f842 	bl	8006220 <ld_word>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80081a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a6:	891b      	ldrh	r3, [r3, #8]
 80081a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081aa:	8992      	ldrh	r2, [r2, #12]
 80081ac:	0952      	lsrs	r2, r2, #5
 80081ae:	b292      	uxth	r2, r2
 80081b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80081b4:	fb01 f202 	mul.w	r2, r1, r2
 80081b8:	1a9b      	subs	r3, r3, r2
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <find_volume+0x2a8>
 80081c0:	230d      	movs	r3, #13
 80081c2:	e126      	b.n	8008412 <find_volume+0x4f2>
 80081c4:	2000293c 	.word	0x2000293c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	3338      	adds	r3, #56	; 0x38
 80081cc:	3313      	adds	r3, #19
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe f826 	bl	8006220 <ld_word>
 80081d4:	4603      	mov	r3, r0
 80081d6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80081d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <find_volume+0x2cc>
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	3338      	adds	r3, #56	; 0x38
 80081e2:	3320      	adds	r3, #32
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe f833 	bl	8006250 <ld_dword>
 80081ea:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	3338      	adds	r3, #56	; 0x38
 80081f0:	330e      	adds	r3, #14
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe f814 	bl	8006220 <ld_word>
 80081f8:	4603      	mov	r3, r0
 80081fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80081fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <find_volume+0x2e6>
 8008202:	230d      	movs	r3, #13
 8008204:	e105      	b.n	8008412 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008206:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820a:	4413      	add	r3, r2
 800820c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800820e:	8911      	ldrh	r1, [r2, #8]
 8008210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008212:	8992      	ldrh	r2, [r2, #12]
 8008214:	0952      	lsrs	r2, r2, #5
 8008216:	b292      	uxth	r2, r2
 8008218:	fbb1 f2f2 	udiv	r2, r1, r2
 800821c:	b292      	uxth	r2, r2
 800821e:	4413      	add	r3, r2
 8008220:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	429a      	cmp	r2, r3
 8008228:	d201      	bcs.n	800822e <find_volume+0x30e>
 800822a:	230d      	movs	r3, #13
 800822c:	e0f1      	b.n	8008412 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800822e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008236:	8952      	ldrh	r2, [r2, #10]
 8008238:	fbb3 f3f2 	udiv	r3, r3, r2
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <find_volume+0x328>
 8008244:	230d      	movs	r3, #13
 8008246:	e0e4      	b.n	8008412 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008248:	2303      	movs	r3, #3
 800824a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008254:	4293      	cmp	r3, r2
 8008256:	d802      	bhi.n	800825e <find_volume+0x33e>
 8008258:	2302      	movs	r3, #2
 800825a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008264:	4293      	cmp	r3, r2
 8008266:	d802      	bhi.n	800826e <find_volume+0x34e>
 8008268:	2301      	movs	r3, #1
 800826a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	1c9a      	adds	r2, r3, #2
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800827a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800827c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800827e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008280:	441a      	add	r2, r3
 8008282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008284:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008286:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	441a      	add	r2, r3
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008294:	2b03      	cmp	r3, #3
 8008296:	d11e      	bne.n	80082d6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	3338      	adds	r3, #56	; 0x38
 800829c:	332a      	adds	r3, #42	; 0x2a
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fd ffbe 	bl	8006220 <ld_word>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <find_volume+0x38e>
 80082aa:	230d      	movs	r3, #13
 80082ac:	e0b1      	b.n	8008412 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b0:	891b      	ldrh	r3, [r3, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <find_volume+0x39a>
 80082b6:	230d      	movs	r3, #13
 80082b8:	e0ab      	b.n	8008412 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	3338      	adds	r3, #56	; 0x38
 80082be:	332c      	adds	r3, #44	; 0x2c
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fd ffc5 	bl	8006250 <ld_dword>
 80082c6:	4602      	mov	r2, r0
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80082cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	647b      	str	r3, [r7, #68]	; 0x44
 80082d4:	e01f      	b.n	8008316 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	891b      	ldrh	r3, [r3, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <find_volume+0x3c2>
 80082de:	230d      	movs	r3, #13
 80082e0:	e097      	b.n	8008412 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80082e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e8:	441a      	add	r2, r3
 80082ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ec:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80082ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d103      	bne.n	80082fe <find_volume+0x3de>
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	e00a      	b.n	8008314 <find_volume+0x3f4>
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	69da      	ldr	r2, [r3, #28]
 8008302:	4613      	mov	r3, r2
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	4413      	add	r3, r2
 8008308:	085a      	lsrs	r2, r3, #1
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008314:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	6a1a      	ldr	r2, [r3, #32]
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	899b      	ldrh	r3, [r3, #12]
 800831e:	4619      	mov	r1, r3
 8008320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008322:	440b      	add	r3, r1
 8008324:	3b01      	subs	r3, #1
 8008326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008328:	8989      	ldrh	r1, [r1, #12]
 800832a:	fbb3 f3f1 	udiv	r3, r3, r1
 800832e:	429a      	cmp	r2, r3
 8008330:	d201      	bcs.n	8008336 <find_volume+0x416>
 8008332:	230d      	movs	r3, #13
 8008334:	e06d      	b.n	8008412 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	f04f 32ff 	mov.w	r2, #4294967295
 800833c:	619a      	str	r2, [r3, #24]
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	2280      	movs	r2, #128	; 0x80
 800834a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800834c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008350:	2b03      	cmp	r3, #3
 8008352:	d149      	bne.n	80083e8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	3338      	adds	r3, #56	; 0x38
 8008358:	3330      	adds	r3, #48	; 0x30
 800835a:	4618      	mov	r0, r3
 800835c:	f7fd ff60 	bl	8006220 <ld_word>
 8008360:	4603      	mov	r3, r0
 8008362:	2b01      	cmp	r3, #1
 8008364:	d140      	bne.n	80083e8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008368:	3301      	adds	r3, #1
 800836a:	4619      	mov	r1, r3
 800836c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800836e:	f7fe fa07 	bl	8006780 <move_window>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d137      	bne.n	80083e8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	2200      	movs	r2, #0
 800837c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	3338      	adds	r3, #56	; 0x38
 8008382:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008386:	4618      	mov	r0, r3
 8008388:	f7fd ff4a 	bl	8006220 <ld_word>
 800838c:	4603      	mov	r3, r0
 800838e:	461a      	mov	r2, r3
 8008390:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008394:	429a      	cmp	r2, r3
 8008396:	d127      	bne.n	80083e8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	3338      	adds	r3, #56	; 0x38
 800839c:	4618      	mov	r0, r3
 800839e:	f7fd ff57 	bl	8006250 <ld_dword>
 80083a2:	4603      	mov	r3, r0
 80083a4:	4a1d      	ldr	r2, [pc, #116]	; (800841c <find_volume+0x4fc>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d11e      	bne.n	80083e8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	3338      	adds	r3, #56	; 0x38
 80083ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fd ff4c 	bl	8006250 <ld_dword>
 80083b8:	4603      	mov	r3, r0
 80083ba:	4a19      	ldr	r2, [pc, #100]	; (8008420 <find_volume+0x500>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d113      	bne.n	80083e8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	3338      	adds	r3, #56	; 0x38
 80083c4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fd ff41 	bl	8006250 <ld_dword>
 80083ce:	4602      	mov	r2, r0
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	3338      	adds	r3, #56	; 0x38
 80083d8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fd ff37 	bl	8006250 <ld_dword>
 80083e2:	4602      	mov	r2, r0
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80083ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80083f0:	4b0c      	ldr	r3, [pc, #48]	; (8008424 <find_volume+0x504>)
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <find_volume+0x504>)
 80083fa:	801a      	strh	r2, [r3, #0]
 80083fc:	4b09      	ldr	r3, [pc, #36]	; (8008424 <find_volume+0x504>)
 80083fe:	881a      	ldrh	r2, [r3, #0]
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	4a08      	ldr	r2, [pc, #32]	; (8008428 <find_volume+0x508>)
 8008408:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800840a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800840c:	f7fe f950 	bl	80066b0 <clear_lock>
#endif
	return FR_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3758      	adds	r7, #88	; 0x58
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	41615252 	.word	0x41615252
 8008420:	61417272 	.word	0x61417272
 8008424:	20002940 	.word	0x20002940
 8008428:	20002964 	.word	0x20002964

0800842c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008436:	2309      	movs	r3, #9
 8008438:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01c      	beq.n	800847a <validate+0x4e>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d018      	beq.n	800847a <validate+0x4e>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d013      	beq.n	800847a <validate+0x4e>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	889a      	ldrh	r2, [r3, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	88db      	ldrh	r3, [r3, #6]
 800845c:	429a      	cmp	r2, r3
 800845e:	d10c      	bne.n	800847a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	4618      	mov	r0, r3
 8008468:	f7fd fe3c 	bl	80060e4 <disk_status>
 800846c:	4603      	mov	r3, r0
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <validate+0x4e>
			res = FR_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <validate+0x5a>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	e000      	b.n	8008488 <validate+0x5c>
 8008486:	2300      	movs	r3, #0
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	6013      	str	r3, [r2, #0]
	return res;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80084aa:	f107 0310 	add.w	r3, r7, #16
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff fc9c 	bl	8007dec <get_ldnumber>
 80084b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	da01      	bge.n	80084c0 <f_mount+0x28>
 80084bc:	230b      	movs	r3, #11
 80084be:	e02b      	b.n	8008518 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80084c0:	4a17      	ldr	r2, [pc, #92]	; (8008520 <f_mount+0x88>)
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80084d0:	69b8      	ldr	r0, [r7, #24]
 80084d2:	f7fe f8ed 	bl	80066b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	2200      	movs	r2, #0
 80084da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	490d      	ldr	r1, [pc, #52]	; (8008520 <f_mount+0x88>)
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <f_mount+0x66>
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d001      	beq.n	8008502 <f_mount+0x6a>
 80084fe:	2300      	movs	r3, #0
 8008500:	e00a      	b.n	8008518 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008502:	f107 010c 	add.w	r1, r7, #12
 8008506:	f107 0308 	add.w	r3, r7, #8
 800850a:	2200      	movs	r2, #0
 800850c:	4618      	mov	r0, r3
 800850e:	f7ff fd07 	bl	8007f20 <find_volume>
 8008512:	4603      	mov	r3, r0
 8008514:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008516:	7dfb      	ldrb	r3, [r7, #23]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3720      	adds	r7, #32
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	2000293c 	.word	0x2000293c

08008524 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b09a      	sub	sp, #104	; 0x68
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <f_open+0x18>
 8008538:	2309      	movs	r3, #9
 800853a:	e1bb      	b.n	80088b4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008542:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008544:	79fa      	ldrb	r2, [r7, #7]
 8008546:	f107 0114 	add.w	r1, r7, #20
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff fce6 	bl	8007f20 <find_volume>
 8008554:	4603      	mov	r3, r0
 8008556:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800855a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800855e:	2b00      	cmp	r3, #0
 8008560:	f040 819f 	bne.w	80088a2 <f_open+0x37e>
		dj.obj.fs = fs;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	f107 0318 	add.w	r3, r7, #24
 800856e:	4611      	mov	r1, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fbc5 	bl	8007d00 <follow_path>
 8008576:	4603      	mov	r3, r0
 8008578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800857c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008580:	2b00      	cmp	r3, #0
 8008582:	d11a      	bne.n	80085ba <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008584:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008588:	b25b      	sxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	da03      	bge.n	8008596 <f_open+0x72>
				res = FR_INVALID_NAME;
 800858e:	2306      	movs	r3, #6
 8008590:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008594:	e011      	b.n	80085ba <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	f023 0301 	bic.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	bf14      	ite	ne
 80085a0:	2301      	movne	r3, #1
 80085a2:	2300      	moveq	r3, #0
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	461a      	mov	r2, r3
 80085a8:	f107 0318 	add.w	r3, r7, #24
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fd ff36 	bl	8006420 <chk_lock>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	f003 031c 	and.w	r3, r3, #28
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d07f      	beq.n	80086c4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80085c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d017      	beq.n	80085fc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80085cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d10e      	bne.n	80085f2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80085d4:	f7fd ff80 	bl	80064d8 <enq_lock>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d006      	beq.n	80085ec <f_open+0xc8>
 80085de:	f107 0318 	add.w	r3, r7, #24
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff f8dc 	bl	80077a0 <dir_register>
 80085e8:	4603      	mov	r3, r0
 80085ea:	e000      	b.n	80085ee <f_open+0xca>
 80085ec:	2312      	movs	r3, #18
 80085ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	f043 0308 	orr.w	r3, r3, #8
 80085f8:	71fb      	strb	r3, [r7, #7]
 80085fa:	e010      	b.n	800861e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80085fc:	7fbb      	ldrb	r3, [r7, #30]
 80085fe:	f003 0311 	and.w	r3, r3, #17
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <f_open+0xea>
					res = FR_DENIED;
 8008606:	2307      	movs	r3, #7
 8008608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800860c:	e007      	b.n	800861e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <f_open+0xfa>
 8008618:	2308      	movs	r3, #8
 800861a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800861e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008622:	2b00      	cmp	r3, #0
 8008624:	d168      	bne.n	80086f8 <f_open+0x1d4>
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	f003 0308 	and.w	r3, r3, #8
 800862c:	2b00      	cmp	r3, #0
 800862e:	d063      	beq.n	80086f8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008630:	f7fd fcfa 	bl	8006028 <get_fattime>
 8008634:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	330e      	adds	r3, #14
 800863a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd fe45 	bl	80062cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	3316      	adds	r3, #22
 8008646:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008648:	4618      	mov	r0, r3
 800864a:	f7fd fe3f 	bl	80062cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	330b      	adds	r3, #11
 8008652:	2220      	movs	r2, #32
 8008654:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fe17 	bl	8007290 <ld_clust>
 8008662:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008668:	2200      	movs	r2, #0
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fe2f 	bl	80072ce <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	331c      	adds	r3, #28
 8008674:	2100      	movs	r1, #0
 8008676:	4618      	mov	r0, r3
 8008678:	f7fd fe28 	bl	80062cc <st_dword>
					fs->wflag = 1;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	2201      	movs	r2, #1
 8008680:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008684:	2b00      	cmp	r3, #0
 8008686:	d037      	beq.n	80086f8 <f_open+0x1d4>
						dw = fs->winsect;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800868e:	f107 0318 	add.w	r3, r7, #24
 8008692:	2200      	movs	r2, #0
 8008694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fb1f 	bl	8006cda <remove_chain>
 800869c:	4603      	mov	r3, r0
 800869e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80086a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d126      	bne.n	80086f8 <f_open+0x1d4>
							res = move_window(fs, dw);
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe f866 	bl	8006780 <move_window>
 80086b4:	4603      	mov	r3, r0
 80086b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086be:	3a01      	subs	r2, #1
 80086c0:	615a      	str	r2, [r3, #20]
 80086c2:	e019      	b.n	80086f8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80086c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d115      	bne.n	80086f8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80086cc:	7fbb      	ldrb	r3, [r7, #30]
 80086ce:	f003 0310 	and.w	r3, r3, #16
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <f_open+0x1ba>
					res = FR_NO_FILE;
 80086d6:	2304      	movs	r3, #4
 80086d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80086dc:	e00c      	b.n	80086f8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d007      	beq.n	80086f8 <f_open+0x1d4>
 80086e8:	7fbb      	ldrb	r3, [r7, #30]
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d002      	beq.n	80086f8 <f_open+0x1d4>
						res = FR_DENIED;
 80086f2:	2307      	movs	r3, #7
 80086f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80086f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d128      	bne.n	8008752 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	f003 0308 	and.w	r3, r3, #8
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008710:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800871a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	f023 0301 	bic.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	bf14      	ite	ne
 800872a:	2301      	movne	r3, #1
 800872c:	2300      	moveq	r3, #0
 800872e:	b2db      	uxtb	r3, r3
 8008730:	461a      	mov	r2, r3
 8008732:	f107 0318 	add.w	r3, r7, #24
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f7fd feef 	bl	800651c <inc_lock>
 800873e:	4602      	mov	r2, r0
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d102      	bne.n	8008752 <f_open+0x22e>
 800874c:	2302      	movs	r3, #2
 800874e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008752:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008756:	2b00      	cmp	r3, #0
 8008758:	f040 80a3 	bne.w	80088a2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008760:	4611      	mov	r1, r2
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fd94 	bl	8007290 <ld_clust>
 8008768:	4602      	mov	r2, r0
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	331c      	adds	r3, #28
 8008772:	4618      	mov	r0, r3
 8008774:	f7fd fd6c 	bl	8006250 <ld_dword>
 8008778:	4602      	mov	r2, r0
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	88da      	ldrh	r2, [r3, #6]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	79fa      	ldrb	r2, [r7, #7]
 8008796:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3330      	adds	r3, #48	; 0x30
 80087ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fd fdd6 	bl	8006366 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d06e      	beq.n	80088a2 <f_open+0x37e>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d06a      	beq.n	80088a2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	895b      	ldrh	r3, [r3, #10]
 80087d8:	461a      	mov	r2, r3
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	899b      	ldrh	r3, [r3, #12]
 80087de:	fb02 f303 	mul.w	r3, r2, r3
 80087e2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087f0:	e016      	b.n	8008820 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe f87f 	bl	80068fa <get_fat>
 80087fc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80087fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008800:	2b01      	cmp	r3, #1
 8008802:	d802      	bhi.n	800880a <f_open+0x2e6>
 8008804:	2302      	movs	r3, #2
 8008806:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800880a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800880c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008810:	d102      	bne.n	8008818 <f_open+0x2f4>
 8008812:	2301      	movs	r3, #1
 8008814:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008818:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800881a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008820:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <f_open+0x30c>
 8008828:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800882a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800882c:	429a      	cmp	r2, r3
 800882e:	d8e0      	bhi.n	80087f2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008834:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008836:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800883a:	2b00      	cmp	r3, #0
 800883c:	d131      	bne.n	80088a2 <f_open+0x37e>
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	899b      	ldrh	r3, [r3, #12]
 8008842:	461a      	mov	r2, r3
 8008844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008846:	fbb3 f1f2 	udiv	r1, r3, r2
 800884a:	fb01 f202 	mul.w	r2, r1, r2
 800884e:	1a9b      	subs	r3, r3, r2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d026      	beq.n	80088a2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe f82f 	bl	80068bc <clust2sect>
 800885e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008862:	2b00      	cmp	r3, #0
 8008864:	d103      	bne.n	800886e <f_open+0x34a>
						res = FR_INT_ERR;
 8008866:	2302      	movs	r3, #2
 8008868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800886c:	e019      	b.n	80088a2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	899b      	ldrh	r3, [r3, #12]
 8008872:	461a      	mov	r2, r3
 8008874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008876:	fbb3 f2f2 	udiv	r2, r3, r2
 800887a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800887c:	441a      	add	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	7858      	ldrb	r0, [r3, #1]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a1a      	ldr	r2, [r3, #32]
 8008890:	2301      	movs	r3, #1
 8008892:	f7fd fc67 	bl	8006164 <disk_read>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <f_open+0x37e>
 800889c:	2301      	movs	r3, #1
 800889e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80088a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <f_open+0x38c>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80088b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3768      	adds	r7, #104	; 0x68
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08c      	sub	sp, #48	; 0x30
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f107 0210 	add.w	r2, r7, #16
 80088da:	4611      	mov	r1, r2
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff fda5 	bl	800842c <validate>
 80088e2:	4603      	mov	r3, r0
 80088e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80088e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d107      	bne.n	8008900 <f_write+0x44>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	7d5b      	ldrb	r3, [r3, #21]
 80088f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80088f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <f_write+0x4a>
 8008900:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008904:	e16a      	b.n	8008bdc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	7d1b      	ldrb	r3, [r3, #20]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <f_write+0x5a>
 8008912:	2307      	movs	r3, #7
 8008914:	e162      	b.n	8008bdc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	699a      	ldr	r2, [r3, #24]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	441a      	add	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	429a      	cmp	r2, r3
 8008924:	f080 814c 	bcs.w	8008bc0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	43db      	mvns	r3, r3
 800892e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008930:	e146      	b.n	8008bc0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	8992      	ldrh	r2, [r2, #12]
 800893a:	fbb3 f1f2 	udiv	r1, r3, r2
 800893e:	fb01 f202 	mul.w	r2, r1, r2
 8008942:	1a9b      	subs	r3, r3, r2
 8008944:	2b00      	cmp	r3, #0
 8008946:	f040 80f1 	bne.w	8008b2c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	8992      	ldrh	r2, [r2, #12]
 8008952:	fbb3 f3f2 	udiv	r3, r3, r2
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	8952      	ldrh	r2, [r2, #10]
 800895a:	3a01      	subs	r2, #1
 800895c:	4013      	ands	r3, r2
 800895e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d143      	bne.n	80089ee <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10c      	bne.n	8008988 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	2b00      	cmp	r3, #0
 8008978:	d11a      	bne.n	80089b0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2100      	movs	r1, #0
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fa10 	bl	8006da4 <create_chain>
 8008984:	62b8      	str	r0, [r7, #40]	; 0x28
 8008986:	e013      	b.n	80089b0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	4619      	mov	r1, r3
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f7fe fa9c 	bl	8006ed4 <clmt_clust>
 800899c:	62b8      	str	r0, [r7, #40]	; 0x28
 800899e:	e007      	b.n	80089b0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	4619      	mov	r1, r3
 80089a8:	4610      	mov	r0, r2
 80089aa:	f7fe f9fb 	bl	8006da4 <create_chain>
 80089ae:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 8109 	beq.w	8008bca <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d104      	bne.n	80089c8 <f_write+0x10c>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2202      	movs	r2, #2
 80089c2:	755a      	strb	r2, [r3, #21]
 80089c4:	2302      	movs	r3, #2
 80089c6:	e109      	b.n	8008bdc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ce:	d104      	bne.n	80089da <f_write+0x11e>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	755a      	strb	r2, [r3, #21]
 80089d6:	2301      	movs	r3, #1
 80089d8:	e100      	b.n	8008bdc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089de:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <f_write+0x132>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ec:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	7d1b      	ldrb	r3, [r3, #20]
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da18      	bge.n	8008a2a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	7858      	ldrb	r0, [r3, #1]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a1a      	ldr	r2, [r3, #32]
 8008a06:	2301      	movs	r3, #1
 8008a08:	f7fd fbcc 	bl	80061a4 <disk_write>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d004      	beq.n	8008a1c <f_write+0x160>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	755a      	strb	r2, [r3, #21]
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e0df      	b.n	8008bdc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	7d1b      	ldrb	r3, [r3, #20]
 8008a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f7fd ff42 	bl	80068bc <clust2sect>
 8008a38:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <f_write+0x18e>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2202      	movs	r2, #2
 8008a44:	755a      	strb	r2, [r3, #21]
 8008a46:	2302      	movs	r3, #2
 8008a48:	e0c8      	b.n	8008bdc <f_write+0x320>
			sect += csect;
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	4413      	add	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	899b      	ldrh	r3, [r3, #12]
 8008a56:	461a      	mov	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a5e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d043      	beq.n	8008aee <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	8952      	ldrh	r2, [r2, #10]
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d905      	bls.n	8008a80 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	895b      	ldrh	r3, [r3, #10]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	7858      	ldrb	r0, [r3, #1]
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	69f9      	ldr	r1, [r7, #28]
 8008a8a:	f7fd fb8b 	bl	80061a4 <disk_write>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <f_write+0x1e2>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	755a      	strb	r2, [r3, #21]
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e09e      	b.n	8008bdc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a1a      	ldr	r2, [r3, #32]
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	6a3a      	ldr	r2, [r7, #32]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d918      	bls.n	8008ade <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6a1a      	ldr	r2, [r3, #32]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	8992      	ldrh	r2, [r2, #12]
 8008abe:	fb02 f303 	mul.w	r3, r2, r3
 8008ac2:	69fa      	ldr	r2, [r7, #28]
 8008ac4:	18d1      	adds	r1, r2, r3
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	899b      	ldrh	r3, [r3, #12]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f7fd fc2a 	bl	8006324 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	7d1b      	ldrb	r3, [r3, #20]
 8008ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	899b      	ldrh	r3, [r3, #12]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	fb02 f303 	mul.w	r3, r2, r3
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008aec:	e04b      	b.n	8008b86 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d016      	beq.n	8008b26 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	699a      	ldr	r2, [r3, #24]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d210      	bcs.n	8008b26 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	7858      	ldrb	r0, [r3, #1]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b0e:	2301      	movs	r3, #1
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	f7fd fb27 	bl	8006164 <disk_read>
 8008b16:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d004      	beq.n	8008b26 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	755a      	strb	r2, [r3, #21]
 8008b22:	2301      	movs	r3, #1
 8008b24:	e05a      	b.n	8008bdc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	899b      	ldrh	r3, [r3, #12]
 8008b30:	4618      	mov	r0, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	8992      	ldrh	r2, [r2, #12]
 8008b3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b3e:	fb01 f202 	mul.w	r2, r1, r2
 8008b42:	1a9b      	subs	r3, r3, r2
 8008b44:	1ac3      	subs	r3, r0, r3
 8008b46:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d901      	bls.n	8008b54 <f_write+0x298>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	8992      	ldrh	r2, [r2, #12]
 8008b62:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b66:	fb00 f202 	mul.w	r2, r0, r2
 8008b6a:	1a9b      	subs	r3, r3, r2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b70:	69f9      	ldr	r1, [r7, #28]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fd fbd6 	bl	8006324 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	7d1b      	ldrb	r3, [r3, #20]
 8008b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	4413      	add	r3, r2
 8008b8c:	61fb      	str	r3, [r7, #28]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	699a      	ldr	r2, [r3, #24]
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	441a      	add	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	619a      	str	r2, [r3, #24]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	68da      	ldr	r2, [r3, #12]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	bf38      	it	cc
 8008ba6:	461a      	movcc	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	60da      	str	r2, [r3, #12]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	441a      	add	r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f47f aeb5 	bne.w	8008932 <f_write+0x76>
 8008bc8:	e000      	b.n	8008bcc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	7d1b      	ldrb	r3, [r3, #20]
 8008bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3730      	adds	r7, #48	; 0x30
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f107 0208 	add.w	r2, r7, #8
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff fc19 	bl	800842c <validate>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d168      	bne.n	8008cd6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7d1b      	ldrb	r3, [r3, #20]
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d062      	beq.n	8008cd6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	7d1b      	ldrb	r3, [r3, #20]
 8008c14:	b25b      	sxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	da15      	bge.n	8008c46 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	7858      	ldrb	r0, [r3, #1]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a1a      	ldr	r2, [r3, #32]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	f7fd fabb 	bl	80061a4 <disk_write>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <f_sync+0x54>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e04f      	b.n	8008cd8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	7d1b      	ldrb	r3, [r3, #20]
 8008c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008c46:	f7fd f9ef 	bl	8006028 <get_fattime>
 8008c4a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f7fd fd93 	bl	8006780 <move_window>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d138      	bne.n	8008cd6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c68:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	330b      	adds	r3, #11
 8008c6e:	781a      	ldrb	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	330b      	adds	r3, #11
 8008c74:	f042 0220 	orr.w	r2, r2, #32
 8008c78:	b2d2      	uxtb	r2, r2
 8008c7a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	461a      	mov	r2, r3
 8008c86:	68f9      	ldr	r1, [r7, #12]
 8008c88:	f7fe fb21 	bl	80072ce <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f103 021c 	add.w	r2, r3, #28
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	4619      	mov	r1, r3
 8008c98:	4610      	mov	r0, r2
 8008c9a:	f7fd fb17 	bl	80062cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3316      	adds	r3, #22
 8008ca2:	6939      	ldr	r1, [r7, #16]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fd fb11 	bl	80062cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3312      	adds	r3, #18
 8008cae:	2100      	movs	r1, #0
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fd faf0 	bl	8006296 <st_word>
					fs->wflag = 1;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fd fd8c 	bl	80067dc <sync_fs>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	7d1b      	ldrb	r3, [r3, #20]
 8008ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff ff7b 	bl	8008be4 <f_sync>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d118      	bne.n	8008d2a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f107 0208 	add.w	r2, r7, #8
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7ff fb93 	bl	800842c <validate>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10c      	bne.n	8008d2a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fd fc8f 	bl	8006638 <dec_lock>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b092      	sub	sp, #72	; 0x48
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008d40:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008d44:	f107 030c 	add.w	r3, r7, #12
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff f8e8 	bl	8007f20 <find_volume>
 8008d50:	4603      	mov	r3, r0
 8008d52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008d56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f040 8099 	bne.w	8008e92 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	699a      	ldr	r2, [r3, #24]
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	3b02      	subs	r3, #2
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d804      	bhi.n	8008d7e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	699a      	ldr	r2, [r3, #24]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	e089      	b.n	8008e92 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d128      	bne.n	8008ddc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008d92:	f107 0314 	add.w	r3, r7, #20
 8008d96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fd fdae 	bl	80068fa <get_fat>
 8008d9e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d103      	bne.n	8008db0 <f_getfree+0x7c>
 8008da8:	2301      	movs	r3, #1
 8008daa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008dae:	e063      	b.n	8008e78 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d103      	bne.n	8008dbe <f_getfree+0x8a>
 8008db6:	2302      	movs	r3, #2
 8008db8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008dbc:	e05c      	b.n	8008e78 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d102      	bne.n	8008dca <f_getfree+0x96>
 8008dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	3301      	adds	r3, #1
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d3db      	bcc.n	8008d92 <f_getfree+0x5e>
 8008dda:	e04d      	b.n	8008e78 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	637b      	str	r3, [r7, #52]	; 0x34
 8008dec:	2300      	movs	r3, #0
 8008dee:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d113      	bne.n	8008e1e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	63ba      	str	r2, [r7, #56]	; 0x38
 8008dfe:	4619      	mov	r1, r3
 8008e00:	f7fd fcbe 	bl	8006780 <move_window>
 8008e04:	4603      	mov	r3, r0
 8008e06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008e0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d131      	bne.n	8008e76 <f_getfree+0x142>
							p = fs->win;
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	3338      	adds	r3, #56	; 0x38
 8008e16:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	899b      	ldrh	r3, [r3, #12]
 8008e1c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d10f      	bne.n	8008e46 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008e26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e28:	f7fd f9fa 	bl	8006220 <ld_word>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d102      	bne.n	8008e38 <f_getfree+0x104>
 8008e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e34:	3301      	adds	r3, #1
 8008e36:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	3302      	adds	r3, #2
 8008e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	3b02      	subs	r3, #2
 8008e42:	637b      	str	r3, [r7, #52]	; 0x34
 8008e44:	e010      	b.n	8008e68 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e48:	f7fd fa02 	bl	8006250 <ld_dword>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d102      	bne.n	8008e5c <f_getfree+0x128>
 8008e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e58:	3301      	adds	r3, #1
 8008e5a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5e:	3304      	adds	r3, #4
 8008e60:	633b      	str	r3, [r7, #48]	; 0x30
 8008e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e64:	3b04      	subs	r3, #4
 8008e66:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1bd      	bne.n	8008df0 <f_getfree+0xbc>
 8008e74:	e000      	b.n	8008e78 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008e76:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e7c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e82:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	791a      	ldrb	r2, [r3, #4]
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	f042 0201 	orr.w	r2, r2, #1
 8008e8e:	b2d2      	uxtb	r2, r2
 8008e90:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008e92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3748      	adds	r7, #72	; 0x48
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	2b0a      	cmp	r3, #10
 8008eae:	d103      	bne.n	8008eb8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008eb0:	210d      	movs	r1, #13
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff fff3 	bl	8008e9e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	db25      	blt.n	8008f10 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	60fa      	str	r2, [r7, #12]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	4413      	add	r3, r2
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b3c      	cmp	r3, #60	; 0x3c
 8008ed6:	dd12      	ble.n	8008efe <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6818      	ldr	r0, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f103 010c 	add.w	r1, r3, #12
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	f107 0308 	add.w	r3, r7, #8
 8008ee8:	f7ff fce8 	bl	80088bc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d101      	bne.n	8008ef8 <putc_bfd+0x5a>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	e001      	b.n	8008efc <putc_bfd+0x5e>
 8008ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8008efc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	609a      	str	r2, [r3, #8]
 8008f0e:	e000      	b.n	8008f12 <putc_bfd+0x74>
	if (i < 0) return;
 8008f10:	bf00      	nop
}
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	db16      	blt.n	8008f56 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f103 010c 	add.w	r1, r3, #12
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	461a      	mov	r2, r3
 8008f38:	f107 030c 	add.w	r3, r7, #12
 8008f3c:	f7ff fcbe 	bl	80088bc <f_write>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d107      	bne.n	8008f56 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d102      	bne.n	8008f56 <putc_flush+0x3e>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	e001      	b.n	8008f5a <putc_flush+0x42>
	return EOF;
 8008f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	605a      	str	r2, [r3, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	609a      	str	r2, [r3, #8]
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b096      	sub	sp, #88	; 0x58
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008f96:	f107 030c 	add.w	r3, r7, #12
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7ff ffe0 	bl	8008f62 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008fa2:	e009      	b.n	8008fb8 <f_puts+0x2c>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	607a      	str	r2, [r7, #4]
 8008faa:	781a      	ldrb	r2, [r3, #0]
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff ff73 	bl	8008e9e <putc_bfd>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1f1      	bne.n	8008fa4 <f_puts+0x18>
	return putc_flush(&pb);
 8008fc0:	f107 030c 	add.w	r3, r7, #12
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff ffa7 	bl	8008f18 <putc_flush>
 8008fca:	4603      	mov	r3, r0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3758      	adds	r7, #88	; 0x58
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008fea:	4b1f      	ldr	r3, [pc, #124]	; (8009068 <FATFS_LinkDriverEx+0x94>)
 8008fec:	7a5b      	ldrb	r3, [r3, #9]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d131      	bne.n	8009058 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008ff4:	4b1c      	ldr	r3, [pc, #112]	; (8009068 <FATFS_LinkDriverEx+0x94>)
 8008ff6:	7a5b      	ldrb	r3, [r3, #9]
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	4b1a      	ldr	r3, [pc, #104]	; (8009068 <FATFS_LinkDriverEx+0x94>)
 8008ffe:	2100      	movs	r1, #0
 8009000:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009002:	4b19      	ldr	r3, [pc, #100]	; (8009068 <FATFS_LinkDriverEx+0x94>)
 8009004:	7a5b      	ldrb	r3, [r3, #9]
 8009006:	b2db      	uxtb	r3, r3
 8009008:	4a17      	ldr	r2, [pc, #92]	; (8009068 <FATFS_LinkDriverEx+0x94>)
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009012:	4b15      	ldr	r3, [pc, #84]	; (8009068 <FATFS_LinkDriverEx+0x94>)
 8009014:	7a5b      	ldrb	r3, [r3, #9]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	461a      	mov	r2, r3
 800901a:	4b13      	ldr	r3, [pc, #76]	; (8009068 <FATFS_LinkDriverEx+0x94>)
 800901c:	4413      	add	r3, r2
 800901e:	79fa      	ldrb	r2, [r7, #7]
 8009020:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009022:	4b11      	ldr	r3, [pc, #68]	; (8009068 <FATFS_LinkDriverEx+0x94>)
 8009024:	7a5b      	ldrb	r3, [r3, #9]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	b2d1      	uxtb	r1, r2
 800902c:	4a0e      	ldr	r2, [pc, #56]	; (8009068 <FATFS_LinkDriverEx+0x94>)
 800902e:	7251      	strb	r1, [r2, #9]
 8009030:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009032:	7dbb      	ldrb	r3, [r7, #22]
 8009034:	3330      	adds	r3, #48	; 0x30
 8009036:	b2da      	uxtb	r2, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	3301      	adds	r3, #1
 8009040:	223a      	movs	r2, #58	; 0x3a
 8009042:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	3302      	adds	r3, #2
 8009048:	222f      	movs	r2, #47	; 0x2f
 800904a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	3303      	adds	r3, #3
 8009050:	2200      	movs	r2, #0
 8009052:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009058:	7dfb      	ldrb	r3, [r7, #23]
}
 800905a:	4618      	mov	r0, r3
 800905c:	371c      	adds	r7, #28
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	20002b64 	.word	0x20002b64

0800906c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009076:	2200      	movs	r2, #0
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff ffaa 	bl	8008fd4 <FATFS_LinkDriverEx>
 8009080:	4603      	mov	r3, r0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
	...

0800908c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	4603      	mov	r3, r0
 8009094:	6039      	str	r1, [r7, #0]
 8009096:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009098:	88fb      	ldrh	r3, [r7, #6]
 800909a:	2b7f      	cmp	r3, #127	; 0x7f
 800909c:	d802      	bhi.n	80090a4 <ff_convert+0x18>
		c = chr;
 800909e:	88fb      	ldrh	r3, [r7, #6]
 80090a0:	81fb      	strh	r3, [r7, #14]
 80090a2:	e025      	b.n	80090f0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00b      	beq.n	80090c2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	2bff      	cmp	r3, #255	; 0xff
 80090ae:	d805      	bhi.n	80090bc <ff_convert+0x30>
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	3b80      	subs	r3, #128	; 0x80
 80090b4:	4a12      	ldr	r2, [pc, #72]	; (8009100 <ff_convert+0x74>)
 80090b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090ba:	e000      	b.n	80090be <ff_convert+0x32>
 80090bc:	2300      	movs	r3, #0
 80090be:	81fb      	strh	r3, [r7, #14]
 80090c0:	e016      	b.n	80090f0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80090c2:	2300      	movs	r3, #0
 80090c4:	81fb      	strh	r3, [r7, #14]
 80090c6:	e009      	b.n	80090dc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80090c8:	89fb      	ldrh	r3, [r7, #14]
 80090ca:	4a0d      	ldr	r2, [pc, #52]	; (8009100 <ff_convert+0x74>)
 80090cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090d0:	88fa      	ldrh	r2, [r7, #6]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d006      	beq.n	80090e4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80090d6:	89fb      	ldrh	r3, [r7, #14]
 80090d8:	3301      	adds	r3, #1
 80090da:	81fb      	strh	r3, [r7, #14]
 80090dc:	89fb      	ldrh	r3, [r7, #14]
 80090de:	2b7f      	cmp	r3, #127	; 0x7f
 80090e0:	d9f2      	bls.n	80090c8 <ff_convert+0x3c>
 80090e2:	e000      	b.n	80090e6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80090e4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80090e6:	89fb      	ldrh	r3, [r7, #14]
 80090e8:	3380      	adds	r3, #128	; 0x80
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80090f0:	89fb      	ldrh	r3, [r7, #14]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	0800c44c 	.word	0x0800c44c

08009104 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009114:	d201      	bcs.n	800911a <ff_wtoupper+0x16>
 8009116:	4b3e      	ldr	r3, [pc, #248]	; (8009210 <ff_wtoupper+0x10c>)
 8009118:	e000      	b.n	800911c <ff_wtoupper+0x18>
 800911a:	4b3e      	ldr	r3, [pc, #248]	; (8009214 <ff_wtoupper+0x110>)
 800911c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	1c9a      	adds	r2, r3, #2
 8009122:	617a      	str	r2, [r7, #20]
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009128:	8a7b      	ldrh	r3, [r7, #18]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d068      	beq.n	8009200 <ff_wtoupper+0xfc>
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	8a7b      	ldrh	r3, [r7, #18]
 8009132:	429a      	cmp	r2, r3
 8009134:	d364      	bcc.n	8009200 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	1c9a      	adds	r2, r3, #2
 800913a:	617a      	str	r2, [r7, #20]
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	823b      	strh	r3, [r7, #16]
 8009140:	8a3b      	ldrh	r3, [r7, #16]
 8009142:	0a1b      	lsrs	r3, r3, #8
 8009144:	81fb      	strh	r3, [r7, #14]
 8009146:	8a3b      	ldrh	r3, [r7, #16]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800914c:	88fa      	ldrh	r2, [r7, #6]
 800914e:	8a79      	ldrh	r1, [r7, #18]
 8009150:	8a3b      	ldrh	r3, [r7, #16]
 8009152:	440b      	add	r3, r1
 8009154:	429a      	cmp	r2, r3
 8009156:	da49      	bge.n	80091ec <ff_wtoupper+0xe8>
			switch (cmd) {
 8009158:	89fb      	ldrh	r3, [r7, #14]
 800915a:	2b08      	cmp	r3, #8
 800915c:	d84f      	bhi.n	80091fe <ff_wtoupper+0xfa>
 800915e:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <ff_wtoupper+0x60>)
 8009160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009164:	08009189 	.word	0x08009189
 8009168:	0800919b 	.word	0x0800919b
 800916c:	080091b1 	.word	0x080091b1
 8009170:	080091b9 	.word	0x080091b9
 8009174:	080091c1 	.word	0x080091c1
 8009178:	080091c9 	.word	0x080091c9
 800917c:	080091d1 	.word	0x080091d1
 8009180:	080091d9 	.word	0x080091d9
 8009184:	080091e1 	.word	0x080091e1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009188:	88fa      	ldrh	r2, [r7, #6]
 800918a:	8a7b      	ldrh	r3, [r7, #18]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	4413      	add	r3, r2
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	80fb      	strh	r3, [r7, #6]
 8009198:	e027      	b.n	80091ea <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800919a:	88fa      	ldrh	r2, [r7, #6]
 800919c:	8a7b      	ldrh	r3, [r7, #18]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	88fa      	ldrh	r2, [r7, #6]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	80fb      	strh	r3, [r7, #6]
 80091ae:	e01c      	b.n	80091ea <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80091b0:	88fb      	ldrh	r3, [r7, #6]
 80091b2:	3b10      	subs	r3, #16
 80091b4:	80fb      	strh	r3, [r7, #6]
 80091b6:	e018      	b.n	80091ea <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80091b8:	88fb      	ldrh	r3, [r7, #6]
 80091ba:	3b20      	subs	r3, #32
 80091bc:	80fb      	strh	r3, [r7, #6]
 80091be:	e014      	b.n	80091ea <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80091c0:	88fb      	ldrh	r3, [r7, #6]
 80091c2:	3b30      	subs	r3, #48	; 0x30
 80091c4:	80fb      	strh	r3, [r7, #6]
 80091c6:	e010      	b.n	80091ea <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80091c8:	88fb      	ldrh	r3, [r7, #6]
 80091ca:	3b1a      	subs	r3, #26
 80091cc:	80fb      	strh	r3, [r7, #6]
 80091ce:	e00c      	b.n	80091ea <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80091d0:	88fb      	ldrh	r3, [r7, #6]
 80091d2:	3308      	adds	r3, #8
 80091d4:	80fb      	strh	r3, [r7, #6]
 80091d6:	e008      	b.n	80091ea <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	3b50      	subs	r3, #80	; 0x50
 80091dc:	80fb      	strh	r3, [r7, #6]
 80091de:	e004      	b.n	80091ea <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80091e0:	88fb      	ldrh	r3, [r7, #6]
 80091e2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80091e6:	80fb      	strh	r3, [r7, #6]
 80091e8:	bf00      	nop
			}
			break;
 80091ea:	e008      	b.n	80091fe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80091ec:	89fb      	ldrh	r3, [r7, #14]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d195      	bne.n	800911e <ff_wtoupper+0x1a>
 80091f2:	8a3b      	ldrh	r3, [r7, #16]
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	4413      	add	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80091fc:	e78f      	b.n	800911e <ff_wtoupper+0x1a>
			break;
 80091fe:	bf00      	nop
	}

	return chr;
 8009200:	88fb      	ldrh	r3, [r7, #6]
}
 8009202:	4618      	mov	r0, r3
 8009204:	371c      	adds	r7, #28
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	0800c54c 	.word	0x0800c54c
 8009214:	0800c740 	.word	0x0800c740

08009218 <__errno>:
 8009218:	4b01      	ldr	r3, [pc, #4]	; (8009220 <__errno+0x8>)
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20000024 	.word	0x20000024

08009224 <__libc_init_array>:
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	4d0d      	ldr	r5, [pc, #52]	; (800925c <__libc_init_array+0x38>)
 8009228:	4c0d      	ldr	r4, [pc, #52]	; (8009260 <__libc_init_array+0x3c>)
 800922a:	1b64      	subs	r4, r4, r5
 800922c:	10a4      	asrs	r4, r4, #2
 800922e:	2600      	movs	r6, #0
 8009230:	42a6      	cmp	r6, r4
 8009232:	d109      	bne.n	8009248 <__libc_init_array+0x24>
 8009234:	4d0b      	ldr	r5, [pc, #44]	; (8009264 <__libc_init_array+0x40>)
 8009236:	4c0c      	ldr	r4, [pc, #48]	; (8009268 <__libc_init_array+0x44>)
 8009238:	f002 fe22 	bl	800be80 <_init>
 800923c:	1b64      	subs	r4, r4, r5
 800923e:	10a4      	asrs	r4, r4, #2
 8009240:	2600      	movs	r6, #0
 8009242:	42a6      	cmp	r6, r4
 8009244:	d105      	bne.n	8009252 <__libc_init_array+0x2e>
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	f855 3b04 	ldr.w	r3, [r5], #4
 800924c:	4798      	blx	r3
 800924e:	3601      	adds	r6, #1
 8009250:	e7ee      	b.n	8009230 <__libc_init_array+0xc>
 8009252:	f855 3b04 	ldr.w	r3, [r5], #4
 8009256:	4798      	blx	r3
 8009258:	3601      	adds	r6, #1
 800925a:	e7f2      	b.n	8009242 <__libc_init_array+0x1e>
 800925c:	0800cbdc 	.word	0x0800cbdc
 8009260:	0800cbdc 	.word	0x0800cbdc
 8009264:	0800cbdc 	.word	0x0800cbdc
 8009268:	0800cbe0 	.word	0x0800cbe0

0800926c <memcpy>:
 800926c:	440a      	add	r2, r1
 800926e:	4291      	cmp	r1, r2
 8009270:	f100 33ff 	add.w	r3, r0, #4294967295
 8009274:	d100      	bne.n	8009278 <memcpy+0xc>
 8009276:	4770      	bx	lr
 8009278:	b510      	push	{r4, lr}
 800927a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800927e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009282:	4291      	cmp	r1, r2
 8009284:	d1f9      	bne.n	800927a <memcpy+0xe>
 8009286:	bd10      	pop	{r4, pc}

08009288 <memset>:
 8009288:	4402      	add	r2, r0
 800928a:	4603      	mov	r3, r0
 800928c:	4293      	cmp	r3, r2
 800928e:	d100      	bne.n	8009292 <memset+0xa>
 8009290:	4770      	bx	lr
 8009292:	f803 1b01 	strb.w	r1, [r3], #1
 8009296:	e7f9      	b.n	800928c <memset+0x4>

08009298 <__cvt>:
 8009298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800929c:	ec55 4b10 	vmov	r4, r5, d0
 80092a0:	2d00      	cmp	r5, #0
 80092a2:	460e      	mov	r6, r1
 80092a4:	4619      	mov	r1, r3
 80092a6:	462b      	mov	r3, r5
 80092a8:	bfbb      	ittet	lt
 80092aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092ae:	461d      	movlt	r5, r3
 80092b0:	2300      	movge	r3, #0
 80092b2:	232d      	movlt	r3, #45	; 0x2d
 80092b4:	700b      	strb	r3, [r1, #0]
 80092b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092bc:	4691      	mov	r9, r2
 80092be:	f023 0820 	bic.w	r8, r3, #32
 80092c2:	bfbc      	itt	lt
 80092c4:	4622      	movlt	r2, r4
 80092c6:	4614      	movlt	r4, r2
 80092c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092cc:	d005      	beq.n	80092da <__cvt+0x42>
 80092ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092d2:	d100      	bne.n	80092d6 <__cvt+0x3e>
 80092d4:	3601      	adds	r6, #1
 80092d6:	2102      	movs	r1, #2
 80092d8:	e000      	b.n	80092dc <__cvt+0x44>
 80092da:	2103      	movs	r1, #3
 80092dc:	ab03      	add	r3, sp, #12
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	ab02      	add	r3, sp, #8
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	ec45 4b10 	vmov	d0, r4, r5
 80092e8:	4653      	mov	r3, sl
 80092ea:	4632      	mov	r2, r6
 80092ec:	f000 fe30 	bl	8009f50 <_dtoa_r>
 80092f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092f4:	4607      	mov	r7, r0
 80092f6:	d102      	bne.n	80092fe <__cvt+0x66>
 80092f8:	f019 0f01 	tst.w	r9, #1
 80092fc:	d022      	beq.n	8009344 <__cvt+0xac>
 80092fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009302:	eb07 0906 	add.w	r9, r7, r6
 8009306:	d110      	bne.n	800932a <__cvt+0x92>
 8009308:	783b      	ldrb	r3, [r7, #0]
 800930a:	2b30      	cmp	r3, #48	; 0x30
 800930c:	d10a      	bne.n	8009324 <__cvt+0x8c>
 800930e:	2200      	movs	r2, #0
 8009310:	2300      	movs	r3, #0
 8009312:	4620      	mov	r0, r4
 8009314:	4629      	mov	r1, r5
 8009316:	f7f7 fbdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800931a:	b918      	cbnz	r0, 8009324 <__cvt+0x8c>
 800931c:	f1c6 0601 	rsb	r6, r6, #1
 8009320:	f8ca 6000 	str.w	r6, [sl]
 8009324:	f8da 3000 	ldr.w	r3, [sl]
 8009328:	4499      	add	r9, r3
 800932a:	2200      	movs	r2, #0
 800932c:	2300      	movs	r3, #0
 800932e:	4620      	mov	r0, r4
 8009330:	4629      	mov	r1, r5
 8009332:	f7f7 fbd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009336:	b108      	cbz	r0, 800933c <__cvt+0xa4>
 8009338:	f8cd 900c 	str.w	r9, [sp, #12]
 800933c:	2230      	movs	r2, #48	; 0x30
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	454b      	cmp	r3, r9
 8009342:	d307      	bcc.n	8009354 <__cvt+0xbc>
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009348:	1bdb      	subs	r3, r3, r7
 800934a:	4638      	mov	r0, r7
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	b004      	add	sp, #16
 8009350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009354:	1c59      	adds	r1, r3, #1
 8009356:	9103      	str	r1, [sp, #12]
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	e7f0      	b.n	800933e <__cvt+0xa6>

0800935c <__exponent>:
 800935c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800935e:	4603      	mov	r3, r0
 8009360:	2900      	cmp	r1, #0
 8009362:	bfb8      	it	lt
 8009364:	4249      	neglt	r1, r1
 8009366:	f803 2b02 	strb.w	r2, [r3], #2
 800936a:	bfb4      	ite	lt
 800936c:	222d      	movlt	r2, #45	; 0x2d
 800936e:	222b      	movge	r2, #43	; 0x2b
 8009370:	2909      	cmp	r1, #9
 8009372:	7042      	strb	r2, [r0, #1]
 8009374:	dd2a      	ble.n	80093cc <__exponent+0x70>
 8009376:	f10d 0407 	add.w	r4, sp, #7
 800937a:	46a4      	mov	ip, r4
 800937c:	270a      	movs	r7, #10
 800937e:	46a6      	mov	lr, r4
 8009380:	460a      	mov	r2, r1
 8009382:	fb91 f6f7 	sdiv	r6, r1, r7
 8009386:	fb07 1516 	mls	r5, r7, r6, r1
 800938a:	3530      	adds	r5, #48	; 0x30
 800938c:	2a63      	cmp	r2, #99	; 0x63
 800938e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009392:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009396:	4631      	mov	r1, r6
 8009398:	dcf1      	bgt.n	800937e <__exponent+0x22>
 800939a:	3130      	adds	r1, #48	; 0x30
 800939c:	f1ae 0502 	sub.w	r5, lr, #2
 80093a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80093a4:	1c44      	adds	r4, r0, #1
 80093a6:	4629      	mov	r1, r5
 80093a8:	4561      	cmp	r1, ip
 80093aa:	d30a      	bcc.n	80093c2 <__exponent+0x66>
 80093ac:	f10d 0209 	add.w	r2, sp, #9
 80093b0:	eba2 020e 	sub.w	r2, r2, lr
 80093b4:	4565      	cmp	r5, ip
 80093b6:	bf88      	it	hi
 80093b8:	2200      	movhi	r2, #0
 80093ba:	4413      	add	r3, r2
 80093bc:	1a18      	subs	r0, r3, r0
 80093be:	b003      	add	sp, #12
 80093c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80093ca:	e7ed      	b.n	80093a8 <__exponent+0x4c>
 80093cc:	2330      	movs	r3, #48	; 0x30
 80093ce:	3130      	adds	r1, #48	; 0x30
 80093d0:	7083      	strb	r3, [r0, #2]
 80093d2:	70c1      	strb	r1, [r0, #3]
 80093d4:	1d03      	adds	r3, r0, #4
 80093d6:	e7f1      	b.n	80093bc <__exponent+0x60>

080093d8 <_printf_float>:
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	ed2d 8b02 	vpush	{d8}
 80093e0:	b08d      	sub	sp, #52	; 0x34
 80093e2:	460c      	mov	r4, r1
 80093e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093e8:	4616      	mov	r6, r2
 80093ea:	461f      	mov	r7, r3
 80093ec:	4605      	mov	r5, r0
 80093ee:	f001 fd55 	bl	800ae9c <_localeconv_r>
 80093f2:	f8d0 a000 	ldr.w	sl, [r0]
 80093f6:	4650      	mov	r0, sl
 80093f8:	f7f6 fef2 	bl	80001e0 <strlen>
 80093fc:	2300      	movs	r3, #0
 80093fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	9305      	str	r3, [sp, #20]
 8009404:	f8d8 3000 	ldr.w	r3, [r8]
 8009408:	f894 b018 	ldrb.w	fp, [r4, #24]
 800940c:	3307      	adds	r3, #7
 800940e:	f023 0307 	bic.w	r3, r3, #7
 8009412:	f103 0208 	add.w	r2, r3, #8
 8009416:	f8c8 2000 	str.w	r2, [r8]
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009422:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009426:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800942a:	9307      	str	r3, [sp, #28]
 800942c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009430:	ee08 0a10 	vmov	s16, r0
 8009434:	4b9f      	ldr	r3, [pc, #636]	; (80096b4 <_printf_float+0x2dc>)
 8009436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800943a:	f04f 32ff 	mov.w	r2, #4294967295
 800943e:	f7f7 fb7d 	bl	8000b3c <__aeabi_dcmpun>
 8009442:	bb88      	cbnz	r0, 80094a8 <_printf_float+0xd0>
 8009444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009448:	4b9a      	ldr	r3, [pc, #616]	; (80096b4 <_printf_float+0x2dc>)
 800944a:	f04f 32ff 	mov.w	r2, #4294967295
 800944e:	f7f7 fb57 	bl	8000b00 <__aeabi_dcmple>
 8009452:	bb48      	cbnz	r0, 80094a8 <_printf_float+0xd0>
 8009454:	2200      	movs	r2, #0
 8009456:	2300      	movs	r3, #0
 8009458:	4640      	mov	r0, r8
 800945a:	4649      	mov	r1, r9
 800945c:	f7f7 fb46 	bl	8000aec <__aeabi_dcmplt>
 8009460:	b110      	cbz	r0, 8009468 <_printf_float+0x90>
 8009462:	232d      	movs	r3, #45	; 0x2d
 8009464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009468:	4b93      	ldr	r3, [pc, #588]	; (80096b8 <_printf_float+0x2e0>)
 800946a:	4894      	ldr	r0, [pc, #592]	; (80096bc <_printf_float+0x2e4>)
 800946c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009470:	bf94      	ite	ls
 8009472:	4698      	movls	r8, r3
 8009474:	4680      	movhi	r8, r0
 8009476:	2303      	movs	r3, #3
 8009478:	6123      	str	r3, [r4, #16]
 800947a:	9b05      	ldr	r3, [sp, #20]
 800947c:	f023 0204 	bic.w	r2, r3, #4
 8009480:	6022      	str	r2, [r4, #0]
 8009482:	f04f 0900 	mov.w	r9, #0
 8009486:	9700      	str	r7, [sp, #0]
 8009488:	4633      	mov	r3, r6
 800948a:	aa0b      	add	r2, sp, #44	; 0x2c
 800948c:	4621      	mov	r1, r4
 800948e:	4628      	mov	r0, r5
 8009490:	f000 f9d8 	bl	8009844 <_printf_common>
 8009494:	3001      	adds	r0, #1
 8009496:	f040 8090 	bne.w	80095ba <_printf_float+0x1e2>
 800949a:	f04f 30ff 	mov.w	r0, #4294967295
 800949e:	b00d      	add	sp, #52	; 0x34
 80094a0:	ecbd 8b02 	vpop	{d8}
 80094a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a8:	4642      	mov	r2, r8
 80094aa:	464b      	mov	r3, r9
 80094ac:	4640      	mov	r0, r8
 80094ae:	4649      	mov	r1, r9
 80094b0:	f7f7 fb44 	bl	8000b3c <__aeabi_dcmpun>
 80094b4:	b140      	cbz	r0, 80094c8 <_printf_float+0xf0>
 80094b6:	464b      	mov	r3, r9
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bfbc      	itt	lt
 80094bc:	232d      	movlt	r3, #45	; 0x2d
 80094be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80094c2:	487f      	ldr	r0, [pc, #508]	; (80096c0 <_printf_float+0x2e8>)
 80094c4:	4b7f      	ldr	r3, [pc, #508]	; (80096c4 <_printf_float+0x2ec>)
 80094c6:	e7d1      	b.n	800946c <_printf_float+0x94>
 80094c8:	6863      	ldr	r3, [r4, #4]
 80094ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80094ce:	9206      	str	r2, [sp, #24]
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	d13f      	bne.n	8009554 <_printf_float+0x17c>
 80094d4:	2306      	movs	r3, #6
 80094d6:	6063      	str	r3, [r4, #4]
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	6861      	ldr	r1, [r4, #4]
 80094dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094e0:	2300      	movs	r3, #0
 80094e2:	9303      	str	r3, [sp, #12]
 80094e4:	ab0a      	add	r3, sp, #40	; 0x28
 80094e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80094ea:	ab09      	add	r3, sp, #36	; 0x24
 80094ec:	ec49 8b10 	vmov	d0, r8, r9
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	6022      	str	r2, [r4, #0]
 80094f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094f8:	4628      	mov	r0, r5
 80094fa:	f7ff fecd 	bl	8009298 <__cvt>
 80094fe:	9b06      	ldr	r3, [sp, #24]
 8009500:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009502:	2b47      	cmp	r3, #71	; 0x47
 8009504:	4680      	mov	r8, r0
 8009506:	d108      	bne.n	800951a <_printf_float+0x142>
 8009508:	1cc8      	adds	r0, r1, #3
 800950a:	db02      	blt.n	8009512 <_printf_float+0x13a>
 800950c:	6863      	ldr	r3, [r4, #4]
 800950e:	4299      	cmp	r1, r3
 8009510:	dd41      	ble.n	8009596 <_printf_float+0x1be>
 8009512:	f1ab 0b02 	sub.w	fp, fp, #2
 8009516:	fa5f fb8b 	uxtb.w	fp, fp
 800951a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800951e:	d820      	bhi.n	8009562 <_printf_float+0x18a>
 8009520:	3901      	subs	r1, #1
 8009522:	465a      	mov	r2, fp
 8009524:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009528:	9109      	str	r1, [sp, #36]	; 0x24
 800952a:	f7ff ff17 	bl	800935c <__exponent>
 800952e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009530:	1813      	adds	r3, r2, r0
 8009532:	2a01      	cmp	r2, #1
 8009534:	4681      	mov	r9, r0
 8009536:	6123      	str	r3, [r4, #16]
 8009538:	dc02      	bgt.n	8009540 <_printf_float+0x168>
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	07d2      	lsls	r2, r2, #31
 800953e:	d501      	bpl.n	8009544 <_printf_float+0x16c>
 8009540:	3301      	adds	r3, #1
 8009542:	6123      	str	r3, [r4, #16]
 8009544:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009548:	2b00      	cmp	r3, #0
 800954a:	d09c      	beq.n	8009486 <_printf_float+0xae>
 800954c:	232d      	movs	r3, #45	; 0x2d
 800954e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009552:	e798      	b.n	8009486 <_printf_float+0xae>
 8009554:	9a06      	ldr	r2, [sp, #24]
 8009556:	2a47      	cmp	r2, #71	; 0x47
 8009558:	d1be      	bne.n	80094d8 <_printf_float+0x100>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1bc      	bne.n	80094d8 <_printf_float+0x100>
 800955e:	2301      	movs	r3, #1
 8009560:	e7b9      	b.n	80094d6 <_printf_float+0xfe>
 8009562:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009566:	d118      	bne.n	800959a <_printf_float+0x1c2>
 8009568:	2900      	cmp	r1, #0
 800956a:	6863      	ldr	r3, [r4, #4]
 800956c:	dd0b      	ble.n	8009586 <_printf_float+0x1ae>
 800956e:	6121      	str	r1, [r4, #16]
 8009570:	b913      	cbnz	r3, 8009578 <_printf_float+0x1a0>
 8009572:	6822      	ldr	r2, [r4, #0]
 8009574:	07d0      	lsls	r0, r2, #31
 8009576:	d502      	bpl.n	800957e <_printf_float+0x1a6>
 8009578:	3301      	adds	r3, #1
 800957a:	440b      	add	r3, r1
 800957c:	6123      	str	r3, [r4, #16]
 800957e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009580:	f04f 0900 	mov.w	r9, #0
 8009584:	e7de      	b.n	8009544 <_printf_float+0x16c>
 8009586:	b913      	cbnz	r3, 800958e <_printf_float+0x1b6>
 8009588:	6822      	ldr	r2, [r4, #0]
 800958a:	07d2      	lsls	r2, r2, #31
 800958c:	d501      	bpl.n	8009592 <_printf_float+0x1ba>
 800958e:	3302      	adds	r3, #2
 8009590:	e7f4      	b.n	800957c <_printf_float+0x1a4>
 8009592:	2301      	movs	r3, #1
 8009594:	e7f2      	b.n	800957c <_printf_float+0x1a4>
 8009596:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800959a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959c:	4299      	cmp	r1, r3
 800959e:	db05      	blt.n	80095ac <_printf_float+0x1d4>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	6121      	str	r1, [r4, #16]
 80095a4:	07d8      	lsls	r0, r3, #31
 80095a6:	d5ea      	bpl.n	800957e <_printf_float+0x1a6>
 80095a8:	1c4b      	adds	r3, r1, #1
 80095aa:	e7e7      	b.n	800957c <_printf_float+0x1a4>
 80095ac:	2900      	cmp	r1, #0
 80095ae:	bfd4      	ite	le
 80095b0:	f1c1 0202 	rsble	r2, r1, #2
 80095b4:	2201      	movgt	r2, #1
 80095b6:	4413      	add	r3, r2
 80095b8:	e7e0      	b.n	800957c <_printf_float+0x1a4>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	055a      	lsls	r2, r3, #21
 80095be:	d407      	bmi.n	80095d0 <_printf_float+0x1f8>
 80095c0:	6923      	ldr	r3, [r4, #16]
 80095c2:	4642      	mov	r2, r8
 80095c4:	4631      	mov	r1, r6
 80095c6:	4628      	mov	r0, r5
 80095c8:	47b8      	blx	r7
 80095ca:	3001      	adds	r0, #1
 80095cc:	d12c      	bne.n	8009628 <_printf_float+0x250>
 80095ce:	e764      	b.n	800949a <_printf_float+0xc2>
 80095d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095d4:	f240 80e0 	bls.w	8009798 <_printf_float+0x3c0>
 80095d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095dc:	2200      	movs	r2, #0
 80095de:	2300      	movs	r3, #0
 80095e0:	f7f7 fa7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d034      	beq.n	8009652 <_printf_float+0x27a>
 80095e8:	4a37      	ldr	r2, [pc, #220]	; (80096c8 <_printf_float+0x2f0>)
 80095ea:	2301      	movs	r3, #1
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f af51 	beq.w	800949a <_printf_float+0xc2>
 80095f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095fc:	429a      	cmp	r2, r3
 80095fe:	db02      	blt.n	8009606 <_printf_float+0x22e>
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	07d8      	lsls	r0, r3, #31
 8009604:	d510      	bpl.n	8009628 <_printf_float+0x250>
 8009606:	ee18 3a10 	vmov	r3, s16
 800960a:	4652      	mov	r2, sl
 800960c:	4631      	mov	r1, r6
 800960e:	4628      	mov	r0, r5
 8009610:	47b8      	blx	r7
 8009612:	3001      	adds	r0, #1
 8009614:	f43f af41 	beq.w	800949a <_printf_float+0xc2>
 8009618:	f04f 0800 	mov.w	r8, #0
 800961c:	f104 091a 	add.w	r9, r4, #26
 8009620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009622:	3b01      	subs	r3, #1
 8009624:	4543      	cmp	r3, r8
 8009626:	dc09      	bgt.n	800963c <_printf_float+0x264>
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	079b      	lsls	r3, r3, #30
 800962c:	f100 8105 	bmi.w	800983a <_printf_float+0x462>
 8009630:	68e0      	ldr	r0, [r4, #12]
 8009632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009634:	4298      	cmp	r0, r3
 8009636:	bfb8      	it	lt
 8009638:	4618      	movlt	r0, r3
 800963a:	e730      	b.n	800949e <_printf_float+0xc6>
 800963c:	2301      	movs	r3, #1
 800963e:	464a      	mov	r2, r9
 8009640:	4631      	mov	r1, r6
 8009642:	4628      	mov	r0, r5
 8009644:	47b8      	blx	r7
 8009646:	3001      	adds	r0, #1
 8009648:	f43f af27 	beq.w	800949a <_printf_float+0xc2>
 800964c:	f108 0801 	add.w	r8, r8, #1
 8009650:	e7e6      	b.n	8009620 <_printf_float+0x248>
 8009652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	dc39      	bgt.n	80096cc <_printf_float+0x2f4>
 8009658:	4a1b      	ldr	r2, [pc, #108]	; (80096c8 <_printf_float+0x2f0>)
 800965a:	2301      	movs	r3, #1
 800965c:	4631      	mov	r1, r6
 800965e:	4628      	mov	r0, r5
 8009660:	47b8      	blx	r7
 8009662:	3001      	adds	r0, #1
 8009664:	f43f af19 	beq.w	800949a <_printf_float+0xc2>
 8009668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800966c:	4313      	orrs	r3, r2
 800966e:	d102      	bne.n	8009676 <_printf_float+0x29e>
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	07d9      	lsls	r1, r3, #31
 8009674:	d5d8      	bpl.n	8009628 <_printf_float+0x250>
 8009676:	ee18 3a10 	vmov	r3, s16
 800967a:	4652      	mov	r2, sl
 800967c:	4631      	mov	r1, r6
 800967e:	4628      	mov	r0, r5
 8009680:	47b8      	blx	r7
 8009682:	3001      	adds	r0, #1
 8009684:	f43f af09 	beq.w	800949a <_printf_float+0xc2>
 8009688:	f04f 0900 	mov.w	r9, #0
 800968c:	f104 0a1a 	add.w	sl, r4, #26
 8009690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009692:	425b      	negs	r3, r3
 8009694:	454b      	cmp	r3, r9
 8009696:	dc01      	bgt.n	800969c <_printf_float+0x2c4>
 8009698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969a:	e792      	b.n	80095c2 <_printf_float+0x1ea>
 800969c:	2301      	movs	r3, #1
 800969e:	4652      	mov	r2, sl
 80096a0:	4631      	mov	r1, r6
 80096a2:	4628      	mov	r0, r5
 80096a4:	47b8      	blx	r7
 80096a6:	3001      	adds	r0, #1
 80096a8:	f43f aef7 	beq.w	800949a <_printf_float+0xc2>
 80096ac:	f109 0901 	add.w	r9, r9, #1
 80096b0:	e7ee      	b.n	8009690 <_printf_float+0x2b8>
 80096b2:	bf00      	nop
 80096b4:	7fefffff 	.word	0x7fefffff
 80096b8:	0800c800 	.word	0x0800c800
 80096bc:	0800c804 	.word	0x0800c804
 80096c0:	0800c80c 	.word	0x0800c80c
 80096c4:	0800c808 	.word	0x0800c808
 80096c8:	0800c810 	.word	0x0800c810
 80096cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096d0:	429a      	cmp	r2, r3
 80096d2:	bfa8      	it	ge
 80096d4:	461a      	movge	r2, r3
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	4691      	mov	r9, r2
 80096da:	dc37      	bgt.n	800974c <_printf_float+0x374>
 80096dc:	f04f 0b00 	mov.w	fp, #0
 80096e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096e4:	f104 021a 	add.w	r2, r4, #26
 80096e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096ea:	9305      	str	r3, [sp, #20]
 80096ec:	eba3 0309 	sub.w	r3, r3, r9
 80096f0:	455b      	cmp	r3, fp
 80096f2:	dc33      	bgt.n	800975c <_printf_float+0x384>
 80096f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096f8:	429a      	cmp	r2, r3
 80096fa:	db3b      	blt.n	8009774 <_printf_float+0x39c>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	07da      	lsls	r2, r3, #31
 8009700:	d438      	bmi.n	8009774 <_printf_float+0x39c>
 8009702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009704:	9a05      	ldr	r2, [sp, #20]
 8009706:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009708:	1a9a      	subs	r2, r3, r2
 800970a:	eba3 0901 	sub.w	r9, r3, r1
 800970e:	4591      	cmp	r9, r2
 8009710:	bfa8      	it	ge
 8009712:	4691      	movge	r9, r2
 8009714:	f1b9 0f00 	cmp.w	r9, #0
 8009718:	dc35      	bgt.n	8009786 <_printf_float+0x3ae>
 800971a:	f04f 0800 	mov.w	r8, #0
 800971e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009722:	f104 0a1a 	add.w	sl, r4, #26
 8009726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800972a:	1a9b      	subs	r3, r3, r2
 800972c:	eba3 0309 	sub.w	r3, r3, r9
 8009730:	4543      	cmp	r3, r8
 8009732:	f77f af79 	ble.w	8009628 <_printf_float+0x250>
 8009736:	2301      	movs	r3, #1
 8009738:	4652      	mov	r2, sl
 800973a:	4631      	mov	r1, r6
 800973c:	4628      	mov	r0, r5
 800973e:	47b8      	blx	r7
 8009740:	3001      	adds	r0, #1
 8009742:	f43f aeaa 	beq.w	800949a <_printf_float+0xc2>
 8009746:	f108 0801 	add.w	r8, r8, #1
 800974a:	e7ec      	b.n	8009726 <_printf_float+0x34e>
 800974c:	4613      	mov	r3, r2
 800974e:	4631      	mov	r1, r6
 8009750:	4642      	mov	r2, r8
 8009752:	4628      	mov	r0, r5
 8009754:	47b8      	blx	r7
 8009756:	3001      	adds	r0, #1
 8009758:	d1c0      	bne.n	80096dc <_printf_float+0x304>
 800975a:	e69e      	b.n	800949a <_printf_float+0xc2>
 800975c:	2301      	movs	r3, #1
 800975e:	4631      	mov	r1, r6
 8009760:	4628      	mov	r0, r5
 8009762:	9205      	str	r2, [sp, #20]
 8009764:	47b8      	blx	r7
 8009766:	3001      	adds	r0, #1
 8009768:	f43f ae97 	beq.w	800949a <_printf_float+0xc2>
 800976c:	9a05      	ldr	r2, [sp, #20]
 800976e:	f10b 0b01 	add.w	fp, fp, #1
 8009772:	e7b9      	b.n	80096e8 <_printf_float+0x310>
 8009774:	ee18 3a10 	vmov	r3, s16
 8009778:	4652      	mov	r2, sl
 800977a:	4631      	mov	r1, r6
 800977c:	4628      	mov	r0, r5
 800977e:	47b8      	blx	r7
 8009780:	3001      	adds	r0, #1
 8009782:	d1be      	bne.n	8009702 <_printf_float+0x32a>
 8009784:	e689      	b.n	800949a <_printf_float+0xc2>
 8009786:	9a05      	ldr	r2, [sp, #20]
 8009788:	464b      	mov	r3, r9
 800978a:	4442      	add	r2, r8
 800978c:	4631      	mov	r1, r6
 800978e:	4628      	mov	r0, r5
 8009790:	47b8      	blx	r7
 8009792:	3001      	adds	r0, #1
 8009794:	d1c1      	bne.n	800971a <_printf_float+0x342>
 8009796:	e680      	b.n	800949a <_printf_float+0xc2>
 8009798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800979a:	2a01      	cmp	r2, #1
 800979c:	dc01      	bgt.n	80097a2 <_printf_float+0x3ca>
 800979e:	07db      	lsls	r3, r3, #31
 80097a0:	d538      	bpl.n	8009814 <_printf_float+0x43c>
 80097a2:	2301      	movs	r3, #1
 80097a4:	4642      	mov	r2, r8
 80097a6:	4631      	mov	r1, r6
 80097a8:	4628      	mov	r0, r5
 80097aa:	47b8      	blx	r7
 80097ac:	3001      	adds	r0, #1
 80097ae:	f43f ae74 	beq.w	800949a <_printf_float+0xc2>
 80097b2:	ee18 3a10 	vmov	r3, s16
 80097b6:	4652      	mov	r2, sl
 80097b8:	4631      	mov	r1, r6
 80097ba:	4628      	mov	r0, r5
 80097bc:	47b8      	blx	r7
 80097be:	3001      	adds	r0, #1
 80097c0:	f43f ae6b 	beq.w	800949a <_printf_float+0xc2>
 80097c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097c8:	2200      	movs	r2, #0
 80097ca:	2300      	movs	r3, #0
 80097cc:	f7f7 f984 	bl	8000ad8 <__aeabi_dcmpeq>
 80097d0:	b9d8      	cbnz	r0, 800980a <_printf_float+0x432>
 80097d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d4:	f108 0201 	add.w	r2, r8, #1
 80097d8:	3b01      	subs	r3, #1
 80097da:	4631      	mov	r1, r6
 80097dc:	4628      	mov	r0, r5
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	d10e      	bne.n	8009802 <_printf_float+0x42a>
 80097e4:	e659      	b.n	800949a <_printf_float+0xc2>
 80097e6:	2301      	movs	r3, #1
 80097e8:	4652      	mov	r2, sl
 80097ea:	4631      	mov	r1, r6
 80097ec:	4628      	mov	r0, r5
 80097ee:	47b8      	blx	r7
 80097f0:	3001      	adds	r0, #1
 80097f2:	f43f ae52 	beq.w	800949a <_printf_float+0xc2>
 80097f6:	f108 0801 	add.w	r8, r8, #1
 80097fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097fc:	3b01      	subs	r3, #1
 80097fe:	4543      	cmp	r3, r8
 8009800:	dcf1      	bgt.n	80097e6 <_printf_float+0x40e>
 8009802:	464b      	mov	r3, r9
 8009804:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009808:	e6dc      	b.n	80095c4 <_printf_float+0x1ec>
 800980a:	f04f 0800 	mov.w	r8, #0
 800980e:	f104 0a1a 	add.w	sl, r4, #26
 8009812:	e7f2      	b.n	80097fa <_printf_float+0x422>
 8009814:	2301      	movs	r3, #1
 8009816:	4642      	mov	r2, r8
 8009818:	e7df      	b.n	80097da <_printf_float+0x402>
 800981a:	2301      	movs	r3, #1
 800981c:	464a      	mov	r2, r9
 800981e:	4631      	mov	r1, r6
 8009820:	4628      	mov	r0, r5
 8009822:	47b8      	blx	r7
 8009824:	3001      	adds	r0, #1
 8009826:	f43f ae38 	beq.w	800949a <_printf_float+0xc2>
 800982a:	f108 0801 	add.w	r8, r8, #1
 800982e:	68e3      	ldr	r3, [r4, #12]
 8009830:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009832:	1a5b      	subs	r3, r3, r1
 8009834:	4543      	cmp	r3, r8
 8009836:	dcf0      	bgt.n	800981a <_printf_float+0x442>
 8009838:	e6fa      	b.n	8009630 <_printf_float+0x258>
 800983a:	f04f 0800 	mov.w	r8, #0
 800983e:	f104 0919 	add.w	r9, r4, #25
 8009842:	e7f4      	b.n	800982e <_printf_float+0x456>

08009844 <_printf_common>:
 8009844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009848:	4616      	mov	r6, r2
 800984a:	4699      	mov	r9, r3
 800984c:	688a      	ldr	r2, [r1, #8]
 800984e:	690b      	ldr	r3, [r1, #16]
 8009850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009854:	4293      	cmp	r3, r2
 8009856:	bfb8      	it	lt
 8009858:	4613      	movlt	r3, r2
 800985a:	6033      	str	r3, [r6, #0]
 800985c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009860:	4607      	mov	r7, r0
 8009862:	460c      	mov	r4, r1
 8009864:	b10a      	cbz	r2, 800986a <_printf_common+0x26>
 8009866:	3301      	adds	r3, #1
 8009868:	6033      	str	r3, [r6, #0]
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	0699      	lsls	r1, r3, #26
 800986e:	bf42      	ittt	mi
 8009870:	6833      	ldrmi	r3, [r6, #0]
 8009872:	3302      	addmi	r3, #2
 8009874:	6033      	strmi	r3, [r6, #0]
 8009876:	6825      	ldr	r5, [r4, #0]
 8009878:	f015 0506 	ands.w	r5, r5, #6
 800987c:	d106      	bne.n	800988c <_printf_common+0x48>
 800987e:	f104 0a19 	add.w	sl, r4, #25
 8009882:	68e3      	ldr	r3, [r4, #12]
 8009884:	6832      	ldr	r2, [r6, #0]
 8009886:	1a9b      	subs	r3, r3, r2
 8009888:	42ab      	cmp	r3, r5
 800988a:	dc26      	bgt.n	80098da <_printf_common+0x96>
 800988c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009890:	1e13      	subs	r3, r2, #0
 8009892:	6822      	ldr	r2, [r4, #0]
 8009894:	bf18      	it	ne
 8009896:	2301      	movne	r3, #1
 8009898:	0692      	lsls	r2, r2, #26
 800989a:	d42b      	bmi.n	80098f4 <_printf_common+0xb0>
 800989c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098a0:	4649      	mov	r1, r9
 80098a2:	4638      	mov	r0, r7
 80098a4:	47c0      	blx	r8
 80098a6:	3001      	adds	r0, #1
 80098a8:	d01e      	beq.n	80098e8 <_printf_common+0xa4>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	68e5      	ldr	r5, [r4, #12]
 80098ae:	6832      	ldr	r2, [r6, #0]
 80098b0:	f003 0306 	and.w	r3, r3, #6
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	bf08      	it	eq
 80098b8:	1aad      	subeq	r5, r5, r2
 80098ba:	68a3      	ldr	r3, [r4, #8]
 80098bc:	6922      	ldr	r2, [r4, #16]
 80098be:	bf0c      	ite	eq
 80098c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098c4:	2500      	movne	r5, #0
 80098c6:	4293      	cmp	r3, r2
 80098c8:	bfc4      	itt	gt
 80098ca:	1a9b      	subgt	r3, r3, r2
 80098cc:	18ed      	addgt	r5, r5, r3
 80098ce:	2600      	movs	r6, #0
 80098d0:	341a      	adds	r4, #26
 80098d2:	42b5      	cmp	r5, r6
 80098d4:	d11a      	bne.n	800990c <_printf_common+0xc8>
 80098d6:	2000      	movs	r0, #0
 80098d8:	e008      	b.n	80098ec <_printf_common+0xa8>
 80098da:	2301      	movs	r3, #1
 80098dc:	4652      	mov	r2, sl
 80098de:	4649      	mov	r1, r9
 80098e0:	4638      	mov	r0, r7
 80098e2:	47c0      	blx	r8
 80098e4:	3001      	adds	r0, #1
 80098e6:	d103      	bne.n	80098f0 <_printf_common+0xac>
 80098e8:	f04f 30ff 	mov.w	r0, #4294967295
 80098ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f0:	3501      	adds	r5, #1
 80098f2:	e7c6      	b.n	8009882 <_printf_common+0x3e>
 80098f4:	18e1      	adds	r1, r4, r3
 80098f6:	1c5a      	adds	r2, r3, #1
 80098f8:	2030      	movs	r0, #48	; 0x30
 80098fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098fe:	4422      	add	r2, r4
 8009900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009908:	3302      	adds	r3, #2
 800990a:	e7c7      	b.n	800989c <_printf_common+0x58>
 800990c:	2301      	movs	r3, #1
 800990e:	4622      	mov	r2, r4
 8009910:	4649      	mov	r1, r9
 8009912:	4638      	mov	r0, r7
 8009914:	47c0      	blx	r8
 8009916:	3001      	adds	r0, #1
 8009918:	d0e6      	beq.n	80098e8 <_printf_common+0xa4>
 800991a:	3601      	adds	r6, #1
 800991c:	e7d9      	b.n	80098d2 <_printf_common+0x8e>
	...

08009920 <_printf_i>:
 8009920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009924:	7e0f      	ldrb	r7, [r1, #24]
 8009926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009928:	2f78      	cmp	r7, #120	; 0x78
 800992a:	4691      	mov	r9, r2
 800992c:	4680      	mov	r8, r0
 800992e:	460c      	mov	r4, r1
 8009930:	469a      	mov	sl, r3
 8009932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009936:	d807      	bhi.n	8009948 <_printf_i+0x28>
 8009938:	2f62      	cmp	r7, #98	; 0x62
 800993a:	d80a      	bhi.n	8009952 <_printf_i+0x32>
 800993c:	2f00      	cmp	r7, #0
 800993e:	f000 80d8 	beq.w	8009af2 <_printf_i+0x1d2>
 8009942:	2f58      	cmp	r7, #88	; 0x58
 8009944:	f000 80a3 	beq.w	8009a8e <_printf_i+0x16e>
 8009948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800994c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009950:	e03a      	b.n	80099c8 <_printf_i+0xa8>
 8009952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009956:	2b15      	cmp	r3, #21
 8009958:	d8f6      	bhi.n	8009948 <_printf_i+0x28>
 800995a:	a101      	add	r1, pc, #4	; (adr r1, 8009960 <_printf_i+0x40>)
 800995c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009960:	080099b9 	.word	0x080099b9
 8009964:	080099cd 	.word	0x080099cd
 8009968:	08009949 	.word	0x08009949
 800996c:	08009949 	.word	0x08009949
 8009970:	08009949 	.word	0x08009949
 8009974:	08009949 	.word	0x08009949
 8009978:	080099cd 	.word	0x080099cd
 800997c:	08009949 	.word	0x08009949
 8009980:	08009949 	.word	0x08009949
 8009984:	08009949 	.word	0x08009949
 8009988:	08009949 	.word	0x08009949
 800998c:	08009ad9 	.word	0x08009ad9
 8009990:	080099fd 	.word	0x080099fd
 8009994:	08009abb 	.word	0x08009abb
 8009998:	08009949 	.word	0x08009949
 800999c:	08009949 	.word	0x08009949
 80099a0:	08009afb 	.word	0x08009afb
 80099a4:	08009949 	.word	0x08009949
 80099a8:	080099fd 	.word	0x080099fd
 80099ac:	08009949 	.word	0x08009949
 80099b0:	08009949 	.word	0x08009949
 80099b4:	08009ac3 	.word	0x08009ac3
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	1d1a      	adds	r2, r3, #4
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	602a      	str	r2, [r5, #0]
 80099c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099c8:	2301      	movs	r3, #1
 80099ca:	e0a3      	b.n	8009b14 <_printf_i+0x1f4>
 80099cc:	6820      	ldr	r0, [r4, #0]
 80099ce:	6829      	ldr	r1, [r5, #0]
 80099d0:	0606      	lsls	r6, r0, #24
 80099d2:	f101 0304 	add.w	r3, r1, #4
 80099d6:	d50a      	bpl.n	80099ee <_printf_i+0xce>
 80099d8:	680e      	ldr	r6, [r1, #0]
 80099da:	602b      	str	r3, [r5, #0]
 80099dc:	2e00      	cmp	r6, #0
 80099de:	da03      	bge.n	80099e8 <_printf_i+0xc8>
 80099e0:	232d      	movs	r3, #45	; 0x2d
 80099e2:	4276      	negs	r6, r6
 80099e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099e8:	485e      	ldr	r0, [pc, #376]	; (8009b64 <_printf_i+0x244>)
 80099ea:	230a      	movs	r3, #10
 80099ec:	e019      	b.n	8009a22 <_printf_i+0x102>
 80099ee:	680e      	ldr	r6, [r1, #0]
 80099f0:	602b      	str	r3, [r5, #0]
 80099f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099f6:	bf18      	it	ne
 80099f8:	b236      	sxthne	r6, r6
 80099fa:	e7ef      	b.n	80099dc <_printf_i+0xbc>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	6820      	ldr	r0, [r4, #0]
 8009a00:	1d19      	adds	r1, r3, #4
 8009a02:	6029      	str	r1, [r5, #0]
 8009a04:	0601      	lsls	r1, r0, #24
 8009a06:	d501      	bpl.n	8009a0c <_printf_i+0xec>
 8009a08:	681e      	ldr	r6, [r3, #0]
 8009a0a:	e002      	b.n	8009a12 <_printf_i+0xf2>
 8009a0c:	0646      	lsls	r6, r0, #25
 8009a0e:	d5fb      	bpl.n	8009a08 <_printf_i+0xe8>
 8009a10:	881e      	ldrh	r6, [r3, #0]
 8009a12:	4854      	ldr	r0, [pc, #336]	; (8009b64 <_printf_i+0x244>)
 8009a14:	2f6f      	cmp	r7, #111	; 0x6f
 8009a16:	bf0c      	ite	eq
 8009a18:	2308      	moveq	r3, #8
 8009a1a:	230a      	movne	r3, #10
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a22:	6865      	ldr	r5, [r4, #4]
 8009a24:	60a5      	str	r5, [r4, #8]
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	bfa2      	ittt	ge
 8009a2a:	6821      	ldrge	r1, [r4, #0]
 8009a2c:	f021 0104 	bicge.w	r1, r1, #4
 8009a30:	6021      	strge	r1, [r4, #0]
 8009a32:	b90e      	cbnz	r6, 8009a38 <_printf_i+0x118>
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	d04d      	beq.n	8009ad4 <_printf_i+0x1b4>
 8009a38:	4615      	mov	r5, r2
 8009a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8009a42:	5dc7      	ldrb	r7, [r0, r7]
 8009a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a48:	4637      	mov	r7, r6
 8009a4a:	42bb      	cmp	r3, r7
 8009a4c:	460e      	mov	r6, r1
 8009a4e:	d9f4      	bls.n	8009a3a <_printf_i+0x11a>
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	d10b      	bne.n	8009a6c <_printf_i+0x14c>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	07de      	lsls	r6, r3, #31
 8009a58:	d508      	bpl.n	8009a6c <_printf_i+0x14c>
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	6861      	ldr	r1, [r4, #4]
 8009a5e:	4299      	cmp	r1, r3
 8009a60:	bfde      	ittt	le
 8009a62:	2330      	movle	r3, #48	; 0x30
 8009a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a6c:	1b52      	subs	r2, r2, r5
 8009a6e:	6122      	str	r2, [r4, #16]
 8009a70:	f8cd a000 	str.w	sl, [sp]
 8009a74:	464b      	mov	r3, r9
 8009a76:	aa03      	add	r2, sp, #12
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	f7ff fee2 	bl	8009844 <_printf_common>
 8009a80:	3001      	adds	r0, #1
 8009a82:	d14c      	bne.n	8009b1e <_printf_i+0x1fe>
 8009a84:	f04f 30ff 	mov.w	r0, #4294967295
 8009a88:	b004      	add	sp, #16
 8009a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8e:	4835      	ldr	r0, [pc, #212]	; (8009b64 <_printf_i+0x244>)
 8009a90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a94:	6829      	ldr	r1, [r5, #0]
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a9c:	6029      	str	r1, [r5, #0]
 8009a9e:	061d      	lsls	r5, r3, #24
 8009aa0:	d514      	bpl.n	8009acc <_printf_i+0x1ac>
 8009aa2:	07df      	lsls	r7, r3, #31
 8009aa4:	bf44      	itt	mi
 8009aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8009aaa:	6023      	strmi	r3, [r4, #0]
 8009aac:	b91e      	cbnz	r6, 8009ab6 <_printf_i+0x196>
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	f023 0320 	bic.w	r3, r3, #32
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	2310      	movs	r3, #16
 8009ab8:	e7b0      	b.n	8009a1c <_printf_i+0xfc>
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	f043 0320 	orr.w	r3, r3, #32
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	2378      	movs	r3, #120	; 0x78
 8009ac4:	4828      	ldr	r0, [pc, #160]	; (8009b68 <_printf_i+0x248>)
 8009ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009aca:	e7e3      	b.n	8009a94 <_printf_i+0x174>
 8009acc:	0659      	lsls	r1, r3, #25
 8009ace:	bf48      	it	mi
 8009ad0:	b2b6      	uxthmi	r6, r6
 8009ad2:	e7e6      	b.n	8009aa2 <_printf_i+0x182>
 8009ad4:	4615      	mov	r5, r2
 8009ad6:	e7bb      	b.n	8009a50 <_printf_i+0x130>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	6826      	ldr	r6, [r4, #0]
 8009adc:	6961      	ldr	r1, [r4, #20]
 8009ade:	1d18      	adds	r0, r3, #4
 8009ae0:	6028      	str	r0, [r5, #0]
 8009ae2:	0635      	lsls	r5, r6, #24
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	d501      	bpl.n	8009aec <_printf_i+0x1cc>
 8009ae8:	6019      	str	r1, [r3, #0]
 8009aea:	e002      	b.n	8009af2 <_printf_i+0x1d2>
 8009aec:	0670      	lsls	r0, r6, #25
 8009aee:	d5fb      	bpl.n	8009ae8 <_printf_i+0x1c8>
 8009af0:	8019      	strh	r1, [r3, #0]
 8009af2:	2300      	movs	r3, #0
 8009af4:	6123      	str	r3, [r4, #16]
 8009af6:	4615      	mov	r5, r2
 8009af8:	e7ba      	b.n	8009a70 <_printf_i+0x150>
 8009afa:	682b      	ldr	r3, [r5, #0]
 8009afc:	1d1a      	adds	r2, r3, #4
 8009afe:	602a      	str	r2, [r5, #0]
 8009b00:	681d      	ldr	r5, [r3, #0]
 8009b02:	6862      	ldr	r2, [r4, #4]
 8009b04:	2100      	movs	r1, #0
 8009b06:	4628      	mov	r0, r5
 8009b08:	f7f6 fb72 	bl	80001f0 <memchr>
 8009b0c:	b108      	cbz	r0, 8009b12 <_printf_i+0x1f2>
 8009b0e:	1b40      	subs	r0, r0, r5
 8009b10:	6060      	str	r0, [r4, #4]
 8009b12:	6863      	ldr	r3, [r4, #4]
 8009b14:	6123      	str	r3, [r4, #16]
 8009b16:	2300      	movs	r3, #0
 8009b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b1c:	e7a8      	b.n	8009a70 <_printf_i+0x150>
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	462a      	mov	r2, r5
 8009b22:	4649      	mov	r1, r9
 8009b24:	4640      	mov	r0, r8
 8009b26:	47d0      	blx	sl
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d0ab      	beq.n	8009a84 <_printf_i+0x164>
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	079b      	lsls	r3, r3, #30
 8009b30:	d413      	bmi.n	8009b5a <_printf_i+0x23a>
 8009b32:	68e0      	ldr	r0, [r4, #12]
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	4298      	cmp	r0, r3
 8009b38:	bfb8      	it	lt
 8009b3a:	4618      	movlt	r0, r3
 8009b3c:	e7a4      	b.n	8009a88 <_printf_i+0x168>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4632      	mov	r2, r6
 8009b42:	4649      	mov	r1, r9
 8009b44:	4640      	mov	r0, r8
 8009b46:	47d0      	blx	sl
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d09b      	beq.n	8009a84 <_printf_i+0x164>
 8009b4c:	3501      	adds	r5, #1
 8009b4e:	68e3      	ldr	r3, [r4, #12]
 8009b50:	9903      	ldr	r1, [sp, #12]
 8009b52:	1a5b      	subs	r3, r3, r1
 8009b54:	42ab      	cmp	r3, r5
 8009b56:	dcf2      	bgt.n	8009b3e <_printf_i+0x21e>
 8009b58:	e7eb      	b.n	8009b32 <_printf_i+0x212>
 8009b5a:	2500      	movs	r5, #0
 8009b5c:	f104 0619 	add.w	r6, r4, #25
 8009b60:	e7f5      	b.n	8009b4e <_printf_i+0x22e>
 8009b62:	bf00      	nop
 8009b64:	0800c812 	.word	0x0800c812
 8009b68:	0800c823 	.word	0x0800c823

08009b6c <iprintf>:
 8009b6c:	b40f      	push	{r0, r1, r2, r3}
 8009b6e:	4b0a      	ldr	r3, [pc, #40]	; (8009b98 <iprintf+0x2c>)
 8009b70:	b513      	push	{r0, r1, r4, lr}
 8009b72:	681c      	ldr	r4, [r3, #0]
 8009b74:	b124      	cbz	r4, 8009b80 <iprintf+0x14>
 8009b76:	69a3      	ldr	r3, [r4, #24]
 8009b78:	b913      	cbnz	r3, 8009b80 <iprintf+0x14>
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f001 f8f0 	bl	800ad60 <__sinit>
 8009b80:	ab05      	add	r3, sp, #20
 8009b82:	9a04      	ldr	r2, [sp, #16]
 8009b84:	68a1      	ldr	r1, [r4, #8]
 8009b86:	9301      	str	r3, [sp, #4]
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f001 fe9f 	bl	800b8cc <_vfiprintf_r>
 8009b8e:	b002      	add	sp, #8
 8009b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b94:	b004      	add	sp, #16
 8009b96:	4770      	bx	lr
 8009b98:	20000024 	.word	0x20000024

08009b9c <putchar>:
 8009b9c:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <putchar+0x28>)
 8009b9e:	b513      	push	{r0, r1, r4, lr}
 8009ba0:	681c      	ldr	r4, [r3, #0]
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	b134      	cbz	r4, 8009bb4 <putchar+0x18>
 8009ba6:	69a3      	ldr	r3, [r4, #24]
 8009ba8:	b923      	cbnz	r3, 8009bb4 <putchar+0x18>
 8009baa:	9001      	str	r0, [sp, #4]
 8009bac:	4620      	mov	r0, r4
 8009bae:	f001 f8d7 	bl	800ad60 <__sinit>
 8009bb2:	9901      	ldr	r1, [sp, #4]
 8009bb4:	68a2      	ldr	r2, [r4, #8]
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	b002      	add	sp, #8
 8009bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bbe:	f001 bfb5 	b.w	800bb2c <_putc_r>
 8009bc2:	bf00      	nop
 8009bc4:	20000024 	.word	0x20000024

08009bc8 <_puts_r>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	460e      	mov	r6, r1
 8009bcc:	4605      	mov	r5, r0
 8009bce:	b118      	cbz	r0, 8009bd8 <_puts_r+0x10>
 8009bd0:	6983      	ldr	r3, [r0, #24]
 8009bd2:	b90b      	cbnz	r3, 8009bd8 <_puts_r+0x10>
 8009bd4:	f001 f8c4 	bl	800ad60 <__sinit>
 8009bd8:	69ab      	ldr	r3, [r5, #24]
 8009bda:	68ac      	ldr	r4, [r5, #8]
 8009bdc:	b913      	cbnz	r3, 8009be4 <_puts_r+0x1c>
 8009bde:	4628      	mov	r0, r5
 8009be0:	f001 f8be 	bl	800ad60 <__sinit>
 8009be4:	4b2c      	ldr	r3, [pc, #176]	; (8009c98 <_puts_r+0xd0>)
 8009be6:	429c      	cmp	r4, r3
 8009be8:	d120      	bne.n	8009c2c <_puts_r+0x64>
 8009bea:	686c      	ldr	r4, [r5, #4]
 8009bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bee:	07db      	lsls	r3, r3, #31
 8009bf0:	d405      	bmi.n	8009bfe <_puts_r+0x36>
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	0598      	lsls	r0, r3, #22
 8009bf6:	d402      	bmi.n	8009bfe <_puts_r+0x36>
 8009bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bfa:	f001 f954 	bl	800aea6 <__retarget_lock_acquire_recursive>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	0719      	lsls	r1, r3, #28
 8009c02:	d51d      	bpl.n	8009c40 <_puts_r+0x78>
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	b1db      	cbz	r3, 8009c40 <_puts_r+0x78>
 8009c08:	3e01      	subs	r6, #1
 8009c0a:	68a3      	ldr	r3, [r4, #8]
 8009c0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c10:	3b01      	subs	r3, #1
 8009c12:	60a3      	str	r3, [r4, #8]
 8009c14:	bb39      	cbnz	r1, 8009c66 <_puts_r+0x9e>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	da38      	bge.n	8009c8c <_puts_r+0xc4>
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	210a      	movs	r1, #10
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f000 f848 	bl	8009cb4 <__swbuf_r>
 8009c24:	3001      	adds	r0, #1
 8009c26:	d011      	beq.n	8009c4c <_puts_r+0x84>
 8009c28:	250a      	movs	r5, #10
 8009c2a:	e011      	b.n	8009c50 <_puts_r+0x88>
 8009c2c:	4b1b      	ldr	r3, [pc, #108]	; (8009c9c <_puts_r+0xd4>)
 8009c2e:	429c      	cmp	r4, r3
 8009c30:	d101      	bne.n	8009c36 <_puts_r+0x6e>
 8009c32:	68ac      	ldr	r4, [r5, #8]
 8009c34:	e7da      	b.n	8009bec <_puts_r+0x24>
 8009c36:	4b1a      	ldr	r3, [pc, #104]	; (8009ca0 <_puts_r+0xd8>)
 8009c38:	429c      	cmp	r4, r3
 8009c3a:	bf08      	it	eq
 8009c3c:	68ec      	ldreq	r4, [r5, #12]
 8009c3e:	e7d5      	b.n	8009bec <_puts_r+0x24>
 8009c40:	4621      	mov	r1, r4
 8009c42:	4628      	mov	r0, r5
 8009c44:	f000 f888 	bl	8009d58 <__swsetup_r>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d0dd      	beq.n	8009c08 <_puts_r+0x40>
 8009c4c:	f04f 35ff 	mov.w	r5, #4294967295
 8009c50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c52:	07da      	lsls	r2, r3, #31
 8009c54:	d405      	bmi.n	8009c62 <_puts_r+0x9a>
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	059b      	lsls	r3, r3, #22
 8009c5a:	d402      	bmi.n	8009c62 <_puts_r+0x9a>
 8009c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c5e:	f001 f923 	bl	800aea8 <__retarget_lock_release_recursive>
 8009c62:	4628      	mov	r0, r5
 8009c64:	bd70      	pop	{r4, r5, r6, pc}
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	da04      	bge.n	8009c74 <_puts_r+0xac>
 8009c6a:	69a2      	ldr	r2, [r4, #24]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	dc06      	bgt.n	8009c7e <_puts_r+0xb6>
 8009c70:	290a      	cmp	r1, #10
 8009c72:	d004      	beq.n	8009c7e <_puts_r+0xb6>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	6022      	str	r2, [r4, #0]
 8009c7a:	7019      	strb	r1, [r3, #0]
 8009c7c:	e7c5      	b.n	8009c0a <_puts_r+0x42>
 8009c7e:	4622      	mov	r2, r4
 8009c80:	4628      	mov	r0, r5
 8009c82:	f000 f817 	bl	8009cb4 <__swbuf_r>
 8009c86:	3001      	adds	r0, #1
 8009c88:	d1bf      	bne.n	8009c0a <_puts_r+0x42>
 8009c8a:	e7df      	b.n	8009c4c <_puts_r+0x84>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	250a      	movs	r5, #10
 8009c90:	1c5a      	adds	r2, r3, #1
 8009c92:	6022      	str	r2, [r4, #0]
 8009c94:	701d      	strb	r5, [r3, #0]
 8009c96:	e7db      	b.n	8009c50 <_puts_r+0x88>
 8009c98:	0800c8e4 	.word	0x0800c8e4
 8009c9c:	0800c904 	.word	0x0800c904
 8009ca0:	0800c8c4 	.word	0x0800c8c4

08009ca4 <puts>:
 8009ca4:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <puts+0xc>)
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	6818      	ldr	r0, [r3, #0]
 8009caa:	f7ff bf8d 	b.w	8009bc8 <_puts_r>
 8009cae:	bf00      	nop
 8009cb0:	20000024 	.word	0x20000024

08009cb4 <__swbuf_r>:
 8009cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb6:	460e      	mov	r6, r1
 8009cb8:	4614      	mov	r4, r2
 8009cba:	4605      	mov	r5, r0
 8009cbc:	b118      	cbz	r0, 8009cc6 <__swbuf_r+0x12>
 8009cbe:	6983      	ldr	r3, [r0, #24]
 8009cc0:	b90b      	cbnz	r3, 8009cc6 <__swbuf_r+0x12>
 8009cc2:	f001 f84d 	bl	800ad60 <__sinit>
 8009cc6:	4b21      	ldr	r3, [pc, #132]	; (8009d4c <__swbuf_r+0x98>)
 8009cc8:	429c      	cmp	r4, r3
 8009cca:	d12b      	bne.n	8009d24 <__swbuf_r+0x70>
 8009ccc:	686c      	ldr	r4, [r5, #4]
 8009cce:	69a3      	ldr	r3, [r4, #24]
 8009cd0:	60a3      	str	r3, [r4, #8]
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	071a      	lsls	r2, r3, #28
 8009cd6:	d52f      	bpl.n	8009d38 <__swbuf_r+0x84>
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	b36b      	cbz	r3, 8009d38 <__swbuf_r+0x84>
 8009cdc:	6923      	ldr	r3, [r4, #16]
 8009cde:	6820      	ldr	r0, [r4, #0]
 8009ce0:	1ac0      	subs	r0, r0, r3
 8009ce2:	6963      	ldr	r3, [r4, #20]
 8009ce4:	b2f6      	uxtb	r6, r6
 8009ce6:	4283      	cmp	r3, r0
 8009ce8:	4637      	mov	r7, r6
 8009cea:	dc04      	bgt.n	8009cf6 <__swbuf_r+0x42>
 8009cec:	4621      	mov	r1, r4
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f000 ffa2 	bl	800ac38 <_fflush_r>
 8009cf4:	bb30      	cbnz	r0, 8009d44 <__swbuf_r+0x90>
 8009cf6:	68a3      	ldr	r3, [r4, #8]
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	60a3      	str	r3, [r4, #8]
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	6022      	str	r2, [r4, #0]
 8009d02:	701e      	strb	r6, [r3, #0]
 8009d04:	6963      	ldr	r3, [r4, #20]
 8009d06:	3001      	adds	r0, #1
 8009d08:	4283      	cmp	r3, r0
 8009d0a:	d004      	beq.n	8009d16 <__swbuf_r+0x62>
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	07db      	lsls	r3, r3, #31
 8009d10:	d506      	bpl.n	8009d20 <__swbuf_r+0x6c>
 8009d12:	2e0a      	cmp	r6, #10
 8009d14:	d104      	bne.n	8009d20 <__swbuf_r+0x6c>
 8009d16:	4621      	mov	r1, r4
 8009d18:	4628      	mov	r0, r5
 8009d1a:	f000 ff8d 	bl	800ac38 <_fflush_r>
 8009d1e:	b988      	cbnz	r0, 8009d44 <__swbuf_r+0x90>
 8009d20:	4638      	mov	r0, r7
 8009d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d24:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <__swbuf_r+0x9c>)
 8009d26:	429c      	cmp	r4, r3
 8009d28:	d101      	bne.n	8009d2e <__swbuf_r+0x7a>
 8009d2a:	68ac      	ldr	r4, [r5, #8]
 8009d2c:	e7cf      	b.n	8009cce <__swbuf_r+0x1a>
 8009d2e:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <__swbuf_r+0xa0>)
 8009d30:	429c      	cmp	r4, r3
 8009d32:	bf08      	it	eq
 8009d34:	68ec      	ldreq	r4, [r5, #12]
 8009d36:	e7ca      	b.n	8009cce <__swbuf_r+0x1a>
 8009d38:	4621      	mov	r1, r4
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f000 f80c 	bl	8009d58 <__swsetup_r>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d0cb      	beq.n	8009cdc <__swbuf_r+0x28>
 8009d44:	f04f 37ff 	mov.w	r7, #4294967295
 8009d48:	e7ea      	b.n	8009d20 <__swbuf_r+0x6c>
 8009d4a:	bf00      	nop
 8009d4c:	0800c8e4 	.word	0x0800c8e4
 8009d50:	0800c904 	.word	0x0800c904
 8009d54:	0800c8c4 	.word	0x0800c8c4

08009d58 <__swsetup_r>:
 8009d58:	4b32      	ldr	r3, [pc, #200]	; (8009e24 <__swsetup_r+0xcc>)
 8009d5a:	b570      	push	{r4, r5, r6, lr}
 8009d5c:	681d      	ldr	r5, [r3, #0]
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	b125      	cbz	r5, 8009d6e <__swsetup_r+0x16>
 8009d64:	69ab      	ldr	r3, [r5, #24]
 8009d66:	b913      	cbnz	r3, 8009d6e <__swsetup_r+0x16>
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f000 fff9 	bl	800ad60 <__sinit>
 8009d6e:	4b2e      	ldr	r3, [pc, #184]	; (8009e28 <__swsetup_r+0xd0>)
 8009d70:	429c      	cmp	r4, r3
 8009d72:	d10f      	bne.n	8009d94 <__swsetup_r+0x3c>
 8009d74:	686c      	ldr	r4, [r5, #4]
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d7c:	0719      	lsls	r1, r3, #28
 8009d7e:	d42c      	bmi.n	8009dda <__swsetup_r+0x82>
 8009d80:	06dd      	lsls	r5, r3, #27
 8009d82:	d411      	bmi.n	8009da8 <__swsetup_r+0x50>
 8009d84:	2309      	movs	r3, #9
 8009d86:	6033      	str	r3, [r6, #0]
 8009d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d92:	e03e      	b.n	8009e12 <__swsetup_r+0xba>
 8009d94:	4b25      	ldr	r3, [pc, #148]	; (8009e2c <__swsetup_r+0xd4>)
 8009d96:	429c      	cmp	r4, r3
 8009d98:	d101      	bne.n	8009d9e <__swsetup_r+0x46>
 8009d9a:	68ac      	ldr	r4, [r5, #8]
 8009d9c:	e7eb      	b.n	8009d76 <__swsetup_r+0x1e>
 8009d9e:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <__swsetup_r+0xd8>)
 8009da0:	429c      	cmp	r4, r3
 8009da2:	bf08      	it	eq
 8009da4:	68ec      	ldreq	r4, [r5, #12]
 8009da6:	e7e6      	b.n	8009d76 <__swsetup_r+0x1e>
 8009da8:	0758      	lsls	r0, r3, #29
 8009daa:	d512      	bpl.n	8009dd2 <__swsetup_r+0x7a>
 8009dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dae:	b141      	cbz	r1, 8009dc2 <__swsetup_r+0x6a>
 8009db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009db4:	4299      	cmp	r1, r3
 8009db6:	d002      	beq.n	8009dbe <__swsetup_r+0x66>
 8009db8:	4630      	mov	r0, r6
 8009dba:	f001 fc7d 	bl	800b6b8 <_free_r>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6063      	str	r3, [r4, #4]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f043 0308 	orr.w	r3, r3, #8
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	b94b      	cbnz	r3, 8009df2 <__swsetup_r+0x9a>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009de8:	d003      	beq.n	8009df2 <__swsetup_r+0x9a>
 8009dea:	4621      	mov	r1, r4
 8009dec:	4630      	mov	r0, r6
 8009dee:	f001 f881 	bl	800aef4 <__smakebuf_r>
 8009df2:	89a0      	ldrh	r0, [r4, #12]
 8009df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009df8:	f010 0301 	ands.w	r3, r0, #1
 8009dfc:	d00a      	beq.n	8009e14 <__swsetup_r+0xbc>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60a3      	str	r3, [r4, #8]
 8009e02:	6963      	ldr	r3, [r4, #20]
 8009e04:	425b      	negs	r3, r3
 8009e06:	61a3      	str	r3, [r4, #24]
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	b943      	cbnz	r3, 8009e1e <__swsetup_r+0xc6>
 8009e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e10:	d1ba      	bne.n	8009d88 <__swsetup_r+0x30>
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	0781      	lsls	r1, r0, #30
 8009e16:	bf58      	it	pl
 8009e18:	6963      	ldrpl	r3, [r4, #20]
 8009e1a:	60a3      	str	r3, [r4, #8]
 8009e1c:	e7f4      	b.n	8009e08 <__swsetup_r+0xb0>
 8009e1e:	2000      	movs	r0, #0
 8009e20:	e7f7      	b.n	8009e12 <__swsetup_r+0xba>
 8009e22:	bf00      	nop
 8009e24:	20000024 	.word	0x20000024
 8009e28:	0800c8e4 	.word	0x0800c8e4
 8009e2c:	0800c904 	.word	0x0800c904
 8009e30:	0800c8c4 	.word	0x0800c8c4

08009e34 <quorem>:
 8009e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e38:	6903      	ldr	r3, [r0, #16]
 8009e3a:	690c      	ldr	r4, [r1, #16]
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	4607      	mov	r7, r0
 8009e40:	f2c0 8081 	blt.w	8009f46 <quorem+0x112>
 8009e44:	3c01      	subs	r4, #1
 8009e46:	f101 0814 	add.w	r8, r1, #20
 8009e4a:	f100 0514 	add.w	r5, r0, #20
 8009e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e68:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e6c:	d331      	bcc.n	8009ed2 <quorem+0x9e>
 8009e6e:	f04f 0e00 	mov.w	lr, #0
 8009e72:	4640      	mov	r0, r8
 8009e74:	46ac      	mov	ip, r5
 8009e76:	46f2      	mov	sl, lr
 8009e78:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e7c:	b293      	uxth	r3, r2
 8009e7e:	fb06 e303 	mla	r3, r6, r3, lr
 8009e82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	ebaa 0303 	sub.w	r3, sl, r3
 8009e8c:	f8dc a000 	ldr.w	sl, [ip]
 8009e90:	0c12      	lsrs	r2, r2, #16
 8009e92:	fa13 f38a 	uxtah	r3, r3, sl
 8009e96:	fb06 e202 	mla	r2, r6, r2, lr
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	9b00      	ldr	r3, [sp, #0]
 8009e9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ea2:	b292      	uxth	r2, r2
 8009ea4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ea8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009eac:	f8bd 3000 	ldrh.w	r3, [sp]
 8009eb0:	4581      	cmp	r9, r0
 8009eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eb6:	f84c 3b04 	str.w	r3, [ip], #4
 8009eba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ebe:	d2db      	bcs.n	8009e78 <quorem+0x44>
 8009ec0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ec4:	b92b      	cbnz	r3, 8009ed2 <quorem+0x9e>
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	429d      	cmp	r5, r3
 8009ecc:	461a      	mov	r2, r3
 8009ece:	d32e      	bcc.n	8009f2e <quorem+0xfa>
 8009ed0:	613c      	str	r4, [r7, #16]
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	f001 fad8 	bl	800b488 <__mcmp>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	db24      	blt.n	8009f26 <quorem+0xf2>
 8009edc:	3601      	adds	r6, #1
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f04f 0c00 	mov.w	ip, #0
 8009ee4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ee8:	f8d0 e000 	ldr.w	lr, [r0]
 8009eec:	b293      	uxth	r3, r2
 8009eee:	ebac 0303 	sub.w	r3, ip, r3
 8009ef2:	0c12      	lsrs	r2, r2, #16
 8009ef4:	fa13 f38e 	uxtah	r3, r3, lr
 8009ef8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009efc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f06:	45c1      	cmp	r9, r8
 8009f08:	f840 3b04 	str.w	r3, [r0], #4
 8009f0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f10:	d2e8      	bcs.n	8009ee4 <quorem+0xb0>
 8009f12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f1a:	b922      	cbnz	r2, 8009f26 <quorem+0xf2>
 8009f1c:	3b04      	subs	r3, #4
 8009f1e:	429d      	cmp	r5, r3
 8009f20:	461a      	mov	r2, r3
 8009f22:	d30a      	bcc.n	8009f3a <quorem+0x106>
 8009f24:	613c      	str	r4, [r7, #16]
 8009f26:	4630      	mov	r0, r6
 8009f28:	b003      	add	sp, #12
 8009f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2e:	6812      	ldr	r2, [r2, #0]
 8009f30:	3b04      	subs	r3, #4
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	d1cc      	bne.n	8009ed0 <quorem+0x9c>
 8009f36:	3c01      	subs	r4, #1
 8009f38:	e7c7      	b.n	8009eca <quorem+0x96>
 8009f3a:	6812      	ldr	r2, [r2, #0]
 8009f3c:	3b04      	subs	r3, #4
 8009f3e:	2a00      	cmp	r2, #0
 8009f40:	d1f0      	bne.n	8009f24 <quorem+0xf0>
 8009f42:	3c01      	subs	r4, #1
 8009f44:	e7eb      	b.n	8009f1e <quorem+0xea>
 8009f46:	2000      	movs	r0, #0
 8009f48:	e7ee      	b.n	8009f28 <quorem+0xf4>
 8009f4a:	0000      	movs	r0, r0
 8009f4c:	0000      	movs	r0, r0
	...

08009f50 <_dtoa_r>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	ed2d 8b04 	vpush	{d8-d9}
 8009f58:	ec57 6b10 	vmov	r6, r7, d0
 8009f5c:	b093      	sub	sp, #76	; 0x4c
 8009f5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f64:	9106      	str	r1, [sp, #24]
 8009f66:	ee10 aa10 	vmov	sl, s0
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f70:	46bb      	mov	fp, r7
 8009f72:	b975      	cbnz	r5, 8009f92 <_dtoa_r+0x42>
 8009f74:	2010      	movs	r0, #16
 8009f76:	f000 fffd 	bl	800af74 <malloc>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	6260      	str	r0, [r4, #36]	; 0x24
 8009f7e:	b920      	cbnz	r0, 8009f8a <_dtoa_r+0x3a>
 8009f80:	4ba7      	ldr	r3, [pc, #668]	; (800a220 <_dtoa_r+0x2d0>)
 8009f82:	21ea      	movs	r1, #234	; 0xea
 8009f84:	48a7      	ldr	r0, [pc, #668]	; (800a224 <_dtoa_r+0x2d4>)
 8009f86:	f001 fe7f 	bl	800bc88 <__assert_func>
 8009f8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f8e:	6005      	str	r5, [r0, #0]
 8009f90:	60c5      	str	r5, [r0, #12]
 8009f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f94:	6819      	ldr	r1, [r3, #0]
 8009f96:	b151      	cbz	r1, 8009fae <_dtoa_r+0x5e>
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	604a      	str	r2, [r1, #4]
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	4093      	lsls	r3, r2
 8009fa0:	608b      	str	r3, [r1, #8]
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f001 f82e 	bl	800b004 <_Bfree>
 8009fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	1e3b      	subs	r3, r7, #0
 8009fb0:	bfaa      	itet	ge
 8009fb2:	2300      	movge	r3, #0
 8009fb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009fb8:	f8c8 3000 	strge.w	r3, [r8]
 8009fbc:	4b9a      	ldr	r3, [pc, #616]	; (800a228 <_dtoa_r+0x2d8>)
 8009fbe:	bfbc      	itt	lt
 8009fc0:	2201      	movlt	r2, #1
 8009fc2:	f8c8 2000 	strlt.w	r2, [r8]
 8009fc6:	ea33 030b 	bics.w	r3, r3, fp
 8009fca:	d11b      	bne.n	800a004 <_dtoa_r+0xb4>
 8009fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fce:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fd8:	4333      	orrs	r3, r6
 8009fda:	f000 8592 	beq.w	800ab02 <_dtoa_r+0xbb2>
 8009fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fe0:	b963      	cbnz	r3, 8009ffc <_dtoa_r+0xac>
 8009fe2:	4b92      	ldr	r3, [pc, #584]	; (800a22c <_dtoa_r+0x2dc>)
 8009fe4:	e022      	b.n	800a02c <_dtoa_r+0xdc>
 8009fe6:	4b92      	ldr	r3, [pc, #584]	; (800a230 <_dtoa_r+0x2e0>)
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	3308      	adds	r3, #8
 8009fec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	9801      	ldr	r0, [sp, #4]
 8009ff2:	b013      	add	sp, #76	; 0x4c
 8009ff4:	ecbd 8b04 	vpop	{d8-d9}
 8009ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffc:	4b8b      	ldr	r3, [pc, #556]	; (800a22c <_dtoa_r+0x2dc>)
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	3303      	adds	r3, #3
 800a002:	e7f3      	b.n	8009fec <_dtoa_r+0x9c>
 800a004:	2200      	movs	r2, #0
 800a006:	2300      	movs	r3, #0
 800a008:	4650      	mov	r0, sl
 800a00a:	4659      	mov	r1, fp
 800a00c:	f7f6 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 800a010:	ec4b ab19 	vmov	d9, sl, fp
 800a014:	4680      	mov	r8, r0
 800a016:	b158      	cbz	r0, 800a030 <_dtoa_r+0xe0>
 800a018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a01a:	2301      	movs	r3, #1
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 856b 	beq.w	800aafc <_dtoa_r+0xbac>
 800a026:	4883      	ldr	r0, [pc, #524]	; (800a234 <_dtoa_r+0x2e4>)
 800a028:	6018      	str	r0, [r3, #0]
 800a02a:	1e43      	subs	r3, r0, #1
 800a02c:	9301      	str	r3, [sp, #4]
 800a02e:	e7df      	b.n	8009ff0 <_dtoa_r+0xa0>
 800a030:	ec4b ab10 	vmov	d0, sl, fp
 800a034:	aa10      	add	r2, sp, #64	; 0x40
 800a036:	a911      	add	r1, sp, #68	; 0x44
 800a038:	4620      	mov	r0, r4
 800a03a:	f001 facb 	bl	800b5d4 <__d2b>
 800a03e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a042:	ee08 0a10 	vmov	s16, r0
 800a046:	2d00      	cmp	r5, #0
 800a048:	f000 8084 	beq.w	800a154 <_dtoa_r+0x204>
 800a04c:	ee19 3a90 	vmov	r3, s19
 800a050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a054:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a058:	4656      	mov	r6, sl
 800a05a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a05e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a062:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a066:	4b74      	ldr	r3, [pc, #464]	; (800a238 <_dtoa_r+0x2e8>)
 800a068:	2200      	movs	r2, #0
 800a06a:	4630      	mov	r0, r6
 800a06c:	4639      	mov	r1, r7
 800a06e:	f7f6 f913 	bl	8000298 <__aeabi_dsub>
 800a072:	a365      	add	r3, pc, #404	; (adr r3, 800a208 <_dtoa_r+0x2b8>)
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	f7f6 fac6 	bl	8000608 <__aeabi_dmul>
 800a07c:	a364      	add	r3, pc, #400	; (adr r3, 800a210 <_dtoa_r+0x2c0>)
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	f7f6 f90b 	bl	800029c <__adddf3>
 800a086:	4606      	mov	r6, r0
 800a088:	4628      	mov	r0, r5
 800a08a:	460f      	mov	r7, r1
 800a08c:	f7f6 fa52 	bl	8000534 <__aeabi_i2d>
 800a090:	a361      	add	r3, pc, #388	; (adr r3, 800a218 <_dtoa_r+0x2c8>)
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	f7f6 fab7 	bl	8000608 <__aeabi_dmul>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4630      	mov	r0, r6
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	f7f6 f8fb 	bl	800029c <__adddf3>
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	460f      	mov	r7, r1
 800a0aa:	f7f6 fd5d 	bl	8000b68 <__aeabi_d2iz>
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	9000      	str	r0, [sp, #0]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	f7f6 fd18 	bl	8000aec <__aeabi_dcmplt>
 800a0bc:	b150      	cbz	r0, 800a0d4 <_dtoa_r+0x184>
 800a0be:	9800      	ldr	r0, [sp, #0]
 800a0c0:	f7f6 fa38 	bl	8000534 <__aeabi_i2d>
 800a0c4:	4632      	mov	r2, r6
 800a0c6:	463b      	mov	r3, r7
 800a0c8:	f7f6 fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0cc:	b910      	cbnz	r0, 800a0d4 <_dtoa_r+0x184>
 800a0ce:	9b00      	ldr	r3, [sp, #0]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	9b00      	ldr	r3, [sp, #0]
 800a0d6:	2b16      	cmp	r3, #22
 800a0d8:	d85a      	bhi.n	800a190 <_dtoa_r+0x240>
 800a0da:	9a00      	ldr	r2, [sp, #0]
 800a0dc:	4b57      	ldr	r3, [pc, #348]	; (800a23c <_dtoa_r+0x2ec>)
 800a0de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	ec51 0b19 	vmov	r0, r1, d9
 800a0ea:	f7f6 fcff 	bl	8000aec <__aeabi_dcmplt>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d050      	beq.n	800a194 <_dtoa_r+0x244>
 800a0f2:	9b00      	ldr	r3, [sp, #0]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0fe:	1b5d      	subs	r5, r3, r5
 800a100:	1e6b      	subs	r3, r5, #1
 800a102:	9305      	str	r3, [sp, #20]
 800a104:	bf45      	ittet	mi
 800a106:	f1c5 0301 	rsbmi	r3, r5, #1
 800a10a:	9304      	strmi	r3, [sp, #16]
 800a10c:	2300      	movpl	r3, #0
 800a10e:	2300      	movmi	r3, #0
 800a110:	bf4c      	ite	mi
 800a112:	9305      	strmi	r3, [sp, #20]
 800a114:	9304      	strpl	r3, [sp, #16]
 800a116:	9b00      	ldr	r3, [sp, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	db3d      	blt.n	800a198 <_dtoa_r+0x248>
 800a11c:	9b05      	ldr	r3, [sp, #20]
 800a11e:	9a00      	ldr	r2, [sp, #0]
 800a120:	920a      	str	r2, [sp, #40]	; 0x28
 800a122:	4413      	add	r3, r2
 800a124:	9305      	str	r3, [sp, #20]
 800a126:	2300      	movs	r3, #0
 800a128:	9307      	str	r3, [sp, #28]
 800a12a:	9b06      	ldr	r3, [sp, #24]
 800a12c:	2b09      	cmp	r3, #9
 800a12e:	f200 8089 	bhi.w	800a244 <_dtoa_r+0x2f4>
 800a132:	2b05      	cmp	r3, #5
 800a134:	bfc4      	itt	gt
 800a136:	3b04      	subgt	r3, #4
 800a138:	9306      	strgt	r3, [sp, #24]
 800a13a:	9b06      	ldr	r3, [sp, #24]
 800a13c:	f1a3 0302 	sub.w	r3, r3, #2
 800a140:	bfcc      	ite	gt
 800a142:	2500      	movgt	r5, #0
 800a144:	2501      	movle	r5, #1
 800a146:	2b03      	cmp	r3, #3
 800a148:	f200 8087 	bhi.w	800a25a <_dtoa_r+0x30a>
 800a14c:	e8df f003 	tbb	[pc, r3]
 800a150:	59383a2d 	.word	0x59383a2d
 800a154:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a158:	441d      	add	r5, r3
 800a15a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a15e:	2b20      	cmp	r3, #32
 800a160:	bfc1      	itttt	gt
 800a162:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a166:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a16a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a16e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a172:	bfda      	itte	le
 800a174:	f1c3 0320 	rsble	r3, r3, #32
 800a178:	fa06 f003 	lslle.w	r0, r6, r3
 800a17c:	4318      	orrgt	r0, r3
 800a17e:	f7f6 f9c9 	bl	8000514 <__aeabi_ui2d>
 800a182:	2301      	movs	r3, #1
 800a184:	4606      	mov	r6, r0
 800a186:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a18a:	3d01      	subs	r5, #1
 800a18c:	930e      	str	r3, [sp, #56]	; 0x38
 800a18e:	e76a      	b.n	800a066 <_dtoa_r+0x116>
 800a190:	2301      	movs	r3, #1
 800a192:	e7b2      	b.n	800a0fa <_dtoa_r+0x1aa>
 800a194:	900b      	str	r0, [sp, #44]	; 0x2c
 800a196:	e7b1      	b.n	800a0fc <_dtoa_r+0x1ac>
 800a198:	9b04      	ldr	r3, [sp, #16]
 800a19a:	9a00      	ldr	r2, [sp, #0]
 800a19c:	1a9b      	subs	r3, r3, r2
 800a19e:	9304      	str	r3, [sp, #16]
 800a1a0:	4253      	negs	r3, r2
 800a1a2:	9307      	str	r3, [sp, #28]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1a8:	e7bf      	b.n	800a12a <_dtoa_r+0x1da>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	9308      	str	r3, [sp, #32]
 800a1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	dc55      	bgt.n	800a260 <_dtoa_r+0x310>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1be:	e00c      	b.n	800a1da <_dtoa_r+0x28a>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e7f3      	b.n	800a1ac <_dtoa_r+0x25c>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c8:	9308      	str	r3, [sp, #32]
 800a1ca:	9b00      	ldr	r3, [sp, #0]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	9302      	str	r3, [sp, #8]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	9303      	str	r3, [sp, #12]
 800a1d6:	bfb8      	it	lt
 800a1d8:	2301      	movlt	r3, #1
 800a1da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1dc:	2200      	movs	r2, #0
 800a1de:	6042      	str	r2, [r0, #4]
 800a1e0:	2204      	movs	r2, #4
 800a1e2:	f102 0614 	add.w	r6, r2, #20
 800a1e6:	429e      	cmp	r6, r3
 800a1e8:	6841      	ldr	r1, [r0, #4]
 800a1ea:	d93d      	bls.n	800a268 <_dtoa_r+0x318>
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 fec9 	bl	800af84 <_Balloc>
 800a1f2:	9001      	str	r0, [sp, #4]
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d13b      	bne.n	800a270 <_dtoa_r+0x320>
 800a1f8:	4b11      	ldr	r3, [pc, #68]	; (800a240 <_dtoa_r+0x2f0>)
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a200:	e6c0      	b.n	8009f84 <_dtoa_r+0x34>
 800a202:	2301      	movs	r3, #1
 800a204:	e7df      	b.n	800a1c6 <_dtoa_r+0x276>
 800a206:	bf00      	nop
 800a208:	636f4361 	.word	0x636f4361
 800a20c:	3fd287a7 	.word	0x3fd287a7
 800a210:	8b60c8b3 	.word	0x8b60c8b3
 800a214:	3fc68a28 	.word	0x3fc68a28
 800a218:	509f79fb 	.word	0x509f79fb
 800a21c:	3fd34413 	.word	0x3fd34413
 800a220:	0800c841 	.word	0x0800c841
 800a224:	0800c858 	.word	0x0800c858
 800a228:	7ff00000 	.word	0x7ff00000
 800a22c:	0800c83d 	.word	0x0800c83d
 800a230:	0800c834 	.word	0x0800c834
 800a234:	0800c811 	.word	0x0800c811
 800a238:	3ff80000 	.word	0x3ff80000
 800a23c:	0800c9a8 	.word	0x0800c9a8
 800a240:	0800c8b3 	.word	0x0800c8b3
 800a244:	2501      	movs	r5, #1
 800a246:	2300      	movs	r3, #0
 800a248:	9306      	str	r3, [sp, #24]
 800a24a:	9508      	str	r5, [sp, #32]
 800a24c:	f04f 33ff 	mov.w	r3, #4294967295
 800a250:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a254:	2200      	movs	r2, #0
 800a256:	2312      	movs	r3, #18
 800a258:	e7b0      	b.n	800a1bc <_dtoa_r+0x26c>
 800a25a:	2301      	movs	r3, #1
 800a25c:	9308      	str	r3, [sp, #32]
 800a25e:	e7f5      	b.n	800a24c <_dtoa_r+0x2fc>
 800a260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a262:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a266:	e7b8      	b.n	800a1da <_dtoa_r+0x28a>
 800a268:	3101      	adds	r1, #1
 800a26a:	6041      	str	r1, [r0, #4]
 800a26c:	0052      	lsls	r2, r2, #1
 800a26e:	e7b8      	b.n	800a1e2 <_dtoa_r+0x292>
 800a270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a272:	9a01      	ldr	r2, [sp, #4]
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	9b03      	ldr	r3, [sp, #12]
 800a278:	2b0e      	cmp	r3, #14
 800a27a:	f200 809d 	bhi.w	800a3b8 <_dtoa_r+0x468>
 800a27e:	2d00      	cmp	r5, #0
 800a280:	f000 809a 	beq.w	800a3b8 <_dtoa_r+0x468>
 800a284:	9b00      	ldr	r3, [sp, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	dd32      	ble.n	800a2f0 <_dtoa_r+0x3a0>
 800a28a:	4ab7      	ldr	r2, [pc, #732]	; (800a568 <_dtoa_r+0x618>)
 800a28c:	f003 030f 	and.w	r3, r3, #15
 800a290:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a294:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a298:	9b00      	ldr	r3, [sp, #0]
 800a29a:	05d8      	lsls	r0, r3, #23
 800a29c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a2a0:	d516      	bpl.n	800a2d0 <_dtoa_r+0x380>
 800a2a2:	4bb2      	ldr	r3, [pc, #712]	; (800a56c <_dtoa_r+0x61c>)
 800a2a4:	ec51 0b19 	vmov	r0, r1, d9
 800a2a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2ac:	f7f6 fad6 	bl	800085c <__aeabi_ddiv>
 800a2b0:	f007 070f 	and.w	r7, r7, #15
 800a2b4:	4682      	mov	sl, r0
 800a2b6:	468b      	mov	fp, r1
 800a2b8:	2503      	movs	r5, #3
 800a2ba:	4eac      	ldr	r6, [pc, #688]	; (800a56c <_dtoa_r+0x61c>)
 800a2bc:	b957      	cbnz	r7, 800a2d4 <_dtoa_r+0x384>
 800a2be:	4642      	mov	r2, r8
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	4650      	mov	r0, sl
 800a2c4:	4659      	mov	r1, fp
 800a2c6:	f7f6 fac9 	bl	800085c <__aeabi_ddiv>
 800a2ca:	4682      	mov	sl, r0
 800a2cc:	468b      	mov	fp, r1
 800a2ce:	e028      	b.n	800a322 <_dtoa_r+0x3d2>
 800a2d0:	2502      	movs	r5, #2
 800a2d2:	e7f2      	b.n	800a2ba <_dtoa_r+0x36a>
 800a2d4:	07f9      	lsls	r1, r7, #31
 800a2d6:	d508      	bpl.n	800a2ea <_dtoa_r+0x39a>
 800a2d8:	4640      	mov	r0, r8
 800a2da:	4649      	mov	r1, r9
 800a2dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2e0:	f7f6 f992 	bl	8000608 <__aeabi_dmul>
 800a2e4:	3501      	adds	r5, #1
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	4689      	mov	r9, r1
 800a2ea:	107f      	asrs	r7, r7, #1
 800a2ec:	3608      	adds	r6, #8
 800a2ee:	e7e5      	b.n	800a2bc <_dtoa_r+0x36c>
 800a2f0:	f000 809b 	beq.w	800a42a <_dtoa_r+0x4da>
 800a2f4:	9b00      	ldr	r3, [sp, #0]
 800a2f6:	4f9d      	ldr	r7, [pc, #628]	; (800a56c <_dtoa_r+0x61c>)
 800a2f8:	425e      	negs	r6, r3
 800a2fa:	4b9b      	ldr	r3, [pc, #620]	; (800a568 <_dtoa_r+0x618>)
 800a2fc:	f006 020f 	and.w	r2, r6, #15
 800a300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	ec51 0b19 	vmov	r0, r1, d9
 800a30c:	f7f6 f97c 	bl	8000608 <__aeabi_dmul>
 800a310:	1136      	asrs	r6, r6, #4
 800a312:	4682      	mov	sl, r0
 800a314:	468b      	mov	fp, r1
 800a316:	2300      	movs	r3, #0
 800a318:	2502      	movs	r5, #2
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	d17a      	bne.n	800a414 <_dtoa_r+0x4c4>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1d3      	bne.n	800a2ca <_dtoa_r+0x37a>
 800a322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 8082 	beq.w	800a42e <_dtoa_r+0x4de>
 800a32a:	4b91      	ldr	r3, [pc, #580]	; (800a570 <_dtoa_r+0x620>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	4650      	mov	r0, sl
 800a330:	4659      	mov	r1, fp
 800a332:	f7f6 fbdb 	bl	8000aec <__aeabi_dcmplt>
 800a336:	2800      	cmp	r0, #0
 800a338:	d079      	beq.n	800a42e <_dtoa_r+0x4de>
 800a33a:	9b03      	ldr	r3, [sp, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d076      	beq.n	800a42e <_dtoa_r+0x4de>
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	2b00      	cmp	r3, #0
 800a344:	dd36      	ble.n	800a3b4 <_dtoa_r+0x464>
 800a346:	9b00      	ldr	r3, [sp, #0]
 800a348:	4650      	mov	r0, sl
 800a34a:	4659      	mov	r1, fp
 800a34c:	1e5f      	subs	r7, r3, #1
 800a34e:	2200      	movs	r2, #0
 800a350:	4b88      	ldr	r3, [pc, #544]	; (800a574 <_dtoa_r+0x624>)
 800a352:	f7f6 f959 	bl	8000608 <__aeabi_dmul>
 800a356:	9e02      	ldr	r6, [sp, #8]
 800a358:	4682      	mov	sl, r0
 800a35a:	468b      	mov	fp, r1
 800a35c:	3501      	adds	r5, #1
 800a35e:	4628      	mov	r0, r5
 800a360:	f7f6 f8e8 	bl	8000534 <__aeabi_i2d>
 800a364:	4652      	mov	r2, sl
 800a366:	465b      	mov	r3, fp
 800a368:	f7f6 f94e 	bl	8000608 <__aeabi_dmul>
 800a36c:	4b82      	ldr	r3, [pc, #520]	; (800a578 <_dtoa_r+0x628>)
 800a36e:	2200      	movs	r2, #0
 800a370:	f7f5 ff94 	bl	800029c <__adddf3>
 800a374:	46d0      	mov	r8, sl
 800a376:	46d9      	mov	r9, fp
 800a378:	4682      	mov	sl, r0
 800a37a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a37e:	2e00      	cmp	r6, #0
 800a380:	d158      	bne.n	800a434 <_dtoa_r+0x4e4>
 800a382:	4b7e      	ldr	r3, [pc, #504]	; (800a57c <_dtoa_r+0x62c>)
 800a384:	2200      	movs	r2, #0
 800a386:	4640      	mov	r0, r8
 800a388:	4649      	mov	r1, r9
 800a38a:	f7f5 ff85 	bl	8000298 <__aeabi_dsub>
 800a38e:	4652      	mov	r2, sl
 800a390:	465b      	mov	r3, fp
 800a392:	4680      	mov	r8, r0
 800a394:	4689      	mov	r9, r1
 800a396:	f7f6 fbc7 	bl	8000b28 <__aeabi_dcmpgt>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	f040 8295 	bne.w	800a8ca <_dtoa_r+0x97a>
 800a3a0:	4652      	mov	r2, sl
 800a3a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	f7f6 fb9f 	bl	8000aec <__aeabi_dcmplt>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f040 8289 	bne.w	800a8c6 <_dtoa_r+0x976>
 800a3b4:	ec5b ab19 	vmov	sl, fp, d9
 800a3b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f2c0 8148 	blt.w	800a650 <_dtoa_r+0x700>
 800a3c0:	9a00      	ldr	r2, [sp, #0]
 800a3c2:	2a0e      	cmp	r2, #14
 800a3c4:	f300 8144 	bgt.w	800a650 <_dtoa_r+0x700>
 800a3c8:	4b67      	ldr	r3, [pc, #412]	; (800a568 <_dtoa_r+0x618>)
 800a3ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f280 80d5 	bge.w	800a584 <_dtoa_r+0x634>
 800a3da:	9b03      	ldr	r3, [sp, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f300 80d1 	bgt.w	800a584 <_dtoa_r+0x634>
 800a3e2:	f040 826f 	bne.w	800a8c4 <_dtoa_r+0x974>
 800a3e6:	4b65      	ldr	r3, [pc, #404]	; (800a57c <_dtoa_r+0x62c>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	f7f6 f90b 	bl	8000608 <__aeabi_dmul>
 800a3f2:	4652      	mov	r2, sl
 800a3f4:	465b      	mov	r3, fp
 800a3f6:	f7f6 fb8d 	bl	8000b14 <__aeabi_dcmpge>
 800a3fa:	9e03      	ldr	r6, [sp, #12]
 800a3fc:	4637      	mov	r7, r6
 800a3fe:	2800      	cmp	r0, #0
 800a400:	f040 8245 	bne.w	800a88e <_dtoa_r+0x93e>
 800a404:	9d01      	ldr	r5, [sp, #4]
 800a406:	2331      	movs	r3, #49	; 0x31
 800a408:	f805 3b01 	strb.w	r3, [r5], #1
 800a40c:	9b00      	ldr	r3, [sp, #0]
 800a40e:	3301      	adds	r3, #1
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	e240      	b.n	800a896 <_dtoa_r+0x946>
 800a414:	07f2      	lsls	r2, r6, #31
 800a416:	d505      	bpl.n	800a424 <_dtoa_r+0x4d4>
 800a418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a41c:	f7f6 f8f4 	bl	8000608 <__aeabi_dmul>
 800a420:	3501      	adds	r5, #1
 800a422:	2301      	movs	r3, #1
 800a424:	1076      	asrs	r6, r6, #1
 800a426:	3708      	adds	r7, #8
 800a428:	e777      	b.n	800a31a <_dtoa_r+0x3ca>
 800a42a:	2502      	movs	r5, #2
 800a42c:	e779      	b.n	800a322 <_dtoa_r+0x3d2>
 800a42e:	9f00      	ldr	r7, [sp, #0]
 800a430:	9e03      	ldr	r6, [sp, #12]
 800a432:	e794      	b.n	800a35e <_dtoa_r+0x40e>
 800a434:	9901      	ldr	r1, [sp, #4]
 800a436:	4b4c      	ldr	r3, [pc, #304]	; (800a568 <_dtoa_r+0x618>)
 800a438:	4431      	add	r1, r6
 800a43a:	910d      	str	r1, [sp, #52]	; 0x34
 800a43c:	9908      	ldr	r1, [sp, #32]
 800a43e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a442:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a446:	2900      	cmp	r1, #0
 800a448:	d043      	beq.n	800a4d2 <_dtoa_r+0x582>
 800a44a:	494d      	ldr	r1, [pc, #308]	; (800a580 <_dtoa_r+0x630>)
 800a44c:	2000      	movs	r0, #0
 800a44e:	f7f6 fa05 	bl	800085c <__aeabi_ddiv>
 800a452:	4652      	mov	r2, sl
 800a454:	465b      	mov	r3, fp
 800a456:	f7f5 ff1f 	bl	8000298 <__aeabi_dsub>
 800a45a:	9d01      	ldr	r5, [sp, #4]
 800a45c:	4682      	mov	sl, r0
 800a45e:	468b      	mov	fp, r1
 800a460:	4649      	mov	r1, r9
 800a462:	4640      	mov	r0, r8
 800a464:	f7f6 fb80 	bl	8000b68 <__aeabi_d2iz>
 800a468:	4606      	mov	r6, r0
 800a46a:	f7f6 f863 	bl	8000534 <__aeabi_i2d>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	f7f5 ff0f 	bl	8000298 <__aeabi_dsub>
 800a47a:	3630      	adds	r6, #48	; 0x30
 800a47c:	f805 6b01 	strb.w	r6, [r5], #1
 800a480:	4652      	mov	r2, sl
 800a482:	465b      	mov	r3, fp
 800a484:	4680      	mov	r8, r0
 800a486:	4689      	mov	r9, r1
 800a488:	f7f6 fb30 	bl	8000aec <__aeabi_dcmplt>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d163      	bne.n	800a558 <_dtoa_r+0x608>
 800a490:	4642      	mov	r2, r8
 800a492:	464b      	mov	r3, r9
 800a494:	4936      	ldr	r1, [pc, #216]	; (800a570 <_dtoa_r+0x620>)
 800a496:	2000      	movs	r0, #0
 800a498:	f7f5 fefe 	bl	8000298 <__aeabi_dsub>
 800a49c:	4652      	mov	r2, sl
 800a49e:	465b      	mov	r3, fp
 800a4a0:	f7f6 fb24 	bl	8000aec <__aeabi_dcmplt>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f040 80b5 	bne.w	800a614 <_dtoa_r+0x6c4>
 800a4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4ac:	429d      	cmp	r5, r3
 800a4ae:	d081      	beq.n	800a3b4 <_dtoa_r+0x464>
 800a4b0:	4b30      	ldr	r3, [pc, #192]	; (800a574 <_dtoa_r+0x624>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	4650      	mov	r0, sl
 800a4b6:	4659      	mov	r1, fp
 800a4b8:	f7f6 f8a6 	bl	8000608 <__aeabi_dmul>
 800a4bc:	4b2d      	ldr	r3, [pc, #180]	; (800a574 <_dtoa_r+0x624>)
 800a4be:	4682      	mov	sl, r0
 800a4c0:	468b      	mov	fp, r1
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f7f6 f89e 	bl	8000608 <__aeabi_dmul>
 800a4cc:	4680      	mov	r8, r0
 800a4ce:	4689      	mov	r9, r1
 800a4d0:	e7c6      	b.n	800a460 <_dtoa_r+0x510>
 800a4d2:	4650      	mov	r0, sl
 800a4d4:	4659      	mov	r1, fp
 800a4d6:	f7f6 f897 	bl	8000608 <__aeabi_dmul>
 800a4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4dc:	9d01      	ldr	r5, [sp, #4]
 800a4de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4e0:	4682      	mov	sl, r0
 800a4e2:	468b      	mov	fp, r1
 800a4e4:	4649      	mov	r1, r9
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	f7f6 fb3e 	bl	8000b68 <__aeabi_d2iz>
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	f7f6 f821 	bl	8000534 <__aeabi_i2d>
 800a4f2:	3630      	adds	r6, #48	; 0x30
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	4649      	mov	r1, r9
 800a4fc:	f7f5 fecc 	bl	8000298 <__aeabi_dsub>
 800a500:	f805 6b01 	strb.w	r6, [r5], #1
 800a504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a506:	429d      	cmp	r5, r3
 800a508:	4680      	mov	r8, r0
 800a50a:	4689      	mov	r9, r1
 800a50c:	f04f 0200 	mov.w	r2, #0
 800a510:	d124      	bne.n	800a55c <_dtoa_r+0x60c>
 800a512:	4b1b      	ldr	r3, [pc, #108]	; (800a580 <_dtoa_r+0x630>)
 800a514:	4650      	mov	r0, sl
 800a516:	4659      	mov	r1, fp
 800a518:	f7f5 fec0 	bl	800029c <__adddf3>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	4640      	mov	r0, r8
 800a522:	4649      	mov	r1, r9
 800a524:	f7f6 fb00 	bl	8000b28 <__aeabi_dcmpgt>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d173      	bne.n	800a614 <_dtoa_r+0x6c4>
 800a52c:	4652      	mov	r2, sl
 800a52e:	465b      	mov	r3, fp
 800a530:	4913      	ldr	r1, [pc, #76]	; (800a580 <_dtoa_r+0x630>)
 800a532:	2000      	movs	r0, #0
 800a534:	f7f5 feb0 	bl	8000298 <__aeabi_dsub>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4640      	mov	r0, r8
 800a53e:	4649      	mov	r1, r9
 800a540:	f7f6 fad4 	bl	8000aec <__aeabi_dcmplt>
 800a544:	2800      	cmp	r0, #0
 800a546:	f43f af35 	beq.w	800a3b4 <_dtoa_r+0x464>
 800a54a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a54c:	1e6b      	subs	r3, r5, #1
 800a54e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a550:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a554:	2b30      	cmp	r3, #48	; 0x30
 800a556:	d0f8      	beq.n	800a54a <_dtoa_r+0x5fa>
 800a558:	9700      	str	r7, [sp, #0]
 800a55a:	e049      	b.n	800a5f0 <_dtoa_r+0x6a0>
 800a55c:	4b05      	ldr	r3, [pc, #20]	; (800a574 <_dtoa_r+0x624>)
 800a55e:	f7f6 f853 	bl	8000608 <__aeabi_dmul>
 800a562:	4680      	mov	r8, r0
 800a564:	4689      	mov	r9, r1
 800a566:	e7bd      	b.n	800a4e4 <_dtoa_r+0x594>
 800a568:	0800c9a8 	.word	0x0800c9a8
 800a56c:	0800c980 	.word	0x0800c980
 800a570:	3ff00000 	.word	0x3ff00000
 800a574:	40240000 	.word	0x40240000
 800a578:	401c0000 	.word	0x401c0000
 800a57c:	40140000 	.word	0x40140000
 800a580:	3fe00000 	.word	0x3fe00000
 800a584:	9d01      	ldr	r5, [sp, #4]
 800a586:	4656      	mov	r6, sl
 800a588:	465f      	mov	r7, fp
 800a58a:	4642      	mov	r2, r8
 800a58c:	464b      	mov	r3, r9
 800a58e:	4630      	mov	r0, r6
 800a590:	4639      	mov	r1, r7
 800a592:	f7f6 f963 	bl	800085c <__aeabi_ddiv>
 800a596:	f7f6 fae7 	bl	8000b68 <__aeabi_d2iz>
 800a59a:	4682      	mov	sl, r0
 800a59c:	f7f5 ffca 	bl	8000534 <__aeabi_i2d>
 800a5a0:	4642      	mov	r2, r8
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	f7f6 f830 	bl	8000608 <__aeabi_dmul>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a5b4:	f7f5 fe70 	bl	8000298 <__aeabi_dsub>
 800a5b8:	f805 6b01 	strb.w	r6, [r5], #1
 800a5bc:	9e01      	ldr	r6, [sp, #4]
 800a5be:	9f03      	ldr	r7, [sp, #12]
 800a5c0:	1bae      	subs	r6, r5, r6
 800a5c2:	42b7      	cmp	r7, r6
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	d135      	bne.n	800a636 <_dtoa_r+0x6e6>
 800a5ca:	f7f5 fe67 	bl	800029c <__adddf3>
 800a5ce:	4642      	mov	r2, r8
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	460f      	mov	r7, r1
 800a5d6:	f7f6 faa7 	bl	8000b28 <__aeabi_dcmpgt>
 800a5da:	b9d0      	cbnz	r0, 800a612 <_dtoa_r+0x6c2>
 800a5dc:	4642      	mov	r2, r8
 800a5de:	464b      	mov	r3, r9
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	f7f6 fa78 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5e8:	b110      	cbz	r0, 800a5f0 <_dtoa_r+0x6a0>
 800a5ea:	f01a 0f01 	tst.w	sl, #1
 800a5ee:	d110      	bne.n	800a612 <_dtoa_r+0x6c2>
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	ee18 1a10 	vmov	r1, s16
 800a5f6:	f000 fd05 	bl	800b004 <_Bfree>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	9800      	ldr	r0, [sp, #0]
 800a5fe:	702b      	strb	r3, [r5, #0]
 800a600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a602:	3001      	adds	r0, #1
 800a604:	6018      	str	r0, [r3, #0]
 800a606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f43f acf1 	beq.w	8009ff0 <_dtoa_r+0xa0>
 800a60e:	601d      	str	r5, [r3, #0]
 800a610:	e4ee      	b.n	8009ff0 <_dtoa_r+0xa0>
 800a612:	9f00      	ldr	r7, [sp, #0]
 800a614:	462b      	mov	r3, r5
 800a616:	461d      	mov	r5, r3
 800a618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a61c:	2a39      	cmp	r2, #57	; 0x39
 800a61e:	d106      	bne.n	800a62e <_dtoa_r+0x6de>
 800a620:	9a01      	ldr	r2, [sp, #4]
 800a622:	429a      	cmp	r2, r3
 800a624:	d1f7      	bne.n	800a616 <_dtoa_r+0x6c6>
 800a626:	9901      	ldr	r1, [sp, #4]
 800a628:	2230      	movs	r2, #48	; 0x30
 800a62a:	3701      	adds	r7, #1
 800a62c:	700a      	strb	r2, [r1, #0]
 800a62e:	781a      	ldrb	r2, [r3, #0]
 800a630:	3201      	adds	r2, #1
 800a632:	701a      	strb	r2, [r3, #0]
 800a634:	e790      	b.n	800a558 <_dtoa_r+0x608>
 800a636:	4ba6      	ldr	r3, [pc, #664]	; (800a8d0 <_dtoa_r+0x980>)
 800a638:	2200      	movs	r2, #0
 800a63a:	f7f5 ffe5 	bl	8000608 <__aeabi_dmul>
 800a63e:	2200      	movs	r2, #0
 800a640:	2300      	movs	r3, #0
 800a642:	4606      	mov	r6, r0
 800a644:	460f      	mov	r7, r1
 800a646:	f7f6 fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d09d      	beq.n	800a58a <_dtoa_r+0x63a>
 800a64e:	e7cf      	b.n	800a5f0 <_dtoa_r+0x6a0>
 800a650:	9a08      	ldr	r2, [sp, #32]
 800a652:	2a00      	cmp	r2, #0
 800a654:	f000 80d7 	beq.w	800a806 <_dtoa_r+0x8b6>
 800a658:	9a06      	ldr	r2, [sp, #24]
 800a65a:	2a01      	cmp	r2, #1
 800a65c:	f300 80ba 	bgt.w	800a7d4 <_dtoa_r+0x884>
 800a660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a662:	2a00      	cmp	r2, #0
 800a664:	f000 80b2 	beq.w	800a7cc <_dtoa_r+0x87c>
 800a668:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a66c:	9e07      	ldr	r6, [sp, #28]
 800a66e:	9d04      	ldr	r5, [sp, #16]
 800a670:	9a04      	ldr	r2, [sp, #16]
 800a672:	441a      	add	r2, r3
 800a674:	9204      	str	r2, [sp, #16]
 800a676:	9a05      	ldr	r2, [sp, #20]
 800a678:	2101      	movs	r1, #1
 800a67a:	441a      	add	r2, r3
 800a67c:	4620      	mov	r0, r4
 800a67e:	9205      	str	r2, [sp, #20]
 800a680:	f000 fd78 	bl	800b174 <__i2b>
 800a684:	4607      	mov	r7, r0
 800a686:	2d00      	cmp	r5, #0
 800a688:	dd0c      	ble.n	800a6a4 <_dtoa_r+0x754>
 800a68a:	9b05      	ldr	r3, [sp, #20]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dd09      	ble.n	800a6a4 <_dtoa_r+0x754>
 800a690:	42ab      	cmp	r3, r5
 800a692:	9a04      	ldr	r2, [sp, #16]
 800a694:	bfa8      	it	ge
 800a696:	462b      	movge	r3, r5
 800a698:	1ad2      	subs	r2, r2, r3
 800a69a:	9204      	str	r2, [sp, #16]
 800a69c:	9a05      	ldr	r2, [sp, #20]
 800a69e:	1aed      	subs	r5, r5, r3
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	9b07      	ldr	r3, [sp, #28]
 800a6a6:	b31b      	cbz	r3, 800a6f0 <_dtoa_r+0x7a0>
 800a6a8:	9b08      	ldr	r3, [sp, #32]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 80af 	beq.w	800a80e <_dtoa_r+0x8be>
 800a6b0:	2e00      	cmp	r6, #0
 800a6b2:	dd13      	ble.n	800a6dc <_dtoa_r+0x78c>
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	4632      	mov	r2, r6
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f000 fe1b 	bl	800b2f4 <__pow5mult>
 800a6be:	ee18 2a10 	vmov	r2, s16
 800a6c2:	4601      	mov	r1, r0
 800a6c4:	4607      	mov	r7, r0
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 fd6a 	bl	800b1a0 <__multiply>
 800a6cc:	ee18 1a10 	vmov	r1, s16
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fc96 	bl	800b004 <_Bfree>
 800a6d8:	ee08 8a10 	vmov	s16, r8
 800a6dc:	9b07      	ldr	r3, [sp, #28]
 800a6de:	1b9a      	subs	r2, r3, r6
 800a6e0:	d006      	beq.n	800a6f0 <_dtoa_r+0x7a0>
 800a6e2:	ee18 1a10 	vmov	r1, s16
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 fe04 	bl	800b2f4 <__pow5mult>
 800a6ec:	ee08 0a10 	vmov	s16, r0
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 fd3e 	bl	800b174 <__i2b>
 800a6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	f340 8088 	ble.w	800a812 <_dtoa_r+0x8c2>
 800a702:	461a      	mov	r2, r3
 800a704:	4601      	mov	r1, r0
 800a706:	4620      	mov	r0, r4
 800a708:	f000 fdf4 	bl	800b2f4 <__pow5mult>
 800a70c:	9b06      	ldr	r3, [sp, #24]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	4606      	mov	r6, r0
 800a712:	f340 8081 	ble.w	800a818 <_dtoa_r+0x8c8>
 800a716:	f04f 0800 	mov.w	r8, #0
 800a71a:	6933      	ldr	r3, [r6, #16]
 800a71c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a720:	6918      	ldr	r0, [r3, #16]
 800a722:	f000 fcd7 	bl	800b0d4 <__hi0bits>
 800a726:	f1c0 0020 	rsb	r0, r0, #32
 800a72a:	9b05      	ldr	r3, [sp, #20]
 800a72c:	4418      	add	r0, r3
 800a72e:	f010 001f 	ands.w	r0, r0, #31
 800a732:	f000 8092 	beq.w	800a85a <_dtoa_r+0x90a>
 800a736:	f1c0 0320 	rsb	r3, r0, #32
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	f340 808a 	ble.w	800a854 <_dtoa_r+0x904>
 800a740:	f1c0 001c 	rsb	r0, r0, #28
 800a744:	9b04      	ldr	r3, [sp, #16]
 800a746:	4403      	add	r3, r0
 800a748:	9304      	str	r3, [sp, #16]
 800a74a:	9b05      	ldr	r3, [sp, #20]
 800a74c:	4403      	add	r3, r0
 800a74e:	4405      	add	r5, r0
 800a750:	9305      	str	r3, [sp, #20]
 800a752:	9b04      	ldr	r3, [sp, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	dd07      	ble.n	800a768 <_dtoa_r+0x818>
 800a758:	ee18 1a10 	vmov	r1, s16
 800a75c:	461a      	mov	r2, r3
 800a75e:	4620      	mov	r0, r4
 800a760:	f000 fe22 	bl	800b3a8 <__lshift>
 800a764:	ee08 0a10 	vmov	s16, r0
 800a768:	9b05      	ldr	r3, [sp, #20]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	dd05      	ble.n	800a77a <_dtoa_r+0x82a>
 800a76e:	4631      	mov	r1, r6
 800a770:	461a      	mov	r2, r3
 800a772:	4620      	mov	r0, r4
 800a774:	f000 fe18 	bl	800b3a8 <__lshift>
 800a778:	4606      	mov	r6, r0
 800a77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d06e      	beq.n	800a85e <_dtoa_r+0x90e>
 800a780:	ee18 0a10 	vmov	r0, s16
 800a784:	4631      	mov	r1, r6
 800a786:	f000 fe7f 	bl	800b488 <__mcmp>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	da67      	bge.n	800a85e <_dtoa_r+0x90e>
 800a78e:	9b00      	ldr	r3, [sp, #0]
 800a790:	3b01      	subs	r3, #1
 800a792:	ee18 1a10 	vmov	r1, s16
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	220a      	movs	r2, #10
 800a79a:	2300      	movs	r3, #0
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 fc53 	bl	800b048 <__multadd>
 800a7a2:	9b08      	ldr	r3, [sp, #32]
 800a7a4:	ee08 0a10 	vmov	s16, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 81b1 	beq.w	800ab10 <_dtoa_r+0xbc0>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	220a      	movs	r2, #10
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f000 fc47 	bl	800b048 <__multadd>
 800a7ba:	9b02      	ldr	r3, [sp, #8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	4607      	mov	r7, r0
 800a7c0:	f300 808e 	bgt.w	800a8e0 <_dtoa_r+0x990>
 800a7c4:	9b06      	ldr	r3, [sp, #24]
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	dc51      	bgt.n	800a86e <_dtoa_r+0x91e>
 800a7ca:	e089      	b.n	800a8e0 <_dtoa_r+0x990>
 800a7cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7d2:	e74b      	b.n	800a66c <_dtoa_r+0x71c>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	1e5e      	subs	r6, r3, #1
 800a7d8:	9b07      	ldr	r3, [sp, #28]
 800a7da:	42b3      	cmp	r3, r6
 800a7dc:	bfbf      	itttt	lt
 800a7de:	9b07      	ldrlt	r3, [sp, #28]
 800a7e0:	9607      	strlt	r6, [sp, #28]
 800a7e2:	1af2      	sublt	r2, r6, r3
 800a7e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a7e6:	bfb6      	itet	lt
 800a7e8:	189b      	addlt	r3, r3, r2
 800a7ea:	1b9e      	subge	r6, r3, r6
 800a7ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a7ee:	9b03      	ldr	r3, [sp, #12]
 800a7f0:	bfb8      	it	lt
 800a7f2:	2600      	movlt	r6, #0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bfb7      	itett	lt
 800a7f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a7fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a800:	1a9d      	sublt	r5, r3, r2
 800a802:	2300      	movlt	r3, #0
 800a804:	e734      	b.n	800a670 <_dtoa_r+0x720>
 800a806:	9e07      	ldr	r6, [sp, #28]
 800a808:	9d04      	ldr	r5, [sp, #16]
 800a80a:	9f08      	ldr	r7, [sp, #32]
 800a80c:	e73b      	b.n	800a686 <_dtoa_r+0x736>
 800a80e:	9a07      	ldr	r2, [sp, #28]
 800a810:	e767      	b.n	800a6e2 <_dtoa_r+0x792>
 800a812:	9b06      	ldr	r3, [sp, #24]
 800a814:	2b01      	cmp	r3, #1
 800a816:	dc18      	bgt.n	800a84a <_dtoa_r+0x8fa>
 800a818:	f1ba 0f00 	cmp.w	sl, #0
 800a81c:	d115      	bne.n	800a84a <_dtoa_r+0x8fa>
 800a81e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a822:	b993      	cbnz	r3, 800a84a <_dtoa_r+0x8fa>
 800a824:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a828:	0d1b      	lsrs	r3, r3, #20
 800a82a:	051b      	lsls	r3, r3, #20
 800a82c:	b183      	cbz	r3, 800a850 <_dtoa_r+0x900>
 800a82e:	9b04      	ldr	r3, [sp, #16]
 800a830:	3301      	adds	r3, #1
 800a832:	9304      	str	r3, [sp, #16]
 800a834:	9b05      	ldr	r3, [sp, #20]
 800a836:	3301      	adds	r3, #1
 800a838:	9305      	str	r3, [sp, #20]
 800a83a:	f04f 0801 	mov.w	r8, #1
 800a83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a840:	2b00      	cmp	r3, #0
 800a842:	f47f af6a 	bne.w	800a71a <_dtoa_r+0x7ca>
 800a846:	2001      	movs	r0, #1
 800a848:	e76f      	b.n	800a72a <_dtoa_r+0x7da>
 800a84a:	f04f 0800 	mov.w	r8, #0
 800a84e:	e7f6      	b.n	800a83e <_dtoa_r+0x8ee>
 800a850:	4698      	mov	r8, r3
 800a852:	e7f4      	b.n	800a83e <_dtoa_r+0x8ee>
 800a854:	f43f af7d 	beq.w	800a752 <_dtoa_r+0x802>
 800a858:	4618      	mov	r0, r3
 800a85a:	301c      	adds	r0, #28
 800a85c:	e772      	b.n	800a744 <_dtoa_r+0x7f4>
 800a85e:	9b03      	ldr	r3, [sp, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	dc37      	bgt.n	800a8d4 <_dtoa_r+0x984>
 800a864:	9b06      	ldr	r3, [sp, #24]
 800a866:	2b02      	cmp	r3, #2
 800a868:	dd34      	ble.n	800a8d4 <_dtoa_r+0x984>
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	9302      	str	r3, [sp, #8]
 800a86e:	9b02      	ldr	r3, [sp, #8]
 800a870:	b96b      	cbnz	r3, 800a88e <_dtoa_r+0x93e>
 800a872:	4631      	mov	r1, r6
 800a874:	2205      	movs	r2, #5
 800a876:	4620      	mov	r0, r4
 800a878:	f000 fbe6 	bl	800b048 <__multadd>
 800a87c:	4601      	mov	r1, r0
 800a87e:	4606      	mov	r6, r0
 800a880:	ee18 0a10 	vmov	r0, s16
 800a884:	f000 fe00 	bl	800b488 <__mcmp>
 800a888:	2800      	cmp	r0, #0
 800a88a:	f73f adbb 	bgt.w	800a404 <_dtoa_r+0x4b4>
 800a88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a890:	9d01      	ldr	r5, [sp, #4]
 800a892:	43db      	mvns	r3, r3
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	f04f 0800 	mov.w	r8, #0
 800a89a:	4631      	mov	r1, r6
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 fbb1 	bl	800b004 <_Bfree>
 800a8a2:	2f00      	cmp	r7, #0
 800a8a4:	f43f aea4 	beq.w	800a5f0 <_dtoa_r+0x6a0>
 800a8a8:	f1b8 0f00 	cmp.w	r8, #0
 800a8ac:	d005      	beq.n	800a8ba <_dtoa_r+0x96a>
 800a8ae:	45b8      	cmp	r8, r7
 800a8b0:	d003      	beq.n	800a8ba <_dtoa_r+0x96a>
 800a8b2:	4641      	mov	r1, r8
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 fba5 	bl	800b004 <_Bfree>
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 fba1 	bl	800b004 <_Bfree>
 800a8c2:	e695      	b.n	800a5f0 <_dtoa_r+0x6a0>
 800a8c4:	2600      	movs	r6, #0
 800a8c6:	4637      	mov	r7, r6
 800a8c8:	e7e1      	b.n	800a88e <_dtoa_r+0x93e>
 800a8ca:	9700      	str	r7, [sp, #0]
 800a8cc:	4637      	mov	r7, r6
 800a8ce:	e599      	b.n	800a404 <_dtoa_r+0x4b4>
 800a8d0:	40240000 	.word	0x40240000
 800a8d4:	9b08      	ldr	r3, [sp, #32]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 80ca 	beq.w	800aa70 <_dtoa_r+0xb20>
 800a8dc:	9b03      	ldr	r3, [sp, #12]
 800a8de:	9302      	str	r3, [sp, #8]
 800a8e0:	2d00      	cmp	r5, #0
 800a8e2:	dd05      	ble.n	800a8f0 <_dtoa_r+0x9a0>
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	462a      	mov	r2, r5
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 fd5d 	bl	800b3a8 <__lshift>
 800a8ee:	4607      	mov	r7, r0
 800a8f0:	f1b8 0f00 	cmp.w	r8, #0
 800a8f4:	d05b      	beq.n	800a9ae <_dtoa_r+0xa5e>
 800a8f6:	6879      	ldr	r1, [r7, #4]
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 fb43 	bl	800af84 <_Balloc>
 800a8fe:	4605      	mov	r5, r0
 800a900:	b928      	cbnz	r0, 800a90e <_dtoa_r+0x9be>
 800a902:	4b87      	ldr	r3, [pc, #540]	; (800ab20 <_dtoa_r+0xbd0>)
 800a904:	4602      	mov	r2, r0
 800a906:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a90a:	f7ff bb3b 	b.w	8009f84 <_dtoa_r+0x34>
 800a90e:	693a      	ldr	r2, [r7, #16]
 800a910:	3202      	adds	r2, #2
 800a912:	0092      	lsls	r2, r2, #2
 800a914:	f107 010c 	add.w	r1, r7, #12
 800a918:	300c      	adds	r0, #12
 800a91a:	f7fe fca7 	bl	800926c <memcpy>
 800a91e:	2201      	movs	r2, #1
 800a920:	4629      	mov	r1, r5
 800a922:	4620      	mov	r0, r4
 800a924:	f000 fd40 	bl	800b3a8 <__lshift>
 800a928:	9b01      	ldr	r3, [sp, #4]
 800a92a:	f103 0901 	add.w	r9, r3, #1
 800a92e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a932:	4413      	add	r3, r2
 800a934:	9305      	str	r3, [sp, #20]
 800a936:	f00a 0301 	and.w	r3, sl, #1
 800a93a:	46b8      	mov	r8, r7
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	4607      	mov	r7, r0
 800a940:	4631      	mov	r1, r6
 800a942:	ee18 0a10 	vmov	r0, s16
 800a946:	f7ff fa75 	bl	8009e34 <quorem>
 800a94a:	4641      	mov	r1, r8
 800a94c:	9002      	str	r0, [sp, #8]
 800a94e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a952:	ee18 0a10 	vmov	r0, s16
 800a956:	f000 fd97 	bl	800b488 <__mcmp>
 800a95a:	463a      	mov	r2, r7
 800a95c:	9003      	str	r0, [sp, #12]
 800a95e:	4631      	mov	r1, r6
 800a960:	4620      	mov	r0, r4
 800a962:	f000 fdad 	bl	800b4c0 <__mdiff>
 800a966:	68c2      	ldr	r2, [r0, #12]
 800a968:	f109 3bff 	add.w	fp, r9, #4294967295
 800a96c:	4605      	mov	r5, r0
 800a96e:	bb02      	cbnz	r2, 800a9b2 <_dtoa_r+0xa62>
 800a970:	4601      	mov	r1, r0
 800a972:	ee18 0a10 	vmov	r0, s16
 800a976:	f000 fd87 	bl	800b488 <__mcmp>
 800a97a:	4602      	mov	r2, r0
 800a97c:	4629      	mov	r1, r5
 800a97e:	4620      	mov	r0, r4
 800a980:	9207      	str	r2, [sp, #28]
 800a982:	f000 fb3f 	bl	800b004 <_Bfree>
 800a986:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a98a:	ea43 0102 	orr.w	r1, r3, r2
 800a98e:	9b04      	ldr	r3, [sp, #16]
 800a990:	430b      	orrs	r3, r1
 800a992:	464d      	mov	r5, r9
 800a994:	d10f      	bne.n	800a9b6 <_dtoa_r+0xa66>
 800a996:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a99a:	d02a      	beq.n	800a9f2 <_dtoa_r+0xaa2>
 800a99c:	9b03      	ldr	r3, [sp, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	dd02      	ble.n	800a9a8 <_dtoa_r+0xa58>
 800a9a2:	9b02      	ldr	r3, [sp, #8]
 800a9a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a9a8:	f88b a000 	strb.w	sl, [fp]
 800a9ac:	e775      	b.n	800a89a <_dtoa_r+0x94a>
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	e7ba      	b.n	800a928 <_dtoa_r+0x9d8>
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	e7e2      	b.n	800a97c <_dtoa_r+0xa2c>
 800a9b6:	9b03      	ldr	r3, [sp, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	db04      	blt.n	800a9c6 <_dtoa_r+0xa76>
 800a9bc:	9906      	ldr	r1, [sp, #24]
 800a9be:	430b      	orrs	r3, r1
 800a9c0:	9904      	ldr	r1, [sp, #16]
 800a9c2:	430b      	orrs	r3, r1
 800a9c4:	d122      	bne.n	800aa0c <_dtoa_r+0xabc>
 800a9c6:	2a00      	cmp	r2, #0
 800a9c8:	ddee      	ble.n	800a9a8 <_dtoa_r+0xa58>
 800a9ca:	ee18 1a10 	vmov	r1, s16
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 fce9 	bl	800b3a8 <__lshift>
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	ee08 0a10 	vmov	s16, r0
 800a9dc:	f000 fd54 	bl	800b488 <__mcmp>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	dc03      	bgt.n	800a9ec <_dtoa_r+0xa9c>
 800a9e4:	d1e0      	bne.n	800a9a8 <_dtoa_r+0xa58>
 800a9e6:	f01a 0f01 	tst.w	sl, #1
 800a9ea:	d0dd      	beq.n	800a9a8 <_dtoa_r+0xa58>
 800a9ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9f0:	d1d7      	bne.n	800a9a2 <_dtoa_r+0xa52>
 800a9f2:	2339      	movs	r3, #57	; 0x39
 800a9f4:	f88b 3000 	strb.w	r3, [fp]
 800a9f8:	462b      	mov	r3, r5
 800a9fa:	461d      	mov	r5, r3
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa02:	2a39      	cmp	r2, #57	; 0x39
 800aa04:	d071      	beq.n	800aaea <_dtoa_r+0xb9a>
 800aa06:	3201      	adds	r2, #1
 800aa08:	701a      	strb	r2, [r3, #0]
 800aa0a:	e746      	b.n	800a89a <_dtoa_r+0x94a>
 800aa0c:	2a00      	cmp	r2, #0
 800aa0e:	dd07      	ble.n	800aa20 <_dtoa_r+0xad0>
 800aa10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa14:	d0ed      	beq.n	800a9f2 <_dtoa_r+0xaa2>
 800aa16:	f10a 0301 	add.w	r3, sl, #1
 800aa1a:	f88b 3000 	strb.w	r3, [fp]
 800aa1e:	e73c      	b.n	800a89a <_dtoa_r+0x94a>
 800aa20:	9b05      	ldr	r3, [sp, #20]
 800aa22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa26:	4599      	cmp	r9, r3
 800aa28:	d047      	beq.n	800aaba <_dtoa_r+0xb6a>
 800aa2a:	ee18 1a10 	vmov	r1, s16
 800aa2e:	2300      	movs	r3, #0
 800aa30:	220a      	movs	r2, #10
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 fb08 	bl	800b048 <__multadd>
 800aa38:	45b8      	cmp	r8, r7
 800aa3a:	ee08 0a10 	vmov	s16, r0
 800aa3e:	f04f 0300 	mov.w	r3, #0
 800aa42:	f04f 020a 	mov.w	r2, #10
 800aa46:	4641      	mov	r1, r8
 800aa48:	4620      	mov	r0, r4
 800aa4a:	d106      	bne.n	800aa5a <_dtoa_r+0xb0a>
 800aa4c:	f000 fafc 	bl	800b048 <__multadd>
 800aa50:	4680      	mov	r8, r0
 800aa52:	4607      	mov	r7, r0
 800aa54:	f109 0901 	add.w	r9, r9, #1
 800aa58:	e772      	b.n	800a940 <_dtoa_r+0x9f0>
 800aa5a:	f000 faf5 	bl	800b048 <__multadd>
 800aa5e:	4639      	mov	r1, r7
 800aa60:	4680      	mov	r8, r0
 800aa62:	2300      	movs	r3, #0
 800aa64:	220a      	movs	r2, #10
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 faee 	bl	800b048 <__multadd>
 800aa6c:	4607      	mov	r7, r0
 800aa6e:	e7f1      	b.n	800aa54 <_dtoa_r+0xb04>
 800aa70:	9b03      	ldr	r3, [sp, #12]
 800aa72:	9302      	str	r3, [sp, #8]
 800aa74:	9d01      	ldr	r5, [sp, #4]
 800aa76:	ee18 0a10 	vmov	r0, s16
 800aa7a:	4631      	mov	r1, r6
 800aa7c:	f7ff f9da 	bl	8009e34 <quorem>
 800aa80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa84:	9b01      	ldr	r3, [sp, #4]
 800aa86:	f805 ab01 	strb.w	sl, [r5], #1
 800aa8a:	1aea      	subs	r2, r5, r3
 800aa8c:	9b02      	ldr	r3, [sp, #8]
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	dd09      	ble.n	800aaa6 <_dtoa_r+0xb56>
 800aa92:	ee18 1a10 	vmov	r1, s16
 800aa96:	2300      	movs	r3, #0
 800aa98:	220a      	movs	r2, #10
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f000 fad4 	bl	800b048 <__multadd>
 800aaa0:	ee08 0a10 	vmov	s16, r0
 800aaa4:	e7e7      	b.n	800aa76 <_dtoa_r+0xb26>
 800aaa6:	9b02      	ldr	r3, [sp, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	bfc8      	it	gt
 800aaac:	461d      	movgt	r5, r3
 800aaae:	9b01      	ldr	r3, [sp, #4]
 800aab0:	bfd8      	it	le
 800aab2:	2501      	movle	r5, #1
 800aab4:	441d      	add	r5, r3
 800aab6:	f04f 0800 	mov.w	r8, #0
 800aaba:	ee18 1a10 	vmov	r1, s16
 800aabe:	2201      	movs	r2, #1
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 fc71 	bl	800b3a8 <__lshift>
 800aac6:	4631      	mov	r1, r6
 800aac8:	ee08 0a10 	vmov	s16, r0
 800aacc:	f000 fcdc 	bl	800b488 <__mcmp>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	dc91      	bgt.n	800a9f8 <_dtoa_r+0xaa8>
 800aad4:	d102      	bne.n	800aadc <_dtoa_r+0xb8c>
 800aad6:	f01a 0f01 	tst.w	sl, #1
 800aada:	d18d      	bne.n	800a9f8 <_dtoa_r+0xaa8>
 800aadc:	462b      	mov	r3, r5
 800aade:	461d      	mov	r5, r3
 800aae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aae4:	2a30      	cmp	r2, #48	; 0x30
 800aae6:	d0fa      	beq.n	800aade <_dtoa_r+0xb8e>
 800aae8:	e6d7      	b.n	800a89a <_dtoa_r+0x94a>
 800aaea:	9a01      	ldr	r2, [sp, #4]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d184      	bne.n	800a9fa <_dtoa_r+0xaaa>
 800aaf0:	9b00      	ldr	r3, [sp, #0]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	2331      	movs	r3, #49	; 0x31
 800aaf8:	7013      	strb	r3, [r2, #0]
 800aafa:	e6ce      	b.n	800a89a <_dtoa_r+0x94a>
 800aafc:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <_dtoa_r+0xbd4>)
 800aafe:	f7ff ba95 	b.w	800a02c <_dtoa_r+0xdc>
 800ab02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f47f aa6e 	bne.w	8009fe6 <_dtoa_r+0x96>
 800ab0a:	4b07      	ldr	r3, [pc, #28]	; (800ab28 <_dtoa_r+0xbd8>)
 800ab0c:	f7ff ba8e 	b.w	800a02c <_dtoa_r+0xdc>
 800ab10:	9b02      	ldr	r3, [sp, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	dcae      	bgt.n	800aa74 <_dtoa_r+0xb24>
 800ab16:	9b06      	ldr	r3, [sp, #24]
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	f73f aea8 	bgt.w	800a86e <_dtoa_r+0x91e>
 800ab1e:	e7a9      	b.n	800aa74 <_dtoa_r+0xb24>
 800ab20:	0800c8b3 	.word	0x0800c8b3
 800ab24:	0800c810 	.word	0x0800c810
 800ab28:	0800c834 	.word	0x0800c834

0800ab2c <__sflush_r>:
 800ab2c:	898a      	ldrh	r2, [r1, #12]
 800ab2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab32:	4605      	mov	r5, r0
 800ab34:	0710      	lsls	r0, r2, #28
 800ab36:	460c      	mov	r4, r1
 800ab38:	d458      	bmi.n	800abec <__sflush_r+0xc0>
 800ab3a:	684b      	ldr	r3, [r1, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dc05      	bgt.n	800ab4c <__sflush_r+0x20>
 800ab40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	dc02      	bgt.n	800ab4c <__sflush_r+0x20>
 800ab46:	2000      	movs	r0, #0
 800ab48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab4e:	2e00      	cmp	r6, #0
 800ab50:	d0f9      	beq.n	800ab46 <__sflush_r+0x1a>
 800ab52:	2300      	movs	r3, #0
 800ab54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab58:	682f      	ldr	r7, [r5, #0]
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	d032      	beq.n	800abc4 <__sflush_r+0x98>
 800ab5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	075a      	lsls	r2, r3, #29
 800ab64:	d505      	bpl.n	800ab72 <__sflush_r+0x46>
 800ab66:	6863      	ldr	r3, [r4, #4]
 800ab68:	1ac0      	subs	r0, r0, r3
 800ab6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab6c:	b10b      	cbz	r3, 800ab72 <__sflush_r+0x46>
 800ab6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab70:	1ac0      	subs	r0, r0, r3
 800ab72:	2300      	movs	r3, #0
 800ab74:	4602      	mov	r2, r0
 800ab76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab78:	6a21      	ldr	r1, [r4, #32]
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	47b0      	blx	r6
 800ab7e:	1c43      	adds	r3, r0, #1
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	d106      	bne.n	800ab92 <__sflush_r+0x66>
 800ab84:	6829      	ldr	r1, [r5, #0]
 800ab86:	291d      	cmp	r1, #29
 800ab88:	d82c      	bhi.n	800abe4 <__sflush_r+0xb8>
 800ab8a:	4a2a      	ldr	r2, [pc, #168]	; (800ac34 <__sflush_r+0x108>)
 800ab8c:	40ca      	lsrs	r2, r1
 800ab8e:	07d6      	lsls	r6, r2, #31
 800ab90:	d528      	bpl.n	800abe4 <__sflush_r+0xb8>
 800ab92:	2200      	movs	r2, #0
 800ab94:	6062      	str	r2, [r4, #4]
 800ab96:	04d9      	lsls	r1, r3, #19
 800ab98:	6922      	ldr	r2, [r4, #16]
 800ab9a:	6022      	str	r2, [r4, #0]
 800ab9c:	d504      	bpl.n	800aba8 <__sflush_r+0x7c>
 800ab9e:	1c42      	adds	r2, r0, #1
 800aba0:	d101      	bne.n	800aba6 <__sflush_r+0x7a>
 800aba2:	682b      	ldr	r3, [r5, #0]
 800aba4:	b903      	cbnz	r3, 800aba8 <__sflush_r+0x7c>
 800aba6:	6560      	str	r0, [r4, #84]	; 0x54
 800aba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abaa:	602f      	str	r7, [r5, #0]
 800abac:	2900      	cmp	r1, #0
 800abae:	d0ca      	beq.n	800ab46 <__sflush_r+0x1a>
 800abb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abb4:	4299      	cmp	r1, r3
 800abb6:	d002      	beq.n	800abbe <__sflush_r+0x92>
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 fd7d 	bl	800b6b8 <_free_r>
 800abbe:	2000      	movs	r0, #0
 800abc0:	6360      	str	r0, [r4, #52]	; 0x34
 800abc2:	e7c1      	b.n	800ab48 <__sflush_r+0x1c>
 800abc4:	6a21      	ldr	r1, [r4, #32]
 800abc6:	2301      	movs	r3, #1
 800abc8:	4628      	mov	r0, r5
 800abca:	47b0      	blx	r6
 800abcc:	1c41      	adds	r1, r0, #1
 800abce:	d1c7      	bne.n	800ab60 <__sflush_r+0x34>
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d0c4      	beq.n	800ab60 <__sflush_r+0x34>
 800abd6:	2b1d      	cmp	r3, #29
 800abd8:	d001      	beq.n	800abde <__sflush_r+0xb2>
 800abda:	2b16      	cmp	r3, #22
 800abdc:	d101      	bne.n	800abe2 <__sflush_r+0xb6>
 800abde:	602f      	str	r7, [r5, #0]
 800abe0:	e7b1      	b.n	800ab46 <__sflush_r+0x1a>
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abe8:	81a3      	strh	r3, [r4, #12]
 800abea:	e7ad      	b.n	800ab48 <__sflush_r+0x1c>
 800abec:	690f      	ldr	r7, [r1, #16]
 800abee:	2f00      	cmp	r7, #0
 800abf0:	d0a9      	beq.n	800ab46 <__sflush_r+0x1a>
 800abf2:	0793      	lsls	r3, r2, #30
 800abf4:	680e      	ldr	r6, [r1, #0]
 800abf6:	bf08      	it	eq
 800abf8:	694b      	ldreq	r3, [r1, #20]
 800abfa:	600f      	str	r7, [r1, #0]
 800abfc:	bf18      	it	ne
 800abfe:	2300      	movne	r3, #0
 800ac00:	eba6 0807 	sub.w	r8, r6, r7
 800ac04:	608b      	str	r3, [r1, #8]
 800ac06:	f1b8 0f00 	cmp.w	r8, #0
 800ac0a:	dd9c      	ble.n	800ab46 <__sflush_r+0x1a>
 800ac0c:	6a21      	ldr	r1, [r4, #32]
 800ac0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac10:	4643      	mov	r3, r8
 800ac12:	463a      	mov	r2, r7
 800ac14:	4628      	mov	r0, r5
 800ac16:	47b0      	blx	r6
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	dc06      	bgt.n	800ac2a <__sflush_r+0xfe>
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac22:	81a3      	strh	r3, [r4, #12]
 800ac24:	f04f 30ff 	mov.w	r0, #4294967295
 800ac28:	e78e      	b.n	800ab48 <__sflush_r+0x1c>
 800ac2a:	4407      	add	r7, r0
 800ac2c:	eba8 0800 	sub.w	r8, r8, r0
 800ac30:	e7e9      	b.n	800ac06 <__sflush_r+0xda>
 800ac32:	bf00      	nop
 800ac34:	20400001 	.word	0x20400001

0800ac38 <_fflush_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	690b      	ldr	r3, [r1, #16]
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	b913      	cbnz	r3, 800ac48 <_fflush_r+0x10>
 800ac42:	2500      	movs	r5, #0
 800ac44:	4628      	mov	r0, r5
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	b118      	cbz	r0, 800ac52 <_fflush_r+0x1a>
 800ac4a:	6983      	ldr	r3, [r0, #24]
 800ac4c:	b90b      	cbnz	r3, 800ac52 <_fflush_r+0x1a>
 800ac4e:	f000 f887 	bl	800ad60 <__sinit>
 800ac52:	4b14      	ldr	r3, [pc, #80]	; (800aca4 <_fflush_r+0x6c>)
 800ac54:	429c      	cmp	r4, r3
 800ac56:	d11b      	bne.n	800ac90 <_fflush_r+0x58>
 800ac58:	686c      	ldr	r4, [r5, #4]
 800ac5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0ef      	beq.n	800ac42 <_fflush_r+0xa>
 800ac62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac64:	07d0      	lsls	r0, r2, #31
 800ac66:	d404      	bmi.n	800ac72 <_fflush_r+0x3a>
 800ac68:	0599      	lsls	r1, r3, #22
 800ac6a:	d402      	bmi.n	800ac72 <_fflush_r+0x3a>
 800ac6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6e:	f000 f91a 	bl	800aea6 <__retarget_lock_acquire_recursive>
 800ac72:	4628      	mov	r0, r5
 800ac74:	4621      	mov	r1, r4
 800ac76:	f7ff ff59 	bl	800ab2c <__sflush_r>
 800ac7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac7c:	07da      	lsls	r2, r3, #31
 800ac7e:	4605      	mov	r5, r0
 800ac80:	d4e0      	bmi.n	800ac44 <_fflush_r+0xc>
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	059b      	lsls	r3, r3, #22
 800ac86:	d4dd      	bmi.n	800ac44 <_fflush_r+0xc>
 800ac88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac8a:	f000 f90d 	bl	800aea8 <__retarget_lock_release_recursive>
 800ac8e:	e7d9      	b.n	800ac44 <_fflush_r+0xc>
 800ac90:	4b05      	ldr	r3, [pc, #20]	; (800aca8 <_fflush_r+0x70>)
 800ac92:	429c      	cmp	r4, r3
 800ac94:	d101      	bne.n	800ac9a <_fflush_r+0x62>
 800ac96:	68ac      	ldr	r4, [r5, #8]
 800ac98:	e7df      	b.n	800ac5a <_fflush_r+0x22>
 800ac9a:	4b04      	ldr	r3, [pc, #16]	; (800acac <_fflush_r+0x74>)
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	bf08      	it	eq
 800aca0:	68ec      	ldreq	r4, [r5, #12]
 800aca2:	e7da      	b.n	800ac5a <_fflush_r+0x22>
 800aca4:	0800c8e4 	.word	0x0800c8e4
 800aca8:	0800c904 	.word	0x0800c904
 800acac:	0800c8c4 	.word	0x0800c8c4

0800acb0 <std>:
 800acb0:	2300      	movs	r3, #0
 800acb2:	b510      	push	{r4, lr}
 800acb4:	4604      	mov	r4, r0
 800acb6:	e9c0 3300 	strd	r3, r3, [r0]
 800acba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acbe:	6083      	str	r3, [r0, #8]
 800acc0:	8181      	strh	r1, [r0, #12]
 800acc2:	6643      	str	r3, [r0, #100]	; 0x64
 800acc4:	81c2      	strh	r2, [r0, #14]
 800acc6:	6183      	str	r3, [r0, #24]
 800acc8:	4619      	mov	r1, r3
 800acca:	2208      	movs	r2, #8
 800accc:	305c      	adds	r0, #92	; 0x5c
 800acce:	f7fe fadb 	bl	8009288 <memset>
 800acd2:	4b05      	ldr	r3, [pc, #20]	; (800ace8 <std+0x38>)
 800acd4:	6263      	str	r3, [r4, #36]	; 0x24
 800acd6:	4b05      	ldr	r3, [pc, #20]	; (800acec <std+0x3c>)
 800acd8:	62a3      	str	r3, [r4, #40]	; 0x28
 800acda:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <std+0x40>)
 800acdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acde:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <std+0x44>)
 800ace0:	6224      	str	r4, [r4, #32]
 800ace2:	6323      	str	r3, [r4, #48]	; 0x30
 800ace4:	bd10      	pop	{r4, pc}
 800ace6:	bf00      	nop
 800ace8:	0800bbdd 	.word	0x0800bbdd
 800acec:	0800bbff 	.word	0x0800bbff
 800acf0:	0800bc37 	.word	0x0800bc37
 800acf4:	0800bc5b 	.word	0x0800bc5b

0800acf8 <_cleanup_r>:
 800acf8:	4901      	ldr	r1, [pc, #4]	; (800ad00 <_cleanup_r+0x8>)
 800acfa:	f000 b8af 	b.w	800ae5c <_fwalk_reent>
 800acfe:	bf00      	nop
 800ad00:	0800ac39 	.word	0x0800ac39

0800ad04 <__sfmoreglue>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	2268      	movs	r2, #104	; 0x68
 800ad08:	1e4d      	subs	r5, r1, #1
 800ad0a:	4355      	muls	r5, r2
 800ad0c:	460e      	mov	r6, r1
 800ad0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad12:	f000 fd3d 	bl	800b790 <_malloc_r>
 800ad16:	4604      	mov	r4, r0
 800ad18:	b140      	cbz	r0, 800ad2c <__sfmoreglue+0x28>
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	e9c0 1600 	strd	r1, r6, [r0]
 800ad20:	300c      	adds	r0, #12
 800ad22:	60a0      	str	r0, [r4, #8]
 800ad24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad28:	f7fe faae 	bl	8009288 <memset>
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}

0800ad30 <__sfp_lock_acquire>:
 800ad30:	4801      	ldr	r0, [pc, #4]	; (800ad38 <__sfp_lock_acquire+0x8>)
 800ad32:	f000 b8b8 	b.w	800aea6 <__retarget_lock_acquire_recursive>
 800ad36:	bf00      	nop
 800ad38:	20002b71 	.word	0x20002b71

0800ad3c <__sfp_lock_release>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__sfp_lock_release+0x8>)
 800ad3e:	f000 b8b3 	b.w	800aea8 <__retarget_lock_release_recursive>
 800ad42:	bf00      	nop
 800ad44:	20002b71 	.word	0x20002b71

0800ad48 <__sinit_lock_acquire>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__sinit_lock_acquire+0x8>)
 800ad4a:	f000 b8ac 	b.w	800aea6 <__retarget_lock_acquire_recursive>
 800ad4e:	bf00      	nop
 800ad50:	20002b72 	.word	0x20002b72

0800ad54 <__sinit_lock_release>:
 800ad54:	4801      	ldr	r0, [pc, #4]	; (800ad5c <__sinit_lock_release+0x8>)
 800ad56:	f000 b8a7 	b.w	800aea8 <__retarget_lock_release_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	20002b72 	.word	0x20002b72

0800ad60 <__sinit>:
 800ad60:	b510      	push	{r4, lr}
 800ad62:	4604      	mov	r4, r0
 800ad64:	f7ff fff0 	bl	800ad48 <__sinit_lock_acquire>
 800ad68:	69a3      	ldr	r3, [r4, #24]
 800ad6a:	b11b      	cbz	r3, 800ad74 <__sinit+0x14>
 800ad6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad70:	f7ff bff0 	b.w	800ad54 <__sinit_lock_release>
 800ad74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad78:	6523      	str	r3, [r4, #80]	; 0x50
 800ad7a:	4b13      	ldr	r3, [pc, #76]	; (800adc8 <__sinit+0x68>)
 800ad7c:	4a13      	ldr	r2, [pc, #76]	; (800adcc <__sinit+0x6c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad82:	42a3      	cmp	r3, r4
 800ad84:	bf04      	itt	eq
 800ad86:	2301      	moveq	r3, #1
 800ad88:	61a3      	streq	r3, [r4, #24]
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 f820 	bl	800add0 <__sfp>
 800ad90:	6060      	str	r0, [r4, #4]
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 f81c 	bl	800add0 <__sfp>
 800ad98:	60a0      	str	r0, [r4, #8]
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 f818 	bl	800add0 <__sfp>
 800ada0:	2200      	movs	r2, #0
 800ada2:	60e0      	str	r0, [r4, #12]
 800ada4:	2104      	movs	r1, #4
 800ada6:	6860      	ldr	r0, [r4, #4]
 800ada8:	f7ff ff82 	bl	800acb0 <std>
 800adac:	68a0      	ldr	r0, [r4, #8]
 800adae:	2201      	movs	r2, #1
 800adb0:	2109      	movs	r1, #9
 800adb2:	f7ff ff7d 	bl	800acb0 <std>
 800adb6:	68e0      	ldr	r0, [r4, #12]
 800adb8:	2202      	movs	r2, #2
 800adba:	2112      	movs	r1, #18
 800adbc:	f7ff ff78 	bl	800acb0 <std>
 800adc0:	2301      	movs	r3, #1
 800adc2:	61a3      	str	r3, [r4, #24]
 800adc4:	e7d2      	b.n	800ad6c <__sinit+0xc>
 800adc6:	bf00      	nop
 800adc8:	0800c7fc 	.word	0x0800c7fc
 800adcc:	0800acf9 	.word	0x0800acf9

0800add0 <__sfp>:
 800add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add2:	4607      	mov	r7, r0
 800add4:	f7ff ffac 	bl	800ad30 <__sfp_lock_acquire>
 800add8:	4b1e      	ldr	r3, [pc, #120]	; (800ae54 <__sfp+0x84>)
 800adda:	681e      	ldr	r6, [r3, #0]
 800addc:	69b3      	ldr	r3, [r6, #24]
 800adde:	b913      	cbnz	r3, 800ade6 <__sfp+0x16>
 800ade0:	4630      	mov	r0, r6
 800ade2:	f7ff ffbd 	bl	800ad60 <__sinit>
 800ade6:	3648      	adds	r6, #72	; 0x48
 800ade8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adec:	3b01      	subs	r3, #1
 800adee:	d503      	bpl.n	800adf8 <__sfp+0x28>
 800adf0:	6833      	ldr	r3, [r6, #0]
 800adf2:	b30b      	cbz	r3, 800ae38 <__sfp+0x68>
 800adf4:	6836      	ldr	r6, [r6, #0]
 800adf6:	e7f7      	b.n	800ade8 <__sfp+0x18>
 800adf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800adfc:	b9d5      	cbnz	r5, 800ae34 <__sfp+0x64>
 800adfe:	4b16      	ldr	r3, [pc, #88]	; (800ae58 <__sfp+0x88>)
 800ae00:	60e3      	str	r3, [r4, #12]
 800ae02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae06:	6665      	str	r5, [r4, #100]	; 0x64
 800ae08:	f000 f84c 	bl	800aea4 <__retarget_lock_init_recursive>
 800ae0c:	f7ff ff96 	bl	800ad3c <__sfp_lock_release>
 800ae10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae18:	6025      	str	r5, [r4, #0]
 800ae1a:	61a5      	str	r5, [r4, #24]
 800ae1c:	2208      	movs	r2, #8
 800ae1e:	4629      	mov	r1, r5
 800ae20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae24:	f7fe fa30 	bl	8009288 <memset>
 800ae28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae30:	4620      	mov	r0, r4
 800ae32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae34:	3468      	adds	r4, #104	; 0x68
 800ae36:	e7d9      	b.n	800adec <__sfp+0x1c>
 800ae38:	2104      	movs	r1, #4
 800ae3a:	4638      	mov	r0, r7
 800ae3c:	f7ff ff62 	bl	800ad04 <__sfmoreglue>
 800ae40:	4604      	mov	r4, r0
 800ae42:	6030      	str	r0, [r6, #0]
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d1d5      	bne.n	800adf4 <__sfp+0x24>
 800ae48:	f7ff ff78 	bl	800ad3c <__sfp_lock_release>
 800ae4c:	230c      	movs	r3, #12
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	e7ee      	b.n	800ae30 <__sfp+0x60>
 800ae52:	bf00      	nop
 800ae54:	0800c7fc 	.word	0x0800c7fc
 800ae58:	ffff0001 	.word	0xffff0001

0800ae5c <_fwalk_reent>:
 800ae5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae60:	4606      	mov	r6, r0
 800ae62:	4688      	mov	r8, r1
 800ae64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae68:	2700      	movs	r7, #0
 800ae6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae6e:	f1b9 0901 	subs.w	r9, r9, #1
 800ae72:	d505      	bpl.n	800ae80 <_fwalk_reent+0x24>
 800ae74:	6824      	ldr	r4, [r4, #0]
 800ae76:	2c00      	cmp	r4, #0
 800ae78:	d1f7      	bne.n	800ae6a <_fwalk_reent+0xe>
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae80:	89ab      	ldrh	r3, [r5, #12]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d907      	bls.n	800ae96 <_fwalk_reent+0x3a>
 800ae86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	d003      	beq.n	800ae96 <_fwalk_reent+0x3a>
 800ae8e:	4629      	mov	r1, r5
 800ae90:	4630      	mov	r0, r6
 800ae92:	47c0      	blx	r8
 800ae94:	4307      	orrs	r7, r0
 800ae96:	3568      	adds	r5, #104	; 0x68
 800ae98:	e7e9      	b.n	800ae6e <_fwalk_reent+0x12>
	...

0800ae9c <_localeconv_r>:
 800ae9c:	4800      	ldr	r0, [pc, #0]	; (800aea0 <_localeconv_r+0x4>)
 800ae9e:	4770      	bx	lr
 800aea0:	20000178 	.word	0x20000178

0800aea4 <__retarget_lock_init_recursive>:
 800aea4:	4770      	bx	lr

0800aea6 <__retarget_lock_acquire_recursive>:
 800aea6:	4770      	bx	lr

0800aea8 <__retarget_lock_release_recursive>:
 800aea8:	4770      	bx	lr

0800aeaa <__swhatbuf_r>:
 800aeaa:	b570      	push	{r4, r5, r6, lr}
 800aeac:	460e      	mov	r6, r1
 800aeae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb2:	2900      	cmp	r1, #0
 800aeb4:	b096      	sub	sp, #88	; 0x58
 800aeb6:	4614      	mov	r4, r2
 800aeb8:	461d      	mov	r5, r3
 800aeba:	da08      	bge.n	800aece <__swhatbuf_r+0x24>
 800aebc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	602a      	str	r2, [r5, #0]
 800aec4:	061a      	lsls	r2, r3, #24
 800aec6:	d410      	bmi.n	800aeea <__swhatbuf_r+0x40>
 800aec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aecc:	e00e      	b.n	800aeec <__swhatbuf_r+0x42>
 800aece:	466a      	mov	r2, sp
 800aed0:	f000 ff1a 	bl	800bd08 <_fstat_r>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	dbf1      	blt.n	800aebc <__swhatbuf_r+0x12>
 800aed8:	9a01      	ldr	r2, [sp, #4]
 800aeda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aede:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aee2:	425a      	negs	r2, r3
 800aee4:	415a      	adcs	r2, r3
 800aee6:	602a      	str	r2, [r5, #0]
 800aee8:	e7ee      	b.n	800aec8 <__swhatbuf_r+0x1e>
 800aeea:	2340      	movs	r3, #64	; 0x40
 800aeec:	2000      	movs	r0, #0
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	b016      	add	sp, #88	; 0x58
 800aef2:	bd70      	pop	{r4, r5, r6, pc}

0800aef4 <__smakebuf_r>:
 800aef4:	898b      	ldrh	r3, [r1, #12]
 800aef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aef8:	079d      	lsls	r5, r3, #30
 800aefa:	4606      	mov	r6, r0
 800aefc:	460c      	mov	r4, r1
 800aefe:	d507      	bpl.n	800af10 <__smakebuf_r+0x1c>
 800af00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	6123      	str	r3, [r4, #16]
 800af08:	2301      	movs	r3, #1
 800af0a:	6163      	str	r3, [r4, #20]
 800af0c:	b002      	add	sp, #8
 800af0e:	bd70      	pop	{r4, r5, r6, pc}
 800af10:	ab01      	add	r3, sp, #4
 800af12:	466a      	mov	r2, sp
 800af14:	f7ff ffc9 	bl	800aeaa <__swhatbuf_r>
 800af18:	9900      	ldr	r1, [sp, #0]
 800af1a:	4605      	mov	r5, r0
 800af1c:	4630      	mov	r0, r6
 800af1e:	f000 fc37 	bl	800b790 <_malloc_r>
 800af22:	b948      	cbnz	r0, 800af38 <__smakebuf_r+0x44>
 800af24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af28:	059a      	lsls	r2, r3, #22
 800af2a:	d4ef      	bmi.n	800af0c <__smakebuf_r+0x18>
 800af2c:	f023 0303 	bic.w	r3, r3, #3
 800af30:	f043 0302 	orr.w	r3, r3, #2
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	e7e3      	b.n	800af00 <__smakebuf_r+0xc>
 800af38:	4b0d      	ldr	r3, [pc, #52]	; (800af70 <__smakebuf_r+0x7c>)
 800af3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	6020      	str	r0, [r4, #0]
 800af40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af44:	81a3      	strh	r3, [r4, #12]
 800af46:	9b00      	ldr	r3, [sp, #0]
 800af48:	6163      	str	r3, [r4, #20]
 800af4a:	9b01      	ldr	r3, [sp, #4]
 800af4c:	6120      	str	r0, [r4, #16]
 800af4e:	b15b      	cbz	r3, 800af68 <__smakebuf_r+0x74>
 800af50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af54:	4630      	mov	r0, r6
 800af56:	f000 fee9 	bl	800bd2c <_isatty_r>
 800af5a:	b128      	cbz	r0, 800af68 <__smakebuf_r+0x74>
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	f023 0303 	bic.w	r3, r3, #3
 800af62:	f043 0301 	orr.w	r3, r3, #1
 800af66:	81a3      	strh	r3, [r4, #12]
 800af68:	89a0      	ldrh	r0, [r4, #12]
 800af6a:	4305      	orrs	r5, r0
 800af6c:	81a5      	strh	r5, [r4, #12]
 800af6e:	e7cd      	b.n	800af0c <__smakebuf_r+0x18>
 800af70:	0800acf9 	.word	0x0800acf9

0800af74 <malloc>:
 800af74:	4b02      	ldr	r3, [pc, #8]	; (800af80 <malloc+0xc>)
 800af76:	4601      	mov	r1, r0
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	f000 bc09 	b.w	800b790 <_malloc_r>
 800af7e:	bf00      	nop
 800af80:	20000024 	.word	0x20000024

0800af84 <_Balloc>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af88:	4604      	mov	r4, r0
 800af8a:	460d      	mov	r5, r1
 800af8c:	b976      	cbnz	r6, 800afac <_Balloc+0x28>
 800af8e:	2010      	movs	r0, #16
 800af90:	f7ff fff0 	bl	800af74 <malloc>
 800af94:	4602      	mov	r2, r0
 800af96:	6260      	str	r0, [r4, #36]	; 0x24
 800af98:	b920      	cbnz	r0, 800afa4 <_Balloc+0x20>
 800af9a:	4b18      	ldr	r3, [pc, #96]	; (800affc <_Balloc+0x78>)
 800af9c:	4818      	ldr	r0, [pc, #96]	; (800b000 <_Balloc+0x7c>)
 800af9e:	2166      	movs	r1, #102	; 0x66
 800afa0:	f000 fe72 	bl	800bc88 <__assert_func>
 800afa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afa8:	6006      	str	r6, [r0, #0]
 800afaa:	60c6      	str	r6, [r0, #12]
 800afac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afae:	68f3      	ldr	r3, [r6, #12]
 800afb0:	b183      	cbz	r3, 800afd4 <_Balloc+0x50>
 800afb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afba:	b9b8      	cbnz	r0, 800afec <_Balloc+0x68>
 800afbc:	2101      	movs	r1, #1
 800afbe:	fa01 f605 	lsl.w	r6, r1, r5
 800afc2:	1d72      	adds	r2, r6, #5
 800afc4:	0092      	lsls	r2, r2, #2
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 fb60 	bl	800b68c <_calloc_r>
 800afcc:	b160      	cbz	r0, 800afe8 <_Balloc+0x64>
 800afce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afd2:	e00e      	b.n	800aff2 <_Balloc+0x6e>
 800afd4:	2221      	movs	r2, #33	; 0x21
 800afd6:	2104      	movs	r1, #4
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 fb57 	bl	800b68c <_calloc_r>
 800afde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe0:	60f0      	str	r0, [r6, #12]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e4      	bne.n	800afb2 <_Balloc+0x2e>
 800afe8:	2000      	movs	r0, #0
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	6802      	ldr	r2, [r0, #0]
 800afee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aff2:	2300      	movs	r3, #0
 800aff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aff8:	e7f7      	b.n	800afea <_Balloc+0x66>
 800affa:	bf00      	nop
 800affc:	0800c841 	.word	0x0800c841
 800b000:	0800c924 	.word	0x0800c924

0800b004 <_Bfree>:
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b008:	4605      	mov	r5, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	b976      	cbnz	r6, 800b02c <_Bfree+0x28>
 800b00e:	2010      	movs	r0, #16
 800b010:	f7ff ffb0 	bl	800af74 <malloc>
 800b014:	4602      	mov	r2, r0
 800b016:	6268      	str	r0, [r5, #36]	; 0x24
 800b018:	b920      	cbnz	r0, 800b024 <_Bfree+0x20>
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <_Bfree+0x3c>)
 800b01c:	4809      	ldr	r0, [pc, #36]	; (800b044 <_Bfree+0x40>)
 800b01e:	218a      	movs	r1, #138	; 0x8a
 800b020:	f000 fe32 	bl	800bc88 <__assert_func>
 800b024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b028:	6006      	str	r6, [r0, #0]
 800b02a:	60c6      	str	r6, [r0, #12]
 800b02c:	b13c      	cbz	r4, 800b03e <_Bfree+0x3a>
 800b02e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b030:	6862      	ldr	r2, [r4, #4]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b038:	6021      	str	r1, [r4, #0]
 800b03a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b03e:	bd70      	pop	{r4, r5, r6, pc}
 800b040:	0800c841 	.word	0x0800c841
 800b044:	0800c924 	.word	0x0800c924

0800b048 <__multadd>:
 800b048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04c:	690d      	ldr	r5, [r1, #16]
 800b04e:	4607      	mov	r7, r0
 800b050:	460c      	mov	r4, r1
 800b052:	461e      	mov	r6, r3
 800b054:	f101 0c14 	add.w	ip, r1, #20
 800b058:	2000      	movs	r0, #0
 800b05a:	f8dc 3000 	ldr.w	r3, [ip]
 800b05e:	b299      	uxth	r1, r3
 800b060:	fb02 6101 	mla	r1, r2, r1, r6
 800b064:	0c1e      	lsrs	r6, r3, #16
 800b066:	0c0b      	lsrs	r3, r1, #16
 800b068:	fb02 3306 	mla	r3, r2, r6, r3
 800b06c:	b289      	uxth	r1, r1
 800b06e:	3001      	adds	r0, #1
 800b070:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b074:	4285      	cmp	r5, r0
 800b076:	f84c 1b04 	str.w	r1, [ip], #4
 800b07a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b07e:	dcec      	bgt.n	800b05a <__multadd+0x12>
 800b080:	b30e      	cbz	r6, 800b0c6 <__multadd+0x7e>
 800b082:	68a3      	ldr	r3, [r4, #8]
 800b084:	42ab      	cmp	r3, r5
 800b086:	dc19      	bgt.n	800b0bc <__multadd+0x74>
 800b088:	6861      	ldr	r1, [r4, #4]
 800b08a:	4638      	mov	r0, r7
 800b08c:	3101      	adds	r1, #1
 800b08e:	f7ff ff79 	bl	800af84 <_Balloc>
 800b092:	4680      	mov	r8, r0
 800b094:	b928      	cbnz	r0, 800b0a2 <__multadd+0x5a>
 800b096:	4602      	mov	r2, r0
 800b098:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <__multadd+0x84>)
 800b09a:	480d      	ldr	r0, [pc, #52]	; (800b0d0 <__multadd+0x88>)
 800b09c:	21b5      	movs	r1, #181	; 0xb5
 800b09e:	f000 fdf3 	bl	800bc88 <__assert_func>
 800b0a2:	6922      	ldr	r2, [r4, #16]
 800b0a4:	3202      	adds	r2, #2
 800b0a6:	f104 010c 	add.w	r1, r4, #12
 800b0aa:	0092      	lsls	r2, r2, #2
 800b0ac:	300c      	adds	r0, #12
 800b0ae:	f7fe f8dd 	bl	800926c <memcpy>
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	f7ff ffa5 	bl	800b004 <_Bfree>
 800b0ba:	4644      	mov	r4, r8
 800b0bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0c0:	3501      	adds	r5, #1
 800b0c2:	615e      	str	r6, [r3, #20]
 800b0c4:	6125      	str	r5, [r4, #16]
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0cc:	0800c8b3 	.word	0x0800c8b3
 800b0d0:	0800c924 	.word	0x0800c924

0800b0d4 <__hi0bits>:
 800b0d4:	0c03      	lsrs	r3, r0, #16
 800b0d6:	041b      	lsls	r3, r3, #16
 800b0d8:	b9d3      	cbnz	r3, 800b110 <__hi0bits+0x3c>
 800b0da:	0400      	lsls	r0, r0, #16
 800b0dc:	2310      	movs	r3, #16
 800b0de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0e2:	bf04      	itt	eq
 800b0e4:	0200      	lsleq	r0, r0, #8
 800b0e6:	3308      	addeq	r3, #8
 800b0e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0ec:	bf04      	itt	eq
 800b0ee:	0100      	lsleq	r0, r0, #4
 800b0f0:	3304      	addeq	r3, #4
 800b0f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0f6:	bf04      	itt	eq
 800b0f8:	0080      	lsleq	r0, r0, #2
 800b0fa:	3302      	addeq	r3, #2
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	db05      	blt.n	800b10c <__hi0bits+0x38>
 800b100:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b104:	f103 0301 	add.w	r3, r3, #1
 800b108:	bf08      	it	eq
 800b10a:	2320      	moveq	r3, #32
 800b10c:	4618      	mov	r0, r3
 800b10e:	4770      	bx	lr
 800b110:	2300      	movs	r3, #0
 800b112:	e7e4      	b.n	800b0de <__hi0bits+0xa>

0800b114 <__lo0bits>:
 800b114:	6803      	ldr	r3, [r0, #0]
 800b116:	f013 0207 	ands.w	r2, r3, #7
 800b11a:	4601      	mov	r1, r0
 800b11c:	d00b      	beq.n	800b136 <__lo0bits+0x22>
 800b11e:	07da      	lsls	r2, r3, #31
 800b120:	d423      	bmi.n	800b16a <__lo0bits+0x56>
 800b122:	0798      	lsls	r0, r3, #30
 800b124:	bf49      	itett	mi
 800b126:	085b      	lsrmi	r3, r3, #1
 800b128:	089b      	lsrpl	r3, r3, #2
 800b12a:	2001      	movmi	r0, #1
 800b12c:	600b      	strmi	r3, [r1, #0]
 800b12e:	bf5c      	itt	pl
 800b130:	600b      	strpl	r3, [r1, #0]
 800b132:	2002      	movpl	r0, #2
 800b134:	4770      	bx	lr
 800b136:	b298      	uxth	r0, r3
 800b138:	b9a8      	cbnz	r0, 800b166 <__lo0bits+0x52>
 800b13a:	0c1b      	lsrs	r3, r3, #16
 800b13c:	2010      	movs	r0, #16
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	b90a      	cbnz	r2, 800b146 <__lo0bits+0x32>
 800b142:	3008      	adds	r0, #8
 800b144:	0a1b      	lsrs	r3, r3, #8
 800b146:	071a      	lsls	r2, r3, #28
 800b148:	bf04      	itt	eq
 800b14a:	091b      	lsreq	r3, r3, #4
 800b14c:	3004      	addeq	r0, #4
 800b14e:	079a      	lsls	r2, r3, #30
 800b150:	bf04      	itt	eq
 800b152:	089b      	lsreq	r3, r3, #2
 800b154:	3002      	addeq	r0, #2
 800b156:	07da      	lsls	r2, r3, #31
 800b158:	d403      	bmi.n	800b162 <__lo0bits+0x4e>
 800b15a:	085b      	lsrs	r3, r3, #1
 800b15c:	f100 0001 	add.w	r0, r0, #1
 800b160:	d005      	beq.n	800b16e <__lo0bits+0x5a>
 800b162:	600b      	str	r3, [r1, #0]
 800b164:	4770      	bx	lr
 800b166:	4610      	mov	r0, r2
 800b168:	e7e9      	b.n	800b13e <__lo0bits+0x2a>
 800b16a:	2000      	movs	r0, #0
 800b16c:	4770      	bx	lr
 800b16e:	2020      	movs	r0, #32
 800b170:	4770      	bx	lr
	...

0800b174 <__i2b>:
 800b174:	b510      	push	{r4, lr}
 800b176:	460c      	mov	r4, r1
 800b178:	2101      	movs	r1, #1
 800b17a:	f7ff ff03 	bl	800af84 <_Balloc>
 800b17e:	4602      	mov	r2, r0
 800b180:	b928      	cbnz	r0, 800b18e <__i2b+0x1a>
 800b182:	4b05      	ldr	r3, [pc, #20]	; (800b198 <__i2b+0x24>)
 800b184:	4805      	ldr	r0, [pc, #20]	; (800b19c <__i2b+0x28>)
 800b186:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b18a:	f000 fd7d 	bl	800bc88 <__assert_func>
 800b18e:	2301      	movs	r3, #1
 800b190:	6144      	str	r4, [r0, #20]
 800b192:	6103      	str	r3, [r0, #16]
 800b194:	bd10      	pop	{r4, pc}
 800b196:	bf00      	nop
 800b198:	0800c8b3 	.word	0x0800c8b3
 800b19c:	0800c924 	.word	0x0800c924

0800b1a0 <__multiply>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	4691      	mov	r9, r2
 800b1a6:	690a      	ldr	r2, [r1, #16]
 800b1a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	bfb8      	it	lt
 800b1b0:	460b      	movlt	r3, r1
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	bfbc      	itt	lt
 800b1b6:	464c      	movlt	r4, r9
 800b1b8:	4699      	movlt	r9, r3
 800b1ba:	6927      	ldr	r7, [r4, #16]
 800b1bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1c0:	68a3      	ldr	r3, [r4, #8]
 800b1c2:	6861      	ldr	r1, [r4, #4]
 800b1c4:	eb07 060a 	add.w	r6, r7, sl
 800b1c8:	42b3      	cmp	r3, r6
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	bfb8      	it	lt
 800b1ce:	3101      	addlt	r1, #1
 800b1d0:	f7ff fed8 	bl	800af84 <_Balloc>
 800b1d4:	b930      	cbnz	r0, 800b1e4 <__multiply+0x44>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	4b44      	ldr	r3, [pc, #272]	; (800b2ec <__multiply+0x14c>)
 800b1da:	4845      	ldr	r0, [pc, #276]	; (800b2f0 <__multiply+0x150>)
 800b1dc:	f240 115d 	movw	r1, #349	; 0x15d
 800b1e0:	f000 fd52 	bl	800bc88 <__assert_func>
 800b1e4:	f100 0514 	add.w	r5, r0, #20
 800b1e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1ec:	462b      	mov	r3, r5
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4543      	cmp	r3, r8
 800b1f2:	d321      	bcc.n	800b238 <__multiply+0x98>
 800b1f4:	f104 0314 	add.w	r3, r4, #20
 800b1f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1fc:	f109 0314 	add.w	r3, r9, #20
 800b200:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b204:	9202      	str	r2, [sp, #8]
 800b206:	1b3a      	subs	r2, r7, r4
 800b208:	3a15      	subs	r2, #21
 800b20a:	f022 0203 	bic.w	r2, r2, #3
 800b20e:	3204      	adds	r2, #4
 800b210:	f104 0115 	add.w	r1, r4, #21
 800b214:	428f      	cmp	r7, r1
 800b216:	bf38      	it	cc
 800b218:	2204      	movcc	r2, #4
 800b21a:	9201      	str	r2, [sp, #4]
 800b21c:	9a02      	ldr	r2, [sp, #8]
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	429a      	cmp	r2, r3
 800b222:	d80c      	bhi.n	800b23e <__multiply+0x9e>
 800b224:	2e00      	cmp	r6, #0
 800b226:	dd03      	ble.n	800b230 <__multiply+0x90>
 800b228:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d05a      	beq.n	800b2e6 <__multiply+0x146>
 800b230:	6106      	str	r6, [r0, #16]
 800b232:	b005      	add	sp, #20
 800b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b238:	f843 2b04 	str.w	r2, [r3], #4
 800b23c:	e7d8      	b.n	800b1f0 <__multiply+0x50>
 800b23e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b242:	f1ba 0f00 	cmp.w	sl, #0
 800b246:	d024      	beq.n	800b292 <__multiply+0xf2>
 800b248:	f104 0e14 	add.w	lr, r4, #20
 800b24c:	46a9      	mov	r9, r5
 800b24e:	f04f 0c00 	mov.w	ip, #0
 800b252:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b256:	f8d9 1000 	ldr.w	r1, [r9]
 800b25a:	fa1f fb82 	uxth.w	fp, r2
 800b25e:	b289      	uxth	r1, r1
 800b260:	fb0a 110b 	mla	r1, sl, fp, r1
 800b264:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b268:	f8d9 2000 	ldr.w	r2, [r9]
 800b26c:	4461      	add	r1, ip
 800b26e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b272:	fb0a c20b 	mla	r2, sl, fp, ip
 800b276:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b27a:	b289      	uxth	r1, r1
 800b27c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b280:	4577      	cmp	r7, lr
 800b282:	f849 1b04 	str.w	r1, [r9], #4
 800b286:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b28a:	d8e2      	bhi.n	800b252 <__multiply+0xb2>
 800b28c:	9a01      	ldr	r2, [sp, #4]
 800b28e:	f845 c002 	str.w	ip, [r5, r2]
 800b292:	9a03      	ldr	r2, [sp, #12]
 800b294:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b298:	3304      	adds	r3, #4
 800b29a:	f1b9 0f00 	cmp.w	r9, #0
 800b29e:	d020      	beq.n	800b2e2 <__multiply+0x142>
 800b2a0:	6829      	ldr	r1, [r5, #0]
 800b2a2:	f104 0c14 	add.w	ip, r4, #20
 800b2a6:	46ae      	mov	lr, r5
 800b2a8:	f04f 0a00 	mov.w	sl, #0
 800b2ac:	f8bc b000 	ldrh.w	fp, [ip]
 800b2b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2b4:	fb09 220b 	mla	r2, r9, fp, r2
 800b2b8:	4492      	add	sl, r2
 800b2ba:	b289      	uxth	r1, r1
 800b2bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b2c0:	f84e 1b04 	str.w	r1, [lr], #4
 800b2c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2c8:	f8be 1000 	ldrh.w	r1, [lr]
 800b2cc:	0c12      	lsrs	r2, r2, #16
 800b2ce:	fb09 1102 	mla	r1, r9, r2, r1
 800b2d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b2d6:	4567      	cmp	r7, ip
 800b2d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2dc:	d8e6      	bhi.n	800b2ac <__multiply+0x10c>
 800b2de:	9a01      	ldr	r2, [sp, #4]
 800b2e0:	50a9      	str	r1, [r5, r2]
 800b2e2:	3504      	adds	r5, #4
 800b2e4:	e79a      	b.n	800b21c <__multiply+0x7c>
 800b2e6:	3e01      	subs	r6, #1
 800b2e8:	e79c      	b.n	800b224 <__multiply+0x84>
 800b2ea:	bf00      	nop
 800b2ec:	0800c8b3 	.word	0x0800c8b3
 800b2f0:	0800c924 	.word	0x0800c924

0800b2f4 <__pow5mult>:
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	4615      	mov	r5, r2
 800b2fa:	f012 0203 	ands.w	r2, r2, #3
 800b2fe:	4606      	mov	r6, r0
 800b300:	460f      	mov	r7, r1
 800b302:	d007      	beq.n	800b314 <__pow5mult+0x20>
 800b304:	4c25      	ldr	r4, [pc, #148]	; (800b39c <__pow5mult+0xa8>)
 800b306:	3a01      	subs	r2, #1
 800b308:	2300      	movs	r3, #0
 800b30a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b30e:	f7ff fe9b 	bl	800b048 <__multadd>
 800b312:	4607      	mov	r7, r0
 800b314:	10ad      	asrs	r5, r5, #2
 800b316:	d03d      	beq.n	800b394 <__pow5mult+0xa0>
 800b318:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b31a:	b97c      	cbnz	r4, 800b33c <__pow5mult+0x48>
 800b31c:	2010      	movs	r0, #16
 800b31e:	f7ff fe29 	bl	800af74 <malloc>
 800b322:	4602      	mov	r2, r0
 800b324:	6270      	str	r0, [r6, #36]	; 0x24
 800b326:	b928      	cbnz	r0, 800b334 <__pow5mult+0x40>
 800b328:	4b1d      	ldr	r3, [pc, #116]	; (800b3a0 <__pow5mult+0xac>)
 800b32a:	481e      	ldr	r0, [pc, #120]	; (800b3a4 <__pow5mult+0xb0>)
 800b32c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b330:	f000 fcaa 	bl	800bc88 <__assert_func>
 800b334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b338:	6004      	str	r4, [r0, #0]
 800b33a:	60c4      	str	r4, [r0, #12]
 800b33c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b344:	b94c      	cbnz	r4, 800b35a <__pow5mult+0x66>
 800b346:	f240 2171 	movw	r1, #625	; 0x271
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7ff ff12 	bl	800b174 <__i2b>
 800b350:	2300      	movs	r3, #0
 800b352:	f8c8 0008 	str.w	r0, [r8, #8]
 800b356:	4604      	mov	r4, r0
 800b358:	6003      	str	r3, [r0, #0]
 800b35a:	f04f 0900 	mov.w	r9, #0
 800b35e:	07eb      	lsls	r3, r5, #31
 800b360:	d50a      	bpl.n	800b378 <__pow5mult+0x84>
 800b362:	4639      	mov	r1, r7
 800b364:	4622      	mov	r2, r4
 800b366:	4630      	mov	r0, r6
 800b368:	f7ff ff1a 	bl	800b1a0 <__multiply>
 800b36c:	4639      	mov	r1, r7
 800b36e:	4680      	mov	r8, r0
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff fe47 	bl	800b004 <_Bfree>
 800b376:	4647      	mov	r7, r8
 800b378:	106d      	asrs	r5, r5, #1
 800b37a:	d00b      	beq.n	800b394 <__pow5mult+0xa0>
 800b37c:	6820      	ldr	r0, [r4, #0]
 800b37e:	b938      	cbnz	r0, 800b390 <__pow5mult+0x9c>
 800b380:	4622      	mov	r2, r4
 800b382:	4621      	mov	r1, r4
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff ff0b 	bl	800b1a0 <__multiply>
 800b38a:	6020      	str	r0, [r4, #0]
 800b38c:	f8c0 9000 	str.w	r9, [r0]
 800b390:	4604      	mov	r4, r0
 800b392:	e7e4      	b.n	800b35e <__pow5mult+0x6a>
 800b394:	4638      	mov	r0, r7
 800b396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39a:	bf00      	nop
 800b39c:	0800ca70 	.word	0x0800ca70
 800b3a0:	0800c841 	.word	0x0800c841
 800b3a4:	0800c924 	.word	0x0800c924

0800b3a8 <__lshift>:
 800b3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	6849      	ldr	r1, [r1, #4]
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3b6:	68a3      	ldr	r3, [r4, #8]
 800b3b8:	4607      	mov	r7, r0
 800b3ba:	4691      	mov	r9, r2
 800b3bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3c0:	f108 0601 	add.w	r6, r8, #1
 800b3c4:	42b3      	cmp	r3, r6
 800b3c6:	db0b      	blt.n	800b3e0 <__lshift+0x38>
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7ff fddb 	bl	800af84 <_Balloc>
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	b948      	cbnz	r0, 800b3e6 <__lshift+0x3e>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	4b2a      	ldr	r3, [pc, #168]	; (800b480 <__lshift+0xd8>)
 800b3d6:	482b      	ldr	r0, [pc, #172]	; (800b484 <__lshift+0xdc>)
 800b3d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3dc:	f000 fc54 	bl	800bc88 <__assert_func>
 800b3e0:	3101      	adds	r1, #1
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	e7ee      	b.n	800b3c4 <__lshift+0x1c>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f100 0114 	add.w	r1, r0, #20
 800b3ec:	f100 0210 	add.w	r2, r0, #16
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	4553      	cmp	r3, sl
 800b3f4:	db37      	blt.n	800b466 <__lshift+0xbe>
 800b3f6:	6920      	ldr	r0, [r4, #16]
 800b3f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3fc:	f104 0314 	add.w	r3, r4, #20
 800b400:	f019 091f 	ands.w	r9, r9, #31
 800b404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b408:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b40c:	d02f      	beq.n	800b46e <__lshift+0xc6>
 800b40e:	f1c9 0e20 	rsb	lr, r9, #32
 800b412:	468a      	mov	sl, r1
 800b414:	f04f 0c00 	mov.w	ip, #0
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	fa02 f209 	lsl.w	r2, r2, r9
 800b41e:	ea42 020c 	orr.w	r2, r2, ip
 800b422:	f84a 2b04 	str.w	r2, [sl], #4
 800b426:	f853 2b04 	ldr.w	r2, [r3], #4
 800b42a:	4298      	cmp	r0, r3
 800b42c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b430:	d8f2      	bhi.n	800b418 <__lshift+0x70>
 800b432:	1b03      	subs	r3, r0, r4
 800b434:	3b15      	subs	r3, #21
 800b436:	f023 0303 	bic.w	r3, r3, #3
 800b43a:	3304      	adds	r3, #4
 800b43c:	f104 0215 	add.w	r2, r4, #21
 800b440:	4290      	cmp	r0, r2
 800b442:	bf38      	it	cc
 800b444:	2304      	movcc	r3, #4
 800b446:	f841 c003 	str.w	ip, [r1, r3]
 800b44a:	f1bc 0f00 	cmp.w	ip, #0
 800b44e:	d001      	beq.n	800b454 <__lshift+0xac>
 800b450:	f108 0602 	add.w	r6, r8, #2
 800b454:	3e01      	subs	r6, #1
 800b456:	4638      	mov	r0, r7
 800b458:	612e      	str	r6, [r5, #16]
 800b45a:	4621      	mov	r1, r4
 800b45c:	f7ff fdd2 	bl	800b004 <_Bfree>
 800b460:	4628      	mov	r0, r5
 800b462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b466:	f842 0f04 	str.w	r0, [r2, #4]!
 800b46a:	3301      	adds	r3, #1
 800b46c:	e7c1      	b.n	800b3f2 <__lshift+0x4a>
 800b46e:	3904      	subs	r1, #4
 800b470:	f853 2b04 	ldr.w	r2, [r3], #4
 800b474:	f841 2f04 	str.w	r2, [r1, #4]!
 800b478:	4298      	cmp	r0, r3
 800b47a:	d8f9      	bhi.n	800b470 <__lshift+0xc8>
 800b47c:	e7ea      	b.n	800b454 <__lshift+0xac>
 800b47e:	bf00      	nop
 800b480:	0800c8b3 	.word	0x0800c8b3
 800b484:	0800c924 	.word	0x0800c924

0800b488 <__mcmp>:
 800b488:	b530      	push	{r4, r5, lr}
 800b48a:	6902      	ldr	r2, [r0, #16]
 800b48c:	690c      	ldr	r4, [r1, #16]
 800b48e:	1b12      	subs	r2, r2, r4
 800b490:	d10e      	bne.n	800b4b0 <__mcmp+0x28>
 800b492:	f100 0314 	add.w	r3, r0, #20
 800b496:	3114      	adds	r1, #20
 800b498:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b49c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4a8:	42a5      	cmp	r5, r4
 800b4aa:	d003      	beq.n	800b4b4 <__mcmp+0x2c>
 800b4ac:	d305      	bcc.n	800b4ba <__mcmp+0x32>
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	bd30      	pop	{r4, r5, pc}
 800b4b4:	4283      	cmp	r3, r0
 800b4b6:	d3f3      	bcc.n	800b4a0 <__mcmp+0x18>
 800b4b8:	e7fa      	b.n	800b4b0 <__mcmp+0x28>
 800b4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b4be:	e7f7      	b.n	800b4b0 <__mcmp+0x28>

0800b4c0 <__mdiff>:
 800b4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4690      	mov	r8, r2
 800b4ce:	f7ff ffdb 	bl	800b488 <__mcmp>
 800b4d2:	1e05      	subs	r5, r0, #0
 800b4d4:	d110      	bne.n	800b4f8 <__mdiff+0x38>
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7ff fd53 	bl	800af84 <_Balloc>
 800b4de:	b930      	cbnz	r0, 800b4ee <__mdiff+0x2e>
 800b4e0:	4b3a      	ldr	r3, [pc, #232]	; (800b5cc <__mdiff+0x10c>)
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	f240 2132 	movw	r1, #562	; 0x232
 800b4e8:	4839      	ldr	r0, [pc, #228]	; (800b5d0 <__mdiff+0x110>)
 800b4ea:	f000 fbcd 	bl	800bc88 <__assert_func>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f8:	bfa4      	itt	ge
 800b4fa:	4643      	movge	r3, r8
 800b4fc:	46a0      	movge	r8, r4
 800b4fe:	4630      	mov	r0, r6
 800b500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b504:	bfa6      	itte	ge
 800b506:	461c      	movge	r4, r3
 800b508:	2500      	movge	r5, #0
 800b50a:	2501      	movlt	r5, #1
 800b50c:	f7ff fd3a 	bl	800af84 <_Balloc>
 800b510:	b920      	cbnz	r0, 800b51c <__mdiff+0x5c>
 800b512:	4b2e      	ldr	r3, [pc, #184]	; (800b5cc <__mdiff+0x10c>)
 800b514:	4602      	mov	r2, r0
 800b516:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b51a:	e7e5      	b.n	800b4e8 <__mdiff+0x28>
 800b51c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b520:	6926      	ldr	r6, [r4, #16]
 800b522:	60c5      	str	r5, [r0, #12]
 800b524:	f104 0914 	add.w	r9, r4, #20
 800b528:	f108 0514 	add.w	r5, r8, #20
 800b52c:	f100 0e14 	add.w	lr, r0, #20
 800b530:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b534:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b538:	f108 0210 	add.w	r2, r8, #16
 800b53c:	46f2      	mov	sl, lr
 800b53e:	2100      	movs	r1, #0
 800b540:	f859 3b04 	ldr.w	r3, [r9], #4
 800b544:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b548:	fa1f f883 	uxth.w	r8, r3
 800b54c:	fa11 f18b 	uxtah	r1, r1, fp
 800b550:	0c1b      	lsrs	r3, r3, #16
 800b552:	eba1 0808 	sub.w	r8, r1, r8
 800b556:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b55a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b55e:	fa1f f888 	uxth.w	r8, r8
 800b562:	1419      	asrs	r1, r3, #16
 800b564:	454e      	cmp	r6, r9
 800b566:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b56a:	f84a 3b04 	str.w	r3, [sl], #4
 800b56e:	d8e7      	bhi.n	800b540 <__mdiff+0x80>
 800b570:	1b33      	subs	r3, r6, r4
 800b572:	3b15      	subs	r3, #21
 800b574:	f023 0303 	bic.w	r3, r3, #3
 800b578:	3304      	adds	r3, #4
 800b57a:	3415      	adds	r4, #21
 800b57c:	42a6      	cmp	r6, r4
 800b57e:	bf38      	it	cc
 800b580:	2304      	movcc	r3, #4
 800b582:	441d      	add	r5, r3
 800b584:	4473      	add	r3, lr
 800b586:	469e      	mov	lr, r3
 800b588:	462e      	mov	r6, r5
 800b58a:	4566      	cmp	r6, ip
 800b58c:	d30e      	bcc.n	800b5ac <__mdiff+0xec>
 800b58e:	f10c 0203 	add.w	r2, ip, #3
 800b592:	1b52      	subs	r2, r2, r5
 800b594:	f022 0203 	bic.w	r2, r2, #3
 800b598:	3d03      	subs	r5, #3
 800b59a:	45ac      	cmp	ip, r5
 800b59c:	bf38      	it	cc
 800b59e:	2200      	movcc	r2, #0
 800b5a0:	441a      	add	r2, r3
 800b5a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b5a6:	b17b      	cbz	r3, 800b5c8 <__mdiff+0x108>
 800b5a8:	6107      	str	r7, [r0, #16]
 800b5aa:	e7a3      	b.n	800b4f4 <__mdiff+0x34>
 800b5ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800b5b0:	fa11 f288 	uxtah	r2, r1, r8
 800b5b4:	1414      	asrs	r4, r2, #16
 800b5b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5ba:	b292      	uxth	r2, r2
 800b5bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5c0:	f84e 2b04 	str.w	r2, [lr], #4
 800b5c4:	1421      	asrs	r1, r4, #16
 800b5c6:	e7e0      	b.n	800b58a <__mdiff+0xca>
 800b5c8:	3f01      	subs	r7, #1
 800b5ca:	e7ea      	b.n	800b5a2 <__mdiff+0xe2>
 800b5cc:	0800c8b3 	.word	0x0800c8b3
 800b5d0:	0800c924 	.word	0x0800c924

0800b5d4 <__d2b>:
 800b5d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5d8:	4689      	mov	r9, r1
 800b5da:	2101      	movs	r1, #1
 800b5dc:	ec57 6b10 	vmov	r6, r7, d0
 800b5e0:	4690      	mov	r8, r2
 800b5e2:	f7ff fccf 	bl	800af84 <_Balloc>
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	b930      	cbnz	r0, 800b5f8 <__d2b+0x24>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	4b25      	ldr	r3, [pc, #148]	; (800b684 <__d2b+0xb0>)
 800b5ee:	4826      	ldr	r0, [pc, #152]	; (800b688 <__d2b+0xb4>)
 800b5f0:	f240 310a 	movw	r1, #778	; 0x30a
 800b5f4:	f000 fb48 	bl	800bc88 <__assert_func>
 800b5f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b600:	bb35      	cbnz	r5, 800b650 <__d2b+0x7c>
 800b602:	2e00      	cmp	r6, #0
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	d028      	beq.n	800b65a <__d2b+0x86>
 800b608:	4668      	mov	r0, sp
 800b60a:	9600      	str	r6, [sp, #0]
 800b60c:	f7ff fd82 	bl	800b114 <__lo0bits>
 800b610:	9900      	ldr	r1, [sp, #0]
 800b612:	b300      	cbz	r0, 800b656 <__d2b+0x82>
 800b614:	9a01      	ldr	r2, [sp, #4]
 800b616:	f1c0 0320 	rsb	r3, r0, #32
 800b61a:	fa02 f303 	lsl.w	r3, r2, r3
 800b61e:	430b      	orrs	r3, r1
 800b620:	40c2      	lsrs	r2, r0
 800b622:	6163      	str	r3, [r4, #20]
 800b624:	9201      	str	r2, [sp, #4]
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	61a3      	str	r3, [r4, #24]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bf14      	ite	ne
 800b62e:	2202      	movne	r2, #2
 800b630:	2201      	moveq	r2, #1
 800b632:	6122      	str	r2, [r4, #16]
 800b634:	b1d5      	cbz	r5, 800b66c <__d2b+0x98>
 800b636:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b63a:	4405      	add	r5, r0
 800b63c:	f8c9 5000 	str.w	r5, [r9]
 800b640:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b644:	f8c8 0000 	str.w	r0, [r8]
 800b648:	4620      	mov	r0, r4
 800b64a:	b003      	add	sp, #12
 800b64c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b654:	e7d5      	b.n	800b602 <__d2b+0x2e>
 800b656:	6161      	str	r1, [r4, #20]
 800b658:	e7e5      	b.n	800b626 <__d2b+0x52>
 800b65a:	a801      	add	r0, sp, #4
 800b65c:	f7ff fd5a 	bl	800b114 <__lo0bits>
 800b660:	9b01      	ldr	r3, [sp, #4]
 800b662:	6163      	str	r3, [r4, #20]
 800b664:	2201      	movs	r2, #1
 800b666:	6122      	str	r2, [r4, #16]
 800b668:	3020      	adds	r0, #32
 800b66a:	e7e3      	b.n	800b634 <__d2b+0x60>
 800b66c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b674:	f8c9 0000 	str.w	r0, [r9]
 800b678:	6918      	ldr	r0, [r3, #16]
 800b67a:	f7ff fd2b 	bl	800b0d4 <__hi0bits>
 800b67e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b682:	e7df      	b.n	800b644 <__d2b+0x70>
 800b684:	0800c8b3 	.word	0x0800c8b3
 800b688:	0800c924 	.word	0x0800c924

0800b68c <_calloc_r>:
 800b68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b68e:	fba1 2402 	umull	r2, r4, r1, r2
 800b692:	b94c      	cbnz	r4, 800b6a8 <_calloc_r+0x1c>
 800b694:	4611      	mov	r1, r2
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	f000 f87a 	bl	800b790 <_malloc_r>
 800b69c:	9a01      	ldr	r2, [sp, #4]
 800b69e:	4605      	mov	r5, r0
 800b6a0:	b930      	cbnz	r0, 800b6b0 <_calloc_r+0x24>
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	b003      	add	sp, #12
 800b6a6:	bd30      	pop	{r4, r5, pc}
 800b6a8:	220c      	movs	r2, #12
 800b6aa:	6002      	str	r2, [r0, #0]
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	e7f8      	b.n	800b6a2 <_calloc_r+0x16>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	f7fd fde9 	bl	8009288 <memset>
 800b6b6:	e7f4      	b.n	800b6a2 <_calloc_r+0x16>

0800b6b8 <_free_r>:
 800b6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ba:	2900      	cmp	r1, #0
 800b6bc:	d044      	beq.n	800b748 <_free_r+0x90>
 800b6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c2:	9001      	str	r0, [sp, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b6ca:	bfb8      	it	lt
 800b6cc:	18e4      	addlt	r4, r4, r3
 800b6ce:	f000 fb61 	bl	800bd94 <__malloc_lock>
 800b6d2:	4a1e      	ldr	r2, [pc, #120]	; (800b74c <_free_r+0x94>)
 800b6d4:	9801      	ldr	r0, [sp, #4]
 800b6d6:	6813      	ldr	r3, [r2, #0]
 800b6d8:	b933      	cbnz	r3, 800b6e8 <_free_r+0x30>
 800b6da:	6063      	str	r3, [r4, #4]
 800b6dc:	6014      	str	r4, [r2, #0]
 800b6de:	b003      	add	sp, #12
 800b6e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6e4:	f000 bb5c 	b.w	800bda0 <__malloc_unlock>
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	d908      	bls.n	800b6fe <_free_r+0x46>
 800b6ec:	6825      	ldr	r5, [r4, #0]
 800b6ee:	1961      	adds	r1, r4, r5
 800b6f0:	428b      	cmp	r3, r1
 800b6f2:	bf01      	itttt	eq
 800b6f4:	6819      	ldreq	r1, [r3, #0]
 800b6f6:	685b      	ldreq	r3, [r3, #4]
 800b6f8:	1949      	addeq	r1, r1, r5
 800b6fa:	6021      	streq	r1, [r4, #0]
 800b6fc:	e7ed      	b.n	800b6da <_free_r+0x22>
 800b6fe:	461a      	mov	r2, r3
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	b10b      	cbz	r3, 800b708 <_free_r+0x50>
 800b704:	42a3      	cmp	r3, r4
 800b706:	d9fa      	bls.n	800b6fe <_free_r+0x46>
 800b708:	6811      	ldr	r1, [r2, #0]
 800b70a:	1855      	adds	r5, r2, r1
 800b70c:	42a5      	cmp	r5, r4
 800b70e:	d10b      	bne.n	800b728 <_free_r+0x70>
 800b710:	6824      	ldr	r4, [r4, #0]
 800b712:	4421      	add	r1, r4
 800b714:	1854      	adds	r4, r2, r1
 800b716:	42a3      	cmp	r3, r4
 800b718:	6011      	str	r1, [r2, #0]
 800b71a:	d1e0      	bne.n	800b6de <_free_r+0x26>
 800b71c:	681c      	ldr	r4, [r3, #0]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	6053      	str	r3, [r2, #4]
 800b722:	4421      	add	r1, r4
 800b724:	6011      	str	r1, [r2, #0]
 800b726:	e7da      	b.n	800b6de <_free_r+0x26>
 800b728:	d902      	bls.n	800b730 <_free_r+0x78>
 800b72a:	230c      	movs	r3, #12
 800b72c:	6003      	str	r3, [r0, #0]
 800b72e:	e7d6      	b.n	800b6de <_free_r+0x26>
 800b730:	6825      	ldr	r5, [r4, #0]
 800b732:	1961      	adds	r1, r4, r5
 800b734:	428b      	cmp	r3, r1
 800b736:	bf04      	itt	eq
 800b738:	6819      	ldreq	r1, [r3, #0]
 800b73a:	685b      	ldreq	r3, [r3, #4]
 800b73c:	6063      	str	r3, [r4, #4]
 800b73e:	bf04      	itt	eq
 800b740:	1949      	addeq	r1, r1, r5
 800b742:	6021      	streq	r1, [r4, #0]
 800b744:	6054      	str	r4, [r2, #4]
 800b746:	e7ca      	b.n	800b6de <_free_r+0x26>
 800b748:	b003      	add	sp, #12
 800b74a:	bd30      	pop	{r4, r5, pc}
 800b74c:	20002b74 	.word	0x20002b74

0800b750 <sbrk_aligned>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	4e0e      	ldr	r6, [pc, #56]	; (800b78c <sbrk_aligned+0x3c>)
 800b754:	460c      	mov	r4, r1
 800b756:	6831      	ldr	r1, [r6, #0]
 800b758:	4605      	mov	r5, r0
 800b75a:	b911      	cbnz	r1, 800b762 <sbrk_aligned+0x12>
 800b75c:	f000 fa2e 	bl	800bbbc <_sbrk_r>
 800b760:	6030      	str	r0, [r6, #0]
 800b762:	4621      	mov	r1, r4
 800b764:	4628      	mov	r0, r5
 800b766:	f000 fa29 	bl	800bbbc <_sbrk_r>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d00a      	beq.n	800b784 <sbrk_aligned+0x34>
 800b76e:	1cc4      	adds	r4, r0, #3
 800b770:	f024 0403 	bic.w	r4, r4, #3
 800b774:	42a0      	cmp	r0, r4
 800b776:	d007      	beq.n	800b788 <sbrk_aligned+0x38>
 800b778:	1a21      	subs	r1, r4, r0
 800b77a:	4628      	mov	r0, r5
 800b77c:	f000 fa1e 	bl	800bbbc <_sbrk_r>
 800b780:	3001      	adds	r0, #1
 800b782:	d101      	bne.n	800b788 <sbrk_aligned+0x38>
 800b784:	f04f 34ff 	mov.w	r4, #4294967295
 800b788:	4620      	mov	r0, r4
 800b78a:	bd70      	pop	{r4, r5, r6, pc}
 800b78c:	20002b78 	.word	0x20002b78

0800b790 <_malloc_r>:
 800b790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b794:	1ccd      	adds	r5, r1, #3
 800b796:	f025 0503 	bic.w	r5, r5, #3
 800b79a:	3508      	adds	r5, #8
 800b79c:	2d0c      	cmp	r5, #12
 800b79e:	bf38      	it	cc
 800b7a0:	250c      	movcc	r5, #12
 800b7a2:	2d00      	cmp	r5, #0
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	db01      	blt.n	800b7ac <_malloc_r+0x1c>
 800b7a8:	42a9      	cmp	r1, r5
 800b7aa:	d905      	bls.n	800b7b8 <_malloc_r+0x28>
 800b7ac:	230c      	movs	r3, #12
 800b7ae:	603b      	str	r3, [r7, #0]
 800b7b0:	2600      	movs	r6, #0
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b8:	4e2e      	ldr	r6, [pc, #184]	; (800b874 <_malloc_r+0xe4>)
 800b7ba:	f000 faeb 	bl	800bd94 <__malloc_lock>
 800b7be:	6833      	ldr	r3, [r6, #0]
 800b7c0:	461c      	mov	r4, r3
 800b7c2:	bb34      	cbnz	r4, 800b812 <_malloc_r+0x82>
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	f7ff ffc2 	bl	800b750 <sbrk_aligned>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	d14d      	bne.n	800b86e <_malloc_r+0xde>
 800b7d2:	6834      	ldr	r4, [r6, #0]
 800b7d4:	4626      	mov	r6, r4
 800b7d6:	2e00      	cmp	r6, #0
 800b7d8:	d140      	bne.n	800b85c <_malloc_r+0xcc>
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	4631      	mov	r1, r6
 800b7de:	4638      	mov	r0, r7
 800b7e0:	eb04 0803 	add.w	r8, r4, r3
 800b7e4:	f000 f9ea 	bl	800bbbc <_sbrk_r>
 800b7e8:	4580      	cmp	r8, r0
 800b7ea:	d13a      	bne.n	800b862 <_malloc_r+0xd2>
 800b7ec:	6821      	ldr	r1, [r4, #0]
 800b7ee:	3503      	adds	r5, #3
 800b7f0:	1a6d      	subs	r5, r5, r1
 800b7f2:	f025 0503 	bic.w	r5, r5, #3
 800b7f6:	3508      	adds	r5, #8
 800b7f8:	2d0c      	cmp	r5, #12
 800b7fa:	bf38      	it	cc
 800b7fc:	250c      	movcc	r5, #12
 800b7fe:	4629      	mov	r1, r5
 800b800:	4638      	mov	r0, r7
 800b802:	f7ff ffa5 	bl	800b750 <sbrk_aligned>
 800b806:	3001      	adds	r0, #1
 800b808:	d02b      	beq.n	800b862 <_malloc_r+0xd2>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	442b      	add	r3, r5
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	e00e      	b.n	800b830 <_malloc_r+0xa0>
 800b812:	6822      	ldr	r2, [r4, #0]
 800b814:	1b52      	subs	r2, r2, r5
 800b816:	d41e      	bmi.n	800b856 <_malloc_r+0xc6>
 800b818:	2a0b      	cmp	r2, #11
 800b81a:	d916      	bls.n	800b84a <_malloc_r+0xba>
 800b81c:	1961      	adds	r1, r4, r5
 800b81e:	42a3      	cmp	r3, r4
 800b820:	6025      	str	r5, [r4, #0]
 800b822:	bf18      	it	ne
 800b824:	6059      	strne	r1, [r3, #4]
 800b826:	6863      	ldr	r3, [r4, #4]
 800b828:	bf08      	it	eq
 800b82a:	6031      	streq	r1, [r6, #0]
 800b82c:	5162      	str	r2, [r4, r5]
 800b82e:	604b      	str	r3, [r1, #4]
 800b830:	4638      	mov	r0, r7
 800b832:	f104 060b 	add.w	r6, r4, #11
 800b836:	f000 fab3 	bl	800bda0 <__malloc_unlock>
 800b83a:	f026 0607 	bic.w	r6, r6, #7
 800b83e:	1d23      	adds	r3, r4, #4
 800b840:	1af2      	subs	r2, r6, r3
 800b842:	d0b6      	beq.n	800b7b2 <_malloc_r+0x22>
 800b844:	1b9b      	subs	r3, r3, r6
 800b846:	50a3      	str	r3, [r4, r2]
 800b848:	e7b3      	b.n	800b7b2 <_malloc_r+0x22>
 800b84a:	6862      	ldr	r2, [r4, #4]
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	bf0c      	ite	eq
 800b850:	6032      	streq	r2, [r6, #0]
 800b852:	605a      	strne	r2, [r3, #4]
 800b854:	e7ec      	b.n	800b830 <_malloc_r+0xa0>
 800b856:	4623      	mov	r3, r4
 800b858:	6864      	ldr	r4, [r4, #4]
 800b85a:	e7b2      	b.n	800b7c2 <_malloc_r+0x32>
 800b85c:	4634      	mov	r4, r6
 800b85e:	6876      	ldr	r6, [r6, #4]
 800b860:	e7b9      	b.n	800b7d6 <_malloc_r+0x46>
 800b862:	230c      	movs	r3, #12
 800b864:	603b      	str	r3, [r7, #0]
 800b866:	4638      	mov	r0, r7
 800b868:	f000 fa9a 	bl	800bda0 <__malloc_unlock>
 800b86c:	e7a1      	b.n	800b7b2 <_malloc_r+0x22>
 800b86e:	6025      	str	r5, [r4, #0]
 800b870:	e7de      	b.n	800b830 <_malloc_r+0xa0>
 800b872:	bf00      	nop
 800b874:	20002b74 	.word	0x20002b74

0800b878 <__sfputc_r>:
 800b878:	6893      	ldr	r3, [r2, #8]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	b410      	push	{r4}
 800b880:	6093      	str	r3, [r2, #8]
 800b882:	da08      	bge.n	800b896 <__sfputc_r+0x1e>
 800b884:	6994      	ldr	r4, [r2, #24]
 800b886:	42a3      	cmp	r3, r4
 800b888:	db01      	blt.n	800b88e <__sfputc_r+0x16>
 800b88a:	290a      	cmp	r1, #10
 800b88c:	d103      	bne.n	800b896 <__sfputc_r+0x1e>
 800b88e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b892:	f7fe ba0f 	b.w	8009cb4 <__swbuf_r>
 800b896:	6813      	ldr	r3, [r2, #0]
 800b898:	1c58      	adds	r0, r3, #1
 800b89a:	6010      	str	r0, [r2, #0]
 800b89c:	7019      	strb	r1, [r3, #0]
 800b89e:	4608      	mov	r0, r1
 800b8a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <__sfputs_r>:
 800b8a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	460f      	mov	r7, r1
 800b8ac:	4614      	mov	r4, r2
 800b8ae:	18d5      	adds	r5, r2, r3
 800b8b0:	42ac      	cmp	r4, r5
 800b8b2:	d101      	bne.n	800b8b8 <__sfputs_r+0x12>
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	e007      	b.n	800b8c8 <__sfputs_r+0x22>
 800b8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8bc:	463a      	mov	r2, r7
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f7ff ffda 	bl	800b878 <__sfputc_r>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d1f3      	bne.n	800b8b0 <__sfputs_r+0xa>
 800b8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8cc <_vfiprintf_r>:
 800b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d0:	460d      	mov	r5, r1
 800b8d2:	b09d      	sub	sp, #116	; 0x74
 800b8d4:	4614      	mov	r4, r2
 800b8d6:	4698      	mov	r8, r3
 800b8d8:	4606      	mov	r6, r0
 800b8da:	b118      	cbz	r0, 800b8e4 <_vfiprintf_r+0x18>
 800b8dc:	6983      	ldr	r3, [r0, #24]
 800b8de:	b90b      	cbnz	r3, 800b8e4 <_vfiprintf_r+0x18>
 800b8e0:	f7ff fa3e 	bl	800ad60 <__sinit>
 800b8e4:	4b89      	ldr	r3, [pc, #548]	; (800bb0c <_vfiprintf_r+0x240>)
 800b8e6:	429d      	cmp	r5, r3
 800b8e8:	d11b      	bne.n	800b922 <_vfiprintf_r+0x56>
 800b8ea:	6875      	ldr	r5, [r6, #4]
 800b8ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ee:	07d9      	lsls	r1, r3, #31
 800b8f0:	d405      	bmi.n	800b8fe <_vfiprintf_r+0x32>
 800b8f2:	89ab      	ldrh	r3, [r5, #12]
 800b8f4:	059a      	lsls	r2, r3, #22
 800b8f6:	d402      	bmi.n	800b8fe <_vfiprintf_r+0x32>
 800b8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8fa:	f7ff fad4 	bl	800aea6 <__retarget_lock_acquire_recursive>
 800b8fe:	89ab      	ldrh	r3, [r5, #12]
 800b900:	071b      	lsls	r3, r3, #28
 800b902:	d501      	bpl.n	800b908 <_vfiprintf_r+0x3c>
 800b904:	692b      	ldr	r3, [r5, #16]
 800b906:	b9eb      	cbnz	r3, 800b944 <_vfiprintf_r+0x78>
 800b908:	4629      	mov	r1, r5
 800b90a:	4630      	mov	r0, r6
 800b90c:	f7fe fa24 	bl	8009d58 <__swsetup_r>
 800b910:	b1c0      	cbz	r0, 800b944 <_vfiprintf_r+0x78>
 800b912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b914:	07dc      	lsls	r4, r3, #31
 800b916:	d50e      	bpl.n	800b936 <_vfiprintf_r+0x6a>
 800b918:	f04f 30ff 	mov.w	r0, #4294967295
 800b91c:	b01d      	add	sp, #116	; 0x74
 800b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b922:	4b7b      	ldr	r3, [pc, #492]	; (800bb10 <_vfiprintf_r+0x244>)
 800b924:	429d      	cmp	r5, r3
 800b926:	d101      	bne.n	800b92c <_vfiprintf_r+0x60>
 800b928:	68b5      	ldr	r5, [r6, #8]
 800b92a:	e7df      	b.n	800b8ec <_vfiprintf_r+0x20>
 800b92c:	4b79      	ldr	r3, [pc, #484]	; (800bb14 <_vfiprintf_r+0x248>)
 800b92e:	429d      	cmp	r5, r3
 800b930:	bf08      	it	eq
 800b932:	68f5      	ldreq	r5, [r6, #12]
 800b934:	e7da      	b.n	800b8ec <_vfiprintf_r+0x20>
 800b936:	89ab      	ldrh	r3, [r5, #12]
 800b938:	0598      	lsls	r0, r3, #22
 800b93a:	d4ed      	bmi.n	800b918 <_vfiprintf_r+0x4c>
 800b93c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b93e:	f7ff fab3 	bl	800aea8 <__retarget_lock_release_recursive>
 800b942:	e7e9      	b.n	800b918 <_vfiprintf_r+0x4c>
 800b944:	2300      	movs	r3, #0
 800b946:	9309      	str	r3, [sp, #36]	; 0x24
 800b948:	2320      	movs	r3, #32
 800b94a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b94e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b952:	2330      	movs	r3, #48	; 0x30
 800b954:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb18 <_vfiprintf_r+0x24c>
 800b958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b95c:	f04f 0901 	mov.w	r9, #1
 800b960:	4623      	mov	r3, r4
 800b962:	469a      	mov	sl, r3
 800b964:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b968:	b10a      	cbz	r2, 800b96e <_vfiprintf_r+0xa2>
 800b96a:	2a25      	cmp	r2, #37	; 0x25
 800b96c:	d1f9      	bne.n	800b962 <_vfiprintf_r+0x96>
 800b96e:	ebba 0b04 	subs.w	fp, sl, r4
 800b972:	d00b      	beq.n	800b98c <_vfiprintf_r+0xc0>
 800b974:	465b      	mov	r3, fp
 800b976:	4622      	mov	r2, r4
 800b978:	4629      	mov	r1, r5
 800b97a:	4630      	mov	r0, r6
 800b97c:	f7ff ff93 	bl	800b8a6 <__sfputs_r>
 800b980:	3001      	adds	r0, #1
 800b982:	f000 80aa 	beq.w	800bada <_vfiprintf_r+0x20e>
 800b986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b988:	445a      	add	r2, fp
 800b98a:	9209      	str	r2, [sp, #36]	; 0x24
 800b98c:	f89a 3000 	ldrb.w	r3, [sl]
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 80a2 	beq.w	800bada <_vfiprintf_r+0x20e>
 800b996:	2300      	movs	r3, #0
 800b998:	f04f 32ff 	mov.w	r2, #4294967295
 800b99c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a0:	f10a 0a01 	add.w	sl, sl, #1
 800b9a4:	9304      	str	r3, [sp, #16]
 800b9a6:	9307      	str	r3, [sp, #28]
 800b9a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ae:	4654      	mov	r4, sl
 800b9b0:	2205      	movs	r2, #5
 800b9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b6:	4858      	ldr	r0, [pc, #352]	; (800bb18 <_vfiprintf_r+0x24c>)
 800b9b8:	f7f4 fc1a 	bl	80001f0 <memchr>
 800b9bc:	9a04      	ldr	r2, [sp, #16]
 800b9be:	b9d8      	cbnz	r0, 800b9f8 <_vfiprintf_r+0x12c>
 800b9c0:	06d1      	lsls	r1, r2, #27
 800b9c2:	bf44      	itt	mi
 800b9c4:	2320      	movmi	r3, #32
 800b9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ca:	0713      	lsls	r3, r2, #28
 800b9cc:	bf44      	itt	mi
 800b9ce:	232b      	movmi	r3, #43	; 0x2b
 800b9d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9da:	d015      	beq.n	800ba08 <_vfiprintf_r+0x13c>
 800b9dc:	9a07      	ldr	r2, [sp, #28]
 800b9de:	4654      	mov	r4, sl
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	f04f 0c0a 	mov.w	ip, #10
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ec:	3b30      	subs	r3, #48	; 0x30
 800b9ee:	2b09      	cmp	r3, #9
 800b9f0:	d94e      	bls.n	800ba90 <_vfiprintf_r+0x1c4>
 800b9f2:	b1b0      	cbz	r0, 800ba22 <_vfiprintf_r+0x156>
 800b9f4:	9207      	str	r2, [sp, #28]
 800b9f6:	e014      	b.n	800ba22 <_vfiprintf_r+0x156>
 800b9f8:	eba0 0308 	sub.w	r3, r0, r8
 800b9fc:	fa09 f303 	lsl.w	r3, r9, r3
 800ba00:	4313      	orrs	r3, r2
 800ba02:	9304      	str	r3, [sp, #16]
 800ba04:	46a2      	mov	sl, r4
 800ba06:	e7d2      	b.n	800b9ae <_vfiprintf_r+0xe2>
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	1d19      	adds	r1, r3, #4
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	9103      	str	r1, [sp, #12]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	bfbb      	ittet	lt
 800ba14:	425b      	neglt	r3, r3
 800ba16:	f042 0202 	orrlt.w	r2, r2, #2
 800ba1a:	9307      	strge	r3, [sp, #28]
 800ba1c:	9307      	strlt	r3, [sp, #28]
 800ba1e:	bfb8      	it	lt
 800ba20:	9204      	strlt	r2, [sp, #16]
 800ba22:	7823      	ldrb	r3, [r4, #0]
 800ba24:	2b2e      	cmp	r3, #46	; 0x2e
 800ba26:	d10c      	bne.n	800ba42 <_vfiprintf_r+0x176>
 800ba28:	7863      	ldrb	r3, [r4, #1]
 800ba2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba2c:	d135      	bne.n	800ba9a <_vfiprintf_r+0x1ce>
 800ba2e:	9b03      	ldr	r3, [sp, #12]
 800ba30:	1d1a      	adds	r2, r3, #4
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	9203      	str	r2, [sp, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	bfb8      	it	lt
 800ba3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba3e:	3402      	adds	r4, #2
 800ba40:	9305      	str	r3, [sp, #20]
 800ba42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb28 <_vfiprintf_r+0x25c>
 800ba46:	7821      	ldrb	r1, [r4, #0]
 800ba48:	2203      	movs	r2, #3
 800ba4a:	4650      	mov	r0, sl
 800ba4c:	f7f4 fbd0 	bl	80001f0 <memchr>
 800ba50:	b140      	cbz	r0, 800ba64 <_vfiprintf_r+0x198>
 800ba52:	2340      	movs	r3, #64	; 0x40
 800ba54:	eba0 000a 	sub.w	r0, r0, sl
 800ba58:	fa03 f000 	lsl.w	r0, r3, r0
 800ba5c:	9b04      	ldr	r3, [sp, #16]
 800ba5e:	4303      	orrs	r3, r0
 800ba60:	3401      	adds	r4, #1
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba68:	482c      	ldr	r0, [pc, #176]	; (800bb1c <_vfiprintf_r+0x250>)
 800ba6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba6e:	2206      	movs	r2, #6
 800ba70:	f7f4 fbbe 	bl	80001f0 <memchr>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d03f      	beq.n	800baf8 <_vfiprintf_r+0x22c>
 800ba78:	4b29      	ldr	r3, [pc, #164]	; (800bb20 <_vfiprintf_r+0x254>)
 800ba7a:	bb1b      	cbnz	r3, 800bac4 <_vfiprintf_r+0x1f8>
 800ba7c:	9b03      	ldr	r3, [sp, #12]
 800ba7e:	3307      	adds	r3, #7
 800ba80:	f023 0307 	bic.w	r3, r3, #7
 800ba84:	3308      	adds	r3, #8
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8a:	443b      	add	r3, r7
 800ba8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8e:	e767      	b.n	800b960 <_vfiprintf_r+0x94>
 800ba90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba94:	460c      	mov	r4, r1
 800ba96:	2001      	movs	r0, #1
 800ba98:	e7a5      	b.n	800b9e6 <_vfiprintf_r+0x11a>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	3401      	adds	r4, #1
 800ba9e:	9305      	str	r3, [sp, #20]
 800baa0:	4619      	mov	r1, r3
 800baa2:	f04f 0c0a 	mov.w	ip, #10
 800baa6:	4620      	mov	r0, r4
 800baa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baac:	3a30      	subs	r2, #48	; 0x30
 800baae:	2a09      	cmp	r2, #9
 800bab0:	d903      	bls.n	800baba <_vfiprintf_r+0x1ee>
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0c5      	beq.n	800ba42 <_vfiprintf_r+0x176>
 800bab6:	9105      	str	r1, [sp, #20]
 800bab8:	e7c3      	b.n	800ba42 <_vfiprintf_r+0x176>
 800baba:	fb0c 2101 	mla	r1, ip, r1, r2
 800babe:	4604      	mov	r4, r0
 800bac0:	2301      	movs	r3, #1
 800bac2:	e7f0      	b.n	800baa6 <_vfiprintf_r+0x1da>
 800bac4:	ab03      	add	r3, sp, #12
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	462a      	mov	r2, r5
 800baca:	4b16      	ldr	r3, [pc, #88]	; (800bb24 <_vfiprintf_r+0x258>)
 800bacc:	a904      	add	r1, sp, #16
 800bace:	4630      	mov	r0, r6
 800bad0:	f7fd fc82 	bl	80093d8 <_printf_float>
 800bad4:	4607      	mov	r7, r0
 800bad6:	1c78      	adds	r0, r7, #1
 800bad8:	d1d6      	bne.n	800ba88 <_vfiprintf_r+0x1bc>
 800bada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800badc:	07d9      	lsls	r1, r3, #31
 800bade:	d405      	bmi.n	800baec <_vfiprintf_r+0x220>
 800bae0:	89ab      	ldrh	r3, [r5, #12]
 800bae2:	059a      	lsls	r2, r3, #22
 800bae4:	d402      	bmi.n	800baec <_vfiprintf_r+0x220>
 800bae6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bae8:	f7ff f9de 	bl	800aea8 <__retarget_lock_release_recursive>
 800baec:	89ab      	ldrh	r3, [r5, #12]
 800baee:	065b      	lsls	r3, r3, #25
 800baf0:	f53f af12 	bmi.w	800b918 <_vfiprintf_r+0x4c>
 800baf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baf6:	e711      	b.n	800b91c <_vfiprintf_r+0x50>
 800baf8:	ab03      	add	r3, sp, #12
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	462a      	mov	r2, r5
 800bafe:	4b09      	ldr	r3, [pc, #36]	; (800bb24 <_vfiprintf_r+0x258>)
 800bb00:	a904      	add	r1, sp, #16
 800bb02:	4630      	mov	r0, r6
 800bb04:	f7fd ff0c 	bl	8009920 <_printf_i>
 800bb08:	e7e4      	b.n	800bad4 <_vfiprintf_r+0x208>
 800bb0a:	bf00      	nop
 800bb0c:	0800c8e4 	.word	0x0800c8e4
 800bb10:	0800c904 	.word	0x0800c904
 800bb14:	0800c8c4 	.word	0x0800c8c4
 800bb18:	0800ca7c 	.word	0x0800ca7c
 800bb1c:	0800ca86 	.word	0x0800ca86
 800bb20:	080093d9 	.word	0x080093d9
 800bb24:	0800b8a7 	.word	0x0800b8a7
 800bb28:	0800ca82 	.word	0x0800ca82

0800bb2c <_putc_r>:
 800bb2c:	b570      	push	{r4, r5, r6, lr}
 800bb2e:	460d      	mov	r5, r1
 800bb30:	4614      	mov	r4, r2
 800bb32:	4606      	mov	r6, r0
 800bb34:	b118      	cbz	r0, 800bb3e <_putc_r+0x12>
 800bb36:	6983      	ldr	r3, [r0, #24]
 800bb38:	b90b      	cbnz	r3, 800bb3e <_putc_r+0x12>
 800bb3a:	f7ff f911 	bl	800ad60 <__sinit>
 800bb3e:	4b1c      	ldr	r3, [pc, #112]	; (800bbb0 <_putc_r+0x84>)
 800bb40:	429c      	cmp	r4, r3
 800bb42:	d124      	bne.n	800bb8e <_putc_r+0x62>
 800bb44:	6874      	ldr	r4, [r6, #4]
 800bb46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb48:	07d8      	lsls	r0, r3, #31
 800bb4a:	d405      	bmi.n	800bb58 <_putc_r+0x2c>
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	0599      	lsls	r1, r3, #22
 800bb50:	d402      	bmi.n	800bb58 <_putc_r+0x2c>
 800bb52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb54:	f7ff f9a7 	bl	800aea6 <__retarget_lock_acquire_recursive>
 800bb58:	68a3      	ldr	r3, [r4, #8]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	60a3      	str	r3, [r4, #8]
 800bb60:	da05      	bge.n	800bb6e <_putc_r+0x42>
 800bb62:	69a2      	ldr	r2, [r4, #24]
 800bb64:	4293      	cmp	r3, r2
 800bb66:	db1c      	blt.n	800bba2 <_putc_r+0x76>
 800bb68:	b2eb      	uxtb	r3, r5
 800bb6a:	2b0a      	cmp	r3, #10
 800bb6c:	d019      	beq.n	800bba2 <_putc_r+0x76>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	6022      	str	r2, [r4, #0]
 800bb74:	701d      	strb	r5, [r3, #0]
 800bb76:	b2ed      	uxtb	r5, r5
 800bb78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb7a:	07da      	lsls	r2, r3, #31
 800bb7c:	d405      	bmi.n	800bb8a <_putc_r+0x5e>
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	059b      	lsls	r3, r3, #22
 800bb82:	d402      	bmi.n	800bb8a <_putc_r+0x5e>
 800bb84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb86:	f7ff f98f 	bl	800aea8 <__retarget_lock_release_recursive>
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	bd70      	pop	{r4, r5, r6, pc}
 800bb8e:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <_putc_r+0x88>)
 800bb90:	429c      	cmp	r4, r3
 800bb92:	d101      	bne.n	800bb98 <_putc_r+0x6c>
 800bb94:	68b4      	ldr	r4, [r6, #8]
 800bb96:	e7d6      	b.n	800bb46 <_putc_r+0x1a>
 800bb98:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <_putc_r+0x8c>)
 800bb9a:	429c      	cmp	r4, r3
 800bb9c:	bf08      	it	eq
 800bb9e:	68f4      	ldreq	r4, [r6, #12]
 800bba0:	e7d1      	b.n	800bb46 <_putc_r+0x1a>
 800bba2:	4629      	mov	r1, r5
 800bba4:	4622      	mov	r2, r4
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7fe f884 	bl	8009cb4 <__swbuf_r>
 800bbac:	4605      	mov	r5, r0
 800bbae:	e7e3      	b.n	800bb78 <_putc_r+0x4c>
 800bbb0:	0800c8e4 	.word	0x0800c8e4
 800bbb4:	0800c904 	.word	0x0800c904
 800bbb8:	0800c8c4 	.word	0x0800c8c4

0800bbbc <_sbrk_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4d06      	ldr	r5, [pc, #24]	; (800bbd8 <_sbrk_r+0x1c>)
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	4608      	mov	r0, r1
 800bbc6:	602b      	str	r3, [r5, #0]
 800bbc8:	f7f7 f91e 	bl	8002e08 <_sbrk>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	d102      	bne.n	800bbd6 <_sbrk_r+0x1a>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	b103      	cbz	r3, 800bbd6 <_sbrk_r+0x1a>
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	20002b7c 	.word	0x20002b7c

0800bbdc <__sread>:
 800bbdc:	b510      	push	{r4, lr}
 800bbde:	460c      	mov	r4, r1
 800bbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe4:	f000 f8e2 	bl	800bdac <_read_r>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	bfab      	itete	ge
 800bbec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbee:	89a3      	ldrhlt	r3, [r4, #12]
 800bbf0:	181b      	addge	r3, r3, r0
 800bbf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbf6:	bfac      	ite	ge
 800bbf8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbfa:	81a3      	strhlt	r3, [r4, #12]
 800bbfc:	bd10      	pop	{r4, pc}

0800bbfe <__swrite>:
 800bbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc02:	461f      	mov	r7, r3
 800bc04:	898b      	ldrh	r3, [r1, #12]
 800bc06:	05db      	lsls	r3, r3, #23
 800bc08:	4605      	mov	r5, r0
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	4616      	mov	r6, r2
 800bc0e:	d505      	bpl.n	800bc1c <__swrite+0x1e>
 800bc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc14:	2302      	movs	r3, #2
 800bc16:	2200      	movs	r2, #0
 800bc18:	f000 f898 	bl	800bd4c <_lseek_r>
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	4632      	mov	r2, r6
 800bc2a:	463b      	mov	r3, r7
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc32:	f000 b817 	b.w	800bc64 <_write_r>

0800bc36 <__sseek>:
 800bc36:	b510      	push	{r4, lr}
 800bc38:	460c      	mov	r4, r1
 800bc3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc3e:	f000 f885 	bl	800bd4c <_lseek_r>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	89a3      	ldrh	r3, [r4, #12]
 800bc46:	bf15      	itete	ne
 800bc48:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc52:	81a3      	strheq	r3, [r4, #12]
 800bc54:	bf18      	it	ne
 800bc56:	81a3      	strhne	r3, [r4, #12]
 800bc58:	bd10      	pop	{r4, pc}

0800bc5a <__sclose>:
 800bc5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc5e:	f000 b831 	b.w	800bcc4 <_close_r>
	...

0800bc64 <_write_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d07      	ldr	r5, [pc, #28]	; (800bc84 <_write_r+0x20>)
 800bc68:	4604      	mov	r4, r0
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	2200      	movs	r2, #0
 800bc70:	602a      	str	r2, [r5, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f7f6 faaa 	bl	80021cc <_write>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_write_r+0x1e>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_write_r+0x1e>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	20002b7c 	.word	0x20002b7c

0800bc88 <__assert_func>:
 800bc88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc8a:	4614      	mov	r4, r2
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	4b09      	ldr	r3, [pc, #36]	; (800bcb4 <__assert_func+0x2c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4605      	mov	r5, r0
 800bc94:	68d8      	ldr	r0, [r3, #12]
 800bc96:	b14c      	cbz	r4, 800bcac <__assert_func+0x24>
 800bc98:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <__assert_func+0x30>)
 800bc9a:	9100      	str	r1, [sp, #0]
 800bc9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bca0:	4906      	ldr	r1, [pc, #24]	; (800bcbc <__assert_func+0x34>)
 800bca2:	462b      	mov	r3, r5
 800bca4:	f000 f81e 	bl	800bce4 <fiprintf>
 800bca8:	f000 f89f 	bl	800bdea <abort>
 800bcac:	4b04      	ldr	r3, [pc, #16]	; (800bcc0 <__assert_func+0x38>)
 800bcae:	461c      	mov	r4, r3
 800bcb0:	e7f3      	b.n	800bc9a <__assert_func+0x12>
 800bcb2:	bf00      	nop
 800bcb4:	20000024 	.word	0x20000024
 800bcb8:	0800ca8d 	.word	0x0800ca8d
 800bcbc:	0800ca9a 	.word	0x0800ca9a
 800bcc0:	0800cac8 	.word	0x0800cac8

0800bcc4 <_close_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d06      	ldr	r5, [pc, #24]	; (800bce0 <_close_r+0x1c>)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4604      	mov	r4, r0
 800bccc:	4608      	mov	r0, r1
 800bcce:	602b      	str	r3, [r5, #0]
 800bcd0:	f7f7 f865 	bl	8002d9e <_close>
 800bcd4:	1c43      	adds	r3, r0, #1
 800bcd6:	d102      	bne.n	800bcde <_close_r+0x1a>
 800bcd8:	682b      	ldr	r3, [r5, #0]
 800bcda:	b103      	cbz	r3, 800bcde <_close_r+0x1a>
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	20002b7c 	.word	0x20002b7c

0800bce4 <fiprintf>:
 800bce4:	b40e      	push	{r1, r2, r3}
 800bce6:	b503      	push	{r0, r1, lr}
 800bce8:	4601      	mov	r1, r0
 800bcea:	ab03      	add	r3, sp, #12
 800bcec:	4805      	ldr	r0, [pc, #20]	; (800bd04 <fiprintf+0x20>)
 800bcee:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf2:	6800      	ldr	r0, [r0, #0]
 800bcf4:	9301      	str	r3, [sp, #4]
 800bcf6:	f7ff fde9 	bl	800b8cc <_vfiprintf_r>
 800bcfa:	b002      	add	sp, #8
 800bcfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd00:	b003      	add	sp, #12
 800bd02:	4770      	bx	lr
 800bd04:	20000024 	.word	0x20000024

0800bd08 <_fstat_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4d07      	ldr	r5, [pc, #28]	; (800bd28 <_fstat_r+0x20>)
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	4604      	mov	r4, r0
 800bd10:	4608      	mov	r0, r1
 800bd12:	4611      	mov	r1, r2
 800bd14:	602b      	str	r3, [r5, #0]
 800bd16:	f7f7 f84e 	bl	8002db6 <_fstat>
 800bd1a:	1c43      	adds	r3, r0, #1
 800bd1c:	d102      	bne.n	800bd24 <_fstat_r+0x1c>
 800bd1e:	682b      	ldr	r3, [r5, #0]
 800bd20:	b103      	cbz	r3, 800bd24 <_fstat_r+0x1c>
 800bd22:	6023      	str	r3, [r4, #0]
 800bd24:	bd38      	pop	{r3, r4, r5, pc}
 800bd26:	bf00      	nop
 800bd28:	20002b7c 	.word	0x20002b7c

0800bd2c <_isatty_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d06      	ldr	r5, [pc, #24]	; (800bd48 <_isatty_r+0x1c>)
 800bd30:	2300      	movs	r3, #0
 800bd32:	4604      	mov	r4, r0
 800bd34:	4608      	mov	r0, r1
 800bd36:	602b      	str	r3, [r5, #0]
 800bd38:	f7f7 f84d 	bl	8002dd6 <_isatty>
 800bd3c:	1c43      	adds	r3, r0, #1
 800bd3e:	d102      	bne.n	800bd46 <_isatty_r+0x1a>
 800bd40:	682b      	ldr	r3, [r5, #0]
 800bd42:	b103      	cbz	r3, 800bd46 <_isatty_r+0x1a>
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	20002b7c 	.word	0x20002b7c

0800bd4c <_lseek_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4d07      	ldr	r5, [pc, #28]	; (800bd6c <_lseek_r+0x20>)
 800bd50:	4604      	mov	r4, r0
 800bd52:	4608      	mov	r0, r1
 800bd54:	4611      	mov	r1, r2
 800bd56:	2200      	movs	r2, #0
 800bd58:	602a      	str	r2, [r5, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	f7f7 f846 	bl	8002dec <_lseek>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_lseek_r+0x1e>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_lseek_r+0x1e>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	20002b7c 	.word	0x20002b7c

0800bd70 <__ascii_mbtowc>:
 800bd70:	b082      	sub	sp, #8
 800bd72:	b901      	cbnz	r1, 800bd76 <__ascii_mbtowc+0x6>
 800bd74:	a901      	add	r1, sp, #4
 800bd76:	b142      	cbz	r2, 800bd8a <__ascii_mbtowc+0x1a>
 800bd78:	b14b      	cbz	r3, 800bd8e <__ascii_mbtowc+0x1e>
 800bd7a:	7813      	ldrb	r3, [r2, #0]
 800bd7c:	600b      	str	r3, [r1, #0]
 800bd7e:	7812      	ldrb	r2, [r2, #0]
 800bd80:	1e10      	subs	r0, r2, #0
 800bd82:	bf18      	it	ne
 800bd84:	2001      	movne	r0, #1
 800bd86:	b002      	add	sp, #8
 800bd88:	4770      	bx	lr
 800bd8a:	4610      	mov	r0, r2
 800bd8c:	e7fb      	b.n	800bd86 <__ascii_mbtowc+0x16>
 800bd8e:	f06f 0001 	mvn.w	r0, #1
 800bd92:	e7f8      	b.n	800bd86 <__ascii_mbtowc+0x16>

0800bd94 <__malloc_lock>:
 800bd94:	4801      	ldr	r0, [pc, #4]	; (800bd9c <__malloc_lock+0x8>)
 800bd96:	f7ff b886 	b.w	800aea6 <__retarget_lock_acquire_recursive>
 800bd9a:	bf00      	nop
 800bd9c:	20002b70 	.word	0x20002b70

0800bda0 <__malloc_unlock>:
 800bda0:	4801      	ldr	r0, [pc, #4]	; (800bda8 <__malloc_unlock+0x8>)
 800bda2:	f7ff b881 	b.w	800aea8 <__retarget_lock_release_recursive>
 800bda6:	bf00      	nop
 800bda8:	20002b70 	.word	0x20002b70

0800bdac <_read_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4d07      	ldr	r5, [pc, #28]	; (800bdcc <_read_r+0x20>)
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	4608      	mov	r0, r1
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	602a      	str	r2, [r5, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f7f6 ffd2 	bl	8002d64 <_read>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_read_r+0x1e>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_read_r+0x1e>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	20002b7c 	.word	0x20002b7c

0800bdd0 <__ascii_wctomb>:
 800bdd0:	b149      	cbz	r1, 800bde6 <__ascii_wctomb+0x16>
 800bdd2:	2aff      	cmp	r2, #255	; 0xff
 800bdd4:	bf85      	ittet	hi
 800bdd6:	238a      	movhi	r3, #138	; 0x8a
 800bdd8:	6003      	strhi	r3, [r0, #0]
 800bdda:	700a      	strbls	r2, [r1, #0]
 800bddc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bde0:	bf98      	it	ls
 800bde2:	2001      	movls	r0, #1
 800bde4:	4770      	bx	lr
 800bde6:	4608      	mov	r0, r1
 800bde8:	4770      	bx	lr

0800bdea <abort>:
 800bdea:	b508      	push	{r3, lr}
 800bdec:	2006      	movs	r0, #6
 800bdee:	f000 f82b 	bl	800be48 <raise>
 800bdf2:	2001      	movs	r0, #1
 800bdf4:	f7f6 ffac 	bl	8002d50 <_exit>

0800bdf8 <_raise_r>:
 800bdf8:	291f      	cmp	r1, #31
 800bdfa:	b538      	push	{r3, r4, r5, lr}
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	460d      	mov	r5, r1
 800be00:	d904      	bls.n	800be0c <_raise_r+0x14>
 800be02:	2316      	movs	r3, #22
 800be04:	6003      	str	r3, [r0, #0]
 800be06:	f04f 30ff 	mov.w	r0, #4294967295
 800be0a:	bd38      	pop	{r3, r4, r5, pc}
 800be0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be0e:	b112      	cbz	r2, 800be16 <_raise_r+0x1e>
 800be10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be14:	b94b      	cbnz	r3, 800be2a <_raise_r+0x32>
 800be16:	4620      	mov	r0, r4
 800be18:	f000 f830 	bl	800be7c <_getpid_r>
 800be1c:	462a      	mov	r2, r5
 800be1e:	4601      	mov	r1, r0
 800be20:	4620      	mov	r0, r4
 800be22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be26:	f000 b817 	b.w	800be58 <_kill_r>
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d00a      	beq.n	800be44 <_raise_r+0x4c>
 800be2e:	1c59      	adds	r1, r3, #1
 800be30:	d103      	bne.n	800be3a <_raise_r+0x42>
 800be32:	2316      	movs	r3, #22
 800be34:	6003      	str	r3, [r0, #0]
 800be36:	2001      	movs	r0, #1
 800be38:	e7e7      	b.n	800be0a <_raise_r+0x12>
 800be3a:	2400      	movs	r4, #0
 800be3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be40:	4628      	mov	r0, r5
 800be42:	4798      	blx	r3
 800be44:	2000      	movs	r0, #0
 800be46:	e7e0      	b.n	800be0a <_raise_r+0x12>

0800be48 <raise>:
 800be48:	4b02      	ldr	r3, [pc, #8]	; (800be54 <raise+0xc>)
 800be4a:	4601      	mov	r1, r0
 800be4c:	6818      	ldr	r0, [r3, #0]
 800be4e:	f7ff bfd3 	b.w	800bdf8 <_raise_r>
 800be52:	bf00      	nop
 800be54:	20000024 	.word	0x20000024

0800be58 <_kill_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	4d07      	ldr	r5, [pc, #28]	; (800be78 <_kill_r+0x20>)
 800be5c:	2300      	movs	r3, #0
 800be5e:	4604      	mov	r4, r0
 800be60:	4608      	mov	r0, r1
 800be62:	4611      	mov	r1, r2
 800be64:	602b      	str	r3, [r5, #0]
 800be66:	f7f6 ff63 	bl	8002d30 <_kill>
 800be6a:	1c43      	adds	r3, r0, #1
 800be6c:	d102      	bne.n	800be74 <_kill_r+0x1c>
 800be6e:	682b      	ldr	r3, [r5, #0]
 800be70:	b103      	cbz	r3, 800be74 <_kill_r+0x1c>
 800be72:	6023      	str	r3, [r4, #0]
 800be74:	bd38      	pop	{r3, r4, r5, pc}
 800be76:	bf00      	nop
 800be78:	20002b7c 	.word	0x20002b7c

0800be7c <_getpid_r>:
 800be7c:	f7f6 bf50 	b.w	8002d20 <_getpid>

0800be80 <_init>:
 800be80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be82:	bf00      	nop
 800be84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be86:	bc08      	pop	{r3}
 800be88:	469e      	mov	lr, r3
 800be8a:	4770      	bx	lr

0800be8c <_fini>:
 800be8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8e:	bf00      	nop
 800be90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be92:	bc08      	pop	{r3}
 800be94:	469e      	mov	lr, r3
 800be96:	4770      	bx	lr

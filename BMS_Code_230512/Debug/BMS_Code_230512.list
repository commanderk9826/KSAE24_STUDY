
BMS_Code_230512.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae18  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800afb0  0800afb0  0001afb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aff0  0800aff0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800aff0  0800aff0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aff0  0800aff0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aff0  0800aff0  0001aff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aff4  0800aff4  0001aff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800aff8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae0  2000002c  0800b024  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b0c  0800b024  00020b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a1d  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd7  00000000  00000000  00035a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00038850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  00039c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ed9  00000000  00000000  0003ae48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001818d  00000000  00000000  0005fd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e75d1  00000000  00000000  00077eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f47f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a8  00000000  00000000  0015f4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800af98 	.word	0x0800af98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	0800af98 	.word	0x0800af98

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 80009cc:	4a37      	ldr	r2, [pc, #220]	; (8000aac <MX_ADC1_Init+0xf8>)
 80009ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 80009d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009d8:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009de:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 80009ec:	2204      	movs	r2, #4
 80009ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009f0:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 80009fe:	2203      	movs	r2, #3
 8000a00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0a:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a2c:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 8000a2e:	f004 fd37 	bl	80054a0 <HAL_ADC_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000a38:	f003 fd2e 	bl	8004498 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_ADC1_Init+0xfc>)
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a40:	2306      	movs	r3, #6
 8000a42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000a44:	2303      	movs	r3, #3
 8000a46:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a48:	237f      	movs	r3, #127	; 0x7f
 8000a4a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 8000a5a:	f004 ff71 	bl	8005940 <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000a64:	f003 fd18 	bl	8004498 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_ADC1_Init+0x100>)
 8000a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 8000a76:	f004 ff63 	bl	8005940 <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000a80:	f003 fd0a 	bl	8004498 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_ADC1_Init+0x104>)
 8000a86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a88:	2312      	movs	r3, #18
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_ADC1_Init+0xf4>)
 8000a92:	f004 ff55 	bl	8005940 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000a9c:	f003 fcfc 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000048 	.word	0x20000048
 8000aac:	50040000 	.word	0x50040000
 8000ab0:	0c900008 	.word	0x0c900008
 8000ab4:	10c00010 	.word	0x10c00010
 8000ab8:	36902000 	.word	0x36902000

08000abc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0a4      	sub	sp, #144	; 0x90
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2268      	movs	r2, #104	; 0x68
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f00a fa53 	bl	800af88 <memset>
  if(adcHandle->Instance==ADC1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a3b      	ldr	r2, [pc, #236]	; (8000bd4 <HAL_ADC_MspInit+0x118>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d16f      	bne.n	8000bcc <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000af0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000af2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000af6:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b00:	2308      	movs	r3, #8
 8000b02:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b04:	2307      	movs	r3, #7
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f007 fbe8 	bl	80082f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b26:	f003 fcb7 	bl	8004498 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <HAL_ADC_MspInit+0x11c>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <HAL_ADC_MspInit+0x11c>)
 8000b30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <HAL_ADC_MspInit+0x11c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <HAL_ADC_MspInit+0x11c>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	4a24      	ldr	r2, [pc, #144]	; (8000bd8 <HAL_ADC_MspInit+0x11c>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <HAL_ADC_MspInit+0x11c>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000b5a:	231c      	movs	r3, #28
 8000b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b5e:	230b      	movs	r3, #11
 8000b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481a      	ldr	r0, [pc, #104]	; (8000bdc <HAL_ADC_MspInit+0x120>)
 8000b72:	f006 fbad 	bl	80072d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000b78:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <HAL_ADC_MspInit+0x128>)
 8000b7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000bb2:	f006 f917 	bl	8006de4 <HAL_DMA_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000bbc:	f003 fc6c 	bl	8004498 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000bc4:	651a      	str	r2, [r3, #80]	; 0x50
 8000bc6:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_ADC_MspInit+0x124>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3790      	adds	r7, #144	; 0x90
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	50040000 	.word	0x50040000
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000800 	.word	0x48000800
 8000be0:	200000b0 	.word	0x200000b0
 8000be4:	40020008 	.word	0x40020008

08000be8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000bee:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <MX_CAN1_Init+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000bf4:	2214      	movs	r2, #20
 8000bf6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000c06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c0a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000c0e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000c12:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_CAN1_Init+0x64>)
 8000c3a:	f005 fcb2 	bl	80065a2 <HAL_CAN_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c44:	f003 fc28 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000f8 	.word	0x200000f8
 8000c50:	40006400 	.word	0x40006400

08000c54 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_CAN_MspInit+0x7c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d128      	bne.n	8000cc8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_CAN_MspInit+0x80>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <HAL_CAN_MspInit+0x80>)
 8000c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c80:	6593      	str	r3, [r2, #88]	; 0x58
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_CAN_MspInit+0x80>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_CAN_MspInit+0x80>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_CAN_MspInit+0x80>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_CAN_MspInit+0x80>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ca6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000cb8:	230a      	movs	r3, #10
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_CAN_MspInit+0x84>)
 8000cc4:	f006 fb04 	bl	80072d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40006400 	.word	0x40006400
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000400 	.word	0x48000400

08000cdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_DMA_Init+0x38>)
 8000ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <MX_DMA_Init+0x38>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6493      	str	r3, [r2, #72]	; 0x48
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_DMA_Init+0x38>)
 8000cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	200b      	movs	r0, #11
 8000d00:	f006 f839 	bl	8006d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d04:	200b      	movs	r0, #11
 8000d06:	f006 f852 	bl	8006dae <HAL_NVIC_EnableIRQ>

}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <MX_GPIO_Init+0x10c>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	4a3c      	ldr	r2, [pc, #240]	; (8000e24 <MX_GPIO_Init+0x10c>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <MX_GPIO_Init+0x10c>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <MX_GPIO_Init+0x10c>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a36      	ldr	r2, [pc, #216]	; (8000e24 <MX_GPIO_Init+0x10c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <MX_GPIO_Init+0x10c>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <MX_GPIO_Init+0x10c>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <MX_GPIO_Init+0x10c>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <MX_GPIO_Init+0x10c>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS1_Pin|SPI1_NSS2_Pin, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2130      	movs	r1, #48	; 0x30
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f006 fc21 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2104      	movs	r1, #4
 8000d86:	4828      	ldr	r0, [pc, #160]	; (8000e28 <MX_GPIO_Init+0x110>)
 8000d88:	f006 fc1c 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|A1_Pin|A2_Pin|A3_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 8000d92:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_GPIO_Init+0x114>)
 8000d94:	f006 fc16 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT_GPIO_Port, STAT_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9e:	4823      	ldr	r0, [pc, #140]	; (8000e2c <MX_GPIO_Init+0x114>)
 8000da0:	f006 fc10 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_NSS1_Pin|SPI1_NSS2_Pin;
 8000da4:	2330      	movs	r3, #48	; 0x30
 8000da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f006 fa87 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4813      	ldr	r0, [pc, #76]	; (8000e28 <MX_GPIO_Init+0x110>)
 8000dda:	f006 fa79 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin;
 8000dde:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8000de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_GPIO_Init+0x114>)
 8000df8:	f006 fa6a 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STAT_Pin;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STAT_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_GPIO_Init+0x114>)
 8000e16:	f006 fa5b 	bl	80072d0 <HAL_GPIO_Init>

}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	48000800 	.word	0x48000800

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f004 f86c 	bl	8004f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f87e 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f7ff ff6c 	bl	8000d18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e40:	f7ff ff4c 	bl	8000cdc <MX_DMA_Init>
  MX_ADC1_Init();
 8000e44:	f7ff fdb6 	bl	80009b4 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000e48:	f7ff fece 	bl	8000be8 <MX_CAN1_Init>
  MX_TIM6_Init();
 8000e4c:	f003 fdf8 	bl	8004a40 <MX_TIM6_Init>
  MX_SPI1_Init();
 8000e50:	f003 fb28 	bl	80044a4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e54:	f003 fc44 	bl	80046e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e58:	f003 fd06 	bl	8004868 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e5c:	f003 fd68 	bl	8004930 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000e60:	f003 fe26 	bl	8004ab0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000e64:	f003 fe88 	bl	8004b78 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000e68:	4828      	ldr	r0, [pc, #160]	; (8000f0c <main+0xdc>)
 8000e6a:	f008 fb85 	bl	8009578 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim16);
 8000e6e:	4828      	ldr	r0, [pc, #160]	; (8000f10 <main+0xe0>)
 8000e70:	f008 fb2e 	bl	80094d0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000e74:	2100      	movs	r1, #0
 8000e76:	4827      	ldr	r0, [pc, #156]	; (8000f14 <main+0xe4>)
 8000e78:	f008 fd70 	bl	800995c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	4825      	ldr	r0, [pc, #148]	; (8000f14 <main+0xe4>)
 8000e80:	f008 fd6c 	bl	800995c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000e84:	2108      	movs	r1, #8
 8000e86:	4823      	ldr	r0, [pc, #140]	; (8000f14 <main+0xe4>)
 8000e88:	f008 fd68 	bl	800995c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4822      	ldr	r0, [pc, #136]	; (8000f18 <main+0xe8>)
 8000e90:	f008 fd64 	bl	800995c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 8000e94:	2104      	movs	r1, #4
 8000e96:	4820      	ldr	r0, [pc, #128]	; (8000f18 <main+0xe8>)
 8000e98:	f008 fd60 	bl	800995c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	481f      	ldr	r0, [pc, #124]	; (8000f1c <main+0xec>)
 8000ea0:	f008 fc1e 	bl	80096e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	481d      	ldr	r0, [pc, #116]	; (8000f1c <main+0xec>)
 8000ea8:	f008 fc1a 	bl	80096e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000eac:	2108      	movs	r1, #8
 8000eae:	481b      	ldr	r0, [pc, #108]	; (8000f1c <main+0xec>)
 8000eb0:	f008 fc16 	bl	80096e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	481a      	ldr	r0, [pc, #104]	; (8000f20 <main+0xf0>)
 8000eb8:	f008 fc12 	bl	80096e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ebc:	210c      	movs	r1, #12
 8000ebe:	4818      	ldr	r0, [pc, #96]	; (8000f20 <main+0xf0>)
 8000ec0:	f008 fc0e 	bl	80096e0 <HAL_TIM_PWM_Start>


  SLAVEBMS_InitCRCTable();
 8000ec4:	f000 f89c 	bl	8001000 <SLAVEBMS_InitCRCTable>

  Reading_Voltage_Config();
 8000ec8:	f000 fb22 	bl	8001510 <Reading_Voltage_Config>

  CAN_TX_Config(&TxHeader1, 0x01);
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4815      	ldr	r0, [pc, #84]	; (8000f24 <main+0xf4>)
 8000ed0:	f002 fd74 	bl	80039bc <CAN_TX_Config>

  CAN_TX_Config(&TxHeader2, 0x02);
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <main+0xf8>)
 8000ed8:	f002 fd70 	bl	80039bc <CAN_TX_Config>

  CAN_TX_Config(&TxHeader3, 0x03);
 8000edc:	2103      	movs	r1, #3
 8000ede:	4813      	ldr	r0, [pc, #76]	; (8000f2c <main+0xfc>)
 8000ee0:	f002 fd6c 	bl	80039bc <CAN_TX_Config>

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000ee4:	4912      	ldr	r1, [pc, #72]	; (8000f30 <main+0x100>)
 8000ee6:	4813      	ldr	r0, [pc, #76]	; (8000f34 <main+0x104>)
 8000ee8:	f005 fc56 	bl	8006798 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 8000eec:	4811      	ldr	r0, [pc, #68]	; (8000f34 <main+0x104>)
 8000eee:	f005 fd1d 	bl	800692c <HAL_CAN_Start>

  //S_balance();  // Turn ON during Balancing

  //SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_MUTE);  // Turn ON during Balancing

  HAL_Delay(2);
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f004 f888 	bl	8005008 <HAL_Delay>

  Reading_Voltage(); //SLAVEBMS A ~ E
 8000ef8:	f000 fcb6 	bl	8001868 <Reading_Voltage>

  Voltage_MinMax(); //Max & Min Voltage
 8000efc:	f002 fd98 	bl	8003a30 <Voltage_MinMax>

	  //Voltage_Rise_Sense(); //with voltage

	  //Voltage_Drop_Sense();  //Monitoring low voltage(2.5V)

	  Reading_Temp();  //Measuring  Battery Temperature
 8000f00:	f002 fa54 	bl	80033ac <Reading_Temp>

	  //Temp_Error();
	  calc_RPM();
 8000f04:	f003 f8d4 	bl	80040b0 <calc_RPM>
	  Reading_Temp();  //Measuring  Battery Temperature
 8000f08:	e7fa      	b.n	8000f00 <main+0xd0>
 8000f0a:	bf00      	nop
 8000f0c:	20000a24 	.word	0x20000a24
 8000f10:	20000abc 	.word	0x20000abc
 8000f14:	200009d8 	.word	0x200009d8
 8000f18:	20000a70 	.word	0x20000a70
 8000f1c:	20000940 	.word	0x20000940
 8000f20:	2000098c 	.word	0x2000098c
 8000f24:	20000120 	.word	0x20000120
 8000f28:	20000138 	.word	0x20000138
 8000f2c:	20000150 	.word	0x20000150
 8000f30:	20000168 	.word	0x20000168
 8000f34:	200000f8 	.word	0x200000f8

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b096      	sub	sp, #88	; 0x58
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2244      	movs	r2, #68	; 0x44
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00a f81e 	bl	800af88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f5e:	f006 fb71 	bl	8007644 <HAL_PWREx_ControlVoltageScaling>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f68:	f003 fa96 	bl	8004498 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f86:	230a      	movs	r3, #10
 8000f88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f006 fba8 	bl	80076f0 <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fa6:	f003 fa77 	bl	8004498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f006 ffa8 	bl	8007f18 <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fce:	f003 fa63 	bl	8004498 <Error_Handler>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3758      	adds	r7, #88	; 0x58
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <Delay_>:

/* USER CODE BEGIN 4 */
void Delay_(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
	volatile unsigned long Delay = 4444;
 8000fe0:	f241 135c 	movw	r3, #4444	; 0x115c
 8000fe4:	607b      	str	r3, [r7, #4]
	while(Delay--);
 8000fe6:	bf00      	nop
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1fa      	bne.n	8000fe8 <Delay_+0xe>
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SLAVEBMS_InitCRCTable>:

void SLAVEBMS_InitCRCTable(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
	unsigned short Indicator = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	80fb      	strh	r3, [r7, #6]
	unsigned short Bit;
	unsigned short PEC;

	for(Indicator = 0U; Indicator < 256; Indicator++)
 800100a:	2300      	movs	r3, #0
 800100c:	80fb      	strh	r3, [r7, #6]
 800100e:	e025      	b.n	800105c <SLAVEBMS_InitCRCTable+0x5c>
	{
		PEC = Indicator << 7U;
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	01db      	lsls	r3, r3, #7
 8001014:	807b      	strh	r3, [r7, #2]
		for(Bit = 8U; Bit > 0; --Bit)
 8001016:	2308      	movs	r3, #8
 8001018:	80bb      	strh	r3, [r7, #4]
 800101a:	e014      	b.n	8001046 <SLAVEBMS_InitCRCTable+0x46>
		{
			if(PEC & 0x4000)
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d009      	beq.n	800103a <SLAVEBMS_InitCRCTable+0x3a>
			{
				PEC = (PEC << 1U);
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	807b      	strh	r3, [r7, #2]
				PEC = (PEC ^ (unsigned short)(0x4599));
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 8001032:	f083 0319 	eor.w	r3, r3, #25
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	e002      	b.n	8001040 <SLAVEBMS_InitCRCTable+0x40>
			}
			else
			{
				PEC = (PEC << 1U);
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	807b      	strh	r3, [r7, #2]
		for(Bit = 8U; Bit > 0; --Bit)
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	80bb      	strh	r3, [r7, #4]
 8001046:	88bb      	ldrh	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e7      	bne.n	800101c <SLAVEBMS_InitCRCTable+0x1c>
			}
		}
		SLAVEBMS_CRC_Table[Indicator] = PEC & 0xFFFF;
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <SLAVEBMS_InitCRCTable+0x70>)
 8001050:	887a      	ldrh	r2, [r7, #2]
 8001052:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(Indicator = 0U; Indicator < 256; Indicator++)
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	3301      	adds	r3, #1
 800105a:	80fb      	strh	r3, [r7, #6]
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	2bff      	cmp	r3, #255	; 0xff
 8001060:	d9d6      	bls.n	8001010 <SLAVEBMS_InitCRCTable+0x10>
	}
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	200006dc 	.word	0x200006dc

08001074 <SLAVEBMS_CRC_calc>:

unsigned short SLAVEBMS_CRC_calc(unsigned char len, unsigned char *data)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
	unsigned short Indicator;
	unsigned short PEC;
	unsigned short address;

	PEC = 16;
 8001080:	2310      	movs	r3, #16
 8001082:	81bb      	strh	r3, [r7, #12]
	for(Indicator = 0; Indicator < len; Indicator++)
 8001084:	2300      	movs	r3, #0
 8001086:	81fb      	strh	r3, [r7, #14]
 8001088:	e019      	b.n	80010be <SLAVEBMS_CRC_calc+0x4a>
	{
		address = ((PEC >> 7) ^ data[Indicator]) & 0xff;
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	09db      	lsrs	r3, r3, #7
 800108e:	b29a      	uxth	r2, r3
 8001090:	89fb      	ldrh	r3, [r7, #14]
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	440b      	add	r3, r1
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	4053      	eors	r3, r2
 800109c:	b29b      	uxth	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	817b      	strh	r3, [r7, #10]
		PEC = (PEC << 8) ^ SLAVEBMS_CRC_Table[address];
 80010a2:	89bb      	ldrh	r3, [r7, #12]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	897b      	ldrh	r3, [r7, #10]
 80010aa:	490c      	ldr	r1, [pc, #48]	; (80010dc <SLAVEBMS_CRC_calc+0x68>)
 80010ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4053      	eors	r3, r2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	81bb      	strh	r3, [r7, #12]
	for(Indicator = 0; Indicator < len; Indicator++)
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	3301      	adds	r3, #1
 80010bc:	81fb      	strh	r3, [r7, #14]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	89fa      	ldrh	r2, [r7, #14]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d3e0      	bcc.n	800108a <SLAVEBMS_CRC_calc+0x16>
	}

	return (PEC*2);
 80010c8:	89bb      	ldrh	r3, [r7, #12]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	b29b      	uxth	r3, r3
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200006dc 	.word	0x200006dc

080010e0 <SLAVEBMS_Access>:

unsigned char SLAVEBMS_Access(unsigned char Value)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi1, &Value, &Value, 1, 10);
 80010ea:	1dfa      	adds	r2, r7, #7
 80010ec:	1df9      	adds	r1, r7, #7
 80010ee:	230a      	movs	r3, #10
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <SLAVEBMS_Access+0x24>)
 80010f6:	f007 fcfc 	bl	8008af2 <HAL_SPI_TransmitReceive>
	return (unsigned char)(Value);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200008dc 	.word	0x200008dc

08001108 <SLAVEBMS_Wakeup>:

void SLAVEBMS_Wakeup(unsigned char direction)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	if(direction == SLAVEBMSACCESS_FWD)
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d112      	bne.n	800113e <SLAVEBMS_Wakeup+0x36>
	{
		SLAVEBMSFORWARD_CS_L();
 8001118:	2200      	movs	r2, #0
 800111a:	2110      	movs	r1, #16
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f006 fa50 	bl	80075c4 <HAL_GPIO_WritePin>
		SLAVEBMS_Access(0x00);
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff ffdb 	bl	80010e0 <SLAVEBMS_Access>
		SLAVEBMS_Access(0x00);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff ffd8 	bl	80010e0 <SLAVEBMS_Access>
		SLAVEBMSFORWARD_CS_H();
 8001130:	2201      	movs	r2, #1
 8001132:	2110      	movs	r1, #16
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f006 fa44 	bl	80075c4 <HAL_GPIO_WritePin>
		SLAVEBMSREVERSE_CS_L();
		SLAVEBMS_Access(0x00);
		SLAVEBMS_Access(0x00);
		SLAVEBMSREVERSE_CS_H();
	}
}
 800113c:	e014      	b.n	8001168 <SLAVEBMS_Wakeup+0x60>
	else if(direction == SLAVEBMSACCESS_REV)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d111      	bne.n	8001168 <SLAVEBMS_Wakeup+0x60>
		SLAVEBMSREVERSE_CS_L();
 8001144:	2200      	movs	r2, #0
 8001146:	2110      	movs	r1, #16
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f006 fa3a 	bl	80075c4 <HAL_GPIO_WritePin>
		SLAVEBMS_Access(0x00);
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff ffc5 	bl	80010e0 <SLAVEBMS_Access>
		SLAVEBMS_Access(0x00);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ffc2 	bl	80010e0 <SLAVEBMS_Access>
		SLAVEBMSREVERSE_CS_H();
 800115c:	2201      	movs	r2, #1
 800115e:	2110      	movs	r1, #16
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f006 fa2e 	bl	80075c4 <HAL_GPIO_WritePin>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <SLAVEBMS_ReadDataGroup>:

unsigned char SLAVEBMS_ReadDataGroup(unsigned char direction, unsigned short Order, unsigned char Counting, unsigned char *BF)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	460b      	mov	r3, r1
 800117e:	80bb      	strh	r3, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	71bb      	strb	r3, [r7, #6]
	unsigned char TX_BF[4U];
	unsigned short CRC_calc;
	unsigned short CRC_extracted;
	unsigned char Indicator;
	unsigned char ReadCount = Counting * 8U;
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	75bb      	strb	r3, [r7, #22]

	for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 800118a:	2300      	movs	r3, #0
 800118c:	75fb      	strb	r3, [r7, #23]
 800118e:	e007      	b.n	80011a0 <SLAVEBMS_ReadDataGroup+0x30>
	{
		*(BF + Indicator) = 0x00;
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
	for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	3301      	adds	r3, #1
 800119e:	75fb      	strb	r3, [r7, #23]
 80011a0:	7dfa      	ldrb	r2, [r7, #23]
 80011a2:	7dbb      	ldrb	r3, [r7, #22]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d3f3      	bcc.n	8001190 <SLAVEBMS_ReadDataGroup+0x20>
	}

	TX_BF[0U] = (unsigned char)((Order >> 8U) & 0x00FFU);
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	733b      	strb	r3, [r7, #12]
	TX_BF[1U] = (unsigned char)((Order >> 0U) & 0x00FFU);
 80011b2:	88bb      	ldrh	r3, [r7, #4]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	737b      	strb	r3, [r7, #13]
	CRC_calc = SLAVEBMS_CRC_calc(2U, TX_BF);
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4619      	mov	r1, r3
 80011be:	2002      	movs	r0, #2
 80011c0:	f7ff ff58 	bl	8001074 <SLAVEBMS_CRC_calc>
 80011c4:	4603      	mov	r3, r0
 80011c6:	82bb      	strh	r3, [r7, #20]
	TX_BF[2U] = (unsigned char)((CRC_calc >> 8U) & 0x00FFU);
 80011c8:	8abb      	ldrh	r3, [r7, #20]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	73bb      	strb	r3, [r7, #14]
	TX_BF[3U] = (unsigned char)((CRC_calc >> 0U) & 0x00FFU);
 80011d2:	8abb      	ldrh	r3, [r7, #20]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	73fb      	strb	r3, [r7, #15]

	if(direction == SLAVEBMSACCESS_FWD)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d131      	bne.n	8001242 <SLAVEBMS_ReadDataGroup+0xd2>
	{
		SLAVEBMSFORWARD_CS_L();
 80011de:	2200      	movs	r2, #0
 80011e0:	2110      	movs	r1, #16
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f006 f9ed 	bl	80075c4 <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	e00a      	b.n	8001206 <SLAVEBMS_ReadDataGroup+0x96>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	3318      	adds	r3, #24
 80011f4:	443b      	add	r3, r7
 80011f6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff70 	bl	80010e0 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	3301      	adds	r3, #1
 8001204:	75fb      	strb	r3, [r7, #23]
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d9f1      	bls.n	80011f0 <SLAVEBMS_ReadDataGroup+0x80>
		}
		Delay_();
 800120c:	f7ff fee5 	bl	8000fda <Delay_>
		for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]
 8001214:	e00a      	b.n	800122c <SLAVEBMS_ReadDataGroup+0xbc>
		{
			*(BF + Indicator) = SLAVEBMS_Access((unsigned char)(0x00));
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	18d4      	adds	r4, r2, r3
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff ff5f 	bl	80010e0 <SLAVEBMS_Access>
 8001222:	4603      	mov	r3, r0
 8001224:	7023      	strb	r3, [r4, #0]
		for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 8001226:	7dfb      	ldrb	r3, [r7, #23]
 8001228:	3301      	adds	r3, #1
 800122a:	75fb      	strb	r3, [r7, #23]
 800122c:	7dfa      	ldrb	r2, [r7, #23]
 800122e:	7dbb      	ldrb	r3, [r7, #22]
 8001230:	429a      	cmp	r2, r3
 8001232:	d3f0      	bcc.n	8001216 <SLAVEBMS_ReadDataGroup+0xa6>
		}
		SLAVEBMSFORWARD_CS_H();
 8001234:	2201      	movs	r2, #1
 8001236:	2110      	movs	r1, #16
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f006 f9c2 	bl	80075c4 <HAL_GPIO_WritePin>
 8001240:	e033      	b.n	80012aa <SLAVEBMS_ReadDataGroup+0x13a>
	}
	else if(direction == SLAVEBMSACCESS_REV)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d130      	bne.n	80012aa <SLAVEBMS_ReadDataGroup+0x13a>
	{
		SLAVEBMSREVERSE_CS_L();
 8001248:	2200      	movs	r2, #0
 800124a:	2110      	movs	r1, #16
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f006 f9b8 	bl	80075c4 <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8001254:	2300      	movs	r3, #0
 8001256:	75fb      	strb	r3, [r7, #23]
 8001258:	e00a      	b.n	8001270 <SLAVEBMS_ReadDataGroup+0x100>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	3318      	adds	r3, #24
 800125e:	443b      	add	r3, r7
 8001260:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff3b 	bl	80010e0 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	3301      	adds	r3, #1
 800126e:	75fb      	strb	r3, [r7, #23]
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d9f1      	bls.n	800125a <SLAVEBMS_ReadDataGroup+0xea>
		}
		Delay_();
 8001276:	f7ff feb0 	bl	8000fda <Delay_>
		for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 800127a:	2300      	movs	r3, #0
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e00a      	b.n	8001296 <SLAVEBMS_ReadDataGroup+0x126>
		{
			*(BF + Indicator) = SLAVEBMS_Access((unsigned char)(0x00));
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	18d4      	adds	r4, r2, r3
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ff2a 	bl	80010e0 <SLAVEBMS_Access>
 800128c:	4603      	mov	r3, r0
 800128e:	7023      	strb	r3, [r4, #0]
		for(Indicator = 0U; Indicator < ReadCount; Indicator++)
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	3301      	adds	r3, #1
 8001294:	75fb      	strb	r3, [r7, #23]
 8001296:	7dfa      	ldrb	r2, [r7, #23]
 8001298:	7dbb      	ldrb	r3, [r7, #22]
 800129a:	429a      	cmp	r2, r3
 800129c:	d3f0      	bcc.n	8001280 <SLAVEBMS_ReadDataGroup+0x110>
		}
		SLAVEBMSREVERSE_CS_H();
 800129e:	2201      	movs	r2, #1
 80012a0:	2110      	movs	r1, #16
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f006 f98d 	bl	80075c4 <HAL_GPIO_WritePin>
	}

	for(Indicator = 0U; Indicator < Counting; Indicator++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
 80012ae:	e025      	b.n	80012fc <SLAVEBMS_ReadDataGroup+0x18c>
	{
		CRC_calc = SLAVEBMS_CRC_calc(6U, (BF + (Indicator * 8U)));
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	2006      	movs	r0, #6
 80012bc:	f7ff feda 	bl	8001074 <SLAVEBMS_CRC_calc>
 80012c0:	4603      	mov	r3, r0
 80012c2:	82bb      	strh	r3, [r7, #20]
		CRC_extracted = ((unsigned short)(*(BF + (Indicator * 8U) + 6)) << 8);
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	3306      	adds	r3, #6
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	827b      	strh	r3, [r7, #18]
		CRC_extracted |= *(BF + (Indicator * 8U) + 7);
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	3307      	adds	r3, #7
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	8a7b      	ldrh	r3, [r7, #18]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	827b      	strh	r3, [r7, #18]

		if(CRC_calc != CRC_extracted)
 80012ea:	8aba      	ldrh	r2, [r7, #20]
 80012ec:	8a7b      	ldrh	r3, [r7, #18]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d001      	beq.n	80012f6 <SLAVEBMS_ReadDataGroup+0x186>
		{
			return SLAVEBMSACCESS_CRC_MISMATCH;
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	e007      	b.n	8001306 <SLAVEBMS_ReadDataGroup+0x196>
	for(Indicator = 0U; Indicator < Counting; Indicator++)
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	3301      	adds	r3, #1
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	7dfa      	ldrb	r2, [r7, #23]
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3d5      	bcc.n	80012b0 <SLAVEBMS_ReadDataGroup+0x140>
		}
	}

	return SLAVEBMSACCESS_CRC_MATCH;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd90      	pop	{r4, r7, pc}

0800130e <SLAVEBMS_WriteSingleCmd>:

void SLAVEBMS_WriteSingleCmd(unsigned char direction, unsigned short RequestCMD)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	460a      	mov	r2, r1
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	4613      	mov	r3, r2
 800131c:	80bb      	strh	r3, [r7, #4]
	unsigned short CRC_calc;
	unsigned char TX_BF[4U];
	unsigned char Indicator;

	TX_BF[0U] = (unsigned char)((RequestCMD >> 8U) & 0x00FFU);
 800131e:	88bb      	ldrh	r3, [r7, #4]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	b29b      	uxth	r3, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	723b      	strb	r3, [r7, #8]
	TX_BF[1U] = (unsigned char)((RequestCMD >> 0U) & 0x00FFU);
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	727b      	strb	r3, [r7, #9]
	CRC_calc = SLAVEBMS_CRC_calc(2U, TX_BF);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4619      	mov	r1, r3
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff fe9d 	bl	8001074 <SLAVEBMS_CRC_calc>
 800133a:	4603      	mov	r3, r0
 800133c:	81bb      	strh	r3, [r7, #12]
	TX_BF[2U] = (unsigned char)((CRC_calc >> 8U) & 0x00FFU);
 800133e:	89bb      	ldrh	r3, [r7, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b29b      	uxth	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	72bb      	strb	r3, [r7, #10]
	TX_BF[3U] = (unsigned char)((CRC_calc >> 0U) & 0x00FFU);
 8001348:	89bb      	ldrh	r3, [r7, #12]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	72fb      	strb	r3, [r7, #11]

	if(direction == SLAVEBMSACCESS_FWD)
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d11d      	bne.n	8001390 <SLAVEBMS_WriteSingleCmd+0x82>
	{
		SLAVEBMSFORWARD_CS_L();
 8001354:	2200      	movs	r2, #0
 8001356:	2110      	movs	r1, #16
 8001358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135c:	f006 f932 	bl	80075c4 <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e00a      	b.n	800137c <SLAVEBMS_WriteSingleCmd+0x6e>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	3310      	adds	r3, #16
 800136a:	443b      	add	r3, r7
 800136c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff feb5 	bl	80010e0 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3301      	adds	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d9f1      	bls.n	8001366 <SLAVEBMS_WriteSingleCmd+0x58>
		}
		SLAVEBMSFORWARD_CS_H();
 8001382:	2201      	movs	r2, #1
 8001384:	2110      	movs	r1, #16
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f006 f91b 	bl	80075c4 <HAL_GPIO_WritePin>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
		}
		SLAVEBMSREVERSE_CS_H();
	}
}
 800138e:	e01f      	b.n	80013d0 <SLAVEBMS_WriteSingleCmd+0xc2>
	else if(direction == SLAVEBMSACCESS_REV)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d11c      	bne.n	80013d0 <SLAVEBMS_WriteSingleCmd+0xc2>
		SLAVEBMSREVERSE_CS_L();
 8001396:	2200      	movs	r2, #0
 8001398:	2110      	movs	r1, #16
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f006 f911 	bl	80075c4 <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	e00a      	b.n	80013be <SLAVEBMS_WriteSingleCmd+0xb0>
			SLAVEBMS_Access(TX_BF[Indicator]);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	3310      	adds	r3, #16
 80013ac:	443b      	add	r3, r7
 80013ae:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fe94 	bl	80010e0 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3301      	adds	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d9f1      	bls.n	80013a8 <SLAVEBMS_WriteSingleCmd+0x9a>
		SLAVEBMSREVERSE_CS_H();
 80013c4:	2201      	movs	r2, #1
 80013c6:	2110      	movs	r1, #16
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f006 f8fa 	bl	80075c4 <HAL_GPIO_WritePin>
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <SLAVEBMS_PollADCDone>:

void SLAVEBMS_PollADCDone(unsigned char direction, unsigned char *Result)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
	unsigned short CRC_calc;
	unsigned char TX_BF[4U];
	unsigned char Indicator;

	TX_BF[0U] = (unsigned char)((SLAVEBMS_CMD_PLADC >> 8U) & 0x00FFU);
 80013e4:	2307      	movs	r3, #7
 80013e6:	723b      	strb	r3, [r7, #8]
	TX_BF[1U] = (unsigned char)((SLAVEBMS_CMD_PLADC >> 0U) & 0x00FFU);
 80013e8:	2314      	movs	r3, #20
 80013ea:	727b      	strb	r3, [r7, #9]
	CRC_calc = SLAVEBMS_CRC_calc(2U, TX_BF);
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	4619      	mov	r1, r3
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff fe3e 	bl	8001074 <SLAVEBMS_CRC_calc>
 80013f8:	4603      	mov	r3, r0
 80013fa:	81bb      	strh	r3, [r7, #12]
	TX_BF[2U] = (unsigned char)((CRC_calc >> 8U) & 0x00FFU);
 80013fc:	89bb      	ldrh	r3, [r7, #12]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b29b      	uxth	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	72bb      	strb	r3, [r7, #10]
	TX_BF[3U] = (unsigned char)((CRC_calc >> 0U) & 0x00FFU);
 8001406:	89bb      	ldrh	r3, [r7, #12]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	72fb      	strb	r3, [r7, #11]

	if(direction == SLAVEBMSACCESS_FWD)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d13b      	bne.n	800148a <SLAVEBMS_PollADCDone+0xb2>
	{
		SLAVEBMSFORWARD_CS_L();
 8001412:	2200      	movs	r2, #0
 8001414:	2110      	movs	r1, #16
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f006 f8d3 	bl	80075c4 <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e00a      	b.n	800143a <SLAVEBMS_PollADCDone+0x62>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3310      	adds	r3, #16
 8001428:	443b      	add	r3, r7
 800142a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fe56 	bl	80010e0 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	3301      	adds	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d9f1      	bls.n	8001424 <SLAVEBMS_PollADCDone+0x4c>
		}
		Indicator = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
		while(1)
		{
			HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f003 fddf 	bl	8005008 <HAL_Delay>
			if(SLAVEBMS_Access((unsigned char)(0xFF)) == (unsigned char)(0xFF))
 800144a:	20ff      	movs	r0, #255	; 0xff
 800144c:	f7ff fe48 	bl	80010e0 <SLAVEBMS_Access>
 8001450:	4603      	mov	r3, r0
 8001452:	2bff      	cmp	r3, #255	; 0xff
 8001454:	d109      	bne.n	800146a <SLAVEBMS_PollADCDone+0x92>
			{
				SLAVEBMSFORWARD_CS_H();
 8001456:	2201      	movs	r2, #1
 8001458:	2110      	movs	r1, #16
 800145a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145e:	f006 f8b1 	bl	80075c4 <HAL_GPIO_WritePin>
				*Result = SLAVEBMSACCESS_CRC_MATCH;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
				break;
 8001468:	e04d      	b.n	8001506 <SLAVEBMS_PollADCDone+0x12e>
			}
			Indicator++;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3301      	adds	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
			if(Indicator > 16)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b10      	cmp	r3, #16
 8001474:	d9e6      	bls.n	8001444 <SLAVEBMS_PollADCDone+0x6c>
			{
				SLAVEBMSFORWARD_CS_H();
 8001476:	2201      	movs	r2, #1
 8001478:	2110      	movs	r1, #16
 800147a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147e:	f006 f8a1 	bl	80075c4 <HAL_GPIO_WritePin>
				*Result = SLAVEBMSACCESS_CRC_MISMATCH;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	22ff      	movs	r2, #255	; 0xff
 8001486:	701a      	strb	r2, [r3, #0]
				break;
 8001488:	e03d      	b.n	8001506 <SLAVEBMS_PollADCDone+0x12e>
			}
		}
	}
	else if(direction == SLAVEBMSACCESS_REV)
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d13a      	bne.n	8001506 <SLAVEBMS_PollADCDone+0x12e>
	{
		SLAVEBMSREVERSE_CS_L();
 8001490:	2200      	movs	r2, #0
 8001492:	2110      	movs	r1, #16
 8001494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001498:	f006 f894 	bl	80075c4 <HAL_GPIO_WritePin>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e00a      	b.n	80014b8 <SLAVEBMS_PollADCDone+0xe0>
		{
			SLAVEBMS_Access(TX_BF[Indicator]);
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	3310      	adds	r3, #16
 80014a6:	443b      	add	r3, r7
 80014a8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe17 	bl	80010e0 <SLAVEBMS_Access>
		for(Indicator = 0U; Indicator < 4U; Indicator++)
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	3301      	adds	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d9f1      	bls.n	80014a2 <SLAVEBMS_PollADCDone+0xca>
		}
		Indicator = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
		while(1)
		{
			HAL_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f003 fda0 	bl	8005008 <HAL_Delay>
			if(SLAVEBMS_Access((unsigned char)(0xFF)) == (unsigned char)(0xFF))
 80014c8:	20ff      	movs	r0, #255	; 0xff
 80014ca:	f7ff fe09 	bl	80010e0 <SLAVEBMS_Access>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2bff      	cmp	r3, #255	; 0xff
 80014d2:	d109      	bne.n	80014e8 <SLAVEBMS_PollADCDone+0x110>
			{
				SLAVEBMSREVERSE_CS_H();
 80014d4:	2201      	movs	r2, #1
 80014d6:	2110      	movs	r1, #16
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f006 f872 	bl	80075c4 <HAL_GPIO_WritePin>
				*Result = SLAVEBMSACCESS_CRC_MATCH;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
				break;
 80014e6:	e00e      	b.n	8001506 <SLAVEBMS_PollADCDone+0x12e>
			}
			Indicator++;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	3301      	adds	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
			if(Indicator > 16)
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2b10      	cmp	r3, #16
 80014f2:	d9e6      	bls.n	80014c2 <SLAVEBMS_PollADCDone+0xea>
			{
				SLAVEBMSREVERSE_CS_H();
 80014f4:	2201      	movs	r2, #1
 80014f6:	2110      	movs	r1, #16
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f006 f862 	bl	80075c4 <HAL_GPIO_WritePin>
				*Result = SLAVEBMSACCESS_CRC_MISMATCH;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	22ff      	movs	r2, #255	; 0xff
 8001504:	701a      	strb	r2, [r3, #0]
				break;
			}
		}
	}
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <Reading_Voltage_Config>:

void Reading_Voltage_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0
	unsigned char Data_Array[44U]; //Order array 4 + (Configuration array 6 + CRC 2)*5
	unsigned short CRC_calc;

	SLAVEBMS_Wakeup(SLAVEBMSACCESS_FWD);
 8001516:	2001      	movs	r0, #1
 8001518:	f7ff fdf6 	bl	8001108 <SLAVEBMS_Wakeup>
	HAL_Delay(10);
 800151c:	200a      	movs	r0, #10
 800151e:	f003 fd73 	bl	8005008 <HAL_Delay>

	Data_Array[0] = (unsigned char)((SLAVEBMS_CMD_WRCFGA >> 8U) & 0x00FFU);
 8001522:	2300      	movs	r3, #0
 8001524:	703b      	strb	r3, [r7, #0]
	Data_Array[1] = (unsigned char)((SLAVEBMS_CMD_WRCFGA >> 0U) & 0x00FFU);
 8001526:	2301      	movs	r3, #1
 8001528:	707b      	strb	r3, [r7, #1]
	CRC_calc = SLAVEBMS_CRC_calc(2U, &Data_Array[0U]);
 800152a:	463b      	mov	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	2002      	movs	r0, #2
 8001530:	f7ff fda0 	bl	8001074 <SLAVEBMS_CRC_calc>
 8001534:	4603      	mov	r3, r0
 8001536:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[2] = (unsigned char)(CRC_calc >> 8);
 8001538:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	b29b      	uxth	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	70bb      	strb	r3, [r7, #2]
	Data_Array[3] = (unsigned char)(CRC_calc >> 0);
 8001542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001544:	b2db      	uxtb	r3, r3
 8001546:	70fb      	strb	r3, [r7, #3]

	Data_Array[4] = (unsigned char)(0xFE);
 8001548:	23fe      	movs	r3, #254	; 0xfe
 800154a:	713b      	strb	r3, [r7, #4]
	Data_Array[5] = (unsigned char)(0x0E); //VUV = 3.3V
 800154c:	230e      	movs	r3, #14
 800154e:	717b      	strb	r3, [r7, #5]
	Data_Array[6] = (unsigned char)(0x18); //VOV = 4.2V
 8001550:	2318      	movs	r3, #24
 8001552:	71bb      	strb	r3, [r7, #6]
	Data_Array[7] = (unsigned char)(0xA4);
 8001554:	23a4      	movs	r3, #164	; 0xa4
 8001556:	71fb      	strb	r3, [r7, #7]
	Data_Array[8] = (unsigned char)(0x00);
 8001558:	2300      	movs	r3, #0
 800155a:	723b      	strb	r3, [r7, #8]
	Data_Array[9] = (unsigned char)(0xF0);
 800155c:	23f0      	movs	r3, #240	; 0xf0
 800155e:	727b      	strb	r3, [r7, #9]
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[4]);
 8001560:	463b      	mov	r3, r7
 8001562:	3304      	adds	r3, #4
 8001564:	4619      	mov	r1, r3
 8001566:	2006      	movs	r0, #6
 8001568:	f7ff fd84 	bl	8001074 <SLAVEBMS_CRC_calc>
 800156c:	4603      	mov	r3, r0
 800156e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[10] = (unsigned char)(CRC_calc >> 8);
 8001570:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	72bb      	strb	r3, [r7, #10]
	Data_Array[11] = (unsigned char)(CRC_calc >> 0);
 800157a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800157c:	b2db      	uxtb	r3, r3
 800157e:	72fb      	strb	r3, [r7, #11]

	Data_Array[12] = (unsigned char)(0xFE);
 8001580:	23fe      	movs	r3, #254	; 0xfe
 8001582:	733b      	strb	r3, [r7, #12]
	Data_Array[13] = (unsigned char)(0x0E);
 8001584:	230e      	movs	r3, #14
 8001586:	737b      	strb	r3, [r7, #13]
	Data_Array[14] = (unsigned char)(0x18);
 8001588:	2318      	movs	r3, #24
 800158a:	73bb      	strb	r3, [r7, #14]
	Data_Array[15] = (unsigned char)(0xA4);
 800158c:	23a4      	movs	r3, #164	; 0xa4
 800158e:	73fb      	strb	r3, [r7, #15]
	Data_Array[16] = (unsigned char)(0x00);
 8001590:	2300      	movs	r3, #0
 8001592:	743b      	strb	r3, [r7, #16]
	Data_Array[17] = (unsigned char)(0xE0);
 8001594:	23e0      	movs	r3, #224	; 0xe0
 8001596:	747b      	strb	r3, [r7, #17]
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[12]);
 8001598:	463b      	mov	r3, r7
 800159a:	330c      	adds	r3, #12
 800159c:	4619      	mov	r1, r3
 800159e:	2006      	movs	r0, #6
 80015a0:	f7ff fd68 	bl	8001074 <SLAVEBMS_CRC_calc>
 80015a4:	4603      	mov	r3, r0
 80015a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[18] = (unsigned char)(CRC_calc >> 8);
 80015a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	74bb      	strb	r3, [r7, #18]
	Data_Array[19] = (unsigned char)(CRC_calc >> 0);
 80015b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	74fb      	strb	r3, [r7, #19]

	Data_Array[20] = (unsigned char)(0xFE);
 80015b8:	23fe      	movs	r3, #254	; 0xfe
 80015ba:	753b      	strb	r3, [r7, #20]
	Data_Array[21] = (unsigned char)(0x0E);
 80015bc:	230e      	movs	r3, #14
 80015be:	757b      	strb	r3, [r7, #21]
	Data_Array[22] = (unsigned char)(0x18);
 80015c0:	2318      	movs	r3, #24
 80015c2:	75bb      	strb	r3, [r7, #22]
	Data_Array[23] = (unsigned char)(0xA4);
 80015c4:	23a4      	movs	r3, #164	; 0xa4
 80015c6:	75fb      	strb	r3, [r7, #23]
	Data_Array[24] = (unsigned char)(0x00);
 80015c8:	2300      	movs	r3, #0
 80015ca:	763b      	strb	r3, [r7, #24]
	Data_Array[25] = (unsigned char)(0x00);
 80015cc:	2300      	movs	r3, #0
 80015ce:	767b      	strb	r3, [r7, #25]
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[20]);
 80015d0:	463b      	mov	r3, r7
 80015d2:	3314      	adds	r3, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	2006      	movs	r0, #6
 80015d8:	f7ff fd4c 	bl	8001074 <SLAVEBMS_CRC_calc>
 80015dc:	4603      	mov	r3, r0
 80015de:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[26] = (unsigned char)(CRC_calc >> 8);
 80015e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	76bb      	strb	r3, [r7, #26]
	Data_Array[27] = (unsigned char)(CRC_calc >> 0);
 80015ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	76fb      	strb	r3, [r7, #27]

	Data_Array[28] = (unsigned char)(0xFE);
 80015f0:	23fe      	movs	r3, #254	; 0xfe
 80015f2:	773b      	strb	r3, [r7, #28]
	Data_Array[29] = (unsigned char)(0x0E);
 80015f4:	230e      	movs	r3, #14
 80015f6:	777b      	strb	r3, [r7, #29]
	Data_Array[30] = (unsigned char)(0x18);
 80015f8:	2318      	movs	r3, #24
 80015fa:	77bb      	strb	r3, [r7, #30]
	Data_Array[31] = (unsigned char)(0xA4);
 80015fc:	23a4      	movs	r3, #164	; 0xa4
 80015fe:	77fb      	strb	r3, [r7, #31]
	Data_Array[32] = (unsigned char)(0x00);
 8001600:	2300      	movs	r3, #0
 8001602:	f887 3020 	strb.w	r3, [r7, #32]
	Data_Array[33] = (unsigned char)(0x00);
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[28]);
 800160c:	463b      	mov	r3, r7
 800160e:	331c      	adds	r3, #28
 8001610:	4619      	mov	r1, r3
 8001612:	2006      	movs	r0, #6
 8001614:	f7ff fd2e 	bl	8001074 <SLAVEBMS_CRC_calc>
 8001618:	4603      	mov	r3, r0
 800161a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[34] = (unsigned char)(CRC_calc >> 8);
 800161c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	b29b      	uxth	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	Data_Array[35] = (unsigned char)(CRC_calc >> 0);
 8001628:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	Data_Array[36] = (unsigned char)(0xFE);
 8001630:	23fe      	movs	r3, #254	; 0xfe
 8001632:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Data_Array[37] = (unsigned char)(0x0E);
 8001636:	230e      	movs	r3, #14
 8001638:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Data_Array[38] = (unsigned char)(0x18);
 800163c:	2318      	movs	r3, #24
 800163e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	Data_Array[39] = (unsigned char)(0xA4);
 8001642:	23a4      	movs	r3, #164	; 0xa4
 8001644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Data_Array[40] = (unsigned char)(0x00);
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	Data_Array[41] = (unsigned char)(0x00);
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[36]);
 8001654:	463b      	mov	r3, r7
 8001656:	3324      	adds	r3, #36	; 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	2006      	movs	r0, #6
 800165c:	f7ff fd0a 	bl	8001074 <SLAVEBMS_CRC_calc>
 8001660:	4603      	mov	r3, r0
 8001662:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[42] = (unsigned char)(CRC_calc >> 8);
 8001664:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	b29b      	uxth	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	Data_Array[43] = (unsigned char)(CRC_calc >> 0);
 8001670:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	SLAVEBMSFORWARD_CS_L();
 8001678:	2200      	movs	r2, #0
 800167a:	2110      	movs	r1, #16
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f005 ffa0 	bl	80075c4 <HAL_GPIO_WritePin>
	for(CRC_calc = 0U; CRC_calc < 44; CRC_calc++)
 8001684:	2300      	movs	r3, #0
 8001686:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001688:	e00a      	b.n	80016a0 <Reading_Voltage_Config+0x190>
	{
		SLAVEBMS_Access(Data_Array[CRC_calc]);
 800168a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800168c:	3330      	adds	r3, #48	; 0x30
 800168e:	443b      	add	r3, r7
 8001690:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fd23 	bl	80010e0 <SLAVEBMS_Access>
	for(CRC_calc = 0U; CRC_calc < 44; CRC_calc++)
 800169a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800169c:	3301      	adds	r3, #1
 800169e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016a2:	2b2b      	cmp	r3, #43	; 0x2b
 80016a4:	d9f1      	bls.n	800168a <Reading_Voltage_Config+0x17a>
	}
	SLAVEBMSFORWARD_CS_H();
 80016a6:	2201      	movs	r2, #1
 80016a8:	2110      	movs	r1, #16
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f005 ff89 	bl	80075c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f003 fca8 	bl	8005008 <HAL_Delay>

	Data_Array[0] = (unsigned char)((SLAVEBMS_CMD_WRCFGB >> 8U) & 0x00FFU);
 80016b8:	2300      	movs	r3, #0
 80016ba:	703b      	strb	r3, [r7, #0]
	Data_Array[1] = (unsigned char)((SLAVEBMS_CMD_WRCFGB >> 0U) & 0x00FFU);
 80016bc:	2324      	movs	r3, #36	; 0x24
 80016be:	707b      	strb	r3, [r7, #1]
	CRC_calc = SLAVEBMS_CRC_calc(2U, &Data_Array[0U]);
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	2002      	movs	r0, #2
 80016c6:	f7ff fcd5 	bl	8001074 <SLAVEBMS_CRC_calc>
 80016ca:	4603      	mov	r3, r0
 80016cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[2] = (unsigned char)(CRC_calc >> 8);
 80016ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	70bb      	strb	r3, [r7, #2]
	Data_Array[3] = (unsigned char)(CRC_calc >> 0);
 80016d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	70fb      	strb	r3, [r7, #3]

	Data_Array[4] = (unsigned char)(0x0F);
 80016de:	230f      	movs	r3, #15
 80016e0:	713b      	strb	r3, [r7, #4]
	Data_Array[5] = (unsigned char)(0x8F);
 80016e2:	238f      	movs	r3, #143	; 0x8f
 80016e4:	717b      	strb	r3, [r7, #5]
	Data_Array[6] = (unsigned char)(0x00);
 80016e6:	2300      	movs	r3, #0
 80016e8:	71bb      	strb	r3, [r7, #6]
	Data_Array[7] = (unsigned char)(0x00);
 80016ea:	2300      	movs	r3, #0
 80016ec:	71fb      	strb	r3, [r7, #7]
	Data_Array[8] = (unsigned char)(0x00);
 80016ee:	2300      	movs	r3, #0
 80016f0:	723b      	strb	r3, [r7, #8]
	Data_Array[9] = (unsigned char)(0x00);
 80016f2:	2300      	movs	r3, #0
 80016f4:	727b      	strb	r3, [r7, #9]
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[4]);
 80016f6:	463b      	mov	r3, r7
 80016f8:	3304      	adds	r3, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	2006      	movs	r0, #6
 80016fe:	f7ff fcb9 	bl	8001074 <SLAVEBMS_CRC_calc>
 8001702:	4603      	mov	r3, r0
 8001704:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[10] = (unsigned char)(CRC_calc >> 8);
 8001706:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	b29b      	uxth	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	72bb      	strb	r3, [r7, #10]
	Data_Array[11] = (unsigned char)(CRC_calc >> 0);
 8001710:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001712:	b2db      	uxtb	r3, r3
 8001714:	72fb      	strb	r3, [r7, #11]

	Data_Array[12] = (unsigned char)(0x0F);
 8001716:	230f      	movs	r3, #15
 8001718:	733b      	strb	r3, [r7, #12]
	Data_Array[13] = (unsigned char)(0x8F);
 800171a:	238f      	movs	r3, #143	; 0x8f
 800171c:	737b      	strb	r3, [r7, #13]
	Data_Array[14] = (unsigned char)(0x00);
 800171e:	2300      	movs	r3, #0
 8001720:	73bb      	strb	r3, [r7, #14]
	Data_Array[15] = (unsigned char)(0x00);
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
	Data_Array[16] = (unsigned char)(0x00);
 8001726:	2300      	movs	r3, #0
 8001728:	743b      	strb	r3, [r7, #16]
	Data_Array[17] = (unsigned char)(0x00);
 800172a:	2300      	movs	r3, #0
 800172c:	747b      	strb	r3, [r7, #17]
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[12]);
 800172e:	463b      	mov	r3, r7
 8001730:	330c      	adds	r3, #12
 8001732:	4619      	mov	r1, r3
 8001734:	2006      	movs	r0, #6
 8001736:	f7ff fc9d 	bl	8001074 <SLAVEBMS_CRC_calc>
 800173a:	4603      	mov	r3, r0
 800173c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[18] = (unsigned char)(CRC_calc >> 8);
 800173e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b29b      	uxth	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	74bb      	strb	r3, [r7, #18]
	Data_Array[19] = (unsigned char)(CRC_calc >> 0);
 8001748:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800174a:	b2db      	uxtb	r3, r3
 800174c:	74fb      	strb	r3, [r7, #19]

	Data_Array[20] = (unsigned char)(0x0F);
 800174e:	230f      	movs	r3, #15
 8001750:	753b      	strb	r3, [r7, #20]
	Data_Array[21] = (unsigned char)(0x8F);
 8001752:	238f      	movs	r3, #143	; 0x8f
 8001754:	757b      	strb	r3, [r7, #21]
	Data_Array[22] = (unsigned char)(0x00);
 8001756:	2300      	movs	r3, #0
 8001758:	75bb      	strb	r3, [r7, #22]
	Data_Array[23] = (unsigned char)(0x00);
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]
	Data_Array[24] = (unsigned char)(0x00);
 800175e:	2300      	movs	r3, #0
 8001760:	763b      	strb	r3, [r7, #24]
	Data_Array[25] = (unsigned char)(0x00);
 8001762:	2300      	movs	r3, #0
 8001764:	767b      	strb	r3, [r7, #25]
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[20]);
 8001766:	463b      	mov	r3, r7
 8001768:	3314      	adds	r3, #20
 800176a:	4619      	mov	r1, r3
 800176c:	2006      	movs	r0, #6
 800176e:	f7ff fc81 	bl	8001074 <SLAVEBMS_CRC_calc>
 8001772:	4603      	mov	r3, r0
 8001774:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[26] = (unsigned char)(CRC_calc >> 8);
 8001776:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	76bb      	strb	r3, [r7, #26]
	Data_Array[27] = (unsigned char)(CRC_calc >> 0);
 8001780:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001782:	b2db      	uxtb	r3, r3
 8001784:	76fb      	strb	r3, [r7, #27]

	Data_Array[28] = (unsigned char)(0x0F);
 8001786:	230f      	movs	r3, #15
 8001788:	773b      	strb	r3, [r7, #28]
	Data_Array[29] = (unsigned char)(0x8F);
 800178a:	238f      	movs	r3, #143	; 0x8f
 800178c:	777b      	strb	r3, [r7, #29]
	Data_Array[30] = (unsigned char)(0x00);
 800178e:	2300      	movs	r3, #0
 8001790:	77bb      	strb	r3, [r7, #30]
	Data_Array[31] = (unsigned char)(0x00);
 8001792:	2300      	movs	r3, #0
 8001794:	77fb      	strb	r3, [r7, #31]
	Data_Array[32] = (unsigned char)(0x00);
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3020 	strb.w	r3, [r7, #32]
	Data_Array[33] = (unsigned char)(0x00);
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[28]);
 80017a2:	463b      	mov	r3, r7
 80017a4:	331c      	adds	r3, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	2006      	movs	r0, #6
 80017aa:	f7ff fc63 	bl	8001074 <SLAVEBMS_CRC_calc>
 80017ae:	4603      	mov	r3, r0
 80017b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[34] = (unsigned char)(CRC_calc >> 8);
 80017b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	Data_Array[35] = (unsigned char)(CRC_calc >> 0);
 80017be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	Data_Array[36] = (unsigned char)(0x0F);
 80017c6:	230f      	movs	r3, #15
 80017c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Data_Array[37] = (unsigned char)(0x8F);
 80017cc:	238f      	movs	r3, #143	; 0x8f
 80017ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Data_Array[38] = (unsigned char)(0x00);
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	Data_Array[39] = (unsigned char)(0x00);
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Data_Array[40] = (unsigned char)(0x00);
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	Data_Array[41] = (unsigned char)(0x00);
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	CRC_calc = SLAVEBMS_CRC_calc(6U, &Data_Array[36]);
 80017ea:	463b      	mov	r3, r7
 80017ec:	3324      	adds	r3, #36	; 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	2006      	movs	r0, #6
 80017f2:	f7ff fc3f 	bl	8001074 <SLAVEBMS_CRC_calc>
 80017f6:	4603      	mov	r3, r0
 80017f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Data_Array[42] = (unsigned char)(CRC_calc >> 8);
 80017fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	b29b      	uxth	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	Data_Array[43] = (unsigned char)(CRC_calc >> 0);
 8001806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	SLAVEBMSFORWARD_CS_L();
 800180e:	2200      	movs	r2, #0
 8001810:	2110      	movs	r1, #16
 8001812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001816:	f005 fed5 	bl	80075c4 <HAL_GPIO_WritePin>
	for(CRC_calc = 0U; CRC_calc < 44; CRC_calc++)
 800181a:	2300      	movs	r3, #0
 800181c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800181e:	e00a      	b.n	8001836 <Reading_Voltage_Config+0x326>
	{
		SLAVEBMS_Access(Data_Array[CRC_calc]);
 8001820:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001822:	3330      	adds	r3, #48	; 0x30
 8001824:	443b      	add	r3, r7
 8001826:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc58 	bl	80010e0 <SLAVEBMS_Access>
	for(CRC_calc = 0U; CRC_calc < 44; CRC_calc++)
 8001830:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001832:	3301      	adds	r3, #1
 8001834:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001836:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001838:	2b2b      	cmp	r3, #43	; 0x2b
 800183a:	d9f1      	bls.n	8001820 <Reading_Voltage_Config+0x310>
	}
	SLAVEBMSFORWARD_CS_H();
 800183c:	2201      	movs	r2, #1
 800183e:	2110      	movs	r1, #16
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f005 febe 	bl	80075c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001848:	2001      	movs	r0, #1
 800184a:	f003 fbdd 	bl	8005008 <HAL_Delay>

	HAL_GPIO_WritePin(STAT_GPIO_Port, STAT_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <Reading_Voltage_Config+0x354>)
 8001856:	f005 feb5 	bl	80075c4 <HAL_GPIO_WritePin>
}
 800185a:	bf00      	nop
 800185c:	3730      	adds	r7, #48	; 0x30
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	48000800 	.word	0x48000800

08001868 <Reading_Voltage>:

void Reading_Voltage(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800186e:	2104      	movs	r1, #4
 8001870:	48dd      	ldr	r0, [pc, #884]	; (8001be8 <Reading_Voltage+0x380>)
 8001872:	f005 febf 	bl	80075f4 <HAL_GPIO_TogglePin>
	unsigned char Data_Array[40U]; //(Configuration array 6 + CRC 2)*5
	unsigned char ConversionResult;

	SLAVEBMS_Wakeup(SLAVEBMSACCESS_FWD);
 8001876:	2001      	movs	r0, #1
 8001878:	f7ff fc46 	bl	8001108 <SLAVEBMS_Wakeup>
	HAL_Delay(10);
 800187c:	200a      	movs	r0, #10
 800187e:	f003 fbc3 	bl	8005008 <HAL_Delay>

	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_CLRCELL);
 8001882:	f240 7111 	movw	r1, #1809	; 0x711
 8001886:	2001      	movs	r0, #1
 8001888:	f7ff fd41 	bl	800130e <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(2);
 800188c:	2002      	movs	r0, #2
 800188e:	f003 fbbb 	bl	8005008 <HAL_Delay>
	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_ADCV | SLAVEBMS_CBD_MD_7K);
 8001892:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff fd39 	bl	800130e <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(1);
 800189c:	2001      	movs	r0, #1
 800189e:	f003 fbb3 	bl	8005008 <HAL_Delay>
	SLAVEBMS_PollADCDone(SLAVEBMSACCESS_FWD, &ConversionResult);
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	4619      	mov	r1, r3
 80018a6:	2001      	movs	r0, #1
 80018a8:	f7ff fd96 	bl	80013d8 <SLAVEBMS_PollADCDone>
	if(ConversionResult == SLAVEBMSACCESS_CRC_MATCH)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 85e3 	bne.w	800247a <Reading_Voltage+0xc12>
	{
		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVA, 5, Data_Array);	//기존 코딩?  ?   ?  ?   ( 기존?   CRC Mismatch ?  ?  ?  ?   CV?   ???  ?? ?   ????????????????????????? ????????????????????????? ?   ????????????????????????? ?  ?  )
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	2205      	movs	r2, #5
 80018ba:	2104      	movs	r1, #4
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fc57 	bl	8001170 <SLAVEBMS_ReadDataGroup>


		SLAVEBMSA.CV[0] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 80018c2:	7a7b      	ldrb	r3, [r7, #9]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	7a3a      	ldrb	r2, [r7, #8]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	ee07 3a90 	vmov	s15, r3
 80018ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d2:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8001c00 <Reading_Voltage+0x398>
 80018d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018da:	4bc4      	ldr	r3, [pc, #784]	; (8001bec <Reading_Voltage+0x384>)
 80018dc:	edc3 7a00 	vstr	s15, [r3]
		SLAVEBMSA.CV[1] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 80018e0:	7afb      	ldrb	r3, [r7, #11]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	7aba      	ldrb	r2, [r7, #10]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f0:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001c00 <Reading_Voltage+0x398>
 80018f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f8:	4bbc      	ldr	r3, [pc, #752]	; (8001bec <Reading_Voltage+0x384>)
 80018fa:	edc3 7a01 	vstr	s15, [r3, #4]
		SLAVEBMSA.CV[2] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 80018fe:	7b7b      	ldrb	r3, [r7, #13]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	7b3a      	ldrb	r2, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190e:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8001c00 <Reading_Voltage+0x398>
 8001912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001916:	4bb5      	ldr	r3, [pc, #724]	; (8001bec <Reading_Voltage+0x384>)
 8001918:	edc3 7a02 	vstr	s15, [r3, #8]

		SLAVEBMSB.CV[0] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 800191c:	7c7b      	ldrb	r3, [r7, #17]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	7c3a      	ldrb	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192c:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8001c00 <Reading_Voltage+0x398>
 8001930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001934:	4bae      	ldr	r3, [pc, #696]	; (8001bf0 <Reading_Voltage+0x388>)
 8001936:	edc3 7a00 	vstr	s15, [r3]
		SLAVEBMSB.CV[1] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 800193a:	7cfb      	ldrb	r3, [r7, #19]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	7cba      	ldrb	r2, [r7, #18]
 8001940:	4313      	orrs	r3, r2
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194a:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8001c00 <Reading_Voltage+0x398>
 800194e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001952:	4ba7      	ldr	r3, [pc, #668]	; (8001bf0 <Reading_Voltage+0x388>)
 8001954:	edc3 7a01 	vstr	s15, [r3, #4]
		SLAVEBMSB.CV[2] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8001958:	7d7b      	ldrb	r3, [r7, #21]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	7d3a      	ldrb	r2, [r7, #20]
 800195e:	4313      	orrs	r3, r2
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001968:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001c00 <Reading_Voltage+0x398>
 800196c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001970:	4b9f      	ldr	r3, [pc, #636]	; (8001bf0 <Reading_Voltage+0x388>)
 8001972:	edc3 7a02 	vstr	s15, [r3, #8]

		SLAVEBMSC.CV[0] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8001976:	7e7b      	ldrb	r3, [r7, #25]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	7e3a      	ldrb	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001986:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001c00 <Reading_Voltage+0x398>
 800198a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198e:	4b99      	ldr	r3, [pc, #612]	; (8001bf4 <Reading_Voltage+0x38c>)
 8001990:	edc3 7a00 	vstr	s15, [r3]
		SLAVEBMSC.CV[1] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 8001994:	7efb      	ldrb	r3, [r7, #27]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	7eba      	ldrb	r2, [r7, #26]
 800199a:	4313      	orrs	r3, r2
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a4:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001c00 <Reading_Voltage+0x398>
 80019a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ac:	4b91      	ldr	r3, [pc, #580]	; (8001bf4 <Reading_Voltage+0x38c>)
 80019ae:	edc3 7a01 	vstr	s15, [r3, #4]
		SLAVEBMSC.CV[2] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 80019b2:	7f7b      	ldrb	r3, [r7, #29]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	7f3a      	ldrb	r2, [r7, #28]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001c00 <Reading_Voltage+0x398>
 80019c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ca:	4b8a      	ldr	r3, [pc, #552]	; (8001bf4 <Reading_Voltage+0x38c>)
 80019cc:	edc3 7a02 	vstr	s15, [r3, #8]

		SLAVEBMSD.CV[0] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 80019d0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019da:	4313      	orrs	r3, r2
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001c00 <Reading_Voltage+0x398>
 80019e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ec:	4b82      	ldr	r3, [pc, #520]	; (8001bf8 <Reading_Voltage+0x390>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]
		SLAVEBMSD.CV[1] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 80019f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80019fc:	4313      	orrs	r3, r2
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a06:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001c00 <Reading_Voltage+0x398>
 8001a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0e:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <Reading_Voltage+0x390>)
 8001a10:	edc3 7a01 	vstr	s15, [r3, #4]
		SLAVEBMSD.CV[2] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8001a14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a28:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001c00 <Reading_Voltage+0x398>
 8001a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a30:	4b71      	ldr	r3, [pc, #452]	; (8001bf8 <Reading_Voltage+0x390>)
 8001a32:	edc3 7a02 	vstr	s15, [r3, #8]

		SLAVEBMSE.CV[0] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8001a36:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a40:	4313      	orrs	r3, r2
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001c00 <Reading_Voltage+0x398>
 8001a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a52:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <Reading_Voltage+0x394>)
 8001a54:	edc3 7a00 	vstr	s15, [r3]
		SLAVEBMSE.CV[1] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8001a58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001a62:	4313      	orrs	r3, r2
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001c00 <Reading_Voltage+0x398>
 8001a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a74:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <Reading_Voltage+0x394>)
 8001a76:	edc3 7a01 	vstr	s15, [r3, #4]
		SLAVEBMSE.CV[2] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8001a7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001a84:	4313      	orrs	r3, r2
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a8e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001c00 <Reading_Voltage+0x398>
 8001a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a96:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <Reading_Voltage+0x394>)
 8001a98:	edc3 7a02 	vstr	s15, [r3, #8]


		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVB, 5, Data_Array);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	2205      	movs	r2, #5
 8001aa2:	2106      	movs	r1, #6
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7ff fb63 	bl	8001170 <SLAVEBMS_ReadDataGroup>

		SLAVEBMSA.CV[3] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 8001aaa:	7a7b      	ldrb	r3, [r7, #9]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	7a3a      	ldrb	r2, [r7, #8]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aba:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001c00 <Reading_Voltage+0x398>
 8001abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <Reading_Voltage+0x384>)
 8001ac4:	edc3 7a03 	vstr	s15, [r3, #12]
		SLAVEBMSA.CV[4] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	7aba      	ldrb	r2, [r7, #10]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001c00 <Reading_Voltage+0x398>
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	4b42      	ldr	r3, [pc, #264]	; (8001bec <Reading_Voltage+0x384>)
 8001ae2:	edc3 7a04 	vstr	s15, [r3, #16]
		SLAVEBMSA.CV[5] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8001ae6:	7b7b      	ldrb	r3, [r7, #13]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	7b3a      	ldrb	r2, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001c00 <Reading_Voltage+0x398>
 8001afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <Reading_Voltage+0x384>)
 8001b00:	edc3 7a05 	vstr	s15, [r3, #20]

		SLAVEBMSB.CV[3] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8001b04:	7c7b      	ldrb	r3, [r7, #17]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	7c3a      	ldrb	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b14:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001c00 <Reading_Voltage+0x398>
 8001b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1c:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <Reading_Voltage+0x388>)
 8001b1e:	edc3 7a03 	vstr	s15, [r3, #12]
		SLAVEBMSB.CV[4] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8001b22:	7cfb      	ldrb	r3, [r7, #19]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	7cba      	ldrb	r2, [r7, #18]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b32:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001c00 <Reading_Voltage+0x398>
 8001b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <Reading_Voltage+0x388>)
 8001b3c:	edc3 7a04 	vstr	s15, [r3, #16]
		SLAVEBMSB.CV[5] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8001b40:	7d7b      	ldrb	r3, [r7, #21]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	7d3a      	ldrb	r2, [r7, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b50:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001c00 <Reading_Voltage+0x398>
 8001b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b58:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <Reading_Voltage+0x388>)
 8001b5a:	edc3 7a05 	vstr	s15, [r3, #20]

		SLAVEBMSC.CV[3] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8001b5e:	7e7b      	ldrb	r3, [r7, #25]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	7e3a      	ldrb	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001c00 <Reading_Voltage+0x398>
 8001b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <Reading_Voltage+0x38c>)
 8001b78:	edc3 7a03 	vstr	s15, [r3, #12]
		SLAVEBMSC.CV[4] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 8001b7c:	7efb      	ldrb	r3, [r7, #27]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	7eba      	ldrb	r2, [r7, #26]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001c00 <Reading_Voltage+0x398>
 8001b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <Reading_Voltage+0x38c>)
 8001b96:	edc3 7a04 	vstr	s15, [r3, #16]
		SLAVEBMSC.CV[5] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 8001b9a:	7f7b      	ldrb	r3, [r7, #29]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	7f3a      	ldrb	r2, [r7, #28]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001baa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001c00 <Reading_Voltage+0x398>
 8001bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <Reading_Voltage+0x38c>)
 8001bb4:	edc3 7a05 	vstr	s15, [r3, #20]

		SLAVEBMSD.CV[3] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8001bb8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bcc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001c00 <Reading_Voltage+0x398>
 8001bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <Reading_Voltage+0x390>)
 8001bd6:	edc3 7a03 	vstr	s15, [r3, #12]
		SLAVEBMSD.CV[4] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 8001bda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001be4:	4313      	orrs	r3, r2
 8001be6:	e00d      	b.n	8001c04 <Reading_Voltage+0x39c>
 8001be8:	48000400 	.word	0x48000400
 8001bec:	20000190 	.word	0x20000190
 8001bf0:	20000274 	.word	0x20000274
 8001bf4:	20000358 	.word	0x20000358
 8001bf8:	2000043c 	.word	0x2000043c
 8001bfc:	20000520 	.word	0x20000520
 8001c00:	38d1b717 	.word	0x38d1b717
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0c:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8001c00 <Reading_Voltage+0x398>
 8001c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c14:	4bde      	ldr	r3, [pc, #888]	; (8001f90 <Reading_Voltage+0x728>)
 8001c16:	edc3 7a04 	vstr	s15, [r3, #16]
		SLAVEBMSD.CV[5] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8001c1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c24:	4313      	orrs	r3, r2
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2e:	ed9f 7add 	vldr	s14, [pc, #884]	; 8001fa4 <Reading_Voltage+0x73c>
 8001c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c36:	4bd6      	ldr	r3, [pc, #856]	; (8001f90 <Reading_Voltage+0x728>)
 8001c38:	edc3 7a05 	vstr	s15, [r3, #20]

		SLAVEBMSE.CV[3] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8001c3c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c46:	4313      	orrs	r3, r2
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c50:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 8001fa4 <Reading_Voltage+0x73c>
 8001c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c58:	4bce      	ldr	r3, [pc, #824]	; (8001f94 <Reading_Voltage+0x72c>)
 8001c5a:	edc3 7a03 	vstr	s15, [r3, #12]
		SLAVEBMSE.CV[4] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8001c5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c72:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8001fa4 <Reading_Voltage+0x73c>
 8001c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7a:	4bc6      	ldr	r3, [pc, #792]	; (8001f94 <Reading_Voltage+0x72c>)
 8001c7c:	edc3 7a04 	vstr	s15, [r3, #16]
		SLAVEBMSE.CV[5] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8001c80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c94:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001fa4 <Reading_Voltage+0x73c>
 8001c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9c:	4bbd      	ldr	r3, [pc, #756]	; (8001f94 <Reading_Voltage+0x72c>)
 8001c9e:	edc3 7a05 	vstr	s15, [r3, #20]


		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVC, 5, Data_Array);
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	2205      	movs	r2, #5
 8001ca8:	2108      	movs	r1, #8
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff fa60 	bl	8001170 <SLAVEBMS_ReadDataGroup>

		SLAVEBMSA.CV[6] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 8001cb0:	7a7b      	ldrb	r3, [r7, #9]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	7a3a      	ldrb	r2, [r7, #8]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc0:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8001fa4 <Reading_Voltage+0x73c>
 8001cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc8:	4bb3      	ldr	r3, [pc, #716]	; (8001f98 <Reading_Voltage+0x730>)
 8001cca:	edc3 7a06 	vstr	s15, [r3, #24]
		SLAVEBMSA.CV[7] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8001cce:	7afb      	ldrb	r3, [r7, #11]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	7aba      	ldrb	r2, [r7, #10]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cde:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001fa4 <Reading_Voltage+0x73c>
 8001ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce6:	4bac      	ldr	r3, [pc, #688]	; (8001f98 <Reading_Voltage+0x730>)
 8001ce8:	edc3 7a07 	vstr	s15, [r3, #28]
		SLAVEBMSA.CV[8] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8001cec:	7b7b      	ldrb	r3, [r7, #13]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	7b3a      	ldrb	r2, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfc:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001fa4 <Reading_Voltage+0x73c>
 8001d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d04:	4ba4      	ldr	r3, [pc, #656]	; (8001f98 <Reading_Voltage+0x730>)
 8001d06:	edc3 7a08 	vstr	s15, [r3, #32]

		SLAVEBMSB.CV[6] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8001d0a:	7c7b      	ldrb	r3, [r7, #17]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	7c3a      	ldrb	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1a:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001fa4 <Reading_Voltage+0x73c>
 8001d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d22:	4b9e      	ldr	r3, [pc, #632]	; (8001f9c <Reading_Voltage+0x734>)
 8001d24:	edc3 7a06 	vstr	s15, [r3, #24]
		SLAVEBMSB.CV[7] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8001d28:	7cfb      	ldrb	r3, [r7, #19]
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	7cba      	ldrb	r2, [r7, #18]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d38:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001fa4 <Reading_Voltage+0x73c>
 8001d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d40:	4b96      	ldr	r3, [pc, #600]	; (8001f9c <Reading_Voltage+0x734>)
 8001d42:	edc3 7a07 	vstr	s15, [r3, #28]
		SLAVEBMSB.CV[8] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8001d46:	7d7b      	ldrb	r3, [r7, #21]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	7d3a      	ldrb	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d56:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001fa4 <Reading_Voltage+0x73c>
 8001d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d5e:	4b8f      	ldr	r3, [pc, #572]	; (8001f9c <Reading_Voltage+0x734>)
 8001d60:	edc3 7a08 	vstr	s15, [r3, #32]

		SLAVEBMSC.CV[6] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8001d64:	7e7b      	ldrb	r3, [r7, #25]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	7e3a      	ldrb	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d74:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001fa4 <Reading_Voltage+0x73c>
 8001d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7c:	4b88      	ldr	r3, [pc, #544]	; (8001fa0 <Reading_Voltage+0x738>)
 8001d7e:	edc3 7a06 	vstr	s15, [r3, #24]
		SLAVEBMSC.CV[7] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 8001d82:	7efb      	ldrb	r3, [r7, #27]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	7eba      	ldrb	r2, [r7, #26]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d92:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001fa4 <Reading_Voltage+0x73c>
 8001d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9a:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <Reading_Voltage+0x738>)
 8001d9c:	edc3 7a07 	vstr	s15, [r3, #28]
		SLAVEBMSC.CV[8] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 8001da0:	7f7b      	ldrb	r3, [r7, #29]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	7f3a      	ldrb	r2, [r7, #28]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db0:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001fa4 <Reading_Voltage+0x73c>
 8001db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db8:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <Reading_Voltage+0x738>)
 8001dba:	edc3 7a08 	vstr	s15, [r3, #32]

		SLAVEBMSD.CV[6] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8001dbe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001fa4 <Reading_Voltage+0x73c>
 8001dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dda:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <Reading_Voltage+0x728>)
 8001ddc:	edc3 7a06 	vstr	s15, [r3, #24]
		SLAVEBMSD.CV[7] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 8001de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001dea:	4313      	orrs	r3, r2
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001fa4 <Reading_Voltage+0x73c>
 8001df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfc:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <Reading_Voltage+0x728>)
 8001dfe:	edc3 7a07 	vstr	s15, [r3, #28]
		SLAVEBMSD.CV[8] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8001e02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e16:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001fa4 <Reading_Voltage+0x73c>
 8001e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <Reading_Voltage+0x728>)
 8001e20:	edc3 7a08 	vstr	s15, [r3, #32]

		SLAVEBMSE.CV[6] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8001e24:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e38:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001fa4 <Reading_Voltage+0x73c>
 8001e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e40:	4b54      	ldr	r3, [pc, #336]	; (8001f94 <Reading_Voltage+0x72c>)
 8001e42:	edc3 7a06 	vstr	s15, [r3, #24]
		SLAVEBMSE.CV[7] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8001e46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001e50:	4313      	orrs	r3, r2
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001fa4 <Reading_Voltage+0x73c>
 8001e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e62:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <Reading_Voltage+0x72c>)
 8001e64:	edc3 7a07 	vstr	s15, [r3, #28]
		SLAVEBMSE.CV[8] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8001e68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001e72:	4313      	orrs	r3, r2
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001fa4 <Reading_Voltage+0x73c>
 8001e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e84:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <Reading_Voltage+0x72c>)
 8001e86:	edc3 7a08 	vstr	s15, [r3, #32]


		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVD, 5, Data_Array);
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	2205      	movs	r2, #5
 8001e90:	210a      	movs	r1, #10
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff f96c 	bl	8001170 <SLAVEBMS_ReadDataGroup>

		SLAVEBMSA.CV[9] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 8001e98:	7a7b      	ldrb	r3, [r7, #9]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	7a3a      	ldrb	r2, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001fa4 <Reading_Voltage+0x73c>
 8001eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb0:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <Reading_Voltage+0x730>)
 8001eb2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		SLAVEBMSA.CV[10] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 8001eb6:	7afb      	ldrb	r3, [r7, #11]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	7aba      	ldrb	r2, [r7, #10]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001fa4 <Reading_Voltage+0x73c>
 8001eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ece:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <Reading_Voltage+0x730>)
 8001ed0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		SLAVEBMSA.CV[11] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8001ed4:	7b7b      	ldrb	r3, [r7, #13]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	7b3a      	ldrb	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001fa4 <Reading_Voltage+0x73c>
 8001ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <Reading_Voltage+0x730>)
 8001eee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		SLAVEBMSB.CV[9] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8001ef2:	7c7b      	ldrb	r3, [r7, #17]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	7c3a      	ldrb	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f02:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001fa4 <Reading_Voltage+0x73c>
 8001f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <Reading_Voltage+0x734>)
 8001f0c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		SLAVEBMSB.CV[10] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	7cba      	ldrb	r2, [r7, #18]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f20:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001fa4 <Reading_Voltage+0x73c>
 8001f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <Reading_Voltage+0x734>)
 8001f2a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		SLAVEBMSB.CV[11] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8001f2e:	7d7b      	ldrb	r3, [r7, #21]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	7d3a      	ldrb	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001fa4 <Reading_Voltage+0x73c>
 8001f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <Reading_Voltage+0x734>)
 8001f48:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		SLAVEBMSC.CV[9] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8001f4c:	7e7b      	ldrb	r3, [r7, #25]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	7e3a      	ldrb	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001fa4 <Reading_Voltage+0x73c>
 8001f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <Reading_Voltage+0x738>)
 8001f66:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		SLAVEBMSC.CV[10] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 8001f6a:	7efb      	ldrb	r3, [r7, #27]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	7eba      	ldrb	r2, [r7, #26]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001fa4 <Reading_Voltage+0x73c>
 8001f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <Reading_Voltage+0x738>)
 8001f84:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		SLAVEBMSC.CV[11] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 8001f88:	7f7b      	ldrb	r3, [r7, #29]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	e00c      	b.n	8001fa8 <Reading_Voltage+0x740>
 8001f8e:	bf00      	nop
 8001f90:	2000043c 	.word	0x2000043c
 8001f94:	20000520 	.word	0x20000520
 8001f98:	20000190 	.word	0x20000190
 8001f9c:	20000274 	.word	0x20000274
 8001fa0:	20000358 	.word	0x20000358
 8001fa4:	38d1b717 	.word	0x38d1b717
 8001fa8:	7f3a      	ldrb	r2, [r7, #28]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb4:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8001fa4 <Reading_Voltage+0x73c>
 8001fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbc:	4be0      	ldr	r3, [pc, #896]	; (8002340 <Reading_Voltage+0xad8>)
 8001fbe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		SLAVEBMSD.CV[9] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8001fc2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd6:	ed9f 7adf 	vldr	s14, [pc, #892]	; 8002354 <Reading_Voltage+0xaec>
 8001fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fde:	4bd9      	ldr	r3, [pc, #868]	; (8002344 <Reading_Voltage+0xadc>)
 8001fe0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		SLAVEBMSD.CV[10] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 8001fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff8:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 8002354 <Reading_Voltage+0xaec>
 8001ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002000:	4bd0      	ldr	r3, [pc, #832]	; (8002344 <Reading_Voltage+0xadc>)
 8002002:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		SLAVEBMSD.CV[11] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8002006:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002010:	4313      	orrs	r3, r2
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201a:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8002354 <Reading_Voltage+0xaec>
 800201e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002022:	4bc8      	ldr	r3, [pc, #800]	; (8002344 <Reading_Voltage+0xadc>)
 8002024:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		SLAVEBMSE.CV[9] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8002028:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002032:	4313      	orrs	r3, r2
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203c:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8002354 <Reading_Voltage+0xaec>
 8002040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002044:	4bc0      	ldr	r3, [pc, #768]	; (8002348 <Reading_Voltage+0xae0>)
 8002046:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		SLAVEBMSE.CV[10] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 800204a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002054:	4313      	orrs	r3, r2
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800205e:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8002354 <Reading_Voltage+0xaec>
 8002062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002066:	4bb8      	ldr	r3, [pc, #736]	; (8002348 <Reading_Voltage+0xae0>)
 8002068:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		SLAVEBMSE.CV[11] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 800206c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002076:	4313      	orrs	r3, r2
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002080:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8002354 <Reading_Voltage+0xaec>
 8002084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002088:	4baf      	ldr	r3, [pc, #700]	; (8002348 <Reading_Voltage+0xae0>)
 800208a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVE, 5, Data_Array);
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	2205      	movs	r2, #5
 8002094:	2109      	movs	r1, #9
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff f86a 	bl	8001170 <SLAVEBMS_ReadDataGroup>

		SLAVEBMSA.CV[12] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 800209c:	7a7b      	ldrb	r3, [r7, #9]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	7a3a      	ldrb	r2, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ac:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002354 <Reading_Voltage+0xaec>
 80020b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b4:	4ba5      	ldr	r3, [pc, #660]	; (800234c <Reading_Voltage+0xae4>)
 80020b6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		SLAVEBMSA.CV[13] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	7aba      	ldrb	r2, [r7, #10]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ca:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002354 <Reading_Voltage+0xaec>
 80020ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d2:	4b9e      	ldr	r3, [pc, #632]	; (800234c <Reading_Voltage+0xae4>)
 80020d4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		SLAVEBMSA.CV[14] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 80020d8:	7b7b      	ldrb	r3, [r7, #13]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	7b3a      	ldrb	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e8:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002354 <Reading_Voltage+0xaec>
 80020ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f0:	4b96      	ldr	r3, [pc, #600]	; (800234c <Reading_Voltage+0xae4>)
 80020f2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		SLAVEBMSB.CV[12] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 80020f6:	7c7b      	ldrb	r3, [r7, #17]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	7c3a      	ldrb	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002354 <Reading_Voltage+0xaec>
 800210a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210e:	4b90      	ldr	r3, [pc, #576]	; (8002350 <Reading_Voltage+0xae8>)
 8002110:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		SLAVEBMSB.CV[13] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	7cba      	ldrb	r2, [r7, #18]
 800211a:	4313      	orrs	r3, r2
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002124:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002354 <Reading_Voltage+0xaec>
 8002128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212c:	4b88      	ldr	r3, [pc, #544]	; (8002350 <Reading_Voltage+0xae8>)
 800212e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		SLAVEBMSB.CV[14] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8002132:	7d7b      	ldrb	r3, [r7, #21]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	7d3a      	ldrb	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002142:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002354 <Reading_Voltage+0xaec>
 8002146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800214a:	4b81      	ldr	r3, [pc, #516]	; (8002350 <Reading_Voltage+0xae8>)
 800214c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		SLAVEBMSC.CV[12] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8002150:	7e7b      	ldrb	r3, [r7, #25]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	7e3a      	ldrb	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	ee07 3a90 	vmov	s15, r3
 800215c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002160:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002354 <Reading_Voltage+0xaec>
 8002164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002168:	4b75      	ldr	r3, [pc, #468]	; (8002340 <Reading_Voltage+0xad8>)
 800216a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		SLAVEBMSC.CV[13] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 800216e:	7efb      	ldrb	r3, [r7, #27]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	7eba      	ldrb	r2, [r7, #26]
 8002174:	4313      	orrs	r3, r2
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002354 <Reading_Voltage+0xaec>
 8002182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002186:	4b6e      	ldr	r3, [pc, #440]	; (8002340 <Reading_Voltage+0xad8>)
 8002188:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		SLAVEBMSC.CV[14] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 800218c:	7f7b      	ldrb	r3, [r7, #29]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	7f3a      	ldrb	r2, [r7, #28]
 8002192:	4313      	orrs	r3, r2
 8002194:	ee07 3a90 	vmov	s15, r3
 8002198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002354 <Reading_Voltage+0xaec>
 80021a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a4:	4b66      	ldr	r3, [pc, #408]	; (8002340 <Reading_Voltage+0xad8>)
 80021a6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		SLAVEBMSD.CV[12] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 80021aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021be:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002354 <Reading_Voltage+0xaec>
 80021c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021c6:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <Reading_Voltage+0xadc>)
 80021c8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		SLAVEBMSD.CV[13] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 80021cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80021d6:	4313      	orrs	r3, r2
 80021d8:	ee07 3a90 	vmov	s15, r3
 80021dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002354 <Reading_Voltage+0xaec>
 80021e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e8:	4b56      	ldr	r3, [pc, #344]	; (8002344 <Reading_Voltage+0xadc>)
 80021ea:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		SLAVEBMSD.CV[14] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 80021ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021f8:	4313      	orrs	r3, r2
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002202:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002354 <Reading_Voltage+0xaec>
 8002206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220a:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <Reading_Voltage+0xadc>)
 800220c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		SLAVEBMSE.CV[12] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8002210:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800221a:	4313      	orrs	r3, r2
 800221c:	ee07 3a90 	vmov	s15, r3
 8002220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002224:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002354 <Reading_Voltage+0xaec>
 8002228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222c:	4b46      	ldr	r3, [pc, #280]	; (8002348 <Reading_Voltage+0xae0>)
 800222e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		SLAVEBMSE.CV[13] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8002232:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800223c:	4313      	orrs	r3, r2
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002246:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002354 <Reading_Voltage+0xaec>
 800224a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224e:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <Reading_Voltage+0xae0>)
 8002250:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		SLAVEBMSE.CV[14] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8002254:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800225e:	4313      	orrs	r3, r2
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002268:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002354 <Reading_Voltage+0xaec>
 800226c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002270:	4b35      	ldr	r3, [pc, #212]	; (8002348 <Reading_Voltage+0xae0>)
 8002272:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDCVF, 5, Data_Array);
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	2205      	movs	r2, #5
 800227c:	210b      	movs	r1, #11
 800227e:	2001      	movs	r0, #1
 8002280:	f7fe ff76 	bl	8001170 <SLAVEBMS_ReadDataGroup>

		SLAVEBMSA.CV[15] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 8002284:	7a7b      	ldrb	r3, [r7, #9]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	7a3a      	ldrb	r2, [r7, #8]
 800228a:	4313      	orrs	r3, r2
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002294:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002354 <Reading_Voltage+0xaec>
 8002298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <Reading_Voltage+0xae4>)
 800229e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		SLAVEBMSA.CV[16] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 80022a2:	7afb      	ldrb	r3, [r7, #11]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	7aba      	ldrb	r2, [r7, #10]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002354 <Reading_Voltage+0xaec>
 80022b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <Reading_Voltage+0xae4>)
 80022bc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		SLAVEBMSA.CV[17] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 80022c0:	7b7b      	ldrb	r3, [r7, #13]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	7b3a      	ldrb	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002354 <Reading_Voltage+0xaec>
 80022d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <Reading_Voltage+0xae4>)
 80022da:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		SLAVEBMSB.CV[15] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 80022de:	7c7b      	ldrb	r3, [r7, #17]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	7c3a      	ldrb	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002354 <Reading_Voltage+0xaec>
 80022f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <Reading_Voltage+0xae8>)
 80022f8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		SLAVEBMSB.CV[16] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	7cba      	ldrb	r2, [r7, #18]
 8002302:	4313      	orrs	r3, r2
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800230c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002354 <Reading_Voltage+0xaec>
 8002310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <Reading_Voltage+0xae8>)
 8002316:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		SLAVEBMSB.CV[17] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 800231a:	7d7b      	ldrb	r3, [r7, #21]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	7d3a      	ldrb	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800232a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002354 <Reading_Voltage+0xaec>
 800232e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <Reading_Voltage+0xae8>)
 8002334:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		SLAVEBMSC.CV[15] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8002338:	7e7b      	ldrb	r3, [r7, #25]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	e00c      	b.n	8002358 <Reading_Voltage+0xaf0>
 800233e:	bf00      	nop
 8002340:	20000358 	.word	0x20000358
 8002344:	2000043c 	.word	0x2000043c
 8002348:	20000520 	.word	0x20000520
 800234c:	20000190 	.word	0x20000190
 8002350:	20000274 	.word	0x20000274
 8002354:	38d1b717 	.word	0x38d1b717
 8002358:	7e3a      	ldrb	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002364:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8002354 <Reading_Voltage+0xaec>
 8002368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236c:	4be0      	ldr	r3, [pc, #896]	; (80026f0 <Reading_Voltage+0xe88>)
 800236e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		SLAVEBMSC.CV[16] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 8002372:	7efb      	ldrb	r3, [r7, #27]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	7eba      	ldrb	r2, [r7, #26]
 8002378:	4313      	orrs	r3, r2
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002382:	ed9f 7ae0 	vldr	s14, [pc, #896]	; 8002704 <Reading_Voltage+0xe9c>
 8002386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800238a:	4bd9      	ldr	r3, [pc, #868]	; (80026f0 <Reading_Voltage+0xe88>)
 800238c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		SLAVEBMSC.CV[17] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 8002390:	7f7b      	ldrb	r3, [r7, #29]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	7f3a      	ldrb	r2, [r7, #28]
 8002396:	4313      	orrs	r3, r2
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a0:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 8002704 <Reading_Voltage+0xe9c>
 80023a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a8:	4bd1      	ldr	r3, [pc, #836]	; (80026f0 <Reading_Voltage+0xe88>)
 80023aa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		SLAVEBMSD.CV[15] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 80023ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c2:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8002704 <Reading_Voltage+0xe9c>
 80023c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ca:	4bca      	ldr	r3, [pc, #808]	; (80026f4 <Reading_Voltage+0xe8c>)
 80023cc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		SLAVEBMSD.CV[16] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 80023d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80023da:	4313      	orrs	r3, r2
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e4:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8002704 <Reading_Voltage+0xe9c>
 80023e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ec:	4bc1      	ldr	r3, [pc, #772]	; (80026f4 <Reading_Voltage+0xe8c>)
 80023ee:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		SLAVEBMSD.CV[17] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 80023f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023fc:	4313      	orrs	r3, r2
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002406:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002704 <Reading_Voltage+0xe9c>
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240e:	4bb9      	ldr	r3, [pc, #740]	; (80026f4 <Reading_Voltage+0xe8c>)
 8002410:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		SLAVEBMSE.CV[15] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8002414:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800241e:	4313      	orrs	r3, r2
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002428:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002704 <Reading_Voltage+0xe9c>
 800242c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002430:	4bb1      	ldr	r3, [pc, #708]	; (80026f8 <Reading_Voltage+0xe90>)
 8002432:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		SLAVEBMSE.CV[16] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8002436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002440:	4313      	orrs	r3, r2
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800244a:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002704 <Reading_Voltage+0xe9c>
 800244e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002452:	4ba9      	ldr	r3, [pc, #676]	; (80026f8 <Reading_Voltage+0xe90>)
 8002454:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		SLAVEBMSE.CV[17] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8002458:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002462:	4313      	orrs	r3, r2
 8002464:	ee07 3a90 	vmov	s15, r3
 8002468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800246c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002704 <Reading_Voltage+0xe9c>
 8002470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002474:	4ba0      	ldr	r3, [pc, #640]	; (80026f8 <Reading_Voltage+0xe90>)
 8002476:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	}


	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_CLRAUX);
 800247a:	f240 7112 	movw	r1, #1810	; 0x712
 800247e:	2001      	movs	r0, #1
 8002480:	f7fe ff45 	bl	800130e <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(2);
 8002484:	2002      	movs	r0, #2
 8002486:	f002 fdbf 	bl	8005008 <HAL_Delay>
	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_ADAX | SLAVEBMS_CBD_MD_7K);
 800248a:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 800248e:	2001      	movs	r0, #1
 8002490:	f7fe ff3d 	bl	800130e <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(1);
 8002494:	2001      	movs	r0, #1
 8002496:	f002 fdb7 	bl	8005008 <HAL_Delay>
	SLAVEBMS_PollADCDone(SLAVEBMSACCESS_FWD, &ConversionResult);
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	4619      	mov	r1, r3
 800249e:	2001      	movs	r0, #1
 80024a0:	f7fe ff9a 	bl	80013d8 <SLAVEBMS_PollADCDone>

	if(ConversionResult == SLAVEBMSACCESS_CRC_MATCH)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 834d 	bne.w	8002b46 <Reading_Voltage+0x12de>
	{
		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDAUXA, 5, Data_Array);
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	2205      	movs	r2, #5
 80024b2:	210c      	movs	r1, #12
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7fe fe5b 	bl	8001170 <SLAVEBMS_ReadDataGroup>


		SLAVEBMSA.GV[0] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 80024ba:	7a7b      	ldrb	r3, [r7, #9]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	7a3a      	ldrb	r2, [r7, #8]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ca:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002704 <Reading_Voltage+0xe9c>
 80024ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d2:	4b8a      	ldr	r3, [pc, #552]	; (80026fc <Reading_Voltage+0xe94>)
 80024d4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		SLAVEBMSA.GV[1] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 80024d8:	7afb      	ldrb	r3, [r7, #11]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	7aba      	ldrb	r2, [r7, #10]
 80024de:	4313      	orrs	r3, r2
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e8:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002704 <Reading_Voltage+0xe9c>
 80024ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f0:	4b82      	ldr	r3, [pc, #520]	; (80026fc <Reading_Voltage+0xe94>)
 80024f2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		SLAVEBMSA.GV[2] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 80024f6:	7b7b      	ldrb	r3, [r7, #13]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	7b3a      	ldrb	r2, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002506:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002704 <Reading_Voltage+0xe9c>
 800250a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250e:	4b7b      	ldr	r3, [pc, #492]	; (80026fc <Reading_Voltage+0xe94>)
 8002510:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		SLAVEBMSB.GV[0] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8002514:	7c7b      	ldrb	r3, [r7, #17]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	7c3a      	ldrb	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	ee07 3a90 	vmov	s15, r3
 8002520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002524:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002704 <Reading_Voltage+0xe9c>
 8002528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800252c:	4b74      	ldr	r3, [pc, #464]	; (8002700 <Reading_Voltage+0xe98>)
 800252e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		SLAVEBMSB.GV[1] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	7cba      	ldrb	r2, [r7, #18]
 8002538:	4313      	orrs	r3, r2
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002542:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002704 <Reading_Voltage+0xe9c>
 8002546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254a:	4b6d      	ldr	r3, [pc, #436]	; (8002700 <Reading_Voltage+0xe98>)
 800254c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		SLAVEBMSB.GV[2] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8002550:	7d7b      	ldrb	r3, [r7, #21]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	7d3a      	ldrb	r2, [r7, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002560:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002704 <Reading_Voltage+0xe9c>
 8002564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002568:	4b65      	ldr	r3, [pc, #404]	; (8002700 <Reading_Voltage+0xe98>)
 800256a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		SLAVEBMSC.GV[0] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 800256e:	7e7b      	ldrb	r3, [r7, #25]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	7e3a      	ldrb	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002704 <Reading_Voltage+0xe9c>
 8002582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002586:	4b5a      	ldr	r3, [pc, #360]	; (80026f0 <Reading_Voltage+0xe88>)
 8002588:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		SLAVEBMSC.GV[1] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 800258c:	7efb      	ldrb	r3, [r7, #27]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	7eba      	ldrb	r2, [r7, #26]
 8002592:	4313      	orrs	r3, r2
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800259c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002704 <Reading_Voltage+0xe9c>
 80025a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a4:	4b52      	ldr	r3, [pc, #328]	; (80026f0 <Reading_Voltage+0xe88>)
 80025a6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		SLAVEBMSC.GV[2] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 80025aa:	7f7b      	ldrb	r3, [r7, #29]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	7f3a      	ldrb	r2, [r7, #28]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ba:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002704 <Reading_Voltage+0xe9c>
 80025be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c2:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <Reading_Voltage+0xe88>)
 80025c4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		SLAVEBMSD.GV[0] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 80025c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025dc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002704 <Reading_Voltage+0xe9c>
 80025e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e4:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <Reading_Voltage+0xe8c>)
 80025e6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		SLAVEBMSD.GV[1] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 80025ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80025f4:	4313      	orrs	r3, r2
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fe:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002704 <Reading_Voltage+0xe9c>
 8002602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002606:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <Reading_Voltage+0xe8c>)
 8002608:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		SLAVEBMSD.GV[2] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 800260c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002616:	4313      	orrs	r3, r2
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002620:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002704 <Reading_Voltage+0xe9c>
 8002624:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002628:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <Reading_Voltage+0xe8c>)
 800262a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		SLAVEBMSE.GV[0] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 800262e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002638:	4313      	orrs	r3, r2
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002642:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002704 <Reading_Voltage+0xe9c>
 8002646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <Reading_Voltage+0xe90>)
 800264c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		SLAVEBMSE.GV[1] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8002650:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800265a:	4313      	orrs	r3, r2
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002664:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002704 <Reading_Voltage+0xe9c>
 8002668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <Reading_Voltage+0xe90>)
 800266e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		SLAVEBMSE.GV[2] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8002672:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800267c:	4313      	orrs	r3, r2
 800267e:	ee07 3a90 	vmov	s15, r3
 8002682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002686:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002704 <Reading_Voltage+0xe9c>
 800268a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <Reading_Voltage+0xe90>)
 8002690:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50


		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDAUXB, 5, Data_Array);
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	2205      	movs	r2, #5
 800269a:	210e      	movs	r1, #14
 800269c:	2001      	movs	r0, #1
 800269e:	f7fe fd67 	bl	8001170 <SLAVEBMS_ReadDataGroup>

		SLAVEBMSA.GV[3] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 80026a2:	7a7b      	ldrb	r3, [r7, #9]
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	7a3a      	ldrb	r2, [r7, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	ee07 3a90 	vmov	s15, r3
 80026ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002704 <Reading_Voltage+0xe9c>
 80026b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <Reading_Voltage+0xe94>)
 80026bc:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		SLAVEBMSA.GV[4] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 80026c0:	7afb      	ldrb	r3, [r7, #11]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	7aba      	ldrb	r2, [r7, #10]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002704 <Reading_Voltage+0xe9c>
 80026d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <Reading_Voltage+0xe94>)
 80026da:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		SLAVEBMSA.REF = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 80026de:	7b7b      	ldrb	r3, [r7, #13]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	7b3a      	ldrb	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ee:	e00b      	b.n	8002708 <Reading_Voltage+0xea0>
 80026f0:	20000358 	.word	0x20000358
 80026f4:	2000043c 	.word	0x2000043c
 80026f8:	20000520 	.word	0x20000520
 80026fc:	20000190 	.word	0x20000190
 8002700:	20000274 	.word	0x20000274
 8002704:	38d1b717 	.word	0x38d1b717
 8002708:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002704 <Reading_Voltage+0xe9c>
 800270c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002710:	4be0      	ldr	r3, [pc, #896]	; (8002a94 <Reading_Voltage+0x122c>)
 8002712:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

		SLAVEBMSB.GV[3] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8002716:	7c7b      	ldrb	r3, [r7, #17]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	7c3a      	ldrb	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002726:	ed9f 7ae0 	vldr	s14, [pc, #896]	; 8002aa8 <Reading_Voltage+0x1240>
 800272a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800272e:	4bda      	ldr	r3, [pc, #872]	; (8002a98 <Reading_Voltage+0x1230>)
 8002730:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		SLAVEBMSB.GV[4] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	7cba      	ldrb	r2, [r7, #18]
 800273a:	4313      	orrs	r3, r2
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002744:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 8002aa8 <Reading_Voltage+0x1240>
 8002748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274c:	4bd2      	ldr	r3, [pc, #840]	; (8002a98 <Reading_Voltage+0x1230>)
 800274e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		SLAVEBMSB.REF = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8002752:	7d7b      	ldrb	r3, [r7, #21]
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	7d3a      	ldrb	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002762:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8002aa8 <Reading_Voltage+0x1240>
 8002766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800276a:	4bcb      	ldr	r3, [pc, #812]	; (8002a98 <Reading_Voltage+0x1230>)
 800276c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

		SLAVEBMSC.GV[3] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8002770:	7e7b      	ldrb	r3, [r7, #25]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	7e3a      	ldrb	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002780:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8002aa8 <Reading_Voltage+0x1240>
 8002784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002788:	4bc4      	ldr	r3, [pc, #784]	; (8002a9c <Reading_Voltage+0x1234>)
 800278a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		SLAVEBMSC.GV[4] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 800278e:	7efb      	ldrb	r3, [r7, #27]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	7eba      	ldrb	r2, [r7, #26]
 8002794:	4313      	orrs	r3, r2
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800279e:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8002aa8 <Reading_Voltage+0x1240>
 80027a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a6:	4bbd      	ldr	r3, [pc, #756]	; (8002a9c <Reading_Voltage+0x1234>)
 80027a8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		SLAVEBMSC.REF = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 80027ac:	7f7b      	ldrb	r3, [r7, #29]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	7f3a      	ldrb	r2, [r7, #28]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	ee07 3a90 	vmov	s15, r3
 80027b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027bc:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8002aa8 <Reading_Voltage+0x1240>
 80027c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c4:	4bb5      	ldr	r3, [pc, #724]	; (8002a9c <Reading_Voltage+0x1234>)
 80027c6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

		SLAVEBMSD.GV[3] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 80027ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027de:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8002aa8 <Reading_Voltage+0x1240>
 80027e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e6:	4bae      	ldr	r3, [pc, #696]	; (8002aa0 <Reading_Voltage+0x1238>)
 80027e8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		SLAVEBMSD.GV[4] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 80027ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80027f6:	4313      	orrs	r3, r2
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002800:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002aa8 <Reading_Voltage+0x1240>
 8002804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002808:	4ba5      	ldr	r3, [pc, #660]	; (8002aa0 <Reading_Voltage+0x1238>)
 800280a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		SLAVEBMSD.REF = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 800280e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002818:	4313      	orrs	r3, r2
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002822:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8002aa8 <Reading_Voltage+0x1240>
 8002826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800282a:	4b9d      	ldr	r3, [pc, #628]	; (8002aa0 <Reading_Voltage+0x1238>)
 800282c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

		SLAVEBMSE.GV[3] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8002830:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800283a:	4313      	orrs	r3, r2
 800283c:	ee07 3a90 	vmov	s15, r3
 8002840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002844:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8002aa8 <Reading_Voltage+0x1240>
 8002848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800284c:	4b95      	ldr	r3, [pc, #596]	; (8002aa4 <Reading_Voltage+0x123c>)
 800284e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		SLAVEBMSE.GV[4] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8002852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800285c:	4313      	orrs	r3, r2
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002866:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002aa8 <Reading_Voltage+0x1240>
 800286a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286e:	4b8d      	ldr	r3, [pc, #564]	; (8002aa4 <Reading_Voltage+0x123c>)
 8002870:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		SLAVEBMSE.REF = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8002874:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800287e:	4313      	orrs	r3, r2
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002888:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002aa8 <Reading_Voltage+0x1240>
 800288c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002890:	4b84      	ldr	r3, [pc, #528]	; (8002aa4 <Reading_Voltage+0x123c>)
 8002892:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c


		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDAUXC, 5, Data_Array);
 8002896:	f107 0308 	add.w	r3, r7, #8
 800289a:	2205      	movs	r2, #5
 800289c:	210d      	movs	r1, #13
 800289e:	2001      	movs	r0, #1
 80028a0:	f7fe fc66 	bl	8001170 <SLAVEBMS_ReadDataGroup>


		SLAVEBMSA.GV[5] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 80028a4:	7a7b      	ldrb	r3, [r7, #9]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	7a3a      	ldrb	r2, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b4:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002aa8 <Reading_Voltage+0x1240>
 80028b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028bc:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <Reading_Voltage+0x122c>)
 80028be:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		SLAVEBMSA.GV[6] = (float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001);
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	7aba      	ldrb	r2, [r7, #10]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d2:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002aa8 <Reading_Voltage+0x1240>
 80028d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028da:	4b6e      	ldr	r3, [pc, #440]	; (8002a94 <Reading_Voltage+0x122c>)
 80028dc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		SLAVEBMSA.GV[7] = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 80028e0:	7b7b      	ldrb	r3, [r7, #13]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	7b3a      	ldrb	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f0:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002aa8 <Reading_Voltage+0x1240>
 80028f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f8:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <Reading_Voltage+0x122c>)
 80028fa:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		SLAVEBMSB.GV[5] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 80028fe:	7c7b      	ldrb	r3, [r7, #17]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	7c3a      	ldrb	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800290e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002aa8 <Reading_Voltage+0x1240>
 8002912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002916:	4b60      	ldr	r3, [pc, #384]	; (8002a98 <Reading_Voltage+0x1230>)
 8002918:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		SLAVEBMSB.GV[6] = (float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001);
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	7cba      	ldrb	r2, [r7, #18]
 8002922:	4313      	orrs	r3, r2
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002aa8 <Reading_Voltage+0x1240>
 8002930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002934:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <Reading_Voltage+0x1230>)
 8002936:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		SLAVEBMSB.GV[7] = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 800293a:	7d7b      	ldrb	r3, [r7, #21]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	7d3a      	ldrb	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002aa8 <Reading_Voltage+0x1240>
 800294e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002952:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <Reading_Voltage+0x1230>)
 8002954:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		SLAVEBMSC.GV[5] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8002958:	7e7b      	ldrb	r3, [r7, #25]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	7e3a      	ldrb	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002968:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002aa8 <Reading_Voltage+0x1240>
 800296c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002970:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <Reading_Voltage+0x1234>)
 8002972:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		SLAVEBMSC.GV[6] = (float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001);
 8002976:	7efb      	ldrb	r3, [r7, #27]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	7eba      	ldrb	r2, [r7, #26]
 800297c:	4313      	orrs	r3, r2
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002986:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002aa8 <Reading_Voltage+0x1240>
 800298a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298e:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <Reading_Voltage+0x1234>)
 8002990:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		SLAVEBMSC.GV[7] = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 8002994:	7f7b      	ldrb	r3, [r7, #29]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	7f3a      	ldrb	r2, [r7, #28]
 800299a:	4313      	orrs	r3, r2
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002aa8 <Reading_Voltage+0x1240>
 80029a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ac:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <Reading_Voltage+0x1234>)
 80029ae:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		SLAVEBMSD.GV[5] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 80029b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029bc:	4313      	orrs	r3, r2
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002aa8 <Reading_Voltage+0x1240>
 80029ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ce:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <Reading_Voltage+0x1238>)
 80029d0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		SLAVEBMSD.GV[6] = (float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001);
 80029d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80029de:	4313      	orrs	r3, r2
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002aa8 <Reading_Voltage+0x1240>
 80029ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <Reading_Voltage+0x1238>)
 80029f2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		SLAVEBMSD.GV[7] = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 80029f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a00:	4313      	orrs	r3, r2
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a0a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002aa8 <Reading_Voltage+0x1240>
 8002a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <Reading_Voltage+0x1238>)
 8002a14:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		SLAVEBMSE.GV[5] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8002a18:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002a22:	4313      	orrs	r3, r2
 8002a24:	ee07 3a90 	vmov	s15, r3
 8002a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002aa8 <Reading_Voltage+0x1240>
 8002a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <Reading_Voltage+0x123c>)
 8002a36:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		SLAVEBMSE.GV[6] = (float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001);
 8002a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002a44:	4313      	orrs	r3, r2
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002aa8 <Reading_Voltage+0x1240>
 8002a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <Reading_Voltage+0x123c>)
 8002a58:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		SLAVEBMSE.GV[7] = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8002a5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002a66:	4313      	orrs	r3, r2
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a70:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002aa8 <Reading_Voltage+0x1240>
 8002a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <Reading_Voltage+0x123c>)
 8002a7a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64


		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDAUXD, 5, Data_Array);
 8002a7e:	f107 0308 	add.w	r3, r7, #8
 8002a82:	2205      	movs	r2, #5
 8002a84:	210f      	movs	r1, #15
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7fe fb72 	bl	8001170 <SLAVEBMS_ReadDataGroup>


		SLAVEBMSA.GV[8] = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 8002a8c:	7a7b      	ldrb	r3, [r7, #9]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	e00c      	b.n	8002aac <Reading_Voltage+0x1244>
 8002a92:	bf00      	nop
 8002a94:	20000190 	.word	0x20000190
 8002a98:	20000274 	.word	0x20000274
 8002a9c:	20000358 	.word	0x20000358
 8002aa0:	2000043c 	.word	0x2000043c
 8002aa4:	20000520 	.word	0x20000520
 8002aa8:	38d1b717 	.word	0x38d1b717
 8002aac:	7a3a      	ldrb	r2, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab8:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8002aa8 <Reading_Voltage+0x1240>
 8002abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac0:	4be2      	ldr	r3, [pc, #904]	; (8002e4c <Reading_Voltage+0x15e4>)
 8002ac2:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		SLAVEBMSB.GV[8] = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8002ac6:	7c7b      	ldrb	r3, [r7, #17]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	7c3a      	ldrb	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad6:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8002e50 <Reading_Voltage+0x15e8>
 8002ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ade:	4bdd      	ldr	r3, [pc, #884]	; (8002e54 <Reading_Voltage+0x15ec>)
 8002ae0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		SLAVEBMSC.GV[8] = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8002ae4:	7e7b      	ldrb	r3, [r7, #25]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	7e3a      	ldrb	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af4:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 8002e50 <Reading_Voltage+0x15e8>
 8002af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afc:	4bd6      	ldr	r3, [pc, #856]	; (8002e58 <Reading_Voltage+0x15f0>)
 8002afe:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		SLAVEBMSD.GV[8] = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8002b02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b16:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8002e50 <Reading_Voltage+0x15e8>
 8002b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b1e:	4bcf      	ldr	r3, [pc, #828]	; (8002e5c <Reading_Voltage+0x15f4>)
 8002b20:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		SLAVEBMSE.GV[8] = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8002b24:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b38:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8002e50 <Reading_Voltage+0x15e8>
 8002b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b40:	4bc7      	ldr	r3, [pc, #796]	; (8002e60 <Reading_Voltage+0x15f8>)
 8002b42:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	}

	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_CLRSTAT);
 8002b46:	f240 7113 	movw	r1, #1811	; 0x713
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7fe fbdf 	bl	800130e <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(2);
 8002b50:	2002      	movs	r0, #2
 8002b52:	f002 fa59 	bl	8005008 <HAL_Delay>
	SLAVEBMS_WriteSingleCmd(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_ADSTAT | SLAVEBMS_CBD_MD_7K);
 8002b56:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f7fe fbd7 	bl	800130e <SLAVEBMS_WriteSingleCmd>
	HAL_Delay(1);
 8002b60:	2001      	movs	r0, #1
 8002b62:	f002 fa51 	bl	8005008 <HAL_Delay>
	SLAVEBMS_PollADCDone(SLAVEBMSACCESS_FWD, &ConversionResult);
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	4619      	mov	r1, r3
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f7fe fc34 	bl	80013d8 <SLAVEBMS_PollADCDone>
	if(ConversionResult == SLAVEBMSACCESS_CRC_MATCH)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 8187 	bne.w	8002e86 <Reading_Voltage+0x161e>
	{
		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDSTATA, 5, Data_Array);
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	2205      	movs	r2, #5
 8002b7e:	2110      	movs	r1, #16
 8002b80:	2001      	movs	r0, #1
 8002b82:	f7fe faf5 	bl	8001170 <SLAVEBMS_ReadDataGroup>


		SLAVEBMSA.SC = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.003);
 8002b86:	7a7b      	ldrb	r3, [r7, #9]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	7a3a      	ldrb	r2, [r7, #8]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b96:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8002e64 <Reading_Voltage+0x15fc>
 8002b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9e:	4bab      	ldr	r3, [pc, #684]	; (8002e4c <Reading_Voltage+0x15e4>)
 8002ba0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		SLAVEBMSA.ITMP = ((float)(((unsigned short)(Data_Array[3]) << 8) | Data_Array[2]) * (float)(0.0001) / (float)(0.0076)) - (float)(276.);
 8002ba4:	7afb      	ldrb	r3, [r7, #11]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	7aba      	ldrb	r2, [r7, #10]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	ee07 3a90 	vmov	s15, r3
 8002bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002e50 <Reading_Voltage+0x15e8>
 8002bb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bbc:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8002e68 <Reading_Voltage+0x1600>
 8002bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc4:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002e6c <Reading_Voltage+0x1604>
 8002bc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bcc:	4b9f      	ldr	r3, [pc, #636]	; (8002e4c <Reading_Voltage+0x15e4>)
 8002bce:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		SLAVEBMSA.VA = (float)(((unsigned short)(Data_Array[5]) << 8) | Data_Array[4]) * (float)(0.0001);
 8002bd2:	7b7b      	ldrb	r3, [r7, #13]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	7b3a      	ldrb	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be2:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002e50 <Reading_Voltage+0x15e8>
 8002be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bea:	4b98      	ldr	r3, [pc, #608]	; (8002e4c <Reading_Voltage+0x15e4>)
 8002bec:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

		SLAVEBMSB.SC = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.003);
 8002bf0:	7c7b      	ldrb	r3, [r7, #17]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	7c3a      	ldrb	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c00:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8002e64 <Reading_Voltage+0x15fc>
 8002c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c08:	4b92      	ldr	r3, [pc, #584]	; (8002e54 <Reading_Voltage+0x15ec>)
 8002c0a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		SLAVEBMSB.ITMP = ((float)(((unsigned short)(Data_Array[11]) << 8) | Data_Array[10]) * (float)(0.0001) / (float)(0.0076)) - (float)(276.);
 8002c0e:	7cfb      	ldrb	r3, [r7, #19]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	7cba      	ldrb	r2, [r7, #18]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002e50 <Reading_Voltage+0x15e8>
 8002c22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c26:	eddf 6a90 	vldr	s13, [pc, #576]	; 8002e68 <Reading_Voltage+0x1600>
 8002c2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c2e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002e6c <Reading_Voltage+0x1604>
 8002c32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c36:	4b87      	ldr	r3, [pc, #540]	; (8002e54 <Reading_Voltage+0x15ec>)
 8002c38:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		SLAVEBMSB.VA = (float)(((unsigned short)(Data_Array[13]) << 8) | Data_Array[12]) * (float)(0.0001);
 8002c3c:	7d7b      	ldrb	r3, [r7, #21]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	7d3a      	ldrb	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002e50 <Reading_Voltage+0x15e8>
 8002c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c54:	4b7f      	ldr	r3, [pc, #508]	; (8002e54 <Reading_Voltage+0x15ec>)
 8002c56:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

		SLAVEBMSC.SC = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.003);
 8002c5a:	7e7b      	ldrb	r3, [r7, #25]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	7e3a      	ldrb	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c6a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002e64 <Reading_Voltage+0x15fc>
 8002c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c72:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <Reading_Voltage+0x15f0>)
 8002c74:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		SLAVEBMSC.ITMP = ((float)(((unsigned short)(Data_Array[19]) << 8) | Data_Array[18]) * (float)(0.0001) / (float)(0.0076)) - (float)(276.);
 8002c78:	7efb      	ldrb	r3, [r7, #27]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	7eba      	ldrb	r2, [r7, #26]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	ee07 3a90 	vmov	s15, r3
 8002c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c88:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002e50 <Reading_Voltage+0x15e8>
 8002c8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c90:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002e68 <Reading_Voltage+0x1600>
 8002c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c98:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002e6c <Reading_Voltage+0x1604>
 8002c9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ca0:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <Reading_Voltage+0x15f0>)
 8002ca2:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		SLAVEBMSC.VA = (float)(((unsigned short)(Data_Array[21]) << 8) | Data_Array[20]) * (float)(0.0001);
 8002ca6:	7f7b      	ldrb	r3, [r7, #29]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	7f3a      	ldrb	r2, [r7, #28]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cb6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002e50 <Reading_Voltage+0x15e8>
 8002cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cbe:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <Reading_Voltage+0x15f0>)
 8002cc0:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

		SLAVEBMSD.SC = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.003);
 8002cc4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cd8:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8002e64 <Reading_Voltage+0x15fc>
 8002cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	; (8002e5c <Reading_Voltage+0x15f4>)
 8002ce2:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		SLAVEBMSD.ITMP = ((float)(((unsigned short)(Data_Array[27]) << 8) | Data_Array[26]) * (float)(0.0001) / (float)(0.0076)) - (float)(276.);
 8002ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cfa:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002e50 <Reading_Voltage+0x15e8>
 8002cfe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d02:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002e68 <Reading_Voltage+0x1600>
 8002d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002e6c <Reading_Voltage+0x1604>
 8002d0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d12:	4b52      	ldr	r3, [pc, #328]	; (8002e5c <Reading_Voltage+0x15f4>)
 8002d14:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		SLAVEBMSD.VA = (float)(((unsigned short)(Data_Array[29]) << 8) | Data_Array[28]) * (float)(0.0001);
 8002d18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002d22:	4313      	orrs	r3, r2
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002e50 <Reading_Voltage+0x15e8>
 8002d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d34:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <Reading_Voltage+0x15f4>)
 8002d36:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

		SLAVEBMSE.SC = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.003);
 8002d3a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002d44:	4313      	orrs	r3, r2
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002e64 <Reading_Voltage+0x15fc>
 8002d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d56:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <Reading_Voltage+0x15f8>)
 8002d58:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		SLAVEBMSE.ITMP = ((float)(((unsigned short)(Data_Array[35]) << 8) | Data_Array[34]) * (float)(0.0001) / (float)(0.0076)) - (float)(276.);
 8002d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002d66:	4313      	orrs	r3, r2
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d70:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002e50 <Reading_Voltage+0x15e8>
 8002d74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d78:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8002e68 <Reading_Voltage+0x1600>
 8002d7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d80:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002e6c <Reading_Voltage+0x1604>
 8002d84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d88:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <Reading_Voltage+0x15f8>)
 8002d8a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		SLAVEBMSE.VA = (float)(((unsigned short)(Data_Array[37]) << 8) | Data_Array[36]) * (float)(0.0001);
 8002d8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002da2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002e50 <Reading_Voltage+0x15e8>
 8002da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <Reading_Voltage+0x15f8>)
 8002dac:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78


		SLAVEBMS_ReadDataGroup(SLAVEBMSACCESS_FWD, SLAVEBMS_CMD_RDSTATB, 5, Data_Array);
 8002db0:	f107 0308 	add.w	r3, r7, #8
 8002db4:	2205      	movs	r2, #5
 8002db6:	2112      	movs	r1, #18
 8002db8:	2001      	movs	r0, #1
 8002dba:	f7fe f9d9 	bl	8001170 <SLAVEBMS_ReadDataGroup>

		SLAVEBMSA.VD = (float)(((unsigned short)(Data_Array[1]) << 8) | Data_Array[0]) * (float)(0.0001);
 8002dbe:	7a7b      	ldrb	r3, [r7, #9]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	7a3a      	ldrb	r2, [r7, #8]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dce:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002e50 <Reading_Voltage+0x15e8>
 8002dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <Reading_Voltage+0x15e4>)
 8002dd8:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		SLAVEBMSB.VD = (float)(((unsigned short)(Data_Array[9]) << 8) | Data_Array[8]) * (float)(0.0001);
 8002ddc:	7c7b      	ldrb	r3, [r7, #17]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	7c3a      	ldrb	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dec:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002e50 <Reading_Voltage+0x15e8>
 8002df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df4:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <Reading_Voltage+0x15ec>)
 8002df6:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		SLAVEBMSC.VD = (float)(((unsigned short)(Data_Array[17]) << 8) | Data_Array[16]) * (float)(0.0001);
 8002dfa:	7e7b      	ldrb	r3, [r7, #25]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	7e3a      	ldrb	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e0a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002e50 <Reading_Voltage+0x15e8>
 8002e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <Reading_Voltage+0x15f0>)
 8002e14:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		SLAVEBMSD.VD = (float)(((unsigned short)(Data_Array[25]) << 8) | Data_Array[24]) * (float)(0.0001);
 8002e18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e2c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002e50 <Reading_Voltage+0x15e8>
 8002e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <Reading_Voltage+0x15f4>)
 8002e36:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		SLAVEBMSE.VD = (float)(((unsigned short)(Data_Array[33]) << 8) | Data_Array[32]) * (float)(0.0001);
 8002e3a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002e44:	4313      	orrs	r3, r2
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	e013      	b.n	8002e74 <Reading_Voltage+0x160c>
 8002e4c:	20000190 	.word	0x20000190
 8002e50:	38d1b717 	.word	0x38d1b717
 8002e54:	20000274 	.word	0x20000274
 8002e58:	20000358 	.word	0x20000358
 8002e5c:	2000043c 	.word	0x2000043c
 8002e60:	20000520 	.word	0x20000520
 8002e64:	3b449ba6 	.word	0x3b449ba6
 8002e68:	3bf9096c 	.word	0x3bf9096c
 8002e6c:	438a0000 	.word	0x438a0000
 8002e70:	38d1b717 	.word	0x38d1b717
 8002e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e78:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8002e70 <Reading_Voltage+0x1608>
 8002e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e80:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <Reading_Voltage+0x168c>)
 8002e82:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
			SLAVEBMSD.CV[i] = 3.80;
			SLAVEBMSE.CV[i] = 3.80;
		}
	}*/

	Sum_of_Voltage = (SLAVEBMSA.SC * 100) + (SLAVEBMSB.SC * 100)+ (SLAVEBMSC.SC * 100) + (SLAVEBMSD.SC * 100) + (SLAVEBMSE.SC * 100);
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <Reading_Voltage+0x1690>)
 8002e88:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002e8c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002efc <Reading_Voltage+0x1694>
 8002e90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <Reading_Voltage+0x1698>)
 8002e96:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002e9a:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002efc <Reading_Voltage+0x1694>
 8002e9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea6:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <Reading_Voltage+0x169c>)
 8002ea8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002eac:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002efc <Reading_Voltage+0x1694>
 8002eb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb8:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <Reading_Voltage+0x16a0>)
 8002eba:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002ebe:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002efc <Reading_Voltage+0x1694>
 8002ec2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <Reading_Voltage+0x168c>)
 8002ecc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002ed0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002efc <Reading_Voltage+0x1694>
 8002ed4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee0:	ee17 3a90 	vmov	r3, s15
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <Reading_Voltage+0x16a4>)
 8002ee8:	801a      	strh	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	3730      	adds	r7, #48	; 0x30
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000520 	.word	0x20000520
 8002ef8:	20000190 	.word	0x20000190
 8002efc:	42c80000 	.word	0x42c80000
 8002f00:	20000274 	.word	0x20000274
 8002f04:	20000358 	.word	0x20000358
 8002f08:	2000043c 	.word	0x2000043c
 8002f0c:	2000066c 	.word	0x2000066c

08002f10 <Transmit_Data>:
	c5[12] += SLAVEBMSE.CV[12];
	c5[13] += SLAVEBMSE.CV[13];
}

void Transmit_Data()
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
	if(state == 0)
 8002f16:	4b9c      	ldr	r3, [pc, #624]	; (8003188 <Transmit_Data+0x278>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d17b      	bne.n	8003016 <Transmit_Data+0x106>
	{
		uint8_t Sum_of_Voltage_1 = (Sum_of_Voltage & 0x00ff);
 8002f1e:	4b9b      	ldr	r3, [pc, #620]	; (800318c <Transmit_Data+0x27c>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	73fb      	strb	r3, [r7, #15]
		uint8_t Sum_of_Voltage_2 = ((Sum_of_Voltage & 0xff00)>>8);
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <Transmit_Data+0x27c>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	73bb      	strb	r3, [r7, #14]

		tx_data1[0] = Sum_of_Voltage_1;
 8002f2e:	4a98      	ldr	r2, [pc, #608]	; (8003190 <Transmit_Data+0x280>)
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	7013      	strb	r3, [r2, #0]
		tx_data1[1] = Sum_of_Voltage_2;
 8002f34:	4a96      	ldr	r2, [pc, #600]	; (8003190 <Transmit_Data+0x280>)
 8002f36:	7bbb      	ldrb	r3, [r7, #14]
 8002f38:	7053      	strb	r3, [r2, #1]
		tx_data1[2] = (uint8_t)((int)(SLAVEBMSA.Max_Voltage * 100) & 0x00ff) - 255;
 8002f3a:	4b96      	ldr	r3, [pc, #600]	; (8003194 <Transmit_Data+0x284>)
 8002f3c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002f40:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8003198 <Transmit_Data+0x288>
 8002f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f4c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f50:	793b      	ldrb	r3, [r7, #4]
 8002f52:	3301      	adds	r3, #1
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4b8e      	ldr	r3, [pc, #568]	; (8003190 <Transmit_Data+0x280>)
 8002f58:	709a      	strb	r2, [r3, #2]
		tx_data1[3] = (uint8_t)((int)(SLAVEBMSB.Max_Voltage * 100) & 0x00ff) - 255;
 8002f5a:	4b90      	ldr	r3, [pc, #576]	; (800319c <Transmit_Data+0x28c>)
 8002f5c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002f60:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8003198 <Transmit_Data+0x288>
 8002f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f70:	793b      	ldrb	r3, [r7, #4]
 8002f72:	3301      	adds	r3, #1
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4b86      	ldr	r3, [pc, #536]	; (8003190 <Transmit_Data+0x280>)
 8002f78:	70da      	strb	r2, [r3, #3]
		tx_data1[4] = (uint8_t)((int)(SLAVEBMSC.Max_Voltage * 100) & 0x00ff) - 255;
 8002f7a:	4b89      	ldr	r3, [pc, #548]	; (80031a0 <Transmit_Data+0x290>)
 8002f7c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002f80:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003198 <Transmit_Data+0x288>
 8002f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f8c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f90:	793b      	ldrb	r3, [r7, #4]
 8002f92:	3301      	adds	r3, #1
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4b7e      	ldr	r3, [pc, #504]	; (8003190 <Transmit_Data+0x280>)
 8002f98:	711a      	strb	r2, [r3, #4]
		tx_data1[5] = (uint8_t)((int)(SLAVEBMSD.Max_Voltage * 100) & 0x00ff) - 255;
 8002f9a:	4b82      	ldr	r3, [pc, #520]	; (80031a4 <Transmit_Data+0x294>)
 8002f9c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002fa0:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003198 <Transmit_Data+0x288>
 8002fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fac:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fb0:	793b      	ldrb	r3, [r7, #4]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4b76      	ldr	r3, [pc, #472]	; (8003190 <Transmit_Data+0x280>)
 8002fb8:	715a      	strb	r2, [r3, #5]
		tx_data1[6] = (uint8_t)((int)(SLAVEBMSE.Max_Voltage * 100) & 0x00ff) - 255;
 8002fba:	4b7b      	ldr	r3, [pc, #492]	; (80031a8 <Transmit_Data+0x298>)
 8002fbc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002fc0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003198 <Transmit_Data+0x288>
 8002fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fcc:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fd0:	793b      	ldrb	r3, [r7, #4]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b6e      	ldr	r3, [pc, #440]	; (8003190 <Transmit_Data+0x280>)
 8002fd8:	719a      	strb	r2, [r3, #6]
		tx_data1[7] = state;
 8002fda:	4b6b      	ldr	r3, [pc, #428]	; (8003188 <Transmit_Data+0x278>)
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	4b6c      	ldr	r3, [pc, #432]	; (8003190 <Transmit_Data+0x280>)
 8002fe0:	71da      	strb	r2, [r3, #7]
		state = 1;
 8002fe2:	4b69      	ldr	r3, [pc, #420]	; (8003188 <Transmit_Data+0x278>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
		Mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8002fe8:	4870      	ldr	r0, [pc, #448]	; (80031ac <Transmit_Data+0x29c>)
 8002fea:	f003 fdb3 	bl	8006b54 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4a6f      	ldr	r2, [pc, #444]	; (80031b0 <Transmit_Data+0x2a0>)
 8002ff2:	6013      	str	r3, [r2, #0]

		if(Mailbox)
 8002ff4:	4b6e      	ldr	r3, [pc, #440]	; (80031b0 <Transmit_Data+0x2a0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80c1 	beq.w	8003180 <Transmit_Data+0x270>
		{
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, tx_data1, &Mailbox);
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	; (80031b0 <Transmit_Data+0x2a0>)
 8003000:	4a63      	ldr	r2, [pc, #396]	; (8003190 <Transmit_Data+0x280>)
 8003002:	496c      	ldr	r1, [pc, #432]	; (80031b4 <Transmit_Data+0x2a4>)
 8003004:	4869      	ldr	r0, [pc, #420]	; (80031ac <Transmit_Data+0x29c>)
 8003006:	f003 fcd5 	bl	80069b4 <HAL_CAN_AddTxMessage>
			can_count1++;
 800300a:	4b6b      	ldr	r3, [pc, #428]	; (80031b8 <Transmit_Data+0x2a8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	4a69      	ldr	r2, [pc, #420]	; (80031b8 <Transmit_Data+0x2a8>)
 8003012:	6013      	str	r3, [r2, #0]
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader3, tx_data3, &Mailbox);
			can_count3++;
		}
	}

}
 8003014:	e0b4      	b.n	8003180 <Transmit_Data+0x270>
	else if(state == 1)
 8003016:	4b5c      	ldr	r3, [pc, #368]	; (8003188 <Transmit_Data+0x278>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d172      	bne.n	8003104 <Transmit_Data+0x1f4>
		tx_data2[0] = (uint8_t)((int)(SLAVEBMSA.Min_Voltage * 100) & 0x00ff) - 255;
 800301e:	4b5d      	ldr	r3, [pc, #372]	; (8003194 <Transmit_Data+0x284>)
 8003020:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003024:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003198 <Transmit_Data+0x288>
 8003028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003030:	edc7 7a01 	vstr	s15, [r7, #4]
 8003034:	793b      	ldrb	r3, [r7, #4]
 8003036:	3301      	adds	r3, #1
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b60      	ldr	r3, [pc, #384]	; (80031bc <Transmit_Data+0x2ac>)
 800303c:	701a      	strb	r2, [r3, #0]
		tx_data2[1] = (uint8_t)((int)(SLAVEBMSB.Min_Voltage * 100) & 0x00ff) - 255;
 800303e:	4b57      	ldr	r3, [pc, #348]	; (800319c <Transmit_Data+0x28c>)
 8003040:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003044:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003198 <Transmit_Data+0x288>
 8003048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800304c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003050:	edc7 7a01 	vstr	s15, [r7, #4]
 8003054:	793b      	ldrb	r3, [r7, #4]
 8003056:	3301      	adds	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b58      	ldr	r3, [pc, #352]	; (80031bc <Transmit_Data+0x2ac>)
 800305c:	705a      	strb	r2, [r3, #1]
		tx_data2[2] = (uint8_t)((int)(SLAVEBMSC.Min_Voltage * 100) & 0x00ff) - 255;
 800305e:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <Transmit_Data+0x290>)
 8003060:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003064:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003198 <Transmit_Data+0x288>
 8003068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800306c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003070:	edc7 7a01 	vstr	s15, [r7, #4]
 8003074:	793b      	ldrb	r3, [r7, #4]
 8003076:	3301      	adds	r3, #1
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4b50      	ldr	r3, [pc, #320]	; (80031bc <Transmit_Data+0x2ac>)
 800307c:	709a      	strb	r2, [r3, #2]
		tx_data2[3] = (uint8_t)((int)(SLAVEBMSD.Min_Voltage * 100) & 0x00ff) - 255;
 800307e:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <Transmit_Data+0x294>)
 8003080:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003084:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003198 <Transmit_Data+0x288>
 8003088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003090:	edc7 7a01 	vstr	s15, [r7, #4]
 8003094:	793b      	ldrb	r3, [r7, #4]
 8003096:	3301      	adds	r3, #1
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4b48      	ldr	r3, [pc, #288]	; (80031bc <Transmit_Data+0x2ac>)
 800309c:	70da      	strb	r2, [r3, #3]
		tx_data2[4] = (uint8_t)((int)(SLAVEBMSE.Min_Voltage * 100) & 0x00ff) - 255;
 800309e:	4b42      	ldr	r3, [pc, #264]	; (80031a8 <Transmit_Data+0x298>)
 80030a0:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80030a4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003198 <Transmit_Data+0x288>
 80030a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80030b4:	793b      	ldrb	r3, [r7, #4]
 80030b6:	3301      	adds	r3, #1
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4b40      	ldr	r3, [pc, #256]	; (80031bc <Transmit_Data+0x2ac>)
 80030bc:	711a      	strb	r2, [r3, #4]
		tx_data2[5] = state;
 80030be:	4b32      	ldr	r3, [pc, #200]	; (8003188 <Transmit_Data+0x278>)
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <Transmit_Data+0x2ac>)
 80030c4:	715a      	strb	r2, [r3, #5]
		tx_data2[6] = 0;
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <Transmit_Data+0x2ac>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	719a      	strb	r2, [r3, #6]
		tx_data2[7] = 0;
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <Transmit_Data+0x2ac>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	71da      	strb	r2, [r3, #7]
		state = 2;
 80030d2:	4b2d      	ldr	r3, [pc, #180]	; (8003188 <Transmit_Data+0x278>)
 80030d4:	2202      	movs	r2, #2
 80030d6:	701a      	strb	r2, [r3, #0]
		Mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 80030d8:	4834      	ldr	r0, [pc, #208]	; (80031ac <Transmit_Data+0x29c>)
 80030da:	f003 fd3b 	bl	8006b54 <HAL_CAN_GetTxMailboxesFreeLevel>
 80030de:	4603      	mov	r3, r0
 80030e0:	4a33      	ldr	r2, [pc, #204]	; (80031b0 <Transmit_Data+0x2a0>)
 80030e2:	6013      	str	r3, [r2, #0]
		if(Mailbox)
 80030e4:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <Transmit_Data+0x2a0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d049      	beq.n	8003180 <Transmit_Data+0x270>
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, tx_data2, &Mailbox);
 80030ec:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <Transmit_Data+0x2a0>)
 80030ee:	4a33      	ldr	r2, [pc, #204]	; (80031bc <Transmit_Data+0x2ac>)
 80030f0:	4933      	ldr	r1, [pc, #204]	; (80031c0 <Transmit_Data+0x2b0>)
 80030f2:	482e      	ldr	r0, [pc, #184]	; (80031ac <Transmit_Data+0x29c>)
 80030f4:	f003 fc5e 	bl	80069b4 <HAL_CAN_AddTxMessage>
			can_count2++;
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <Transmit_Data+0x2b4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	4a31      	ldr	r2, [pc, #196]	; (80031c4 <Transmit_Data+0x2b4>)
 8003100:	6013      	str	r3, [r2, #0]
}
 8003102:	e03d      	b.n	8003180 <Transmit_Data+0x270>
	else if(state == 2)
 8003104:	4b20      	ldr	r3, [pc, #128]	; (8003188 <Transmit_Data+0x278>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d139      	bne.n	8003180 <Transmit_Data+0x270>
		tx_data3[0] = SLAVEBMSA.MaxTemp;
 800310c:	4b21      	ldr	r3, [pc, #132]	; (8003194 <Transmit_Data+0x284>)
 800310e:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8003112:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <Transmit_Data+0x2b8>)
 8003114:	701a      	strb	r2, [r3, #0]
		tx_data3[1] = SLAVEBMSB.MaxTemp;
 8003116:	4b21      	ldr	r3, [pc, #132]	; (800319c <Transmit_Data+0x28c>)
 8003118:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <Transmit_Data+0x2b8>)
 800311e:	705a      	strb	r2, [r3, #1]
		tx_data3[2] = SLAVEBMSC.MaxTemp;
 8003120:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <Transmit_Data+0x290>)
 8003122:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <Transmit_Data+0x2b8>)
 8003128:	709a      	strb	r2, [r3, #2]
		tx_data3[3] = SLAVEBMSD.MaxTemp;
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <Transmit_Data+0x294>)
 800312c:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <Transmit_Data+0x2b8>)
 8003132:	70da      	strb	r2, [r3, #3]
		tx_data3[4] = SLAVEBMSE.MaxTemp;
 8003134:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <Transmit_Data+0x298>)
 8003136:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <Transmit_Data+0x2b8>)
 800313c:	711a      	strb	r2, [r3, #4]
		tx_data3[5] = 0;
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <Transmit_Data+0x2b8>)
 8003140:	2200      	movs	r2, #0
 8003142:	715a      	strb	r2, [r3, #5]
		tx_data3[6] = 0;
 8003144:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <Transmit_Data+0x2b8>)
 8003146:	2200      	movs	r2, #0
 8003148:	719a      	strb	r2, [r3, #6]
		tx_data3[7] = 0;
 800314a:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <Transmit_Data+0x2b8>)
 800314c:	2200      	movs	r2, #0
 800314e:	71da      	strb	r2, [r3, #7]
		state = 0;
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <Transmit_Data+0x278>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
		Mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8003156:	4815      	ldr	r0, [pc, #84]	; (80031ac <Transmit_Data+0x29c>)
 8003158:	f003 fcfc 	bl	8006b54 <HAL_CAN_GetTxMailboxesFreeLevel>
 800315c:	4603      	mov	r3, r0
 800315e:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <Transmit_Data+0x2a0>)
 8003160:	6013      	str	r3, [r2, #0]
		if(Mailbox)
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <Transmit_Data+0x2a0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <Transmit_Data+0x270>
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader3, tx_data3, &Mailbox);
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <Transmit_Data+0x2a0>)
 800316c:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <Transmit_Data+0x2b8>)
 800316e:	4917      	ldr	r1, [pc, #92]	; (80031cc <Transmit_Data+0x2bc>)
 8003170:	480e      	ldr	r0, [pc, #56]	; (80031ac <Transmit_Data+0x29c>)
 8003172:	f003 fc1f 	bl	80069b4 <HAL_CAN_AddTxMessage>
			can_count3++;
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <Transmit_Data+0x2c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <Transmit_Data+0x2c0>)
 800317e:	6013      	str	r3, [r2, #0]
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	200006cd 	.word	0x200006cd
 800318c:	2000066c 	.word	0x2000066c
 8003190:	20000670 	.word	0x20000670
 8003194:	20000190 	.word	0x20000190
 8003198:	42c80000 	.word	0x42c80000
 800319c:	20000274 	.word	0x20000274
 80031a0:	20000358 	.word	0x20000358
 80031a4:	2000043c 	.word	0x2000043c
 80031a8:	20000520 	.word	0x20000520
 80031ac:	200000f8 	.word	0x200000f8
 80031b0:	20000688 	.word	0x20000688
 80031b4:	20000120 	.word	0x20000120
 80031b8:	200006d0 	.word	0x200006d0
 80031bc:	20000678 	.word	0x20000678
 80031c0:	20000138 	.word	0x20000138
 80031c4:	200006d4 	.word	0x200006d4
 80031c8:	20000680 	.word	0x20000680
 80031cc:	20000150 	.word	0x20000150
 80031d0:	200006d8 	.word	0x200006d8

080031d4 <Select_Address>:

void Select_Address(unsigned char number)  //for temperature sensor
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
	switch(number)
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	2b0e      	cmp	r3, #14
 80031e2:	f200 80dc 	bhi.w	800339e <Select_Address+0x1ca>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <Select_Address+0x18>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003229 	.word	0x08003229
 80031f0:	08003237 	.word	0x08003237
 80031f4:	0800324f 	.word	0x0800324f
 80031f8:	08003269 	.word	0x08003269
 80031fc:	08003283 	.word	0x08003283
 8003200:	0800329d 	.word	0x0800329d
 8003204:	080032b7 	.word	0x080032b7
 8003208:	080032d1 	.word	0x080032d1
 800320c:	080032eb 	.word	0x080032eb
 8003210:	08003305 	.word	0x08003305
 8003214:	0800331f 	.word	0x0800331f
 8003218:	08003339 	.word	0x08003339
 800321c:	08003353 	.word	0x08003353
 8003220:	0800336d 	.word	0x0800336d
 8003224:	08003387 	.word	0x08003387
	{
		case 0:
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin|A1_Pin|A0_Pin, GPIO_PIN_RESET);//1
 8003228:	2200      	movs	r2, #0
 800322a:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 800322e:	485e      	ldr	r0, [pc, #376]	; (80033a8 <Select_Address+0x1d4>)
 8003230:	f004 f9c8 	bl	80075c4 <HAL_GPIO_WritePin>
			//0000
			break;
 8003234:	e0b3      	b.n	800339e <Select_Address+0x1ca>

		case 1:
			HAL_GPIO_WritePin(GPIOC, A0_Pin, GPIO_PIN_SET);//2
 8003236:	2201      	movs	r2, #1
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	485b      	ldr	r0, [pc, #364]	; (80033a8 <Select_Address+0x1d4>)
 800323c:	f004 f9c2 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin|A1_Pin, GPIO_PIN_RESET);//0001
 8003240:	2200      	movs	r2, #0
 8003242:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8003246:	4858      	ldr	r0, [pc, #352]	; (80033a8 <Select_Address+0x1d4>)
 8003248:	f004 f9bc 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 800324c:	e0a7      	b.n	800339e <Select_Address+0x1ca>

		case 2:
			HAL_GPIO_WritePin(GPIOC, A1_Pin, GPIO_PIN_SET);//3
 800324e:	2201      	movs	r2, #1
 8003250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003254:	4854      	ldr	r0, [pc, #336]	; (80033a8 <Select_Address+0x1d4>)
 8003256:	f004 f9b5 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin|A0_Pin, GPIO_PIN_RESET);//0010
 800325a:	2200      	movs	r2, #0
 800325c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8003260:	4851      	ldr	r0, [pc, #324]	; (80033a8 <Select_Address+0x1d4>)
 8003262:	f004 f9af 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 8003266:	e09a      	b.n	800339e <Select_Address+0x1ca>

		case 3:
			HAL_GPIO_WritePin(GPIOC, A1_Pin|A0_Pin, GPIO_PIN_SET);//4
 8003268:	2201      	movs	r2, #1
 800326a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800326e:	484e      	ldr	r0, [pc, #312]	; (80033a8 <Select_Address+0x1d4>)
 8003270:	f004 f9a8 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin, GPIO_PIN_RESET);//0011
 8003274:	2200      	movs	r2, #0
 8003276:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800327a:	484b      	ldr	r0, [pc, #300]	; (80033a8 <Select_Address+0x1d4>)
 800327c:	f004 f9a2 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 8003280:	e08d      	b.n	800339e <Select_Address+0x1ca>

		case 4:
			HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_SET);//5
 8003282:	2201      	movs	r2, #1
 8003284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003288:	4847      	ldr	r0, [pc, #284]	; (80033a8 <Select_Address+0x1d4>)
 800328a:	f004 f99b 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A1_Pin|A0_Pin, GPIO_PIN_RESET);//0100
 800328e:	2200      	movs	r2, #0
 8003290:	f44f 6128 	mov.w	r1, #2688	; 0xa80
 8003294:	4844      	ldr	r0, [pc, #272]	; (80033a8 <Select_Address+0x1d4>)
 8003296:	f004 f995 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 800329a:	e080      	b.n	800339e <Select_Address+0x1ca>

		case 5:
			HAL_GPIO_WritePin(GPIOC, A2_Pin|A0_Pin, GPIO_PIN_SET);//6
 800329c:	2201      	movs	r2, #1
 800329e:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80032a2:	4841      	ldr	r0, [pc, #260]	; (80033a8 <Select_Address+0x1d4>)
 80032a4:	f004 f98e 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A1_Pin, GPIO_PIN_RESET);//0101
 80032a8:	2200      	movs	r2, #0
 80032aa:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80032ae:	483e      	ldr	r0, [pc, #248]	; (80033a8 <Select_Address+0x1d4>)
 80032b0:	f004 f988 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 80032b4:	e073      	b.n	800339e <Select_Address+0x1ca>

		case 6:
			HAL_GPIO_WritePin(GPIOC, A2_Pin|A1_Pin, GPIO_PIN_SET);//7
 80032b6:	2201      	movs	r2, #1
 80032b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032bc:	483a      	ldr	r0, [pc, #232]	; (80033a8 <Select_Address+0x1d4>)
 80032be:	f004 f981 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A0_Pin, GPIO_PIN_RESET);//0110
 80032c2:	2200      	movs	r2, #0
 80032c4:	f44f 6108 	mov.w	r1, #2176	; 0x880
 80032c8:	4837      	ldr	r0, [pc, #220]	; (80033a8 <Select_Address+0x1d4>)
 80032ca:	f004 f97b 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 80032ce:	e066      	b.n	800339e <Select_Address+0x1ca>

		case 7:
			HAL_GPIO_WritePin(GPIOC, A2_Pin|A1_Pin|A0_Pin, GPIO_PIN_SET);//8
 80032d0:	2201      	movs	r2, #1
 80032d2:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 80032d6:	4834      	ldr	r0, [pc, #208]	; (80033a8 <Select_Address+0x1d4>)
 80032d8:	f004 f974 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A3_Pin, GPIO_PIN_RESET);//0111
 80032dc:	2200      	movs	r2, #0
 80032de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032e2:	4831      	ldr	r0, [pc, #196]	; (80033a8 <Select_Address+0x1d4>)
 80032e4:	f004 f96e 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 80032e8:	e059      	b.n	800339e <Select_Address+0x1ca>

		case 8:
			HAL_GPIO_WritePin(GPIOC, A3_Pin, GPIO_PIN_SET);//9
 80032ea:	2201      	movs	r2, #1
 80032ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032f0:	482d      	ldr	r0, [pc, #180]	; (80033a8 <Select_Address+0x1d4>)
 80032f2:	f004 f967 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A2_Pin|A1_Pin|A0_Pin, GPIO_PIN_RESET);//1000
 80032f6:	2200      	movs	r2, #0
 80032f8:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 80032fc:	482a      	ldr	r0, [pc, #168]	; (80033a8 <Select_Address+0x1d4>)
 80032fe:	f004 f961 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 8003302:	e04c      	b.n	800339e <Select_Address+0x1ca>

		case 9:
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A0_Pin, GPIO_PIN_SET);//10
 8003304:	2201      	movs	r2, #1
 8003306:	f44f 6108 	mov.w	r1, #2176	; 0x880
 800330a:	4827      	ldr	r0, [pc, #156]	; (80033a8 <Select_Address+0x1d4>)
 800330c:	f004 f95a 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A2_Pin|A1_Pin, GPIO_PIN_RESET);//1001
 8003310:	2200      	movs	r2, #0
 8003312:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003316:	4824      	ldr	r0, [pc, #144]	; (80033a8 <Select_Address+0x1d4>)
 8003318:	f004 f954 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 800331c:	e03f      	b.n	800339e <Select_Address+0x1ca>

		case 10:
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A0_Pin, GPIO_PIN_SET);//11
 800331e:	2201      	movs	r2, #1
 8003320:	f44f 6108 	mov.w	r1, #2176	; 0x880
 8003324:	4820      	ldr	r0, [pc, #128]	; (80033a8 <Select_Address+0x1d4>)
 8003326:	f004 f94d 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A2_Pin|A1_Pin, GPIO_PIN_RESET);//1010
 800332a:	2200      	movs	r2, #0
 800332c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003330:	481d      	ldr	r0, [pc, #116]	; (80033a8 <Select_Address+0x1d4>)
 8003332:	f004 f947 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 8003336:	e032      	b.n	800339e <Select_Address+0x1ca>

		case 11:
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A1_Pin|A0_Pin, GPIO_PIN_SET);//12
 8003338:	2201      	movs	r2, #1
 800333a:	f44f 6128 	mov.w	r1, #2688	; 0xa80
 800333e:	481a      	ldr	r0, [pc, #104]	; (80033a8 <Select_Address+0x1d4>)
 8003340:	f004 f940 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);//1011
 8003344:	2200      	movs	r2, #0
 8003346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800334a:	4817      	ldr	r0, [pc, #92]	; (80033a8 <Select_Address+0x1d4>)
 800334c:	f004 f93a 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 8003350:	e025      	b.n	800339e <Select_Address+0x1ca>

		case 12:
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin, GPIO_PIN_SET);//13
 8003352:	2201      	movs	r2, #1
 8003354:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003358:	4813      	ldr	r0, [pc, #76]	; (80033a8 <Select_Address+0x1d4>)
 800335a:	f004 f933 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A1_Pin|A0_Pin, GPIO_PIN_RESET);//1100
 800335e:	2200      	movs	r2, #0
 8003360:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003364:	4810      	ldr	r0, [pc, #64]	; (80033a8 <Select_Address+0x1d4>)
 8003366:	f004 f92d 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 800336a:	e018      	b.n	800339e <Select_Address+0x1ca>

		case 13:
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin|A0_Pin, GPIO_PIN_SET);//14
 800336c:	2201      	movs	r2, #1
 800336e:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8003372:	480d      	ldr	r0, [pc, #52]	; (80033a8 <Select_Address+0x1d4>)
 8003374:	f004 f926 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A1_Pin, GPIO_PIN_RESET);//1101
 8003378:	2200      	movs	r2, #0
 800337a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800337e:	480a      	ldr	r0, [pc, #40]	; (80033a8 <Select_Address+0x1d4>)
 8003380:	f004 f920 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 8003384:	e00b      	b.n	800339e <Select_Address+0x1ca>

		case 14:
			HAL_GPIO_WritePin(GPIOC, A3_Pin|A2_Pin|A1_Pin, GPIO_PIN_SET);//15
 8003386:	2201      	movs	r2, #1
 8003388:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800338c:	4806      	ldr	r0, [pc, #24]	; (80033a8 <Select_Address+0x1d4>)
 800338e:	f004 f919 	bl	80075c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, A0_Pin, GPIO_PIN_RESET);//1110
 8003392:	2200      	movs	r2, #0
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	4804      	ldr	r0, [pc, #16]	; (80033a8 <Select_Address+0x1d4>)
 8003398:	f004 f914 	bl	80075c4 <HAL_GPIO_WritePin>
			break;
 800339c:	bf00      	nop
	}
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	48000800 	.word	0x48000800

080033ac <Reading_Temp>:

void Reading_Temp(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b0ba      	sub	sp, #232	; 0xe8
 80033b2:	af00      	add	r7, sp, #0
	uint8_t R_Temp[45];
	uint32_t temp_value[45] = {0};
 80033b4:	463b      	mov	r3, r7
 80033b6:	22b4      	movs	r2, #180	; 0xb4
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f007 fde4 	bl	800af88 <memset>
	uint8_t index = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3


		for(uint8_t i = 0; i < 15; i++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80033cc:	e023      	b.n	8003416 <Reading_Temp+0x6a>
		{
			index = 3 * i;
 80033ce:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80033d2:	461a      	mov	r2, r3
 80033d4:	0052      	lsls	r2, r2, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
			Select_Address(i);
 80033dc:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fef7 	bl	80031d4 <Select_Address>
			HAL_Delay(40);
 80033e6:	2028      	movs	r0, #40	; 0x28
 80033e8:	f001 fe0e 	bl	8005008 <HAL_Delay>
			HAL_ADC_Start_DMA(&hadc1, &temp_value[index], 3);
 80033ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80033f0:	463a      	mov	r2, r7
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	2203      	movs	r2, #3
 80033f8:	4619      	mov	r1, r3
 80033fa:	480b      	ldr	r0, [pc, #44]	; (8003428 <Reading_Temp+0x7c>)
 80033fc:	f002 f99c 	bl	8005738 <HAL_ADC_Start_DMA>
			HAL_Delay(1);
 8003400:	2001      	movs	r0, #1
 8003402:	f001 fe01 	bl	8005008 <HAL_Delay>
			//HAL_Delay(1);
			HAL_ADC_Stop_DMA(&hadc1);
 8003406:	4808      	ldr	r0, [pc, #32]	; (8003428 <Reading_Temp+0x7c>)
 8003408:	f002 fa1a 	bl	8005840 <HAL_ADC_Stop_DMA>
		for(uint8_t i = 0; i < 15; i++)
 800340c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8003410:	3301      	adds	r3, #1
 8003412:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003416:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800341a:	2b0e      	cmp	r3, #14
 800341c:	d9d7      	bls.n	80033ce <Reading_Temp+0x22>
	delay_us(500);
	//HAL_Delay(1);
	HAL_ADC_Stop_DMA(&hadc1);
	HAL_Delay(10);
*/
	for(uint8_t i = 0; i < 45; i++)
 800341e:	2300      	movs	r3, #0
 8003420:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8003424:	e07d      	b.n	8003522 <Reading_Temp+0x176>
 8003426:	bf00      	nop
 8003428:	20000048 	.word	0x20000048
	{
		R_Temp[i] = (A + (B * temp_value[i])) / (1 + (C * temp_value[i]) + D * temp_value[i] * temp_value[i]);
 800342c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	33e8      	adds	r3, #232	; 0xe8
 8003434:	443b      	add	r3, r7
 8003436:	f853 3ce8 	ldr.w	r3, [r3, #-232]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd f80e 	bl	800045c <__aeabi_ui2d>
 8003440:	4bb1      	ldr	r3, [pc, #708]	; (8003708 <Reading_Temp+0x35c>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fd f883 	bl	8000550 <__aeabi_dmul>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	4bae      	ldr	r3, [pc, #696]	; (800370c <Reading_Temp+0x360>)
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	f7fc fec4 	bl	80001e4 <__adddf3>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4614      	mov	r4, r2
 8003462:	461d      	mov	r5, r3
 8003464:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	33e8      	adds	r3, #232	; 0xe8
 800346c:	443b      	add	r3, r7
 800346e:	f853 3ce8 	ldr.w	r3, [r3, #-232]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fc fff2 	bl	800045c <__aeabi_ui2d>
 8003478:	4ba5      	ldr	r3, [pc, #660]	; (8003710 <Reading_Temp+0x364>)
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	f7fd f867 	bl	8000550 <__aeabi_dmul>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	4ba1      	ldr	r3, [pc, #644]	; (8003714 <Reading_Temp+0x368>)
 8003490:	f7fc fea8 	bl	80001e4 <__adddf3>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4690      	mov	r8, r2
 800349a:	4699      	mov	r9, r3
 800349c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	33e8      	adds	r3, #232	; 0xe8
 80034a4:	443b      	add	r3, r7
 80034a6:	f853 3ce8 	ldr.w	r3, [r3, #-232]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fc ffd6 	bl	800045c <__aeabi_ui2d>
 80034b0:	4b99      	ldr	r3, [pc, #612]	; (8003718 <Reading_Temp+0x36c>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fd f84b 	bl	8000550 <__aeabi_dmul>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4692      	mov	sl, r2
 80034c0:	469b      	mov	fp, r3
 80034c2:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	33e8      	adds	r3, #232	; 0xe8
 80034ca:	443b      	add	r3, r7
 80034cc:	f853 3ce8 	ldr.w	r3, [r3, #-232]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fc ffc3 	bl	800045c <__aeabi_ui2d>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4650      	mov	r0, sl
 80034dc:	4659      	mov	r1, fp
 80034de:	f7fd f837 	bl	8000550 <__aeabi_dmul>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4640      	mov	r0, r8
 80034e8:	4649      	mov	r1, r9
 80034ea:	f7fc fe7b 	bl	80001e4 <__adddf3>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4620      	mov	r0, r4
 80034f4:	4629      	mov	r1, r5
 80034f6:	f7fd f955 	bl	80007a4 <__aeabi_ddiv>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	f897 40e6 	ldrb.w	r4, [r7, #230]	; 0xe6
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f7fd fa35 	bl	8000974 <__aeabi_d2uiz>
 800350a:	4603      	mov	r3, r0
 800350c:	b2da      	uxtb	r2, r3
 800350e:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
 8003512:	443b      	add	r3, r7
 8003514:	f803 2c34 	strb.w	r2, [r3, #-52]
	for(uint8_t i = 0; i < 45; i++)
 8003518:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800351c:	3301      	adds	r3, #1
 800351e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8003522:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8003526:	2b2c      	cmp	r3, #44	; 0x2c
 8003528:	d980      	bls.n	800342c <Reading_Temp+0x80>
	}

	temp00 = R_Temp[0];
 800352a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800352e:	b29a      	uxth	r2, r3
 8003530:	4b7a      	ldr	r3, [pc, #488]	; (800371c <Reading_Temp+0x370>)
 8003532:	801a      	strh	r2, [r3, #0]
	temp01 = R_Temp[1];
 8003534:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8003538:	b29a      	uxth	r2, r3
 800353a:	4b79      	ldr	r3, [pc, #484]	; (8003720 <Reading_Temp+0x374>)
 800353c:	801a      	strh	r2, [r3, #0]
	temp02 = R_Temp[2];
 800353e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003542:	b29a      	uxth	r2, r3
 8003544:	4b77      	ldr	r3, [pc, #476]	; (8003724 <Reading_Temp+0x378>)
 8003546:	801a      	strh	r2, [r3, #0]
	temp03 = R_Temp[3];
 8003548:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800354c:	b29a      	uxth	r2, r3
 800354e:	4b76      	ldr	r3, [pc, #472]	; (8003728 <Reading_Temp+0x37c>)
 8003550:	801a      	strh	r2, [r3, #0]
	temp04 = R_Temp[4];
 8003552:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8003556:	b29a      	uxth	r2, r3
 8003558:	4b74      	ldr	r3, [pc, #464]	; (800372c <Reading_Temp+0x380>)
 800355a:	801a      	strh	r2, [r3, #0]
	temp05 = R_Temp[5];
 800355c:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8003560:	b29a      	uxth	r2, r3
 8003562:	4b73      	ldr	r3, [pc, #460]	; (8003730 <Reading_Temp+0x384>)
 8003564:	801a      	strh	r2, [r3, #0]
	temp06 = R_Temp[6];
 8003566:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800356a:	b29a      	uxth	r2, r3
 800356c:	4b71      	ldr	r3, [pc, #452]	; (8003734 <Reading_Temp+0x388>)
 800356e:	801a      	strh	r2, [r3, #0]
	temp07 = R_Temp[7];
 8003570:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8003574:	b29a      	uxth	r2, r3
 8003576:	4b70      	ldr	r3, [pc, #448]	; (8003738 <Reading_Temp+0x38c>)
 8003578:	801a      	strh	r2, [r3, #0]
	temp08 = R_Temp[8];
 800357a:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 800357e:	b29a      	uxth	r2, r3
 8003580:	4b6e      	ldr	r3, [pc, #440]	; (800373c <Reading_Temp+0x390>)
 8003582:	801a      	strh	r2, [r3, #0]
	temp09 = R_Temp[9];
 8003584:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8003588:	b29a      	uxth	r2, r3
 800358a:	4b6d      	ldr	r3, [pc, #436]	; (8003740 <Reading_Temp+0x394>)
 800358c:	801a      	strh	r2, [r3, #0]
	temp10 = R_Temp[10];
 800358e:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8003592:	b29a      	uxth	r2, r3
 8003594:	4b6b      	ldr	r3, [pc, #428]	; (8003744 <Reading_Temp+0x398>)
 8003596:	801a      	strh	r2, [r3, #0]
	temp11 = R_Temp[11];
 8003598:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800359c:	b29a      	uxth	r2, r3
 800359e:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <Reading_Temp+0x39c>)
 80035a0:	801a      	strh	r2, [r3, #0]
	temp12 = R_Temp[12];
 80035a2:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	4b68      	ldr	r3, [pc, #416]	; (800374c <Reading_Temp+0x3a0>)
 80035aa:	801a      	strh	r2, [r3, #0]
	temp13 = R_Temp[13];
 80035ac:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	4b67      	ldr	r3, [pc, #412]	; (8003750 <Reading_Temp+0x3a4>)
 80035b4:	801a      	strh	r2, [r3, #0]
	temp14 = R_Temp[14];
 80035b6:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	4b65      	ldr	r3, [pc, #404]	; (8003754 <Reading_Temp+0x3a8>)
 80035be:	801a      	strh	r2, [r3, #0]
	temp15 = R_Temp[15];
 80035c0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	4b64      	ldr	r3, [pc, #400]	; (8003758 <Reading_Temp+0x3ac>)
 80035c8:	801a      	strh	r2, [r3, #0]
	temp16 = R_Temp[16];
 80035ca:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	4b62      	ldr	r3, [pc, #392]	; (800375c <Reading_Temp+0x3b0>)
 80035d2:	801a      	strh	r2, [r3, #0]
	temp17 = R_Temp[17];
 80035d4:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80035d8:	b29a      	uxth	r2, r3
 80035da:	4b61      	ldr	r3, [pc, #388]	; (8003760 <Reading_Temp+0x3b4>)
 80035dc:	801a      	strh	r2, [r3, #0]
	temp18 = R_Temp[18];
 80035de:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	4b5f      	ldr	r3, [pc, #380]	; (8003764 <Reading_Temp+0x3b8>)
 80035e6:	801a      	strh	r2, [r3, #0]
	temp19 = R_Temp[19];
 80035e8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	4b5e      	ldr	r3, [pc, #376]	; (8003768 <Reading_Temp+0x3bc>)
 80035f0:	801a      	strh	r2, [r3, #0]
	temp20 = R_Temp[20];
 80035f2:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	4b5c      	ldr	r3, [pc, #368]	; (800376c <Reading_Temp+0x3c0>)
 80035fa:	801a      	strh	r2, [r3, #0]
	temp21 = R_Temp[21];
 80035fc:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8003600:	b29a      	uxth	r2, r3
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <Reading_Temp+0x3c4>)
 8003604:	801a      	strh	r2, [r3, #0]
	temp22 = R_Temp[22];
 8003606:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800360a:	b29a      	uxth	r2, r3
 800360c:	4b59      	ldr	r3, [pc, #356]	; (8003774 <Reading_Temp+0x3c8>)
 800360e:	801a      	strh	r2, [r3, #0]
	temp23 = R_Temp[23];
 8003610:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003614:	b29a      	uxth	r2, r3
 8003616:	4b58      	ldr	r3, [pc, #352]	; (8003778 <Reading_Temp+0x3cc>)
 8003618:	801a      	strh	r2, [r3, #0]
	temp24 = R_Temp[24];
 800361a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800361e:	b29a      	uxth	r2, r3
 8003620:	4b56      	ldr	r3, [pc, #344]	; (800377c <Reading_Temp+0x3d0>)
 8003622:	801a      	strh	r2, [r3, #0]
	temp25 = R_Temp[25];
 8003624:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003628:	b29a      	uxth	r2, r3
 800362a:	4b55      	ldr	r3, [pc, #340]	; (8003780 <Reading_Temp+0x3d4>)
 800362c:	801a      	strh	r2, [r3, #0]
	temp26 = R_Temp[26];
 800362e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003632:	b29a      	uxth	r2, r3
 8003634:	4b53      	ldr	r3, [pc, #332]	; (8003784 <Reading_Temp+0x3d8>)
 8003636:	801a      	strh	r2, [r3, #0]
	temp27 = R_Temp[27];
 8003638:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800363c:	b29a      	uxth	r2, r3
 800363e:	4b52      	ldr	r3, [pc, #328]	; (8003788 <Reading_Temp+0x3dc>)
 8003640:	801a      	strh	r2, [r3, #0]
	temp28 = R_Temp[28];
 8003642:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8003646:	b29a      	uxth	r2, r3
 8003648:	4b50      	ldr	r3, [pc, #320]	; (800378c <Reading_Temp+0x3e0>)
 800364a:	801a      	strh	r2, [r3, #0]
	temp29 = R_Temp[29];
 800364c:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8003650:	b29a      	uxth	r2, r3
 8003652:	4b4f      	ldr	r3, [pc, #316]	; (8003790 <Reading_Temp+0x3e4>)
 8003654:	801a      	strh	r2, [r3, #0]
	temp30 = R_Temp[30];
 8003656:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800365a:	b29a      	uxth	r2, r3
 800365c:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <Reading_Temp+0x3e8>)
 800365e:	801a      	strh	r2, [r3, #0]
	temp31 = R_Temp[31];
 8003660:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003664:	b29a      	uxth	r2, r3
 8003666:	4b4c      	ldr	r3, [pc, #304]	; (8003798 <Reading_Temp+0x3ec>)
 8003668:	801a      	strh	r2, [r3, #0]
	temp32 = R_Temp[32];
 800366a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800366e:	b29a      	uxth	r2, r3
 8003670:	4b4a      	ldr	r3, [pc, #296]	; (800379c <Reading_Temp+0x3f0>)
 8003672:	801a      	strh	r2, [r3, #0]
	temp33 = R_Temp[33];
 8003674:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8003678:	b29a      	uxth	r2, r3
 800367a:	4b49      	ldr	r3, [pc, #292]	; (80037a0 <Reading_Temp+0x3f4>)
 800367c:	801a      	strh	r2, [r3, #0]
	temp34 = R_Temp[34];
 800367e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003682:	b29a      	uxth	r2, r3
 8003684:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <Reading_Temp+0x3f8>)
 8003686:	801a      	strh	r2, [r3, #0]
	temp35 = R_Temp[35];
 8003688:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800368c:	b29a      	uxth	r2, r3
 800368e:	4b46      	ldr	r3, [pc, #280]	; (80037a8 <Reading_Temp+0x3fc>)
 8003690:	801a      	strh	r2, [r3, #0]
	temp36 = R_Temp[36];
 8003692:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8003696:	b29a      	uxth	r2, r3
 8003698:	4b44      	ldr	r3, [pc, #272]	; (80037ac <Reading_Temp+0x400>)
 800369a:	801a      	strh	r2, [r3, #0]
	temp37 = R_Temp[37];
 800369c:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	4b43      	ldr	r3, [pc, #268]	; (80037b0 <Reading_Temp+0x404>)
 80036a4:	801a      	strh	r2, [r3, #0]
	temp38 = R_Temp[38];
 80036a6:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <Reading_Temp+0x408>)
 80036ae:	801a      	strh	r2, [r3, #0]
	temp39 = R_Temp[39];
 80036b0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <Reading_Temp+0x40c>)
 80036b8:	801a      	strh	r2, [r3, #0]
	temp40 = R_Temp[40];
 80036ba:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80036be:	b29a      	uxth	r2, r3
 80036c0:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <Reading_Temp+0x410>)
 80036c2:	801a      	strh	r2, [r3, #0]
	temp41 = R_Temp[41];
 80036c4:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <Reading_Temp+0x414>)
 80036cc:	801a      	strh	r2, [r3, #0]
	temp42 = R_Temp[42];
 80036ce:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <Reading_Temp+0x418>)
 80036d6:	801a      	strh	r2, [r3, #0]
	temp43 = R_Temp[43];
 80036d8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80036dc:	b29a      	uxth	r2, r3
 80036de:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <Reading_Temp+0x41c>)
 80036e0:	801a      	strh	r2, [r3, #0]
	temp44 = R_Temp[44];
 80036e2:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	4b38      	ldr	r3, [pc, #224]	; (80037cc <Reading_Temp+0x420>)
 80036ea:	801a      	strh	r2, [r3, #0]
	Max_temp = R_Temp[0];
 80036ec:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 80036f0:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <Reading_Temp+0x424>)
 80036f2:	701a      	strb	r2, [r3, #0]
	SLAVEBMSA.MaxTemp = 0;
 80036f4:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <Reading_Temp+0x428>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	SLAVEBMSB.MaxTemp = 0;
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <Reading_Temp+0x42c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8003704:	e06a      	b.n	80037dc <Reading_Temp+0x430>
 8003706:	bf00      	nop
 8003708:	20000008 	.word	0x20000008
 800370c:	20000000 	.word	0x20000000
 8003710:	20000010 	.word	0x20000010
 8003714:	3ff00000 	.word	0x3ff00000
 8003718:	20000018 	.word	0x20000018
 800371c:	20000612 	.word	0x20000612
 8003720:	20000614 	.word	0x20000614
 8003724:	20000616 	.word	0x20000616
 8003728:	20000618 	.word	0x20000618
 800372c:	2000061a 	.word	0x2000061a
 8003730:	2000061c 	.word	0x2000061c
 8003734:	2000061e 	.word	0x2000061e
 8003738:	20000620 	.word	0x20000620
 800373c:	20000622 	.word	0x20000622
 8003740:	20000624 	.word	0x20000624
 8003744:	20000626 	.word	0x20000626
 8003748:	20000628 	.word	0x20000628
 800374c:	2000062a 	.word	0x2000062a
 8003750:	2000062c 	.word	0x2000062c
 8003754:	2000062e 	.word	0x2000062e
 8003758:	20000630 	.word	0x20000630
 800375c:	20000632 	.word	0x20000632
 8003760:	20000634 	.word	0x20000634
 8003764:	20000636 	.word	0x20000636
 8003768:	20000638 	.word	0x20000638
 800376c:	2000063a 	.word	0x2000063a
 8003770:	2000063c 	.word	0x2000063c
 8003774:	2000063e 	.word	0x2000063e
 8003778:	20000640 	.word	0x20000640
 800377c:	20000642 	.word	0x20000642
 8003780:	20000644 	.word	0x20000644
 8003784:	20000646 	.word	0x20000646
 8003788:	20000648 	.word	0x20000648
 800378c:	2000064a 	.word	0x2000064a
 8003790:	2000064c 	.word	0x2000064c
 8003794:	2000064e 	.word	0x2000064e
 8003798:	20000650 	.word	0x20000650
 800379c:	20000652 	.word	0x20000652
 80037a0:	20000654 	.word	0x20000654
 80037a4:	20000656 	.word	0x20000656
 80037a8:	20000658 	.word	0x20000658
 80037ac:	2000065a 	.word	0x2000065a
 80037b0:	2000065c 	.word	0x2000065c
 80037b4:	2000065e 	.word	0x2000065e
 80037b8:	20000660 	.word	0x20000660
 80037bc:	20000662 	.word	0x20000662
 80037c0:	20000664 	.word	0x20000664
 80037c4:	20000666 	.word	0x20000666
 80037c8:	20000668 	.word	0x20000668
 80037cc:	2000066a 	.word	0x2000066a
 80037d0:	20000610 	.word	0x20000610
 80037d4:	20000190 	.word	0x20000190
 80037d8:	20000274 	.word	0x20000274
	SLAVEBMSC.MaxTemp = 0;
 80037dc:	4b70      	ldr	r3, [pc, #448]	; (80039a0 <Reading_Temp+0x5f4>)
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	SLAVEBMSD.MaxTemp = 0;
 80037e4:	4b6f      	ldr	r3, [pc, #444]	; (80039a4 <Reading_Temp+0x5f8>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	SLAVEBMSE.MaxTemp = 0;
 80037ec:	4b6e      	ldr	r3, [pc, #440]	; (80039a8 <Reading_Temp+0x5fc>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	for(uint8_t q = 0; q < 44; q++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 80037fa:	e0a2      	b.n	8003942 <Reading_Temp+0x596>
	{
		if(Max_temp < R_Temp[q])
 80037fc:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003800:	33e8      	adds	r3, #232	; 0xe8
 8003802:	443b      	add	r3, r7
 8003804:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 8003808:	4b68      	ldr	r3, [pc, #416]	; (80039ac <Reading_Temp+0x600>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d907      	bls.n	8003820 <Reading_Temp+0x474>
		{
			Max_temp = R_Temp[q];
 8003810:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003814:	33e8      	adds	r3, #232	; 0xe8
 8003816:	443b      	add	r3, r7
 8003818:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 800381c:	4b63      	ldr	r3, [pc, #396]	; (80039ac <Reading_Temp+0x600>)
 800381e:	701a      	strb	r2, [r3, #0]
		}

		if(q < 9)
 8003820:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003824:	2b08      	cmp	r3, #8
 8003826:	d814      	bhi.n	8003852 <Reading_Temp+0x4a6>
		{
			if(SLAVEBMSA.MaxTemp < R_Temp[q])
 8003828:	4b61      	ldr	r3, [pc, #388]	; (80039b0 <Reading_Temp+0x604>)
 800382a:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 800382e:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003832:	33e8      	adds	r3, #232	; 0xe8
 8003834:	443b      	add	r3, r7
 8003836:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800383a:	429a      	cmp	r2, r3
 800383c:	d27c      	bcs.n	8003938 <Reading_Temp+0x58c>
			{
				SLAVEBMSA.MaxTemp = R_Temp[q];
 800383e:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003842:	33e8      	adds	r3, #232	; 0xe8
 8003844:	443b      	add	r3, r7
 8003846:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 800384a:	4b59      	ldr	r3, [pc, #356]	; (80039b0 <Reading_Temp+0x604>)
 800384c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8003850:	e072      	b.n	8003938 <Reading_Temp+0x58c>
			}
		}
		else if(q >= 9 && q < 18)
 8003852:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003856:	2b08      	cmp	r3, #8
 8003858:	d918      	bls.n	800388c <Reading_Temp+0x4e0>
 800385a:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800385e:	2b11      	cmp	r3, #17
 8003860:	d814      	bhi.n	800388c <Reading_Temp+0x4e0>
		{
			if(SLAVEBMSB.MaxTemp < R_Temp[q])
 8003862:	4b54      	ldr	r3, [pc, #336]	; (80039b4 <Reading_Temp+0x608>)
 8003864:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8003868:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800386c:	33e8      	adds	r3, #232	; 0xe8
 800386e:	443b      	add	r3, r7
 8003870:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8003874:	429a      	cmp	r2, r3
 8003876:	d25f      	bcs.n	8003938 <Reading_Temp+0x58c>
			{
				SLAVEBMSB.MaxTemp = R_Temp[q];
 8003878:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800387c:	33e8      	adds	r3, #232	; 0xe8
 800387e:	443b      	add	r3, r7
 8003880:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 8003884:	4b4b      	ldr	r3, [pc, #300]	; (80039b4 <Reading_Temp+0x608>)
 8003886:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			if(SLAVEBMSB.MaxTemp < R_Temp[q])
 800388a:	e055      	b.n	8003938 <Reading_Temp+0x58c>
			}
		}
		else if(q >= 18 && q < 27)
 800388c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003890:	2b11      	cmp	r3, #17
 8003892:	d918      	bls.n	80038c6 <Reading_Temp+0x51a>
 8003894:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003898:	2b1a      	cmp	r3, #26
 800389a:	d814      	bhi.n	80038c6 <Reading_Temp+0x51a>
		{
			if(SLAVEBMSC.MaxTemp < R_Temp[q])
 800389c:	4b40      	ldr	r3, [pc, #256]	; (80039a0 <Reading_Temp+0x5f4>)
 800389e:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 80038a2:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80038a6:	33e8      	adds	r3, #232	; 0xe8
 80038a8:	443b      	add	r3, r7
 80038aa:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d242      	bcs.n	8003938 <Reading_Temp+0x58c>
			{
				SLAVEBMSC.MaxTemp = R_Temp[q];
 80038b2:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80038b6:	33e8      	adds	r3, #232	; 0xe8
 80038b8:	443b      	add	r3, r7
 80038ba:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 80038be:	4b38      	ldr	r3, [pc, #224]	; (80039a0 <Reading_Temp+0x5f4>)
 80038c0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			if(SLAVEBMSC.MaxTemp < R_Temp[q])
 80038c4:	e038      	b.n	8003938 <Reading_Temp+0x58c>
			}
		}
		else if(q >= 27 && q < 36)
 80038c6:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80038ca:	2b1a      	cmp	r3, #26
 80038cc:	d918      	bls.n	8003900 <Reading_Temp+0x554>
 80038ce:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80038d2:	2b23      	cmp	r3, #35	; 0x23
 80038d4:	d814      	bhi.n	8003900 <Reading_Temp+0x554>
		{
			if(SLAVEBMSD.MaxTemp < R_Temp[q])
 80038d6:	4b33      	ldr	r3, [pc, #204]	; (80039a4 <Reading_Temp+0x5f8>)
 80038d8:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 80038dc:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80038e0:	33e8      	adds	r3, #232	; 0xe8
 80038e2:	443b      	add	r3, r7
 80038e4:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d225      	bcs.n	8003938 <Reading_Temp+0x58c>
			{
				SLAVEBMSD.MaxTemp = R_Temp[q];
 80038ec:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80038f0:	33e8      	adds	r3, #232	; 0xe8
 80038f2:	443b      	add	r3, r7
 80038f4:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 80038f8:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <Reading_Temp+0x5f8>)
 80038fa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			if(SLAVEBMSD.MaxTemp < R_Temp[q])
 80038fe:	e01b      	b.n	8003938 <Reading_Temp+0x58c>
			}
		}
		else if(q >= 36 && q < 45)
 8003900:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003904:	2b23      	cmp	r3, #35	; 0x23
 8003906:	d917      	bls.n	8003938 <Reading_Temp+0x58c>
 8003908:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800390c:	2b2c      	cmp	r3, #44	; 0x2c
 800390e:	d813      	bhi.n	8003938 <Reading_Temp+0x58c>
		{
			if(SLAVEBMSE.MaxTemp < R_Temp[q])
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <Reading_Temp+0x5fc>)
 8003912:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8003916:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800391a:	33e8      	adds	r3, #232	; 0xe8
 800391c:	443b      	add	r3, r7
 800391e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8003922:	429a      	cmp	r2, r3
 8003924:	d208      	bcs.n	8003938 <Reading_Temp+0x58c>
			{
				SLAVEBMSE.MaxTemp = R_Temp[q];
 8003926:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800392a:	33e8      	adds	r3, #232	; 0xe8
 800392c:	443b      	add	r3, r7
 800392e:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <Reading_Temp+0x5fc>)
 8003934:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	for(uint8_t q = 0; q < 44; q++)
 8003938:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800393c:	3301      	adds	r3, #1
 800393e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 8003942:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003946:	2b2b      	cmp	r3, #43	; 0x2b
 8003948:	f67f af58 	bls.w	80037fc <Reading_Temp+0x450>
			}
		}
	}

	Min_temp = R_Temp[0];
 800394c:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 8003950:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <Reading_Temp+0x60c>)
 8003952:	701a      	strb	r2, [r3, #0]

	for(uint8_t q = 0; q < 44; q++)
 8003954:	2300      	movs	r3, #0
 8003956:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 800395a:	e016      	b.n	800398a <Reading_Temp+0x5de>
	{
		if(Min_temp > R_Temp[q])
 800395c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8003960:	33e8      	adds	r3, #232	; 0xe8
 8003962:	443b      	add	r3, r7
 8003964:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 8003968:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <Reading_Temp+0x60c>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d207      	bcs.n	8003980 <Reading_Temp+0x5d4>
		{
			Min_temp = R_Temp[q];
 8003970:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8003974:	33e8      	adds	r3, #232	; 0xe8
 8003976:	443b      	add	r3, r7
 8003978:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 800397c:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <Reading_Temp+0x60c>)
 800397e:	701a      	strb	r2, [r3, #0]
	for(uint8_t q = 0; q < 44; q++)
 8003980:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8003984:	3301      	adds	r3, #1
 8003986:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 800398a:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800398e:	2b2b      	cmp	r3, #43	; 0x2b
 8003990:	d9e4      	bls.n	800395c <Reading_Temp+0x5b0>
		}
	}

	Set_PWM_duty();
 8003992:	f000 fac1 	bl	8003f18 <Set_PWM_duty>
    /*for(uint8_t i = 0; i < 30; i++)
    {
    	R_Temp[i] = 0;
    }*/
}
 8003996:	bf00      	nop
 8003998:	37e8      	adds	r7, #232	; 0xe8
 800399a:	46bd      	mov	sp, r7
 800399c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a0:	20000358 	.word	0x20000358
 80039a4:	2000043c 	.word	0x2000043c
 80039a8:	20000520 	.word	0x20000520
 80039ac:	20000610 	.word	0x20000610
 80039b0:	20000190 	.word	0x20000190
 80039b4:	20000274 	.word	0x20000274
 80039b8:	20000611 	.word	0x20000611

080039bc <CAN_TX_Config>:
	}
	Temp_time = 0;
}

void CAN_TX_Config(CAN_TxHeaderTypeDef* Header, uint32_t ID)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
	Header->StdId = ID;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	601a      	str	r2, [r3, #0]
	Header->ExtId = 0x0000;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
	Header->IDE = CAN_ID_STD;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
	Header->RTR = CAN_RTR_DATA;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	60da      	str	r2, [r3, #12]
	Header->DLC = 8;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2208      	movs	r2, #8
 80039e2:	611a      	str	r2, [r3, #16]
	Header->TransmitGlobalTime = DISABLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	751a      	strb	r2, [r3, #20]

	sFilterConfig.FilterIdHigh = 0x0000;
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <CAN_TX_Config+0x70>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <CAN_TX_Config+0x70>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <CAN_TX_Config+0x70>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <CAN_TX_Config+0x70>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <CAN_TX_Config+0x70>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 0;
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <CAN_TX_Config+0x70>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <CAN_TX_Config+0x70>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <CAN_TX_Config+0x70>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8003a1a:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <CAN_TX_Config+0x70>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	621a      	str	r2, [r3, #32]
	//sFilterConfig.SlaveStartFilterBank = 14;
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	20000168 	.word	0x20000168

08003a30 <Voltage_MinMax>:

void Voltage_MinMax(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
	Max_Voltage = 0;
 8003a36:	4ba6      	ldr	r3, [pc, #664]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
	SLAVEBMSA.Max_Voltage = 0;
 8003a3e:	4ba5      	ldr	r3, [pc, #660]	; (8003cd4 <Voltage_MinMax+0x2a4>)
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	SLAVEBMSB.Max_Voltage = 0;
 8003a48:	4ba3      	ldr	r3, [pc, #652]	; (8003cd8 <Voltage_MinMax+0x2a8>)
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	SLAVEBMSC.Max_Voltage = 0;
 8003a52:	4ba2      	ldr	r3, [pc, #648]	; (8003cdc <Voltage_MinMax+0x2ac>)
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	SLAVEBMSD.Max_Voltage = 0;
 8003a5c:	4ba0      	ldr	r3, [pc, #640]	; (8003ce0 <Voltage_MinMax+0x2b0>)
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	SLAVEBMSE.Max_Voltage = 0;
 8003a66:	4b9f      	ldr	r3, [pc, #636]	; (8003ce4 <Voltage_MinMax+0x2b4>)
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	for(uint8_t i = 0; i < 14; i++)
 8003a70:	2300      	movs	r3, #0
 8003a72:	71fb      	strb	r3, [r7, #7]
 8003a74:	e0fc      	b.n	8003c70 <Voltage_MinMax+0x240>
	{
		Max_Voltage = (Max_Voltage > SLAVEBMSA.CV[i]) ? Max_Voltage : SLAVEBMSA.CV[i];
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	4a96      	ldr	r2, [pc, #600]	; (8003cd4 <Voltage_MinMax+0x2a4>)
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	ed93 7a00 	vldr	s14, [r3]
 8003a82:	4b93      	ldr	r3, [pc, #588]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003a84:	edd3 7a00 	vldr	s15, [r3]
 8003a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a90:	d502      	bpl.n	8003a98 <Voltage_MinMax+0x68>
 8003a92:	4b8f      	ldr	r3, [pc, #572]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	e004      	b.n	8003aa2 <Voltage_MinMax+0x72>
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	4a8e      	ldr	r2, [pc, #568]	; (8003cd4 <Voltage_MinMax+0x2a4>)
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a8b      	ldr	r2, [pc, #556]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003aa4:	6013      	str	r3, [r2, #0]
		Max_Voltage = (Max_Voltage > SLAVEBMSB.CV[i]) ? Max_Voltage : SLAVEBMSB.CV[i];
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	4a8b      	ldr	r2, [pc, #556]	; (8003cd8 <Voltage_MinMax+0x2a8>)
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	ed93 7a00 	vldr	s14, [r3]
 8003ab2:	4b87      	ldr	r3, [pc, #540]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	d502      	bpl.n	8003ac8 <Voltage_MinMax+0x98>
 8003ac2:	4b83      	ldr	r3, [pc, #524]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	e004      	b.n	8003ad2 <Voltage_MinMax+0xa2>
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	4a83      	ldr	r2, [pc, #524]	; (8003cd8 <Voltage_MinMax+0x2a8>)
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7f      	ldr	r2, [pc, #508]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003ad4:	6013      	str	r3, [r2, #0]
		Max_Voltage = (Max_Voltage > SLAVEBMSC.CV[i]) ? Max_Voltage : SLAVEBMSC.CV[i];
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	4a80      	ldr	r2, [pc, #512]	; (8003cdc <Voltage_MinMax+0x2ac>)
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	ed93 7a00 	vldr	s14, [r3]
 8003ae2:	4b7b      	ldr	r3, [pc, #492]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003ae4:	edd3 7a00 	vldr	s15, [r3]
 8003ae8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af0:	d502      	bpl.n	8003af8 <Voltage_MinMax+0xc8>
 8003af2:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	e004      	b.n	8003b02 <Voltage_MinMax+0xd2>
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	4a78      	ldr	r2, [pc, #480]	; (8003cdc <Voltage_MinMax+0x2ac>)
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a73      	ldr	r2, [pc, #460]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003b04:	6013      	str	r3, [r2, #0]
		Max_Voltage = (Max_Voltage > SLAVEBMSD.CV[i]) ? Max_Voltage : SLAVEBMSD.CV[i];
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	4a75      	ldr	r2, [pc, #468]	; (8003ce0 <Voltage_MinMax+0x2b0>)
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	ed93 7a00 	vldr	s14, [r3]
 8003b12:	4b6f      	ldr	r3, [pc, #444]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b20:	d502      	bpl.n	8003b28 <Voltage_MinMax+0xf8>
 8003b22:	4b6b      	ldr	r3, [pc, #428]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	e004      	b.n	8003b32 <Voltage_MinMax+0x102>
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	4a6d      	ldr	r2, [pc, #436]	; (8003ce0 <Voltage_MinMax+0x2b0>)
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a67      	ldr	r2, [pc, #412]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003b34:	6013      	str	r3, [r2, #0]
		Max_Voltage = (Max_Voltage > SLAVEBMSE.CV[i]) ? Max_Voltage : SLAVEBMSE.CV[i];
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	4a6a      	ldr	r2, [pc, #424]	; (8003ce4 <Voltage_MinMax+0x2b4>)
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	ed93 7a00 	vldr	s14, [r3]
 8003b42:	4b63      	ldr	r3, [pc, #396]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003b44:	edd3 7a00 	vldr	s15, [r3]
 8003b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b50:	d502      	bpl.n	8003b58 <Voltage_MinMax+0x128>
 8003b52:	4b5f      	ldr	r3, [pc, #380]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	e004      	b.n	8003b62 <Voltage_MinMax+0x132>
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	4a62      	ldr	r2, [pc, #392]	; (8003ce4 <Voltage_MinMax+0x2b4>)
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5b      	ldr	r2, [pc, #364]	; (8003cd0 <Voltage_MinMax+0x2a0>)
 8003b64:	6013      	str	r3, [r2, #0]
		SLAVEBMSA.Max_Voltage = (SLAVEBMSA.Max_Voltage > SLAVEBMSA.CV[i]) ? SLAVEBMSA.Max_Voltage : SLAVEBMSA.CV[i];
 8003b66:	4b5b      	ldr	r3, [pc, #364]	; (8003cd4 <Voltage_MinMax+0x2a4>)
 8003b68:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	4a59      	ldr	r2, [pc, #356]	; (8003cd4 <Voltage_MinMax+0x2a4>)
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	edd3 7a00 	vldr	s15, [r3]
 8003b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b80:	dd03      	ble.n	8003b8a <Voltage_MinMax+0x15a>
 8003b82:	4b54      	ldr	r3, [pc, #336]	; (8003cd4 <Voltage_MinMax+0x2a4>)
 8003b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b88:	e004      	b.n	8003b94 <Voltage_MinMax+0x164>
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	4a51      	ldr	r2, [pc, #324]	; (8003cd4 <Voltage_MinMax+0x2a4>)
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a4f      	ldr	r2, [pc, #316]	; (8003cd4 <Voltage_MinMax+0x2a4>)
 8003b96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		SLAVEBMSB.Max_Voltage = (SLAVEBMSB.Max_Voltage > SLAVEBMSB.CV[i]) ? SLAVEBMSB.Max_Voltage : SLAVEBMSB.CV[i];
 8003b9a:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <Voltage_MinMax+0x2a8>)
 8003b9c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	4a4d      	ldr	r2, [pc, #308]	; (8003cd8 <Voltage_MinMax+0x2a8>)
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	edd3 7a00 	vldr	s15, [r3]
 8003bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	dd03      	ble.n	8003bbe <Voltage_MinMax+0x18e>
 8003bb6:	4b48      	ldr	r3, [pc, #288]	; (8003cd8 <Voltage_MinMax+0x2a8>)
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbc:	e004      	b.n	8003bc8 <Voltage_MinMax+0x198>
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	4a45      	ldr	r2, [pc, #276]	; (8003cd8 <Voltage_MinMax+0x2a8>)
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a43      	ldr	r2, [pc, #268]	; (8003cd8 <Voltage_MinMax+0x2a8>)
 8003bca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		SLAVEBMSC.Max_Voltage = (SLAVEBMSC.Max_Voltage > SLAVEBMSC.CV[i]) ? SLAVEBMSC.Max_Voltage : SLAVEBMSC.CV[i];
 8003bce:	4b43      	ldr	r3, [pc, #268]	; (8003cdc <Voltage_MinMax+0x2ac>)
 8003bd0:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	4a41      	ldr	r2, [pc, #260]	; (8003cdc <Voltage_MinMax+0x2ac>)
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	edd3 7a00 	vldr	s15, [r3]
 8003be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be8:	dd03      	ble.n	8003bf2 <Voltage_MinMax+0x1c2>
 8003bea:	4b3c      	ldr	r3, [pc, #240]	; (8003cdc <Voltage_MinMax+0x2ac>)
 8003bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf0:	e004      	b.n	8003bfc <Voltage_MinMax+0x1cc>
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	4a39      	ldr	r2, [pc, #228]	; (8003cdc <Voltage_MinMax+0x2ac>)
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a37      	ldr	r2, [pc, #220]	; (8003cdc <Voltage_MinMax+0x2ac>)
 8003bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		SLAVEBMSD.Max_Voltage = (SLAVEBMSD.Max_Voltage > SLAVEBMSD.CV[i]) ? SLAVEBMSD.Max_Voltage : SLAVEBMSD.CV[i];
 8003c02:	4b37      	ldr	r3, [pc, #220]	; (8003ce0 <Voltage_MinMax+0x2b0>)
 8003c04:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	4a35      	ldr	r2, [pc, #212]	; (8003ce0 <Voltage_MinMax+0x2b0>)
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1c:	dd03      	ble.n	8003c26 <Voltage_MinMax+0x1f6>
 8003c1e:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <Voltage_MinMax+0x2b0>)
 8003c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c24:	e004      	b.n	8003c30 <Voltage_MinMax+0x200>
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	4a2d      	ldr	r2, [pc, #180]	; (8003ce0 <Voltage_MinMax+0x2b0>)
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2b      	ldr	r2, [pc, #172]	; (8003ce0 <Voltage_MinMax+0x2b0>)
 8003c32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		SLAVEBMSE.Max_Voltage = (SLAVEBMSE.Max_Voltage > SLAVEBMSE.CV[i]) ? SLAVEBMSE.Max_Voltage : SLAVEBMSE.CV[i];
 8003c36:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <Voltage_MinMax+0x2b4>)
 8003c38:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <Voltage_MinMax+0x2b4>)
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	edd3 7a00 	vldr	s15, [r3]
 8003c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	dd03      	ble.n	8003c5a <Voltage_MinMax+0x22a>
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <Voltage_MinMax+0x2b4>)
 8003c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c58:	e004      	b.n	8003c64 <Voltage_MinMax+0x234>
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	4a21      	ldr	r2, [pc, #132]	; (8003ce4 <Voltage_MinMax+0x2b4>)
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <Voltage_MinMax+0x2b4>)
 8003c66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	for(uint8_t i = 0; i < 14; i++)
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	71fb      	strb	r3, [r7, #7]
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	2b0d      	cmp	r3, #13
 8003c74:	f67f aeff 	bls.w	8003a76 <Voltage_MinMax+0x46>
	}

	Min_Voltage = 10;
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <Voltage_MinMax+0x2b8>)
 8003c7a:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <Voltage_MinMax+0x2bc>)
 8003c7c:	601a      	str	r2, [r3, #0]
	SLAVEBMSA.Min_Voltage = 10;
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <Voltage_MinMax+0x2a4>)
 8003c80:	4a1a      	ldr	r2, [pc, #104]	; (8003cec <Voltage_MinMax+0x2bc>)
 8003c82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	SLAVEBMSB.Min_Voltage = 10;
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <Voltage_MinMax+0x2a8>)
 8003c88:	4a18      	ldr	r2, [pc, #96]	; (8003cec <Voltage_MinMax+0x2bc>)
 8003c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	SLAVEBMSC.Min_Voltage = 10;
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <Voltage_MinMax+0x2ac>)
 8003c90:	4a16      	ldr	r2, [pc, #88]	; (8003cec <Voltage_MinMax+0x2bc>)
 8003c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	SLAVEBMSD.Min_Voltage = 10;
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <Voltage_MinMax+0x2b0>)
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <Voltage_MinMax+0x2bc>)
 8003c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	SLAVEBMSE.Min_Voltage = 10;
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <Voltage_MinMax+0x2b4>)
 8003ca0:	4a12      	ldr	r2, [pc, #72]	; (8003cec <Voltage_MinMax+0x2bc>)
 8003ca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	for(uint8_t i = 0; i < 14; i++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	71bb      	strb	r3, [r7, #6]
 8003caa:	e10d      	b.n	8003ec8 <Voltage_MinMax+0x498>
	{
		Min_Voltage = (Min_Voltage < SLAVEBMSA.CV[i]) ? Min_Voltage : SLAVEBMSA.CV[i];
 8003cac:	79bb      	ldrb	r3, [r7, #6]
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <Voltage_MinMax+0x2a4>)
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	ed93 7a00 	vldr	s14, [r3]
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <Voltage_MinMax+0x2b8>)
 8003cba:	edd3 7a00 	vldr	s15, [r3]
 8003cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc6:	dd13      	ble.n	8003cf0 <Voltage_MinMax+0x2c0>
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <Voltage_MinMax+0x2b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	e015      	b.n	8003cfa <Voltage_MinMax+0x2ca>
 8003cce:	bf00      	nop
 8003cd0:	20000604 	.word	0x20000604
 8003cd4:	20000190 	.word	0x20000190
 8003cd8:	20000274 	.word	0x20000274
 8003cdc:	20000358 	.word	0x20000358
 8003ce0:	2000043c 	.word	0x2000043c
 8003ce4:	20000520 	.word	0x20000520
 8003ce8:	20000608 	.word	0x20000608
 8003cec:	41200000 	.word	0x41200000
 8003cf0:	79bb      	ldrb	r3, [r7, #6]
 8003cf2:	4a80      	ldr	r2, [pc, #512]	; (8003ef4 <Voltage_MinMax+0x4c4>)
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a7f      	ldr	r2, [pc, #508]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003cfc:	6013      	str	r3, [r2, #0]
		Min_Voltage = (Min_Voltage < SLAVEBMSB.CV[i]) ? Min_Voltage : SLAVEBMSB.CV[i];
 8003cfe:	79bb      	ldrb	r3, [r7, #6]
 8003d00:	4a7e      	ldr	r2, [pc, #504]	; (8003efc <Voltage_MinMax+0x4cc>)
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	ed93 7a00 	vldr	s14, [r3]
 8003d0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003d0c:	edd3 7a00 	vldr	s15, [r3]
 8003d10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d18:	dd02      	ble.n	8003d20 <Voltage_MinMax+0x2f0>
 8003d1a:	4b77      	ldr	r3, [pc, #476]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	e004      	b.n	8003d2a <Voltage_MinMax+0x2fa>
 8003d20:	79bb      	ldrb	r3, [r7, #6]
 8003d22:	4a76      	ldr	r2, [pc, #472]	; (8003efc <Voltage_MinMax+0x4cc>)
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a73      	ldr	r2, [pc, #460]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003d2c:	6013      	str	r3, [r2, #0]
		Min_Voltage = (Min_Voltage < SLAVEBMSC.CV[i]) ? Min_Voltage : SLAVEBMSC.CV[i];
 8003d2e:	79bb      	ldrb	r3, [r7, #6]
 8003d30:	4a73      	ldr	r2, [pc, #460]	; (8003f00 <Voltage_MinMax+0x4d0>)
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	ed93 7a00 	vldr	s14, [r3]
 8003d3a:	4b6f      	ldr	r3, [pc, #444]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	dd02      	ble.n	8003d50 <Voltage_MinMax+0x320>
 8003d4a:	4b6b      	ldr	r3, [pc, #428]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	e004      	b.n	8003d5a <Voltage_MinMax+0x32a>
 8003d50:	79bb      	ldrb	r3, [r7, #6]
 8003d52:	4a6b      	ldr	r2, [pc, #428]	; (8003f00 <Voltage_MinMax+0x4d0>)
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a67      	ldr	r2, [pc, #412]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003d5c:	6013      	str	r3, [r2, #0]
		Min_Voltage = (Min_Voltage < SLAVEBMSD.CV[i]) ? Min_Voltage : SLAVEBMSD.CV[i];
 8003d5e:	79bb      	ldrb	r3, [r7, #6]
 8003d60:	4a68      	ldr	r2, [pc, #416]	; (8003f04 <Voltage_MinMax+0x4d4>)
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	ed93 7a00 	vldr	s14, [r3]
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d78:	dd02      	ble.n	8003d80 <Voltage_MinMax+0x350>
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	e004      	b.n	8003d8a <Voltage_MinMax+0x35a>
 8003d80:	79bb      	ldrb	r3, [r7, #6]
 8003d82:	4a60      	ldr	r2, [pc, #384]	; (8003f04 <Voltage_MinMax+0x4d4>)
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003d8c:	6013      	str	r3, [r2, #0]
		Min_Voltage = (Min_Voltage < SLAVEBMSE.CV[i]) ? Min_Voltage : SLAVEBMSE.CV[i];
 8003d8e:	79bb      	ldrb	r3, [r7, #6]
 8003d90:	4a5d      	ldr	r2, [pc, #372]	; (8003f08 <Voltage_MinMax+0x4d8>)
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	ed93 7a00 	vldr	s14, [r3]
 8003d9a:	4b57      	ldr	r3, [pc, #348]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da8:	dd02      	ble.n	8003db0 <Voltage_MinMax+0x380>
 8003daa:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	e004      	b.n	8003dba <Voltage_MinMax+0x38a>
 8003db0:	79bb      	ldrb	r3, [r7, #6]
 8003db2:	4a55      	ldr	r2, [pc, #340]	; (8003f08 <Voltage_MinMax+0x4d8>)
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a4f      	ldr	r2, [pc, #316]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003dbc:	6013      	str	r3, [r2, #0]
		SLAVEBMSA.Min_Voltage = (SLAVEBMSA.Min_Voltage < SLAVEBMSA.CV[i]) ? SLAVEBMSA.Min_Voltage : SLAVEBMSA.CV[i];
 8003dbe:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <Voltage_MinMax+0x4c4>)
 8003dc0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8003dc4:	79bb      	ldrb	r3, [r7, #6]
 8003dc6:	4a4b      	ldr	r2, [pc, #300]	; (8003ef4 <Voltage_MinMax+0x4c4>)
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	d503      	bpl.n	8003de2 <Voltage_MinMax+0x3b2>
 8003dda:	4b46      	ldr	r3, [pc, #280]	; (8003ef4 <Voltage_MinMax+0x4c4>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de0:	e004      	b.n	8003dec <Voltage_MinMax+0x3bc>
 8003de2:	79bb      	ldrb	r3, [r7, #6]
 8003de4:	4a43      	ldr	r2, [pc, #268]	; (8003ef4 <Voltage_MinMax+0x4c4>)
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a41      	ldr	r2, [pc, #260]	; (8003ef4 <Voltage_MinMax+0x4c4>)
 8003dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		SLAVEBMSB.Min_Voltage = (SLAVEBMSB.Min_Voltage < SLAVEBMSB.CV[i]) ? SLAVEBMSB.Min_Voltage : SLAVEBMSB.CV[i];
 8003df2:	4b42      	ldr	r3, [pc, #264]	; (8003efc <Voltage_MinMax+0x4cc>)
 8003df4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8003df8:	79bb      	ldrb	r3, [r7, #6]
 8003dfa:	4a40      	ldr	r2, [pc, #256]	; (8003efc <Voltage_MinMax+0x4cc>)
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	edd3 7a00 	vldr	s15, [r3]
 8003e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0c:	d503      	bpl.n	8003e16 <Voltage_MinMax+0x3e6>
 8003e0e:	4b3b      	ldr	r3, [pc, #236]	; (8003efc <Voltage_MinMax+0x4cc>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	e004      	b.n	8003e20 <Voltage_MinMax+0x3f0>
 8003e16:	79bb      	ldrb	r3, [r7, #6]
 8003e18:	4a38      	ldr	r2, [pc, #224]	; (8003efc <Voltage_MinMax+0x4cc>)
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a36      	ldr	r2, [pc, #216]	; (8003efc <Voltage_MinMax+0x4cc>)
 8003e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		SLAVEBMSC.Min_Voltage = (SLAVEBMSC.Min_Voltage < SLAVEBMSC.CV[i]) ? SLAVEBMSC.Min_Voltage : SLAVEBMSC.CV[i];
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <Voltage_MinMax+0x4d0>)
 8003e28:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8003e2c:	79bb      	ldrb	r3, [r7, #6]
 8003e2e:	4a34      	ldr	r2, [pc, #208]	; (8003f00 <Voltage_MinMax+0x4d0>)
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e40:	d503      	bpl.n	8003e4a <Voltage_MinMax+0x41a>
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <Voltage_MinMax+0x4d0>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	e004      	b.n	8003e54 <Voltage_MinMax+0x424>
 8003e4a:	79bb      	ldrb	r3, [r7, #6]
 8003e4c:	4a2c      	ldr	r2, [pc, #176]	; (8003f00 <Voltage_MinMax+0x4d0>)
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <Voltage_MinMax+0x4d0>)
 8003e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		SLAVEBMSD.Min_Voltage = (SLAVEBMSD.Min_Voltage < SLAVEBMSD.CV[i]) ? SLAVEBMSD.Min_Voltage : SLAVEBMSD.CV[i];
 8003e5a:	4b2a      	ldr	r3, [pc, #168]	; (8003f04 <Voltage_MinMax+0x4d4>)
 8003e5c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8003e60:	79bb      	ldrb	r3, [r7, #6]
 8003e62:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <Voltage_MinMax+0x4d4>)
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	edd3 7a00 	vldr	s15, [r3]
 8003e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e74:	d503      	bpl.n	8003e7e <Voltage_MinMax+0x44e>
 8003e76:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <Voltage_MinMax+0x4d4>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	e004      	b.n	8003e88 <Voltage_MinMax+0x458>
 8003e7e:	79bb      	ldrb	r3, [r7, #6]
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <Voltage_MinMax+0x4d4>)
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <Voltage_MinMax+0x4d4>)
 8003e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		SLAVEBMSE.Min_Voltage = (SLAVEBMSE.Min_Voltage < SLAVEBMSE.CV[i]) ? SLAVEBMSE.Min_Voltage : SLAVEBMSE.CV[i];
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <Voltage_MinMax+0x4d8>)
 8003e90:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8003e94:	79bb      	ldrb	r3, [r7, #6]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <Voltage_MinMax+0x4d8>)
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	edd3 7a00 	vldr	s15, [r3]
 8003ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea8:	d503      	bpl.n	8003eb2 <Voltage_MinMax+0x482>
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <Voltage_MinMax+0x4d8>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb0:	e004      	b.n	8003ebc <Voltage_MinMax+0x48c>
 8003eb2:	79bb      	ldrb	r3, [r7, #6]
 8003eb4:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <Voltage_MinMax+0x4d8>)
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <Voltage_MinMax+0x4d8>)
 8003ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	for(uint8_t i = 0; i < 14; i++)
 8003ec2:	79bb      	ldrb	r3, [r7, #6]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	71bb      	strb	r3, [r7, #6]
 8003ec8:	79bb      	ldrb	r3, [r7, #6]
 8003eca:	2b0d      	cmp	r3, #13
 8003ecc:	f67f aeee 	bls.w	8003cac <Voltage_MinMax+0x27c>
	}

	Voltage_diff = Max_Voltage - Min_Voltage;
 8003ed0:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <Voltage_MinMax+0x4dc>)
 8003ed2:	ed93 7a00 	vldr	s14, [r3]
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <Voltage_MinMax+0x4c8>)
 8003ed8:	edd3 7a00 	vldr	s15, [r3]
 8003edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <Voltage_MinMax+0x4e0>)
 8003ee2:	edc3 7a00 	vstr	s15, [r3]
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000190 	.word	0x20000190
 8003ef8:	20000608 	.word	0x20000608
 8003efc:	20000274 	.word	0x20000274
 8003f00:	20000358 	.word	0x20000358
 8003f04:	2000043c 	.word	0x2000043c
 8003f08:	20000520 	.word	0x20000520
 8003f0c:	20000604 	.word	0x20000604
 8003f10:	2000060c 	.word	0x2000060c
 8003f14:	00000000 	.word	0x00000000

08003f18 <Set_PWM_duty>:
		time++;
	}
}

void Set_PWM_duty(void)
{
 8003f18:	b598      	push	{r3, r4, r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
	htim1.Instance->CCR2 = duty * 1.5;
	htim1.Instance->CCR3 = duty;
	htim2.Instance->CCR3 = duty * 1.5;
	htim2.Instance->CCR4 = duty * 2;*/

	if(SLAVEBMSA.MaxTemp <= 50 && SLAVEBMSB.MaxTemp <= 50 && SLAVEBMSC.MaxTemp <= 50 && SLAVEBMSD.MaxTemp <= 50 && SLAVEBMSE.MaxTemp <= 50)
 8003f1c:	4b52      	ldr	r3, [pc, #328]	; (8004068 <Set_PWM_duty+0x150>)
 8003f1e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003f22:	2b32      	cmp	r3, #50	; 0x32
 8003f24:	d87d      	bhi.n	8004022 <Set_PWM_duty+0x10a>
 8003f26:	4b51      	ldr	r3, [pc, #324]	; (800406c <Set_PWM_duty+0x154>)
 8003f28:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003f2c:	2b32      	cmp	r3, #50	; 0x32
 8003f2e:	d878      	bhi.n	8004022 <Set_PWM_duty+0x10a>
 8003f30:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <Set_PWM_duty+0x158>)
 8003f32:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003f36:	2b32      	cmp	r3, #50	; 0x32
 8003f38:	d873      	bhi.n	8004022 <Set_PWM_duty+0x10a>
 8003f3a:	4b4e      	ldr	r3, [pc, #312]	; (8004074 <Set_PWM_duty+0x15c>)
 8003f3c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003f40:	2b32      	cmp	r3, #50	; 0x32
 8003f42:	d86e      	bhi.n	8004022 <Set_PWM_duty+0x10a>
 8003f44:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <Set_PWM_duty+0x160>)
 8003f46:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003f4a:	2b32      	cmp	r3, #50	; 0x32
 8003f4c:	d869      	bhi.n	8004022 <Set_PWM_duty+0x10a>
	{
		htim1.Instance->CCR1 = SLAVEBMSA.MaxTemp * 1.4;
 8003f4e:	4b46      	ldr	r3, [pc, #280]	; (8004068 <Set_PWM_duty+0x150>)
 8003f50:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fc fa91 	bl	800047c <__aeabi_i2d>
 8003f5a:	a33d      	add	r3, pc, #244	; (adr r3, 8004050 <Set_PWM_duty+0x138>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc faf6 	bl	8000550 <__aeabi_dmul>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4944      	ldr	r1, [pc, #272]	; (800407c <Set_PWM_duty+0x164>)
 8003f6a:	680c      	ldr	r4, [r1, #0]
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f7fc fd00 	bl	8000974 <__aeabi_d2uiz>
 8003f74:	4603      	mov	r3, r0
 8003f76:	6363      	str	r3, [r4, #52]	; 0x34
		htim1.Instance->CCR2 = SLAVEBMSB.MaxTemp * 1.1;
 8003f78:	4b3c      	ldr	r3, [pc, #240]	; (800406c <Set_PWM_duty+0x154>)
 8003f7a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fc fa7c 	bl	800047c <__aeabi_i2d>
 8003f84:	a334      	add	r3, pc, #208	; (adr r3, 8004058 <Set_PWM_duty+0x140>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	f7fc fae1 	bl	8000550 <__aeabi_dmul>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	493a      	ldr	r1, [pc, #232]	; (800407c <Set_PWM_duty+0x164>)
 8003f94:	680c      	ldr	r4, [r1, #0]
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f7fc fceb 	bl	8000974 <__aeabi_d2uiz>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	63a3      	str	r3, [r4, #56]	; 0x38
		htim1.Instance->CCR3 = SLAVEBMSC.MaxTemp * 0.8;
 8003fa2:	4b33      	ldr	r3, [pc, #204]	; (8004070 <Set_PWM_duty+0x158>)
 8003fa4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc fa67 	bl	800047c <__aeabi_i2d>
 8003fae:	a32c      	add	r3, pc, #176	; (adr r3, 8004060 <Set_PWM_duty+0x148>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc facc 	bl	8000550 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	492f      	ldr	r1, [pc, #188]	; (800407c <Set_PWM_duty+0x164>)
 8003fbe:	680c      	ldr	r4, [r1, #0]
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f7fc fcd6 	bl	8000974 <__aeabi_d2uiz>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	63e3      	str	r3, [r4, #60]	; 0x3c
		htim2.Instance->CCR3 = SLAVEBMSD.MaxTemp * 1.1;
 8003fcc:	4b29      	ldr	r3, [pc, #164]	; (8004074 <Set_PWM_duty+0x15c>)
 8003fce:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fc fa52 	bl	800047c <__aeabi_i2d>
 8003fd8:	a31f      	add	r3, pc, #124	; (adr r3, 8004058 <Set_PWM_duty+0x140>)
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f7fc fab7 	bl	8000550 <__aeabi_dmul>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4926      	ldr	r1, [pc, #152]	; (8004080 <Set_PWM_duty+0x168>)
 8003fe8:	680c      	ldr	r4, [r1, #0]
 8003fea:	4610      	mov	r0, r2
 8003fec:	4619      	mov	r1, r3
 8003fee:	f7fc fcc1 	bl	8000974 <__aeabi_d2uiz>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	63e3      	str	r3, [r4, #60]	; 0x3c
		htim2.Instance->CCR4 = SLAVEBMSE.MaxTemp * 1.4;
 8003ff6:	4b20      	ldr	r3, [pc, #128]	; (8004078 <Set_PWM_duty+0x160>)
 8003ff8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc fa3d 	bl	800047c <__aeabi_i2d>
 8004002:	a313      	add	r3, pc, #76	; (adr r3, 8004050 <Set_PWM_duty+0x138>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc faa2 	bl	8000550 <__aeabi_dmul>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	491b      	ldr	r1, [pc, #108]	; (8004080 <Set_PWM_duty+0x168>)
 8004012:	680c      	ldr	r4, [r1, #0]
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	f7fc fcac 	bl	8000974 <__aeabi_d2uiz>
 800401c:	4603      	mov	r3, r0
 800401e:	6423      	str	r3, [r4, #64]	; 0x40
 8004020:	e014      	b.n	800404c <Set_PWM_duty+0x134>
	}
	else
	{
		htim1.Instance->CCR1 = 70;
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <Set_PWM_duty+0x164>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2246      	movs	r2, #70	; 0x46
 8004028:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2 = 55;
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <Set_PWM_duty+0x164>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2237      	movs	r2, #55	; 0x37
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3 = 40;
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <Set_PWM_duty+0x164>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2228      	movs	r2, #40	; 0x28
 8004038:	63da      	str	r2, [r3, #60]	; 0x3c
		htim2.Instance->CCR3 = 55;
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <Set_PWM_duty+0x168>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2237      	movs	r2, #55	; 0x37
 8004040:	63da      	str	r2, [r3, #60]	; 0x3c
		htim2.Instance->CCR4 = 70;
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <Set_PWM_duty+0x168>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2246      	movs	r2, #70	; 0x46
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
		htim1.Instance->CCR2 = 100;
		htim1.Instance->CCR3 = 100;
		htim1.Instance->CCR3 = 100;
		htim1.Instance->CCR4 = 100;
	}*/
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	bd98      	pop	{r3, r4, r7, pc}
 8004050:	66666666 	.word	0x66666666
 8004054:	3ff66666 	.word	0x3ff66666
 8004058:	9999999a 	.word	0x9999999a
 800405c:	3ff19999 	.word	0x3ff19999
 8004060:	9999999a 	.word	0x9999999a
 8004064:	3fe99999 	.word	0x3fe99999
 8004068:	20000190 	.word	0x20000190
 800406c:	20000274 	.word	0x20000274
 8004070:	20000358 	.word	0x20000358
 8004074:	2000043c 	.word	0x2000043c
 8004078:	20000520 	.word	0x20000520
 800407c:	20000940 	.word	0x20000940
 8004080:	2000098c 	.word	0x2000098c

08004084 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim6.Instance)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d105      	bne.n	80040a4 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		Reading_Voltage(); //SLAVEBMS A ~ E
 8004098:	f7fd fbe6 	bl	8001868 <Reading_Voltage>

		Voltage_MinMax(); //Max & Min Voltage
 800409c:	f7ff fcc8 	bl	8003a30 <Voltage_MinMax>

		Transmit_Data();
 80040a0:	f7fe ff36 	bl	8002f10 <Transmit_Data>

	}
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000a24 	.word	0x20000a24

080040b0 <calc_RPM>:

void calc_RPM()
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
	if (ch1done)
 80040b4:	4ba5      	ldr	r3, [pc, #660]	; (800434c <calc_RPM+0x29c>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d044      	beq.n	8004146 <calc_RPM+0x96>
	{
		newccr1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80040bc:	2100      	movs	r1, #0
 80040be:	48a4      	ldr	r0, [pc, #656]	; (8004350 <calc_RPM+0x2a0>)
 80040c0:	f006 f91a 	bl	800a2f8 <HAL_TIM_ReadCapturedValue>
 80040c4:	4603      	mov	r3, r0
 80040c6:	4aa3      	ldr	r2, [pc, #652]	; (8004354 <calc_RPM+0x2a4>)
 80040c8:	6013      	str	r3, [r2, #0]
		if (oldccr1 <= newccr1)
 80040ca:	4ba3      	ldr	r3, [pc, #652]	; (8004358 <calc_RPM+0x2a8>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4ba1      	ldr	r3, [pc, #644]	; (8004354 <calc_RPM+0x2a4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d816      	bhi.n	8004104 <calc_RPM+0x54>
		{
			rpm1 = 30 * htim3.Instance->ARR / (newccr1 - oldccr1);
 80040d6:	4b9e      	ldr	r3, [pc, #632]	; (8004350 <calc_RPM+0x2a0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4619      	mov	r1, r3
 80040e6:	4b9b      	ldr	r3, [pc, #620]	; (8004354 <calc_RPM+0x2a4>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4b9b      	ldr	r3, [pc, #620]	; (8004358 <calc_RPM+0x2a8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fc:	4b97      	ldr	r3, [pc, #604]	; (800435c <calc_RPM+0x2ac>)
 80040fe:	edc3 7a00 	vstr	s15, [r3]
 8004102:	e019      	b.n	8004138 <calc_RPM+0x88>
		}
		else
		{
			rpm1 = 30 * htim3.Instance->ARR / (htim3.Instance->ARR + newccr1 - oldccr1);
 8004104:	4b92      	ldr	r3, [pc, #584]	; (8004350 <calc_RPM+0x2a0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	4619      	mov	r1, r3
 8004114:	4b8e      	ldr	r3, [pc, #568]	; (8004350 <calc_RPM+0x2a0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411a:	4b8e      	ldr	r3, [pc, #568]	; (8004354 <calc_RPM+0x2a4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	441a      	add	r2, r3
 8004120:	4b8d      	ldr	r3, [pc, #564]	; (8004358 <calc_RPM+0x2a8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	fbb1 f3f3 	udiv	r3, r1, r3
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	4b8a      	ldr	r3, [pc, #552]	; (800435c <calc_RPM+0x2ac>)
 8004134:	edc3 7a00 	vstr	s15, [r3]
		}
		oldccr1 = newccr1;
 8004138:	4b86      	ldr	r3, [pc, #536]	; (8004354 <calc_RPM+0x2a4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a86      	ldr	r2, [pc, #536]	; (8004358 <calc_RPM+0x2a8>)
 800413e:	6013      	str	r3, [r2, #0]
		ch1done = 0;
 8004140:	4b82      	ldr	r3, [pc, #520]	; (800434c <calc_RPM+0x29c>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
	}
	if (ch2done)
 8004146:	4b86      	ldr	r3, [pc, #536]	; (8004360 <calc_RPM+0x2b0>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d044      	beq.n	80041d8 <calc_RPM+0x128>
	{
		newccr2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 800414e:	2104      	movs	r1, #4
 8004150:	487f      	ldr	r0, [pc, #508]	; (8004350 <calc_RPM+0x2a0>)
 8004152:	f006 f8d1 	bl	800a2f8 <HAL_TIM_ReadCapturedValue>
 8004156:	4603      	mov	r3, r0
 8004158:	4a82      	ldr	r2, [pc, #520]	; (8004364 <calc_RPM+0x2b4>)
 800415a:	6013      	str	r3, [r2, #0]
		if (oldccr2 <= newccr2)
 800415c:	4b82      	ldr	r3, [pc, #520]	; (8004368 <calc_RPM+0x2b8>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b80      	ldr	r3, [pc, #512]	; (8004364 <calc_RPM+0x2b4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d816      	bhi.n	8004196 <calc_RPM+0xe6>
		{
			rpm2 = 30 * htim3.Instance->ARR / (newccr2 - oldccr2);
 8004168:	4b79      	ldr	r3, [pc, #484]	; (8004350 <calc_RPM+0x2a0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4619      	mov	r1, r3
 8004178:	4b7a      	ldr	r3, [pc, #488]	; (8004364 <calc_RPM+0x2b4>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b7a      	ldr	r3, [pc, #488]	; (8004368 <calc_RPM+0x2b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	fbb1 f3f3 	udiv	r3, r1, r3
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418e:	4b77      	ldr	r3, [pc, #476]	; (800436c <calc_RPM+0x2bc>)
 8004190:	edc3 7a00 	vstr	s15, [r3]
 8004194:	e019      	b.n	80041ca <calc_RPM+0x11a>
		}
		else
		{
			rpm2 = 30 * htim3.Instance->ARR / (htim3.Instance->ARR + newccr2 - oldccr2);
 8004196:	4b6e      	ldr	r3, [pc, #440]	; (8004350 <calc_RPM+0x2a0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4619      	mov	r1, r3
 80041a6:	4b6a      	ldr	r3, [pc, #424]	; (8004350 <calc_RPM+0x2a0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	4b6d      	ldr	r3, [pc, #436]	; (8004364 <calc_RPM+0x2b4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	441a      	add	r2, r3
 80041b2:	4b6d      	ldr	r3, [pc, #436]	; (8004368 <calc_RPM+0x2b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80041bc:	ee07 3a90 	vmov	s15, r3
 80041c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c4:	4b69      	ldr	r3, [pc, #420]	; (800436c <calc_RPM+0x2bc>)
 80041c6:	edc3 7a00 	vstr	s15, [r3]
		}
		oldccr2 = newccr2;
 80041ca:	4b66      	ldr	r3, [pc, #408]	; (8004364 <calc_RPM+0x2b4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a66      	ldr	r2, [pc, #408]	; (8004368 <calc_RPM+0x2b8>)
 80041d0:	6013      	str	r3, [r2, #0]
		ch2done = 0;
 80041d2:	4b63      	ldr	r3, [pc, #396]	; (8004360 <calc_RPM+0x2b0>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
	}
	if (ch3done)
 80041d8:	4b65      	ldr	r3, [pc, #404]	; (8004370 <calc_RPM+0x2c0>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d044      	beq.n	800426a <calc_RPM+0x1ba>
	{
		newccr3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 80041e0:	2108      	movs	r1, #8
 80041e2:	485b      	ldr	r0, [pc, #364]	; (8004350 <calc_RPM+0x2a0>)
 80041e4:	f006 f888 	bl	800a2f8 <HAL_TIM_ReadCapturedValue>
 80041e8:	4603      	mov	r3, r0
 80041ea:	4a62      	ldr	r2, [pc, #392]	; (8004374 <calc_RPM+0x2c4>)
 80041ec:	6013      	str	r3, [r2, #0]
		if (oldccr3 <= newccr3)
 80041ee:	4b62      	ldr	r3, [pc, #392]	; (8004378 <calc_RPM+0x2c8>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4b60      	ldr	r3, [pc, #384]	; (8004374 <calc_RPM+0x2c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d816      	bhi.n	8004228 <calc_RPM+0x178>
		{
			rpm3 = 30 * htim3.Instance->ARR / (newccr3 - oldccr3);
 80041fa:	4b55      	ldr	r3, [pc, #340]	; (8004350 <calc_RPM+0x2a0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4619      	mov	r1, r3
 800420a:	4b5a      	ldr	r3, [pc, #360]	; (8004374 <calc_RPM+0x2c4>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4b5a      	ldr	r3, [pc, #360]	; (8004378 <calc_RPM+0x2c8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	fbb1 f3f3 	udiv	r3, r1, r3
 8004218:	ee07 3a90 	vmov	s15, r3
 800421c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004220:	4b56      	ldr	r3, [pc, #344]	; (800437c <calc_RPM+0x2cc>)
 8004222:	edc3 7a00 	vstr	s15, [r3]
 8004226:	e019      	b.n	800425c <calc_RPM+0x1ac>
		}
		else
		{
			rpm3 = 30 * htim3.Instance->ARR / (htim3.Instance->ARR + newccr3 - oldccr3);
 8004228:	4b49      	ldr	r3, [pc, #292]	; (8004350 <calc_RPM+0x2a0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4619      	mov	r1, r3
 8004238:	4b45      	ldr	r3, [pc, #276]	; (8004350 <calc_RPM+0x2a0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	4b4d      	ldr	r3, [pc, #308]	; (8004374 <calc_RPM+0x2c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	441a      	add	r2, r3
 8004244:	4b4c      	ldr	r3, [pc, #304]	; (8004378 <calc_RPM+0x2c8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	fbb1 f3f3 	udiv	r3, r1, r3
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	4b49      	ldr	r3, [pc, #292]	; (800437c <calc_RPM+0x2cc>)
 8004258:	edc3 7a00 	vstr	s15, [r3]
		}
		oldccr3 = newccr3;
 800425c:	4b45      	ldr	r3, [pc, #276]	; (8004374 <calc_RPM+0x2c4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a45      	ldr	r2, [pc, #276]	; (8004378 <calc_RPM+0x2c8>)
 8004262:	6013      	str	r3, [r2, #0]
		ch3done = 0;
 8004264:	4b42      	ldr	r3, [pc, #264]	; (8004370 <calc_RPM+0x2c0>)
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
	}
	if (ch4done)
 800426a:	4b45      	ldr	r3, [pc, #276]	; (8004380 <calc_RPM+0x2d0>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d044      	beq.n	80042fc <calc_RPM+0x24c>
	{
		newccr4 = HAL_TIM_ReadCapturedValue(&htim15, TIM_CHANNEL_1);
 8004272:	2100      	movs	r1, #0
 8004274:	4843      	ldr	r0, [pc, #268]	; (8004384 <calc_RPM+0x2d4>)
 8004276:	f006 f83f 	bl	800a2f8 <HAL_TIM_ReadCapturedValue>
 800427a:	4603      	mov	r3, r0
 800427c:	4a42      	ldr	r2, [pc, #264]	; (8004388 <calc_RPM+0x2d8>)
 800427e:	6013      	str	r3, [r2, #0]
		if (oldccr4 <= newccr4)
 8004280:	4b42      	ldr	r3, [pc, #264]	; (800438c <calc_RPM+0x2dc>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b40      	ldr	r3, [pc, #256]	; (8004388 <calc_RPM+0x2d8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d816      	bhi.n	80042ba <calc_RPM+0x20a>
		{
			rpm4 = 30 * htim15.Instance->ARR / (newccr4 - oldccr4);
 800428c:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <calc_RPM+0x2d4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4619      	mov	r1, r3
 800429c:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <calc_RPM+0x2d8>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b3a      	ldr	r3, [pc, #232]	; (800438c <calc_RPM+0x2dc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b2:	4b37      	ldr	r3, [pc, #220]	; (8004390 <calc_RPM+0x2e0>)
 80042b4:	edc3 7a00 	vstr	s15, [r3]
 80042b8:	e019      	b.n	80042ee <calc_RPM+0x23e>
		}
		else
		{
			rpm4 = 30 * htim15.Instance->ARR / (htim15.Instance->ARR + newccr4 - oldccr4);
 80042ba:	4b32      	ldr	r3, [pc, #200]	; (8004384 <calc_RPM+0x2d4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4619      	mov	r1, r3
 80042ca:	4b2e      	ldr	r3, [pc, #184]	; (8004384 <calc_RPM+0x2d4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d0:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <calc_RPM+0x2d8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	441a      	add	r2, r3
 80042d6:	4b2d      	ldr	r3, [pc, #180]	; (800438c <calc_RPM+0x2dc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e0:	ee07 3a90 	vmov	s15, r3
 80042e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e8:	4b29      	ldr	r3, [pc, #164]	; (8004390 <calc_RPM+0x2e0>)
 80042ea:	edc3 7a00 	vstr	s15, [r3]
		}
		oldccr4 = newccr4;
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <calc_RPM+0x2d8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a26      	ldr	r2, [pc, #152]	; (800438c <calc_RPM+0x2dc>)
 80042f4:	6013      	str	r3, [r2, #0]
		ch4done = 0;
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <calc_RPM+0x2d0>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
	}
	if (ch5done)
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <calc_RPM+0x2e4>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d070      	beq.n	80043e6 <calc_RPM+0x336>
	{
		newccr5 = HAL_TIM_ReadCapturedValue(&htim15, TIM_CHANNEL_2);
 8004304:	2104      	movs	r1, #4
 8004306:	481f      	ldr	r0, [pc, #124]	; (8004384 <calc_RPM+0x2d4>)
 8004308:	f005 fff6 	bl	800a2f8 <HAL_TIM_ReadCapturedValue>
 800430c:	4603      	mov	r3, r0
 800430e:	4a22      	ldr	r2, [pc, #136]	; (8004398 <calc_RPM+0x2e8>)
 8004310:	6013      	str	r3, [r2, #0]
		if (oldccr5 <= newccr5)
 8004312:	4b22      	ldr	r3, [pc, #136]	; (800439c <calc_RPM+0x2ec>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <calc_RPM+0x2e8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d842      	bhi.n	80043a4 <calc_RPM+0x2f4>
		{
			rpm5 = 30 * htim15.Instance->ARR / (newccr5 - oldccr5);
 800431e:	4b19      	ldr	r3, [pc, #100]	; (8004384 <calc_RPM+0x2d4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4619      	mov	r1, r3
 800432e:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <calc_RPM+0x2e8>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b1a      	ldr	r3, [pc, #104]	; (800439c <calc_RPM+0x2ec>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	fbb1 f3f3 	udiv	r3, r1, r3
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <calc_RPM+0x2f0>)
 8004346:	edc3 7a00 	vstr	s15, [r3]
 800434a:	e045      	b.n	80043d8 <calc_RPM+0x328>
 800434c:	200006c8 	.word	0x200006c8
 8004350:	200009d8 	.word	0x200009d8
 8004354:	200006a0 	.word	0x200006a0
 8004358:	2000068c 	.word	0x2000068c
 800435c:	200006b4 	.word	0x200006b4
 8004360:	200006c9 	.word	0x200006c9
 8004364:	200006a4 	.word	0x200006a4
 8004368:	20000690 	.word	0x20000690
 800436c:	200006b8 	.word	0x200006b8
 8004370:	200006ca 	.word	0x200006ca
 8004374:	200006a8 	.word	0x200006a8
 8004378:	20000694 	.word	0x20000694
 800437c:	200006bc 	.word	0x200006bc
 8004380:	200006cb 	.word	0x200006cb
 8004384:	20000a70 	.word	0x20000a70
 8004388:	200006ac 	.word	0x200006ac
 800438c:	20000698 	.word	0x20000698
 8004390:	200006c0 	.word	0x200006c0
 8004394:	200006cc 	.word	0x200006cc
 8004398:	200006b0 	.word	0x200006b0
 800439c:	2000069c 	.word	0x2000069c
 80043a0:	200006c4 	.word	0x200006c4
		}
		else
		{
			rpm5 = 30 * htim15.Instance->ARR / (htim15.Instance->ARR + newccr5 - oldccr5);
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <calc_RPM+0x33c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4619      	mov	r1, r3
 80043b4:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <calc_RPM+0x33c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <calc_RPM+0x340>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	441a      	add	r2, r3
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <calc_RPM+0x344>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <calc_RPM+0x348>)
 80043d4:	edc3 7a00 	vstr	s15, [r3]
		}
		oldccr5 = newccr5;
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <calc_RPM+0x340>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a05      	ldr	r2, [pc, #20]	; (80043f4 <calc_RPM+0x344>)
 80043de:	6013      	str	r3, [r2, #0]
		ch5done = 0;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <calc_RPM+0x34c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
	}
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000a70 	.word	0x20000a70
 80043f0:	200006b0 	.word	0x200006b0
 80043f4:	2000069c 	.word	0x2000069c
 80043f8:	200006c4 	.word	0x200006c4
 80043fc:	200006cc 	.word	0x200006cc

08004400 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <HAL_TIM_IC_CaptureCallback+0x7c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d117      	bne.n	8004444 <HAL_TIM_IC_CaptureCallback+0x44>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	7f1b      	ldrb	r3, [r3, #28]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d103      	bne.n	8004424 <HAL_TIM_IC_CaptureCallback+0x24>
		{
			ch1done = 1;
 800441c:	4b18      	ldr	r3, [pc, #96]	; (8004480 <HAL_TIM_IC_CaptureCallback+0x80>)
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			ch5done = 1;
		}
	}
}
 8004422:	e024      	b.n	800446e <HAL_TIM_IC_CaptureCallback+0x6e>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	7f1b      	ldrb	r3, [r3, #28]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d103      	bne.n	8004434 <HAL_TIM_IC_CaptureCallback+0x34>
			ch2done = 1;
 800442c:	4b15      	ldr	r3, [pc, #84]	; (8004484 <HAL_TIM_IC_CaptureCallback+0x84>)
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
}
 8004432:	e01c      	b.n	800446e <HAL_TIM_IC_CaptureCallback+0x6e>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	7f1b      	ldrb	r3, [r3, #28]
 8004438:	2b04      	cmp	r3, #4
 800443a:	d118      	bne.n	800446e <HAL_TIM_IC_CaptureCallback+0x6e>
			ch3done = 1;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_TIM_IC_CaptureCallback+0x88>)
 800443e:	2201      	movs	r2, #1
 8004440:	701a      	strb	r2, [r3, #0]
}
 8004442:	e014      	b.n	800446e <HAL_TIM_IC_CaptureCallback+0x6e>
	else if (htim->Instance == htim15.Instance)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_TIM_IC_CaptureCallback+0x8c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d10e      	bne.n	800446e <HAL_TIM_IC_CaptureCallback+0x6e>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	7f1b      	ldrb	r3, [r3, #28]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d103      	bne.n	8004460 <HAL_TIM_IC_CaptureCallback+0x60>
			ch4done = 1;
 8004458:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <HAL_TIM_IC_CaptureCallback+0x90>)
 800445a:	2201      	movs	r2, #1
 800445c:	701a      	strb	r2, [r3, #0]
}
 800445e:	e006      	b.n	800446e <HAL_TIM_IC_CaptureCallback+0x6e>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7f1b      	ldrb	r3, [r3, #28]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d102      	bne.n	800446e <HAL_TIM_IC_CaptureCallback+0x6e>
			ch5done = 1;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <HAL_TIM_IC_CaptureCallback+0x94>)
 800446a:	2201      	movs	r2, #1
 800446c:	701a      	strb	r2, [r3, #0]
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	200009d8 	.word	0x200009d8
 8004480:	200006c8 	.word	0x200006c8
 8004484:	200006c9 	.word	0x200006c9
 8004488:	200006ca 	.word	0x200006ca
 800448c:	20000a70 	.word	0x20000a70
 8004490:	200006cb 	.word	0x200006cb
 8004494:	200006cc 	.word	0x200006cc

08004498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800449c:	b672      	cpsid	i
}
 800449e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044a0:	e7fe      	b.n	80044a0 <Error_Handler+0x8>
	...

080044a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <MX_SPI1_Init+0x74>)
 80044aa:	4a1c      	ldr	r2, [pc, #112]	; (800451c <MX_SPI1_Init+0x78>)
 80044ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80044ae:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <MX_SPI1_Init+0x74>)
 80044b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80044b6:	4b18      	ldr	r3, [pc, #96]	; (8004518 <MX_SPI1_Init+0x74>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <MX_SPI1_Init+0x74>)
 80044be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80044c4:	4b14      	ldr	r3, [pc, #80]	; (8004518 <MX_SPI1_Init+0x74>)
 80044c6:	2202      	movs	r2, #2
 80044c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80044ca:	4b13      	ldr	r3, [pc, #76]	; (8004518 <MX_SPI1_Init+0x74>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80044d0:	4b11      	ldr	r3, [pc, #68]	; (8004518 <MX_SPI1_Init+0x74>)
 80044d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80044d8:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <MX_SPI1_Init+0x74>)
 80044da:	2230      	movs	r2, #48	; 0x30
 80044dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044de:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <MX_SPI1_Init+0x74>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <MX_SPI1_Init+0x74>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ea:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <MX_SPI1_Init+0x74>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <MX_SPI1_Init+0x74>)
 80044f2:	2207      	movs	r2, #7
 80044f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <MX_SPI1_Init+0x74>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <MX_SPI1_Init+0x74>)
 80044fe:	2200      	movs	r2, #0
 8004500:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004502:	4805      	ldr	r0, [pc, #20]	; (8004518 <MX_SPI1_Init+0x74>)
 8004504:	f004 fa52 	bl	80089ac <HAL_SPI_Init>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800450e:	f7ff ffc3 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200008dc 	.word	0x200008dc
 800451c:	40013000 	.word	0x40013000

08004520 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004528:	f107 0314 	add.w	r3, r7, #20
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <HAL_SPI_MspInit+0x8c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d130      	bne.n	80045a4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <HAL_SPI_MspInit+0x90>)
 8004544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004546:	4a1a      	ldr	r2, [pc, #104]	; (80045b0 <HAL_SPI_MspInit+0x90>)
 8004548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800454c:	6613      	str	r3, [r2, #96]	; 0x60
 800454e:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <HAL_SPI_MspInit+0x90>)
 8004550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <HAL_SPI_MspInit+0x90>)
 800455c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455e:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <HAL_SPI_MspInit+0x90>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <HAL_SPI_MspInit+0x90>)
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8004572:	23c2      	movs	r3, #194	; 0xc2
 8004574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004576:	2302      	movs	r3, #2
 8004578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457e:	2303      	movs	r3, #3
 8004580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004582:	2305      	movs	r3, #5
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004586:	f107 0314 	add.w	r3, r7, #20
 800458a:	4619      	mov	r1, r3
 800458c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004590:	f002 fe9e 	bl	80072d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004594:	2200      	movs	r2, #0
 8004596:	2100      	movs	r1, #0
 8004598:	2023      	movs	r0, #35	; 0x23
 800459a:	f002 fbec 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800459e:	2023      	movs	r0, #35	; 0x23
 80045a0:	f002 fc05 	bl	8006dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80045a4:	bf00      	nop
 80045a6:	3728      	adds	r7, #40	; 0x28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40013000 	.word	0x40013000
 80045b0:	40021000 	.word	0x40021000

080045b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <HAL_MspInit+0x44>)
 80045bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <HAL_MspInit+0x44>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6613      	str	r3, [r2, #96]	; 0x60
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <HAL_MspInit+0x44>)
 80045c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_MspInit+0x44>)
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <HAL_MspInit+0x44>)
 80045d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045dc:	6593      	str	r3, [r2, #88]	; 0x58
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_MspInit+0x44>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000

080045fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004600:	e7fe      	b.n	8004600 <NMI_Handler+0x4>

08004602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004606:	e7fe      	b.n	8004606 <HardFault_Handler+0x4>

08004608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800460c:	e7fe      	b.n	800460c <MemManage_Handler+0x4>

0800460e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004612:	e7fe      	b.n	8004612 <BusFault_Handler+0x4>

08004614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004618:	e7fe      	b.n	8004618 <UsageFault_Handler+0x4>

0800461a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800461a:	b480      	push	{r7}
 800461c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800461e:	bf00      	nop
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004636:	b480      	push	{r7}
 8004638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004648:	f000 fcbe 	bl	8004fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800464c:	bf00      	nop
 800464e:	bd80      	pop	{r7, pc}

08004650 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004654:	4802      	ldr	r0, [pc, #8]	; (8004660 <DMA1_Channel1_IRQHandler+0x10>)
 8004656:	f002 fd5c 	bl	8007112 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200000b0 	.word	0x200000b0

08004664 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004668:	4803      	ldr	r0, [pc, #12]	; (8004678 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800466a:	f005 faab 	bl	8009bc4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800466e:	4803      	ldr	r0, [pc, #12]	; (800467c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8004670:	f005 faa8 	bl	8009bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004674:	bf00      	nop
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000940 	.word	0x20000940
 800467c:	20000a70 	.word	0x20000a70

08004680 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004684:	4802      	ldr	r0, [pc, #8]	; (8004690 <TIM3_IRQHandler+0x10>)
 8004686:	f005 fa9d 	bl	8009bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	200009d8 	.word	0x200009d8

08004694 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004698:	4802      	ldr	r0, [pc, #8]	; (80046a4 <SPI1_IRQHandler+0x10>)
 800469a:	f004 fc3d 	bl	8008f18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200008dc 	.word	0x200008dc

080046a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80046ac:	4802      	ldr	r0, [pc, #8]	; (80046b8 <TIM6_DAC_IRQHandler+0x10>)
 80046ae:	f005 fa89 	bl	8009bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80046b2:	bf00      	nop
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000a24 	.word	0x20000a24

080046bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <SystemInit+0x20>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	4a05      	ldr	r2, [pc, #20]	; (80046dc <SystemInit+0x20>)
 80046c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b09a      	sub	sp, #104	; 0x68
 80046e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	605a      	str	r2, [r3, #4]
 80046f0:	609a      	str	r2, [r3, #8]
 80046f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	611a      	str	r2, [r3, #16]
 8004710:	615a      	str	r2, [r3, #20]
 8004712:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004714:	1d3b      	adds	r3, r7, #4
 8004716:	222c      	movs	r2, #44	; 0x2c
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f006 fc34 	bl	800af88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004720:	4b4f      	ldr	r3, [pc, #316]	; (8004860 <MX_TIM1_Init+0x180>)
 8004722:	4a50      	ldr	r2, [pc, #320]	; (8004864 <MX_TIM1_Init+0x184>)
 8004724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8004726:	4b4e      	ldr	r3, [pc, #312]	; (8004860 <MX_TIM1_Init+0x180>)
 8004728:	221f      	movs	r2, #31
 800472a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800472c:	4b4c      	ldr	r3, [pc, #304]	; (8004860 <MX_TIM1_Init+0x180>)
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8004732:	4b4b      	ldr	r3, [pc, #300]	; (8004860 <MX_TIM1_Init+0x180>)
 8004734:	2263      	movs	r2, #99	; 0x63
 8004736:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004738:	4b49      	ldr	r3, [pc, #292]	; (8004860 <MX_TIM1_Init+0x180>)
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800473e:	4b48      	ldr	r3, [pc, #288]	; (8004860 <MX_TIM1_Init+0x180>)
 8004740:	2200      	movs	r2, #0
 8004742:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004744:	4b46      	ldr	r3, [pc, #280]	; (8004860 <MX_TIM1_Init+0x180>)
 8004746:	2200      	movs	r2, #0
 8004748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800474a:	4845      	ldr	r0, [pc, #276]	; (8004860 <MX_TIM1_Init+0x180>)
 800474c:	f004 fe68 	bl	8009420 <HAL_TIM_Base_Init>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004756:	f7ff fe9f 	bl	8004498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800475a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800475e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004760:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004764:	4619      	mov	r1, r3
 8004766:	483e      	ldr	r0, [pc, #248]	; (8004860 <MX_TIM1_Init+0x180>)
 8004768:	f005 fcfc 	bl	800a164 <HAL_TIM_ConfigClockSource>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004772:	f7ff fe91 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004776:	483a      	ldr	r0, [pc, #232]	; (8004860 <MX_TIM1_Init+0x180>)
 8004778:	f004 ff5a 	bl	8009630 <HAL_TIM_PWM_Init>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004782:	f7ff fe89 	bl	8004498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004786:	2300      	movs	r3, #0
 8004788:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800478a:	2300      	movs	r3, #0
 800478c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800478e:	2300      	movs	r3, #0
 8004790:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004792:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004796:	4619      	mov	r1, r3
 8004798:	4831      	ldr	r0, [pc, #196]	; (8004860 <MX_TIM1_Init+0x180>)
 800479a:	f006 facd 	bl	800ad38 <HAL_TIMEx_MasterConfigSynchronization>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80047a4:	f7ff fe78 	bl	8004498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047a8:	2360      	movs	r3, #96	; 0x60
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 99;
 80047ac:	2363      	movs	r3, #99	; 0x63
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047b0:	2300      	movs	r3, #0
 80047b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80047b4:	2300      	movs	r3, #0
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80047bc:	2300      	movs	r3, #0
 80047be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047c0:	2300      	movs	r3, #0
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047c8:	2200      	movs	r2, #0
 80047ca:	4619      	mov	r1, r3
 80047cc:	4824      	ldr	r0, [pc, #144]	; (8004860 <MX_TIM1_Init+0x180>)
 80047ce:	f005 fbb5 	bl	8009f3c <HAL_TIM_PWM_ConfigChannel>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80047d8:	f7ff fe5e 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80047dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047e0:	2204      	movs	r2, #4
 80047e2:	4619      	mov	r1, r3
 80047e4:	481e      	ldr	r0, [pc, #120]	; (8004860 <MX_TIM1_Init+0x180>)
 80047e6:	f005 fba9 	bl	8009f3c <HAL_TIM_PWM_ConfigChannel>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80047f0:	f7ff fe52 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047f8:	2208      	movs	r2, #8
 80047fa:	4619      	mov	r1, r3
 80047fc:	4818      	ldr	r0, [pc, #96]	; (8004860 <MX_TIM1_Init+0x180>)
 80047fe:	f005 fb9d 	bl	8009f3c <HAL_TIM_PWM_ConfigChannel>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004808:	f7ff fe46 	bl	8004498 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800480c:	2300      	movs	r3, #0
 800480e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004824:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800482a:	2300      	movs	r3, #0
 800482c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800482e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004838:	2300      	movs	r3, #0
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4807      	ldr	r0, [pc, #28]	; (8004860 <MX_TIM1_Init+0x180>)
 8004842:	f006 fae7 	bl	800ae14 <HAL_TIMEx_ConfigBreakDeadTime>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 800484c:	f7ff fe24 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004850:	4803      	ldr	r0, [pc, #12]	; (8004860 <MX_TIM1_Init+0x180>)
 8004852:	f000 fad7 	bl	8004e04 <HAL_TIM_MspPostInit>

}
 8004856:	bf00      	nop
 8004858:	3768      	adds	r7, #104	; 0x68
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000940 	.word	0x20000940
 8004864:	40012c00 	.word	0x40012c00

08004868 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800486e:	f107 031c 	add.w	r3, r7, #28
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800487a:	463b      	mov	r3, r7
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]
 8004888:	615a      	str	r2, [r3, #20]
 800488a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800488c:	4b27      	ldr	r3, [pc, #156]	; (800492c <MX_TIM2_Init+0xc4>)
 800488e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <MX_TIM2_Init+0xc4>)
 8004896:	221f      	movs	r2, #31
 8004898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800489a:	4b24      	ldr	r3, [pc, #144]	; (800492c <MX_TIM2_Init+0xc4>)
 800489c:	2200      	movs	r2, #0
 800489e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80048a0:	4b22      	ldr	r3, [pc, #136]	; (800492c <MX_TIM2_Init+0xc4>)
 80048a2:	2263      	movs	r2, #99	; 0x63
 80048a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048a6:	4b21      	ldr	r3, [pc, #132]	; (800492c <MX_TIM2_Init+0xc4>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ac:	4b1f      	ldr	r3, [pc, #124]	; (800492c <MX_TIM2_Init+0xc4>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80048b2:	481e      	ldr	r0, [pc, #120]	; (800492c <MX_TIM2_Init+0xc4>)
 80048b4:	f004 febc 	bl	8009630 <HAL_TIM_PWM_Init>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80048be:	f7ff fdeb 	bl	8004498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048ca:	f107 031c 	add.w	r3, r7, #28
 80048ce:	4619      	mov	r1, r3
 80048d0:	4816      	ldr	r0, [pc, #88]	; (800492c <MX_TIM2_Init+0xc4>)
 80048d2:	f006 fa31 	bl	800ad38 <HAL_TIMEx_MasterConfigSynchronization>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80048dc:	f7ff fddc 	bl	8004498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048e0:	2360      	movs	r3, #96	; 0x60
 80048e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 80048e4:	2363      	movs	r3, #99	; 0x63
 80048e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80048f0:	463b      	mov	r3, r7
 80048f2:	2208      	movs	r2, #8
 80048f4:	4619      	mov	r1, r3
 80048f6:	480d      	ldr	r0, [pc, #52]	; (800492c <MX_TIM2_Init+0xc4>)
 80048f8:	f005 fb20 	bl	8009f3c <HAL_TIM_PWM_ConfigChannel>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8004902:	f7ff fdc9 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004906:	463b      	mov	r3, r7
 8004908:	220c      	movs	r2, #12
 800490a:	4619      	mov	r1, r3
 800490c:	4807      	ldr	r0, [pc, #28]	; (800492c <MX_TIM2_Init+0xc4>)
 800490e:	f005 fb15 	bl	8009f3c <HAL_TIM_PWM_ConfigChannel>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004918:	f7ff fdbe 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800491c:	4803      	ldr	r0, [pc, #12]	; (800492c <MX_TIM2_Init+0xc4>)
 800491e:	f000 fa71 	bl	8004e04 <HAL_TIM_MspPostInit>

}
 8004922:	bf00      	nop
 8004924:	3728      	adds	r7, #40	; 0x28
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	2000098c 	.word	0x2000098c

08004930 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08c      	sub	sp, #48	; 0x30
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004936:	f107 0320 	add.w	r3, r7, #32
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	605a      	str	r2, [r3, #4]
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004944:	f107 0314 	add.w	r3, r7, #20
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	609a      	str	r2, [r3, #8]
 800495a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800495c:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <MX_TIM3_Init+0x108>)
 800495e:	4a37      	ldr	r2, [pc, #220]	; (8004a3c <MX_TIM3_Init+0x10c>)
 8004960:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8004962:	4b35      	ldr	r3, [pc, #212]	; (8004a38 <MX_TIM3_Init+0x108>)
 8004964:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8004968:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800496a:	4b33      	ldr	r3, [pc, #204]	; (8004a38 <MX_TIM3_Init+0x108>)
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004970:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <MX_TIM3_Init+0x108>)
 8004972:	f242 720f 	movw	r2, #9999	; 0x270f
 8004976:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004978:	4b2f      	ldr	r3, [pc, #188]	; (8004a38 <MX_TIM3_Init+0x108>)
 800497a:	2200      	movs	r2, #0
 800497c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800497e:	4b2e      	ldr	r3, [pc, #184]	; (8004a38 <MX_TIM3_Init+0x108>)
 8004980:	2200      	movs	r2, #0
 8004982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004984:	482c      	ldr	r0, [pc, #176]	; (8004a38 <MX_TIM3_Init+0x108>)
 8004986:	f004 fd4b 	bl	8009420 <HAL_TIM_Base_Init>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8004990:	f7ff fd82 	bl	8004498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004998:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800499a:	f107 0320 	add.w	r3, r7, #32
 800499e:	4619      	mov	r1, r3
 80049a0:	4825      	ldr	r0, [pc, #148]	; (8004a38 <MX_TIM3_Init+0x108>)
 80049a2:	f005 fbdf 	bl	800a164 <HAL_TIM_ConfigClockSource>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80049ac:	f7ff fd74 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80049b0:	4821      	ldr	r0, [pc, #132]	; (8004a38 <MX_TIM3_Init+0x108>)
 80049b2:	f004 ff7b 	bl	80098ac <HAL_TIM_IC_Init>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80049bc:	f7ff fd6c 	bl	8004498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	4619      	mov	r1, r3
 80049ce:	481a      	ldr	r0, [pc, #104]	; (8004a38 <MX_TIM3_Init+0x108>)
 80049d0:	f006 f9b2 	bl	800ad38 <HAL_TIMEx_MasterConfigSynchronization>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80049da:	f7ff fd5d 	bl	8004498 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80049de:	2300      	movs	r3, #0
 80049e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80049e2:	2301      	movs	r3, #1
 80049e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80049ea:	230f      	movs	r3, #15
 80049ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80049ee:	1d3b      	adds	r3, r7, #4
 80049f0:	2200      	movs	r2, #0
 80049f2:	4619      	mov	r1, r3
 80049f4:	4810      	ldr	r0, [pc, #64]	; (8004a38 <MX_TIM3_Init+0x108>)
 80049f6:	f005 fa04 	bl	8009e02 <HAL_TIM_IC_ConfigChannel>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8004a00:	f7ff fd4a 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004a04:	1d3b      	adds	r3, r7, #4
 8004a06:	2204      	movs	r2, #4
 8004a08:	4619      	mov	r1, r3
 8004a0a:	480b      	ldr	r0, [pc, #44]	; (8004a38 <MX_TIM3_Init+0x108>)
 8004a0c:	f005 f9f9 	bl	8009e02 <HAL_TIM_IC_ConfigChannel>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8004a16:	f7ff fd3f 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004a1a:	1d3b      	adds	r3, r7, #4
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4805      	ldr	r0, [pc, #20]	; (8004a38 <MX_TIM3_Init+0x108>)
 8004a22:	f005 f9ee 	bl	8009e02 <HAL_TIM_IC_ConfigChannel>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8004a2c:	f7ff fd34 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004a30:	bf00      	nop
 8004a32:	3730      	adds	r7, #48	; 0x30
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	200009d8 	.word	0x200009d8
 8004a3c:	40000400 	.word	0x40000400

08004a40 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004a50:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <MX_TIM6_Init+0x68>)
 8004a52:	4a16      	ldr	r2, [pc, #88]	; (8004aac <MX_TIM6_Init+0x6c>)
 8004a54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39999;
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <MX_TIM6_Init+0x68>)
 8004a58:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8004a5c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <MX_TIM6_Init+0x68>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8004a64:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <MX_TIM6_Init+0x68>)
 8004a66:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004a6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <MX_TIM6_Init+0x68>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004a72:	480d      	ldr	r0, [pc, #52]	; (8004aa8 <MX_TIM6_Init+0x68>)
 8004a74:	f004 fcd4 	bl	8009420 <HAL_TIM_Base_Init>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004a7e:	f7ff fd0b 	bl	8004498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a82:	2300      	movs	r3, #0
 8004a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4806      	ldr	r0, [pc, #24]	; (8004aa8 <MX_TIM6_Init+0x68>)
 8004a90:	f006 f952 	bl	800ad38 <HAL_TIMEx_MasterConfigSynchronization>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004a9a:	f7ff fcfd 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000a24 	.word	0x20000a24
 8004aac:	40001000 	.word	0x40001000

08004ab0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ab6:	f107 0314 	add.w	r3, r7, #20
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	605a      	str	r2, [r3, #4]
 8004ac0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004ac2:	1d3b      	adds	r3, r7, #4
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004ace:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004ad0:	4a28      	ldr	r2, [pc, #160]	; (8004b74 <MX_TIM15_Init+0xc4>)
 8004ad2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7999;
 8004ad4:	4b26      	ldr	r3, [pc, #152]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004ad6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8004ada:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004adc:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8004ae2:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ae8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aea:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004af0:	4b1f      	ldr	r3, [pc, #124]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004af6:	4b1e      	ldr	r3, [pc, #120]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8004afc:	481c      	ldr	r0, [pc, #112]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004afe:	f004 fed5 	bl	80098ac <HAL_TIM_IC_Init>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8004b08:	f7ff fcc6 	bl	8004498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4815      	ldr	r0, [pc, #84]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004b1c:	f006 f90c 	bl	800ad38 <HAL_TIMEx_MasterConfigSynchronization>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8004b26:	f7ff fcb7 	bl	8004498 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8004b36:	230f      	movs	r3, #15
 8004b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4619      	mov	r1, r3
 8004b40:	480b      	ldr	r0, [pc, #44]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004b42:	f005 f95e 	bl	8009e02 <HAL_TIM_IC_ConfigChannel>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_TIM15_Init+0xa0>
  {
    Error_Handler();
 8004b4c:	f7ff fca4 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004b50:	1d3b      	adds	r3, r7, #4
 8004b52:	2204      	movs	r2, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4806      	ldr	r0, [pc, #24]	; (8004b70 <MX_TIM15_Init+0xc0>)
 8004b58:	f005 f953 	bl	8009e02 <HAL_TIM_IC_ConfigChannel>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 8004b62:	f7ff fc99 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004b66:	bf00      	nop
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000a70 	.word	0x20000a70
 8004b74:	40014000 	.word	0x40014000

08004b78 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <MX_TIM16_Init+0x44>)
 8004b7e:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <MX_TIM16_Init+0x48>)
 8004b80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8004b82:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <MX_TIM16_Init+0x44>)
 8004b84:	224f      	movs	r2, #79	; 0x4f
 8004b86:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <MX_TIM16_Init+0x44>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <MX_TIM16_Init+0x44>)
 8004b90:	f242 720f 	movw	r2, #9999	; 0x270f
 8004b94:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <MX_TIM16_Init+0x44>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004b9c:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <MX_TIM16_Init+0x44>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <MX_TIM16_Init+0x44>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004ba8:	4804      	ldr	r0, [pc, #16]	; (8004bbc <MX_TIM16_Init+0x44>)
 8004baa:	f004 fc39 	bl	8009420 <HAL_TIM_Base_Init>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004bb4:	f7ff fc70 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000abc 	.word	0x20000abc
 8004bc0:	40014400 	.word	0x40014400

08004bc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08e      	sub	sp, #56	; 0x38
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	605a      	str	r2, [r3, #4]
 8004bd6:	609a      	str	r2, [r3, #8]
 8004bd8:	60da      	str	r2, [r3, #12]
 8004bda:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a4c      	ldr	r2, [pc, #304]	; (8004d14 <HAL_TIM_Base_MspInit+0x150>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d114      	bne.n	8004c10 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004be6:	4b4c      	ldr	r3, [pc, #304]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bea:	4a4b      	ldr	r2, [pc, #300]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8004bf2:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2100      	movs	r1, #0
 8004c02:	2018      	movs	r0, #24
 8004c04:	f002 f8b7 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004c08:	2018      	movs	r0, #24
 8004c0a:	f002 f8d0 	bl	8006dae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8004c0e:	e07d      	b.n	8004d0c <HAL_TIM_Base_MspInit+0x148>
  else if(tim_baseHandle->Instance==TIM3)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a41      	ldr	r2, [pc, #260]	; (8004d1c <HAL_TIM_Base_MspInit+0x158>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d14d      	bne.n	8004cb6 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	4a3e      	ldr	r2, [pc, #248]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004c20:	f043 0302 	orr.w	r3, r3, #2
 8004c24:	6593      	str	r3, [r2, #88]	; 0x58
 8004c26:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c32:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	4a38      	ldr	r2, [pc, #224]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c3e:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c4a:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	4a32      	ldr	r2, [pc, #200]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c56:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = FAN_RPM1_Pin|FAN_RPM3_Pin;
 8004c62:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c70:	2300      	movs	r3, #0
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c74:	2302      	movs	r3, #2
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4828      	ldr	r0, [pc, #160]	; (8004d20 <HAL_TIM_Base_MspInit+0x15c>)
 8004c80:	f002 fb26 	bl	80072d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FAN_RPM2_Pin;
 8004c84:	2320      	movs	r3, #32
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c90:	2300      	movs	r3, #0
 8004c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c94:	2302      	movs	r3, #2
 8004c96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(FAN_RPM2_GPIO_Port, &GPIO_InitStruct);
 8004c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4821      	ldr	r0, [pc, #132]	; (8004d24 <HAL_TIM_Base_MspInit+0x160>)
 8004ca0:	f002 fb16 	bl	80072d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	201d      	movs	r0, #29
 8004caa:	f002 f864 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cae:	201d      	movs	r0, #29
 8004cb0:	f002 f87d 	bl	8006dae <HAL_NVIC_EnableIRQ>
}
 8004cb4:	e02a      	b.n	8004d0c <HAL_TIM_Base_MspInit+0x148>
  else if(tim_baseHandle->Instance==TIM6)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1b      	ldr	r2, [pc, #108]	; (8004d28 <HAL_TIM_Base_MspInit+0x164>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d114      	bne.n	8004cea <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004cc6:	f043 0310 	orr.w	r3, r3, #16
 8004cca:	6593      	str	r3, [r2, #88]	; 0x58
 8004ccc:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2101      	movs	r1, #1
 8004cdc:	2036      	movs	r0, #54	; 0x36
 8004cde:	f002 f84a 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ce2:	2036      	movs	r0, #54	; 0x36
 8004ce4:	f002 f863 	bl	8006dae <HAL_NVIC_EnableIRQ>
}
 8004ce8:	e010      	b.n	8004d0c <HAL_TIM_Base_MspInit+0x148>
  else if(tim_baseHandle->Instance==TIM16)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a0f      	ldr	r2, [pc, #60]	; (8004d2c <HAL_TIM_Base_MspInit+0x168>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d10b      	bne.n	8004d0c <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf8:	4a07      	ldr	r2, [pc, #28]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfe:	6613      	str	r3, [r2, #96]	; 0x60
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <HAL_TIM_Base_MspInit+0x154>)
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	bf00      	nop
 8004d0e:	3738      	adds	r7, #56	; 0x38
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	48000800 	.word	0x48000800
 8004d24:	48000400 	.word	0x48000400
 8004d28:	40001000 	.word	0x40001000
 8004d2c:	40014400 	.word	0x40014400

08004d30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d40:	d10b      	bne.n	8004d5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_TIM_PWM_MspInit+0x38>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <HAL_TIM_PWM_MspInit+0x38>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_TIM_PWM_MspInit+0x38>)
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40021000 	.word	0x40021000

08004d6c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	; 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d74:	f107 0314 	add.w	r3, r7, #20
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	60da      	str	r2, [r3, #12]
 8004d82:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM15)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1b      	ldr	r2, [pc, #108]	; (8004df8 <HAL_TIM_IC_MspInit+0x8c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d130      	bne.n	8004df0 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <HAL_TIM_IC_MspInit+0x90>)
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	4a1a      	ldr	r2, [pc, #104]	; (8004dfc <HAL_TIM_IC_MspInit+0x90>)
 8004d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d98:	6613      	str	r3, [r2, #96]	; 0x60
 8004d9a:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <HAL_TIM_IC_MspInit+0x90>)
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <HAL_TIM_IC_MspInit+0x90>)
 8004da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004daa:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <HAL_TIM_IC_MspInit+0x90>)
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <HAL_TIM_IC_MspInit+0x90>)
 8004db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = FAN_RPM4_Pin|FAN_RPM5_Pin;
 8004dbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8004dd0:	230e      	movs	r3, #14
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd4:	f107 0314 	add.w	r3, r7, #20
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4809      	ldr	r0, [pc, #36]	; (8004e00 <HAL_TIM_IC_MspInit+0x94>)
 8004ddc:	f002 fa78 	bl	80072d0 <HAL_GPIO_Init>

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004de0:	2200      	movs	r2, #0
 8004de2:	2100      	movs	r1, #0
 8004de4:	2018      	movs	r0, #24
 8004de6:	f001 ffc6 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004dea:	2018      	movs	r0, #24
 8004dec:	f001 ffdf 	bl	8006dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004df0:	bf00      	nop
 8004df2:	3728      	adds	r7, #40	; 0x28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	48000400 	.word	0x48000400

08004e04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	609a      	str	r2, [r3, #8]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <HAL_TIM_MspPostInit+0xac>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d11e      	bne.n	8004e64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e26:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <HAL_TIM_MspPostInit+0xb0>)
 8004e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2a:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <HAL_TIM_MspPostInit+0xb0>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e32:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <HAL_TIM_MspPostInit+0xb0>)
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin;
 8004e3e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e44:	2302      	movs	r3, #2
 8004e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e50:	2301      	movs	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e54:	f107 0314 	add.w	r3, r7, #20
 8004e58:	4619      	mov	r1, r3
 8004e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e5e:	f002 fa37 	bl	80072d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004e62:	e021      	b.n	8004ea8 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6c:	d11c      	bne.n	8004ea8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e6e:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_TIM_MspPostInit+0xb0>)
 8004e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e72:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <HAL_TIM_MspPostInit+0xb0>)
 8004e74:	f043 0302 	orr.w	r3, r3, #2
 8004e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_TIM_MspPostInit+0xb0>)
 8004e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM4_Pin|PWM5_Pin;
 8004e86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e94:	2300      	movs	r3, #0
 8004e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e9c:	f107 0314 	add.w	r3, r7, #20
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4805      	ldr	r0, [pc, #20]	; (8004eb8 <HAL_TIM_MspPostInit+0xb4>)
 8004ea4:	f002 fa14 	bl	80072d0 <HAL_GPIO_Init>
}
 8004ea8:	bf00      	nop
 8004eaa:	3728      	adds	r7, #40	; 0x28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40012c00 	.word	0x40012c00
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	48000400 	.word	0x48000400

08004ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ef4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ec0:	f7ff fbfc 	bl	80046bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ec4:	480c      	ldr	r0, [pc, #48]	; (8004ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004ec6:	490d      	ldr	r1, [pc, #52]	; (8004efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ec8:	4a0d      	ldr	r2, [pc, #52]	; (8004f00 <LoopForever+0xe>)
  movs r3, #0
 8004eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ecc:	e002      	b.n	8004ed4 <LoopCopyDataInit>

08004ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ed2:	3304      	adds	r3, #4

08004ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ed8:	d3f9      	bcc.n	8004ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004eda:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004edc:	4c0a      	ldr	r4, [pc, #40]	; (8004f08 <LoopForever+0x16>)
  movs r3, #0
 8004ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ee0:	e001      	b.n	8004ee6 <LoopFillZerobss>

08004ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ee4:	3204      	adds	r2, #4

08004ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ee8:	d3fb      	bcc.n	8004ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004eea:	f006 f829 	bl	800af40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004eee:	f7fb ff9f 	bl	8000e30 <main>

08004ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ef2:	e7fe      	b.n	8004ef2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004ef4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8004ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004efc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8004f00:	0800aff8 	.word	0x0800aff8
  ldr r2, =_sbss
 8004f04:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8004f08:	20000b0c 	.word	0x20000b0c

08004f0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f0c:	e7fe      	b.n	8004f0c <ADC1_IRQHandler>
	...

08004f10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <HAL_Init+0x3c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a0b      	ldr	r2, [pc, #44]	; (8004f4c <HAL_Init+0x3c>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f26:	2003      	movs	r0, #3
 8004f28:	f001 ff1a 	bl	8006d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	f000 f80f 	bl	8004f50 <HAL_InitTick>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	71fb      	strb	r3, [r7, #7]
 8004f3c:	e001      	b.n	8004f42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f3e:	f7ff fb39 	bl	80045b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f42:	79fb      	ldrb	r3, [r7, #7]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40022000 	.word	0x40022000

08004f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004f5c:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <HAL_InitTick+0x6c>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d023      	beq.n	8004fac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004f64:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <HAL_InitTick+0x70>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <HAL_InitTick+0x6c>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 ff25 	bl	8006dca <HAL_SYSTICK_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10f      	bne.n	8004fa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b0f      	cmp	r3, #15
 8004f8a:	d809      	bhi.n	8004fa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295
 8004f94:	f001 feef 	bl	8006d76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f98:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <HAL_InitTick+0x74>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e007      	b.n	8004fb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
 8004fa4:	e004      	b.n	8004fb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	e001      	b.n	8004fb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000028 	.word	0x20000028
 8004fc0:	20000020 	.word	0x20000020
 8004fc4:	20000024 	.word	0x20000024

08004fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_IncTick+0x20>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_IncTick+0x24>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	4a04      	ldr	r2, [pc, #16]	; (8004fec <HAL_IncTick+0x24>)
 8004fda:	6013      	str	r3, [r2, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	20000028 	.word	0x20000028
 8004fec:	20000b08 	.word	0x20000b08

08004ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ff4:	4b03      	ldr	r3, [pc, #12]	; (8005004 <HAL_GetTick+0x14>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000b08 	.word	0x20000b08

08005008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005010:	f7ff ffee 	bl	8004ff0 <HAL_GetTick>
 8005014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d005      	beq.n	800502e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <HAL_Delay+0x44>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800502e:	bf00      	nop
 8005030:	f7ff ffde 	bl	8004ff0 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	429a      	cmp	r2, r3
 800503e:	d8f7      	bhi.n	8005030 <HAL_Delay+0x28>
  {
  }
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000028 	.word	0x20000028

08005050 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	609a      	str	r2, [r3, #8]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3360      	adds	r3, #96	; 0x60
 80050ca:	461a      	mov	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b08      	ldr	r3, [pc, #32]	; (80050fc <LL_ADC_SetOffset+0x44>)
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	03fff000 	.word	0x03fff000

08005100 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3360      	adds	r3, #96	; 0x60
 800510e:	461a      	mov	r2, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3360      	adds	r3, #96	; 0x60
 800513c:	461a      	mov	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	431a      	orrs	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	615a      	str	r2, [r3, #20]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b087      	sub	sp, #28
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3330      	adds	r3, #48	; 0x30
 80051be:	461a      	mov	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	0a1b      	lsrs	r3, r3, #8
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	4413      	add	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	211f      	movs	r1, #31
 80051da:	fa01 f303 	lsl.w	r3, r1, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	401a      	ands	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0e9b      	lsrs	r3, r3, #26
 80051e6:	f003 011f 	and.w	r1, r3, #31
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	fa01 f303 	lsl.w	r3, r1, r3
 80051f4:	431a      	orrs	r2, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005206:	b480      	push	{r7}
 8005208:	b087      	sub	sp, #28
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3314      	adds	r3, #20
 8005216:	461a      	mov	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	0e5b      	lsrs	r3, r3, #25
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	4413      	add	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	0d1b      	lsrs	r3, r3, #20
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	2107      	movs	r1, #7
 8005234:	fa01 f303 	lsl.w	r3, r1, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	401a      	ands	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	0d1b      	lsrs	r3, r3, #20
 8005240:	f003 031f 	and.w	r3, r3, #31
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	fa01 f303 	lsl.w	r3, r1, r3
 800524a:	431a      	orrs	r2, r3
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005250:	bf00      	nop
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005274:	43db      	mvns	r3, r3
 8005276:	401a      	ands	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f003 0318 	and.w	r3, r3, #24
 800527e:	4908      	ldr	r1, [pc, #32]	; (80052a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005280:	40d9      	lsrs	r1, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	400b      	ands	r3, r1
 8005286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800528a:	431a      	orrs	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	0007ffff 	.word	0x0007ffff

080052a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80052b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6093      	str	r3, [r2, #8]
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052dc:	d101      	bne.n	80052e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005300:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005304:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800532c:	d101      	bne.n	8005332 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005354:	f043 0201 	orr.w	r2, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005378:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800537c:	f043 0202 	orr.w	r2, r3, #2
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <LL_ADC_IsEnabled+0x18>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <LL_ADC_IsEnabled+0x1a>
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d101      	bne.n	80053ce <LL_ADC_IsDisableOngoing+0x18>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <LL_ADC_IsDisableOngoing+0x1a>
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053f0:	f043 0204 	orr.w	r2, r3, #4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005414:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005418:	f043 0210 	orr.w	r2, r3, #16
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b04      	cmp	r3, #4
 800543e:	d101      	bne.n	8005444 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005462:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b08      	cmp	r3, #8
 800548c:	d101      	bne.n	8005492 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e12f      	b.n	800571a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7fb faf7 	bl	8000abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fef1 	bl	80052c8 <LL_ADC_IsDeepPowerDownEnabled>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fed7 	bl	80052a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff ff0c 	bl	8005318 <LL_ADC_IsInternalRegulatorEnabled>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d115      	bne.n	8005532 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff fef0 	bl	80052f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005510:	4b84      	ldr	r3, [pc, #528]	; (8005724 <HAL_ADC_Init+0x284>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	099b      	lsrs	r3, r3, #6
 8005516:	4a84      	ldr	r2, [pc, #528]	; (8005728 <HAL_ADC_Init+0x288>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	099b      	lsrs	r3, r3, #6
 800551e:	3301      	adds	r3, #1
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005524:	e002      	b.n	800552c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	3b01      	subs	r3, #1
 800552a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f9      	bne.n	8005526 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff feee 	bl	8005318 <LL_ADC_IsInternalRegulatorEnabled>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005546:	f043 0210 	orr.w	r2, r3, #16
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005552:	f043 0201 	orr.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff ff62 	bl	800542c <LL_ADC_REG_IsConversionOngoing>
 8005568:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b00      	cmp	r3, #0
 8005574:	f040 80c8 	bne.w	8005708 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f040 80c4 	bne.w	8005708 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005588:	f043 0202 	orr.w	r2, r3, #2
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff fefb 	bl	8005390 <LL_ADC_IsEnabled>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10b      	bne.n	80055b8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055a0:	4862      	ldr	r0, [pc, #392]	; (800572c <HAL_ADC_Init+0x28c>)
 80055a2:	f7ff fef5 	bl	8005390 <LL_ADC_IsEnabled>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d105      	bne.n	80055b8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4619      	mov	r1, r3
 80055b2:	485f      	ldr	r0, [pc, #380]	; (8005730 <HAL_ADC_Init+0x290>)
 80055b4:	f7ff fd4c 	bl	8005050 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7e5b      	ldrb	r3, [r3, #25]
 80055bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80055c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80055ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d106      	bne.n	80055f4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	3b01      	subs	r3, #1
 80055ec:	045b      	lsls	r3, r3, #17
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d009      	beq.n	8005610 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4313      	orrs	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	4b47      	ldr	r3, [pc, #284]	; (8005734 <HAL_ADC_Init+0x294>)
 8005618:	4013      	ands	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	69b9      	ldr	r1, [r7, #24]
 8005620:	430b      	orrs	r3, r1
 8005622:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff feff 	bl	800542c <LL_ADC_REG_IsConversionOngoing>
 800562e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff ff20 	bl	800547a <LL_ADC_INJ_IsConversionOngoing>
 800563a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d140      	bne.n	80056c4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d13d      	bne.n	80056c4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	7e1b      	ldrb	r3, [r3, #24]
 8005650:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005652:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800565a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800566a:	f023 0306 	bic.w	r3, r3, #6
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	69b9      	ldr	r1, [r7, #24]
 8005674:	430b      	orrs	r3, r1
 8005676:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800567e:	2b01      	cmp	r3, #1
 8005680:	d118      	bne.n	80056b4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005698:	4311      	orrs	r1, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800569e:	4311      	orrs	r1, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056a4:	430a      	orrs	r2, r1
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	611a      	str	r2, [r3, #16]
 80056b2:	e007      	b.n	80056c4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d10c      	bne.n	80056e6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	f023 010f 	bic.w	r1, r3, #15
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
 80056e4:	e007      	b.n	80056f6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 020f 	bic.w	r2, r2, #15
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	f043 0201 	orr.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	659a      	str	r2, [r3, #88]	; 0x58
 8005706:	e007      	b.n	8005718 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f043 0210 	orr.w	r2, r3, #16
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005718:	7ffb      	ldrb	r3, [r7, #31]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000020 	.word	0x20000020
 8005728:	053e2d63 	.word	0x053e2d63
 800572c:	50040000 	.word	0x50040000
 8005730:	50040300 	.word	0x50040300
 8005734:	fff0c007 	.word	0xfff0c007

08005738 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff fe6f 	bl	800542c <LL_ADC_REG_IsConversionOngoing>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d167      	bne.n	8005824 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_ADC_Start_DMA+0x2a>
 800575e:	2302      	movs	r3, #2
 8005760:	e063      	b.n	800582a <HAL_ADC_Start_DMA+0xf2>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fda0 	bl	80062b0 <ADC_Enable>
 8005770:	4603      	mov	r3, r0
 8005772:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d14f      	bne.n	800581a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d006      	beq.n	80057a8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579e:	f023 0206 	bic.w	r2, r3, #6
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80057a6:	e002      	b.n	80057ae <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	4a20      	ldr	r2, [pc, #128]	; (8005834 <HAL_ADC_Start_DMA+0xfc>)
 80057b4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	4a1f      	ldr	r2, [pc, #124]	; (8005838 <HAL_ADC_Start_DMA+0x100>)
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c2:	4a1e      	ldr	r2, [pc, #120]	; (800583c <HAL_ADC_Start_DMA+0x104>)
 80057c4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	221c      	movs	r2, #28
 80057cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0210 	orr.w	r2, r2, #16
 80057e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3340      	adds	r3, #64	; 0x40
 8005800:	4619      	mov	r1, r3
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f001 fba5 	bl	8006f54 <HAL_DMA_Start_IT>
 800580a:	4603      	mov	r3, r0
 800580c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fde2 	bl	80053dc <LL_ADC_REG_StartConversion>
 8005818:	e006      	b.n	8005828 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005822:	e001      	b.n	8005828 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005824:	2302      	movs	r3, #2
 8005826:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005828:	7dfb      	ldrb	r3, [r7, #23]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	0800647b 	.word	0x0800647b
 8005838:	08006553 	.word	0x08006553
 800583c:	0800656f 	.word	0x0800656f

08005840 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_ADC_Stop_DMA+0x16>
 8005852:	2302      	movs	r3, #2
 8005854:	e051      	b.n	80058fa <HAL_ADC_Stop_DMA+0xba>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800585e:	2103      	movs	r1, #3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fc69 	bl	8006138 <ADC_ConversionStop>
 8005866:	4603      	mov	r3, r0
 8005868:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d13f      	bne.n	80058f0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005884:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d10f      	bne.n	80058ae <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005892:	4618      	mov	r0, r3
 8005894:	f001 fbbe 	bl	8007014 <HAL_DMA_Abort>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0210 	bic.w	r2, r2, #16
 80058bc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fd79 	bl	80063bc <ADC_Disable>
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]
 80058ce:	e002      	b.n	80058d6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fd73 	bl	80063bc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	f043 0201 	orr.w	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b0b6      	sub	sp, #216	; 0xd8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_ADC_ConfigChannel+0x22>
 800595e:	2302      	movs	r3, #2
 8005960:	e3d5      	b.n	800610e <HAL_ADC_ConfigChannel+0x7ce>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fd5c 	bl	800542c <LL_ADC_REG_IsConversionOngoing>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 83ba 	bne.w	80060f0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b05      	cmp	r3, #5
 8005982:	d824      	bhi.n	80059ce <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	3b02      	subs	r3, #2
 800598a:	2b03      	cmp	r3, #3
 800598c:	d81b      	bhi.n	80059c6 <HAL_ADC_ConfigChannel+0x86>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <HAL_ADC_ConfigChannel+0x54>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059a5 	.word	0x080059a5
 8005998:	080059ad 	.word	0x080059ad
 800599c:	080059b5 	.word	0x080059b5
 80059a0:	080059bd 	.word	0x080059bd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	220c      	movs	r2, #12
 80059a8:	605a      	str	r2, [r3, #4]
          break;
 80059aa:	e011      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2212      	movs	r2, #18
 80059b0:	605a      	str	r2, [r3, #4]
          break;
 80059b2:	e00d      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2218      	movs	r2, #24
 80059b8:	605a      	str	r2, [r3, #4]
          break;
 80059ba:	e009      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c2:	605a      	str	r2, [r3, #4]
          break;
 80059c4:	e004      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2206      	movs	r2, #6
 80059ca:	605a      	str	r2, [r3, #4]
          break;
 80059cc:	e000      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80059ce:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	6859      	ldr	r1, [r3, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	f7ff fbe6 	bl	80051ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff fd20 	bl	800542c <LL_ADC_REG_IsConversionOngoing>
 80059ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff fd40 	bl	800547a <LL_ADC_INJ_IsConversionOngoing>
 80059fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f040 81c1 	bne.w	8005d8a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f040 81bc 	bne.w	8005d8a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a1a:	d10f      	bne.n	8005a3c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2200      	movs	r2, #0
 8005a26:	4619      	mov	r1, r3
 8005a28:	f7ff fbed 	bl	8005206 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fb94 	bl	8005162 <LL_ADC_SetSamplingTimeCommonConfig>
 8005a3a:	e00e      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6819      	ldr	r1, [r3, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f7ff fbdc 	bl	8005206 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2100      	movs	r1, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fb84 	bl	8005162 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	08db      	lsrs	r3, r3, #3
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d00a      	beq.n	8005a92 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6919      	ldr	r1, [r3, #16]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a8c:	f7ff fb14 	bl	80050b8 <LL_ADC_SetOffset>
 8005a90:	e17b      	b.n	8005d8a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fb31 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <HAL_ADC_ConfigChannel+0x17e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff fb26 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	0e9b      	lsrs	r3, r3, #26
 8005ab8:	f003 021f 	and.w	r2, r3, #31
 8005abc:	e01e      	b.n	8005afc <HAL_ADC_ConfigChannel+0x1bc>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fb1b 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ad4:	fa93 f3a3 	rbit	r3, r3
 8005ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005adc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ae4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8005aec:	2320      	movs	r3, #32
 8005aee:	e004      	b.n	8005afa <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8005af0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005af4:	fab3 f383 	clz	r3, r3
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d105      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x1d4>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	0e9b      	lsrs	r3, r3, #26
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	e018      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x206>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b20:	fa93 f3a3 	rbit	r3, r3
 8005b24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005b30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8005b38:	2320      	movs	r3, #32
 8005b3a:	e004      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8005b3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b40:	fab3 f383 	clz	r3, r3
 8005b44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d106      	bne.n	8005b58 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff faea 	bl	800512c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff face 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <HAL_ADC_ConfigChannel+0x244>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2101      	movs	r1, #1
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fac3 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	0e9b      	lsrs	r3, r3, #26
 8005b7e:	f003 021f 	and.w	r2, r3, #31
 8005b82:	e01e      	b.n	8005bc2 <HAL_ADC_ConfigChannel+0x282>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2101      	movs	r1, #1
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fab8 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b9a:	fa93 f3a3 	rbit	r3, r3
 8005b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005baa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8005bb2:	2320      	movs	r3, #32
 8005bb4:	e004      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8005bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bba:	fab3 f383 	clz	r3, r3
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d105      	bne.n	8005bda <HAL_ADC_ConfigChannel+0x29a>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	0e9b      	lsrs	r3, r3, #26
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	e018      	b.n	8005c0c <HAL_ADC_ConfigChannel+0x2cc>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005be6:	fa93 f3a3 	rbit	r3, r3
 8005bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005bee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005bf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8005bfe:	2320      	movs	r3, #32
 8005c00:	e004      	b.n	8005c0c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8005c02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c06:	fab3 f383 	clz	r3, r3
 8005c0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d106      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2200      	movs	r2, #0
 8005c16:	2101      	movs	r1, #1
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff fa87 	bl	800512c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2102      	movs	r1, #2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fa6b 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <HAL_ADC_ConfigChannel+0x30a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2102      	movs	r1, #2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fa60 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005c40:	4603      	mov	r3, r0
 8005c42:	0e9b      	lsrs	r3, r3, #26
 8005c44:	f003 021f 	and.w	r2, r3, #31
 8005c48:	e01e      	b.n	8005c88 <HAL_ADC_ConfigChannel+0x348>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2102      	movs	r1, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fa55 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c60:	fa93 f3a3 	rbit	r3, r3
 8005c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005c70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8005c78:	2320      	movs	r3, #32
 8005c7a:	e004      	b.n	8005c86 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8005c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c80:	fab3 f383 	clz	r3, r3
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d105      	bne.n	8005ca0 <HAL_ADC_ConfigChannel+0x360>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	0e9b      	lsrs	r3, r3, #26
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	e016      	b.n	8005cce <HAL_ADC_ConfigChannel+0x38e>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cac:	fa93 f3a3 	rbit	r3, r3
 8005cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	e004      	b.n	8005cce <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cc8:	fab3 f383 	clz	r3, r3
 8005ccc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d106      	bne.n	8005ce0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2102      	movs	r1, #2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fa26 	bl	800512c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2103      	movs	r1, #3
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fa0a 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <HAL_ADC_ConfigChannel+0x3cc>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2103      	movs	r1, #3
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff f9ff 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005d02:	4603      	mov	r3, r0
 8005d04:	0e9b      	lsrs	r3, r3, #26
 8005d06:	f003 021f 	and.w	r2, r3, #31
 8005d0a:	e017      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x3fc>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2103      	movs	r1, #3
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff f9f4 	bl	8005100 <LL_ADC_GetOffsetChannel>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d1e:	fa93 f3a3 	rbit	r3, r3
 8005d22:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d26:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8005d2e:	2320      	movs	r3, #32
 8005d30:	e003      	b.n	8005d3a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8005d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d34:	fab3 f383 	clz	r3, r3
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d105      	bne.n	8005d54 <HAL_ADC_ConfigChannel+0x414>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0e9b      	lsrs	r3, r3, #26
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	e011      	b.n	8005d78 <HAL_ADC_ConfigChannel+0x438>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d5c:	fa93 f3a3 	rbit	r3, r3
 8005d60:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005d62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	e003      	b.n	8005d78 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8005d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d72:	fab3 f383 	clz	r3, r3
 8005d76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d106      	bne.n	8005d8a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2200      	movs	r2, #0
 8005d82:	2103      	movs	r1, #3
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff f9d1 	bl	800512c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fafe 	bl	8005390 <LL_ADC_IsEnabled>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f040 8140 	bne.w	800601c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	461a      	mov	r2, r3
 8005daa:	f7ff fa57 	bl	800525c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	4a8f      	ldr	r2, [pc, #572]	; (8005ff0 <HAL_ADC_ConfigChannel+0x6b0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	f040 8131 	bne.w	800601c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <HAL_ADC_ConfigChannel+0x4a2>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	0e9b      	lsrs	r3, r3, #26
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	2b09      	cmp	r3, #9
 8005dd8:	bf94      	ite	ls
 8005dda:	2301      	movls	r3, #1
 8005ddc:	2300      	movhi	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	e019      	b.n	8005e16 <HAL_ADC_ConfigChannel+0x4d6>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dea:	fa93 f3a3 	rbit	r3, r3
 8005dee:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005df2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	e003      	b.n	8005e06 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8005dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e00:	fab3 f383 	clz	r3, r3
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	3301      	adds	r3, #1
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2b09      	cmp	r3, #9
 8005e0e:	bf94      	ite	ls
 8005e10:	2301      	movls	r3, #1
 8005e12:	2300      	movhi	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d079      	beq.n	8005f0e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d107      	bne.n	8005e36 <HAL_ADC_ConfigChannel+0x4f6>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	0e9b      	lsrs	r3, r3, #26
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	069b      	lsls	r3, r3, #26
 8005e30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e34:	e015      	b.n	8005e62 <HAL_ADC_ConfigChannel+0x522>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e3e:	fa93 f3a3 	rbit	r3, r3
 8005e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e46:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8005e4e:	2320      	movs	r3, #32
 8005e50:	e003      	b.n	8005e5a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8005e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e54:	fab3 f383 	clz	r3, r3
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	069b      	lsls	r3, r3, #26
 8005e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d109      	bne.n	8005e82 <HAL_ADC_ConfigChannel+0x542>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	0e9b      	lsrs	r3, r3, #26
 8005e74:	3301      	adds	r3, #1
 8005e76:	f003 031f 	and.w	r3, r3, #31
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e80:	e017      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x572>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8a:	fa93 f3a3 	rbit	r3, r3
 8005e8e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8005e9a:	2320      	movs	r3, #32
 8005e9c:	e003      	b.n	8005ea6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8005e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea0:	fab3 f383 	clz	r3, r3
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	f003 031f 	and.w	r3, r3, #31
 8005eac:	2101      	movs	r1, #1
 8005eae:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb2:	ea42 0103 	orr.w	r1, r2, r3
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x598>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	0e9b      	lsrs	r3, r3, #26
 8005ec8:	3301      	adds	r3, #1
 8005eca:	f003 021f 	and.w	r2, r3, #31
 8005ece:	4613      	mov	r3, r2
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	4413      	add	r3, r2
 8005ed4:	051b      	lsls	r3, r3, #20
 8005ed6:	e018      	b.n	8005f0a <HAL_ADC_ConfigChannel+0x5ca>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	fa93 f3a3 	rbit	r3, r3
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	e003      	b.n	8005efc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef6:	fab3 f383 	clz	r3, r3
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	3301      	adds	r3, #1
 8005efe:	f003 021f 	and.w	r2, r3, #31
 8005f02:	4613      	mov	r3, r2
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	4413      	add	r3, r2
 8005f08:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	e081      	b.n	8006012 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <HAL_ADC_ConfigChannel+0x5ea>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	0e9b      	lsrs	r3, r3, #26
 8005f20:	3301      	adds	r3, #1
 8005f22:	069b      	lsls	r3, r3, #26
 8005f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f28:	e015      	b.n	8005f56 <HAL_ADC_ConfigChannel+0x616>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	fa93 f3a3 	rbit	r3, r3
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8005f42:	2320      	movs	r3, #32
 8005f44:	e003      	b.n	8005f4e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	fab3 f383 	clz	r3, r3
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	3301      	adds	r3, #1
 8005f50:	069b      	lsls	r3, r3, #26
 8005f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <HAL_ADC_ConfigChannel+0x636>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	0e9b      	lsrs	r3, r3, #26
 8005f68:	3301      	adds	r3, #1
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2101      	movs	r1, #1
 8005f70:	fa01 f303 	lsl.w	r3, r1, r3
 8005f74:	e017      	b.n	8005fa6 <HAL_ADC_ConfigChannel+0x666>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	fa93 f3a3 	rbit	r3, r3
 8005f82:	61fb      	str	r3, [r7, #28]
  return result;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8005f8e:	2320      	movs	r3, #32
 8005f90:	e003      	b.n	8005f9a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	fab3 f383 	clz	r3, r3
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	f003 031f 	and.w	r3, r3, #31
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa6:	ea42 0103 	orr.w	r1, r2, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10d      	bne.n	8005fd2 <HAL_ADC_ConfigChannel+0x692>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	0e9b      	lsrs	r3, r3, #26
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	f003 021f 	and.w	r2, r3, #31
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3b1e      	subs	r3, #30
 8005fca:	051b      	lsls	r3, r3, #20
 8005fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fd0:	e01e      	b.n	8006010 <HAL_ADC_ConfigChannel+0x6d0>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	fa93 f3a3 	rbit	r3, r3
 8005fde:	613b      	str	r3, [r7, #16]
  return result;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005fea:	2320      	movs	r3, #32
 8005fec:	e006      	b.n	8005ffc <HAL_ADC_ConfigChannel+0x6bc>
 8005fee:	bf00      	nop
 8005ff0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	fab3 f383 	clz	r3, r3
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	f003 021f 	and.w	r2, r3, #31
 8006002:	4613      	mov	r3, r2
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	4413      	add	r3, r2
 8006008:	3b1e      	subs	r3, #30
 800600a:	051b      	lsls	r3, r3, #20
 800600c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006010:	430b      	orrs	r3, r1
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	6892      	ldr	r2, [r2, #8]
 8006016:	4619      	mov	r1, r3
 8006018:	f7ff f8f5 	bl	8005206 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b3d      	ldr	r3, [pc, #244]	; (8006118 <HAL_ADC_ConfigChannel+0x7d8>)
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d06c      	beq.n	8006102 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006028:	483c      	ldr	r0, [pc, #240]	; (800611c <HAL_ADC_ConfigChannel+0x7dc>)
 800602a:	f7ff f837 	bl	800509c <LL_ADC_GetCommonPathInternalCh>
 800602e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a3a      	ldr	r2, [pc, #232]	; (8006120 <HAL_ADC_ConfigChannel+0x7e0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d127      	bne.n	800608c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800603c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d121      	bne.n	800608c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a35      	ldr	r2, [pc, #212]	; (8006124 <HAL_ADC_ConfigChannel+0x7e4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d157      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006056:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800605a:	4619      	mov	r1, r3
 800605c:	482f      	ldr	r0, [pc, #188]	; (800611c <HAL_ADC_ConfigChannel+0x7dc>)
 800605e:	f7ff f80a 	bl	8005076 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006062:	4b31      	ldr	r3, [pc, #196]	; (8006128 <HAL_ADC_ConfigChannel+0x7e8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	4a30      	ldr	r2, [pc, #192]	; (800612c <HAL_ADC_ConfigChannel+0x7ec>)
 800606a:	fba2 2303 	umull	r2, r3, r2, r3
 800606e:	099b      	lsrs	r3, r3, #6
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	4613      	mov	r3, r2
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800607c:	e002      	b.n	8006084 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3b01      	subs	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f9      	bne.n	800607e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800608a:	e03a      	b.n	8006102 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a27      	ldr	r2, [pc, #156]	; (8006130 <HAL_ADC_ConfigChannel+0x7f0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d113      	bne.n	80060be <HAL_ADC_ConfigChannel+0x77e>
 8006096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800609a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10d      	bne.n	80060be <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_ADC_ConfigChannel+0x7e4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d12a      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060b4:	4619      	mov	r1, r3
 80060b6:	4819      	ldr	r0, [pc, #100]	; (800611c <HAL_ADC_ConfigChannel+0x7dc>)
 80060b8:	f7fe ffdd 	bl	8005076 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060bc:	e021      	b.n	8006102 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <HAL_ADC_ConfigChannel+0x7f4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d11c      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d116      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a12      	ldr	r2, [pc, #72]	; (8006124 <HAL_ADC_ConfigChannel+0x7e4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d111      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060e6:	4619      	mov	r1, r3
 80060e8:	480c      	ldr	r0, [pc, #48]	; (800611c <HAL_ADC_ConfigChannel+0x7dc>)
 80060ea:	f7fe ffc4 	bl	8005076 <LL_ADC_SetCommonPathInternalCh>
 80060ee:	e008      	b.n	8006102 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f4:	f043 0220 	orr.w	r2, r3, #32
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800610a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800610e:	4618      	mov	r0, r3
 8006110:	37d8      	adds	r7, #216	; 0xd8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	80080000 	.word	0x80080000
 800611c:	50040300 	.word	0x50040300
 8006120:	c7520000 	.word	0xc7520000
 8006124:	50040000 	.word	0x50040000
 8006128:	20000020 	.word	0x20000020
 800612c:	053e2d63 	.word	0x053e2d63
 8006130:	cb840000 	.word	0xcb840000
 8006134:	80000001 	.word	0x80000001

08006138 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006142:	2300      	movs	r3, #0
 8006144:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff f96c 	bl	800542c <LL_ADC_REG_IsConversionOngoing>
 8006154:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff f98d 	bl	800547a <LL_ADC_INJ_IsConversionOngoing>
 8006160:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 8098 	beq.w	80062a0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02a      	beq.n	80061d4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	7e5b      	ldrb	r3, [r3, #25]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d126      	bne.n	80061d4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	7e1b      	ldrb	r3, [r3, #24]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d122      	bne.n	80061d4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800618e:	2301      	movs	r3, #1
 8006190:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006192:	e014      	b.n	80061be <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	4a45      	ldr	r2, [pc, #276]	; (80062ac <ADC_ConversionStop+0x174>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d90d      	bls.n	80061b8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a0:	f043 0210 	orr.w	r2, r3, #16
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ac:	f043 0201 	orr.w	r2, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e074      	b.n	80062a2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	3301      	adds	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	d1e3      	bne.n	8006194 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2240      	movs	r2, #64	; 0x40
 80061d2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d014      	beq.n	8006204 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff f924 	bl	800542c <LL_ADC_REG_IsConversionOngoing>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff f8e1 	bl	80053b6 <LL_ADC_IsDisableOngoing>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff f900 	bl	8005404 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d014      	beq.n	8006234 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff f933 	bl	800547a <LL_ADC_INJ_IsConversionOngoing>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff f8c9 	bl	80053b6 <LL_ADC_IsDisableOngoing>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d104      	bne.n	8006234 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff f90f 	bl	8005452 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d005      	beq.n	8006246 <ADC_ConversionStop+0x10e>
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b03      	cmp	r3, #3
 800623e:	d105      	bne.n	800624c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006240:	230c      	movs	r3, #12
 8006242:	617b      	str	r3, [r7, #20]
        break;
 8006244:	e005      	b.n	8006252 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006246:	2308      	movs	r3, #8
 8006248:	617b      	str	r3, [r7, #20]
        break;
 800624a:	e002      	b.n	8006252 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800624c:	2304      	movs	r3, #4
 800624e:	617b      	str	r3, [r7, #20]
        break;
 8006250:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006252:	f7fe fecd 	bl	8004ff0 <HAL_GetTick>
 8006256:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006258:	e01b      	b.n	8006292 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800625a:	f7fe fec9 	bl	8004ff0 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b05      	cmp	r3, #5
 8006266:	d914      	bls.n	8006292 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4013      	ands	r3, r2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627a:	f043 0210 	orr.w	r2, r3, #16
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006286:	f043 0201 	orr.w	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e007      	b.n	80062a2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	4013      	ands	r3, r2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1dc      	bne.n	800625a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	a33fffff 	.word	0xa33fffff

080062b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff f865 	bl	8005390 <LL_ADC_IsEnabled>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d169      	bne.n	80063a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	4b36      	ldr	r3, [pc, #216]	; (80063ac <ADC_Enable+0xfc>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00d      	beq.n	80062f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062de:	f043 0210 	orr.w	r2, r3, #16
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ea:	f043 0201 	orr.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e055      	b.n	80063a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff f820 	bl	8005340 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006300:	482b      	ldr	r0, [pc, #172]	; (80063b0 <ADC_Enable+0x100>)
 8006302:	f7fe fecb 	bl	800509c <LL_ADC_GetCommonPathInternalCh>
 8006306:	4603      	mov	r3, r0
 8006308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d013      	beq.n	8006338 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006310:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <ADC_Enable+0x104>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	099b      	lsrs	r3, r3, #6
 8006316:	4a28      	ldr	r2, [pc, #160]	; (80063b8 <ADC_Enable+0x108>)
 8006318:	fba2 2303 	umull	r2, r3, r2, r3
 800631c:	099b      	lsrs	r3, r3, #6
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	4613      	mov	r3, r2
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	4413      	add	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800632a:	e002      	b.n	8006332 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	3b01      	subs	r3, #1
 8006330:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f9      	bne.n	800632c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006338:	f7fe fe5a 	bl	8004ff0 <HAL_GetTick>
 800633c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800633e:	e028      	b.n	8006392 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff f823 	bl	8005390 <LL_ADC_IsEnabled>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d104      	bne.n	800635a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe fff3 	bl	8005340 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800635a:	f7fe fe49 	bl	8004ff0 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d914      	bls.n	8006392 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	d00d      	beq.n	8006392 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637a:	f043 0210 	orr.w	r2, r3, #16
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006386:	f043 0201 	orr.w	r2, r3, #1
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e007      	b.n	80063a2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b01      	cmp	r3, #1
 800639e:	d1cf      	bne.n	8006340 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	8000003f 	.word	0x8000003f
 80063b0:	50040300 	.word	0x50040300
 80063b4:	20000020 	.word	0x20000020
 80063b8:	053e2d63 	.word	0x053e2d63

080063bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fff4 	bl	80053b6 <LL_ADC_IsDisableOngoing>
 80063ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe ffdb 	bl	8005390 <LL_ADC_IsEnabled>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d047      	beq.n	8006470 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d144      	bne.n	8006470 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 030d 	and.w	r3, r3, #13
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d10c      	bne.n	800640e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe ffb5 	bl	8005368 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2203      	movs	r2, #3
 8006404:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006406:	f7fe fdf3 	bl	8004ff0 <HAL_GetTick>
 800640a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800640c:	e029      	b.n	8006462 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006412:	f043 0210 	orr.w	r2, r3, #16
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	f043 0201 	orr.w	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e023      	b.n	8006472 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800642a:	f7fe fde1 	bl	8004ff0 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d914      	bls.n	8006462 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00d      	beq.n	8006462 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644a:	f043 0210 	orr.w	r2, r3, #16
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006456:	f043 0201 	orr.w	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e007      	b.n	8006472 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1dc      	bne.n	800642a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006490:	2b00      	cmp	r3, #0
 8006492:	d14b      	bne.n	800652c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006498:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d021      	beq.n	80064f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe fe68 	bl	8005188 <LL_ADC_REG_IsTriggerSourceSWStart>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d032      	beq.n	8006524 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d12b      	bne.n	8006524 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d11f      	bne.n	8006524 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e8:	f043 0201 	orr.w	r2, r3, #1
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	659a      	str	r2, [r3, #88]	; 0x58
 80064f0:	e018      	b.n	8006524 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d111      	bne.n	8006524 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006504:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d105      	bne.n	8006524 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651c:	f043 0201 	orr.w	r2, r3, #1
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff f9ec 	bl	8005902 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800652a:	e00e      	b.n	800654a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff f9f6 	bl	800592a <HAL_ADC_ErrorCallback>
}
 800653e:	e004      	b.n	800654a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
}
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7ff f9d8 	bl	8005916 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006566:	bf00      	nop
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006580:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658c:	f043 0204 	orr.w	r2, r3, #4
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7ff f9c8 	bl	800592a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0ed      	b.n	8006790 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d102      	bne.n	80065c6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fa fb47 	bl	8000c54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0201 	orr.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065d6:	f7fe fd0b 	bl	8004ff0 <HAL_GetTick>
 80065da:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80065dc:	e012      	b.n	8006604 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80065de:	f7fe fd07 	bl	8004ff0 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b0a      	cmp	r3, #10
 80065ea:	d90b      	bls.n	8006604 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2205      	movs	r2, #5
 80065fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e0c5      	b.n	8006790 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0e5      	beq.n	80065de <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0202 	bic.w	r2, r2, #2
 8006620:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006622:	f7fe fce5 	bl	8004ff0 <HAL_GetTick>
 8006626:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006628:	e012      	b.n	8006650 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800662a:	f7fe fce1 	bl	8004ff0 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b0a      	cmp	r3, #10
 8006636:	d90b      	bls.n	8006650 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2205      	movs	r2, #5
 8006648:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e09f      	b.n	8006790 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e5      	bne.n	800662a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	7e1b      	ldrb	r3, [r3, #24]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d108      	bne.n	8006678 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	e007      	b.n	8006688 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006686:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	7e5b      	ldrb	r3, [r3, #25]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d108      	bne.n	80066a2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	e007      	b.n	80066b2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7e9b      	ldrb	r3, [r3, #26]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d108      	bne.n	80066cc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0220 	orr.w	r2, r2, #32
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e007      	b.n	80066dc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0220 	bic.w	r2, r2, #32
 80066da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	7edb      	ldrb	r3, [r3, #27]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d108      	bne.n	80066f6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0210 	bic.w	r2, r2, #16
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	e007      	b.n	8006706 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0210 	orr.w	r2, r2, #16
 8006704:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	7f1b      	ldrb	r3, [r3, #28]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d108      	bne.n	8006720 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0208 	orr.w	r2, r2, #8
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e007      	b.n	8006730 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0208 	bic.w	r2, r2, #8
 800672e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	7f5b      	ldrb	r3, [r3, #29]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d108      	bne.n	800674a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0204 	orr.w	r2, r2, #4
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	e007      	b.n	800675a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0204 	bic.w	r2, r2, #4
 8006758:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	ea42 0103 	orr.w	r1, r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	1e5a      	subs	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80067b0:	7cfb      	ldrb	r3, [r7, #19]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d003      	beq.n	80067be <HAL_CAN_ConfigFilter+0x26>
 80067b6:	7cfb      	ldrb	r3, [r7, #19]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	f040 80aa 	bne.w	8006912 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067c4:	f043 0201 	orr.w	r2, r3, #1
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	2201      	movs	r2, #1
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	43db      	mvns	r3, r3
 80067e8:	401a      	ands	r2, r3
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d123      	bne.n	8006840 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	43db      	mvns	r3, r3
 8006802:	401a      	ands	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800681a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	3248      	adds	r2, #72	; 0x48
 8006820:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006834:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006836:	6979      	ldr	r1, [r7, #20]
 8006838:	3348      	adds	r3, #72	; 0x48
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	440b      	add	r3, r1
 800683e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d122      	bne.n	800688e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	431a      	orrs	r2, r3
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006868:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	3248      	adds	r2, #72	; 0x48
 800686e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006882:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006884:	6979      	ldr	r1, [r7, #20]
 8006886:	3348      	adds	r3, #72	; 0x48
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	440b      	add	r3, r1
 800688c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	43db      	mvns	r3, r3
 80068a0:	401a      	ands	r2, r3
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80068a8:	e007      	b.n	80068ba <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	43db      	mvns	r3, r3
 80068cc:	401a      	ands	r2, r3
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80068d4:	e007      	b.n	80068e6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	431a      	orrs	r2, r3
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d107      	bne.n	80068fe <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006904:	f023 0201 	bic.w	r2, r3, #1
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	e006      	b.n	8006920 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
  }
}
 8006920:	4618      	mov	r0, r3
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d12e      	bne.n	800699e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0201 	bic.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006958:	f7fe fb4a 	bl	8004ff0 <HAL_GetTick>
 800695c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800695e:	e012      	b.n	8006986 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006960:	f7fe fb46 	bl	8004ff0 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b0a      	cmp	r3, #10
 800696c:	d90b      	bls.n	8006986 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2205      	movs	r2, #5
 800697e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e012      	b.n	80069ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e5      	bne.n	8006960 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e006      	b.n	80069ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
  }
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80069d2:	7ffb      	ldrb	r3, [r7, #31]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d003      	beq.n	80069e0 <HAL_CAN_AddTxMessage+0x2c>
 80069d8:	7ffb      	ldrb	r3, [r7, #31]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	f040 80ad 	bne.w	8006b3a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10a      	bne.n	8006a00 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 8095 	beq.w	8006b2a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	0e1b      	lsrs	r3, r3, #24
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10d      	bne.n	8006a38 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	6809      	ldr	r1, [r1, #0]
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	3318      	adds	r3, #24
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	440b      	add	r3, r1
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e00f      	b.n	8006a58 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006a42:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006a48:	68f9      	ldr	r1, [r7, #12]
 8006a4a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006a4c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	3318      	adds	r3, #24
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	440b      	add	r3, r1
 8006a56:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6819      	ldr	r1, [r3, #0]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	3318      	adds	r3, #24
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	440b      	add	r3, r1
 8006a68:	3304      	adds	r3, #4
 8006a6a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	7d1b      	ldrb	r3, [r3, #20]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d111      	bne.n	8006a98 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	3318      	adds	r3, #24
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	4413      	add	r3, r2
 8006a80:	3304      	adds	r3, #4
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	6811      	ldr	r1, [r2, #0]
 8006a88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	3318      	adds	r3, #24
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	440b      	add	r3, r1
 8006a94:	3304      	adds	r3, #4
 8006a96:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3307      	adds	r3, #7
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	061a      	lsls	r2, r3, #24
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3306      	adds	r3, #6
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3305      	adds	r3, #5
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	3204      	adds	r2, #4
 8006ab8:	7812      	ldrb	r2, [r2, #0]
 8006aba:	4610      	mov	r0, r2
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	6811      	ldr	r1, [r2, #0]
 8006ac0:	ea43 0200 	orr.w	r2, r3, r0
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	440b      	add	r3, r1
 8006aca:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006ace:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3303      	adds	r3, #3
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	061a      	lsls	r2, r3, #24
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3302      	adds	r3, #2
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	4313      	orrs	r3, r2
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	7812      	ldrb	r2, [r2, #0]
 8006af0:	4610      	mov	r0, r2
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	6811      	ldr	r1, [r2, #0]
 8006af6:	ea43 0200 	orr.w	r2, r3, r0
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	440b      	add	r3, r1
 8006b00:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006b04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	3318      	adds	r3, #24
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	4413      	add	r3, r2
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	6811      	ldr	r1, [r2, #0]
 8006b18:	f043 0201 	orr.w	r2, r3, #1
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	3318      	adds	r3, #24
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	440b      	add	r3, r1
 8006b24:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e00e      	b.n	8006b48 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e006      	b.n	8006b48 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
  }
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3724      	adds	r7, #36	; 0x24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b66:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006b68:	7afb      	ldrb	r3, [r7, #11]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d002      	beq.n	8006b74 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d11d      	bne.n	8006bb0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3301      	adds	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
	...

08006bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <__NVIC_SetPriorityGrouping+0x44>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006bdc:	4013      	ands	r3, r2
 8006bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bf2:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <__NVIC_SetPriorityGrouping+0x44>)
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	60d3      	str	r3, [r2, #12]
}
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	e000ed00 	.word	0xe000ed00

08006c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c0c:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <__NVIC_GetPriorityGrouping+0x18>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	0a1b      	lsrs	r3, r3, #8
 8006c12:	f003 0307 	and.w	r3, r3, #7
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	e000ed00 	.word	0xe000ed00

08006c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	db0b      	blt.n	8006c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	f003 021f 	and.w	r2, r3, #31
 8006c3c:	4907      	ldr	r1, [pc, #28]	; (8006c5c <__NVIC_EnableIRQ+0x38>)
 8006c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	2001      	movs	r0, #1
 8006c46:	fa00 f202 	lsl.w	r2, r0, r2
 8006c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	e000e100 	.word	0xe000e100

08006c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	6039      	str	r1, [r7, #0]
 8006c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db0a      	blt.n	8006c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	490c      	ldr	r1, [pc, #48]	; (8006cac <__NVIC_SetPriority+0x4c>)
 8006c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c7e:	0112      	lsls	r2, r2, #4
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	440b      	add	r3, r1
 8006c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c88:	e00a      	b.n	8006ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	4908      	ldr	r1, [pc, #32]	; (8006cb0 <__NVIC_SetPriority+0x50>)
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	3b04      	subs	r3, #4
 8006c98:	0112      	lsls	r2, r2, #4
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	761a      	strb	r2, [r3, #24]
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	e000e100 	.word	0xe000e100
 8006cb0:	e000ed00 	.word	0xe000ed00

08006cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b089      	sub	sp, #36	; 0x24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f1c3 0307 	rsb	r3, r3, #7
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	bf28      	it	cs
 8006cd2:	2304      	movcs	r3, #4
 8006cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	2b06      	cmp	r3, #6
 8006cdc:	d902      	bls.n	8006ce4 <NVIC_EncodePriority+0x30>
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	3b03      	subs	r3, #3
 8006ce2:	e000      	b.n	8006ce6 <NVIC_EncodePriority+0x32>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43da      	mvns	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	401a      	ands	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	fa01 f303 	lsl.w	r3, r1, r3
 8006d06:	43d9      	mvns	r1, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d0c:	4313      	orrs	r3, r2
         );
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3724      	adds	r7, #36	; 0x24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
	...

08006d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d2c:	d301      	bcc.n	8006d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e00f      	b.n	8006d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <SysTick_Config+0x40>)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d3a:	210f      	movs	r1, #15
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	f7ff ff8e 	bl	8006c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <SysTick_Config+0x40>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d4a:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <SysTick_Config+0x40>)
 8006d4c:	2207      	movs	r2, #7
 8006d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	e000e010 	.word	0xe000e010

08006d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ff29 	bl	8006bc0 <__NVIC_SetPriorityGrouping>
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b086      	sub	sp, #24
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d88:	f7ff ff3e 	bl	8006c08 <__NVIC_GetPriorityGrouping>
 8006d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	6978      	ldr	r0, [r7, #20]
 8006d94:	f7ff ff8e 	bl	8006cb4 <NVIC_EncodePriority>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ff5d 	bl	8006c60 <__NVIC_SetPriority>
}
 8006da6:	bf00      	nop
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	4603      	mov	r3, r0
 8006db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff ff31 	bl	8006c24 <__NVIC_EnableIRQ>
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff ffa2 	bl	8006d1c <SysTick_Config>
 8006dd8:	4603      	mov	r3, r0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e098      	b.n	8006f28 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	4b4d      	ldr	r3, [pc, #308]	; (8006f34 <HAL_DMA_Init+0x150>)
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d80f      	bhi.n	8006e22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	4b4b      	ldr	r3, [pc, #300]	; (8006f38 <HAL_DMA_Init+0x154>)
 8006e0a:	4413      	add	r3, r2
 8006e0c:	4a4b      	ldr	r2, [pc, #300]	; (8006f3c <HAL_DMA_Init+0x158>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	091b      	lsrs	r3, r3, #4
 8006e14:	009a      	lsls	r2, r3, #2
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a48      	ldr	r2, [pc, #288]	; (8006f40 <HAL_DMA_Init+0x15c>)
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8006e20:	e00e      	b.n	8006e40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	4b46      	ldr	r3, [pc, #280]	; (8006f44 <HAL_DMA_Init+0x160>)
 8006e2a:	4413      	add	r3, r2
 8006e2c:	4a43      	ldr	r2, [pc, #268]	; (8006f3c <HAL_DMA_Init+0x158>)
 8006e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	009a      	lsls	r2, r3, #2
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a42      	ldr	r2, [pc, #264]	; (8006f48 <HAL_DMA_Init+0x164>)
 8006e3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e9a:	d039      	beq.n	8006f10 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	4a27      	ldr	r2, [pc, #156]	; (8006f40 <HAL_DMA_Init+0x15c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d11a      	bne.n	8006edc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006ea6:	4b29      	ldr	r3, [pc, #164]	; (8006f4c <HAL_DMA_Init+0x168>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eae:	f003 031c 	and.w	r3, r3, #28
 8006eb2:	210f      	movs	r1, #15
 8006eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	4924      	ldr	r1, [pc, #144]	; (8006f4c <HAL_DMA_Init+0x168>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006ec0:	4b22      	ldr	r3, [pc, #136]	; (8006f4c <HAL_DMA_Init+0x168>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6859      	ldr	r1, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ecc:	f003 031c 	and.w	r3, r3, #28
 8006ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed4:	491d      	ldr	r1, [pc, #116]	; (8006f4c <HAL_DMA_Init+0x168>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	600b      	str	r3, [r1, #0]
 8006eda:	e019      	b.n	8006f10 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006edc:	4b1c      	ldr	r3, [pc, #112]	; (8006f50 <HAL_DMA_Init+0x16c>)
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee4:	f003 031c 	and.w	r3, r3, #28
 8006ee8:	210f      	movs	r1, #15
 8006eea:	fa01 f303 	lsl.w	r3, r1, r3
 8006eee:	43db      	mvns	r3, r3
 8006ef0:	4917      	ldr	r1, [pc, #92]	; (8006f50 <HAL_DMA_Init+0x16c>)
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006ef6:	4b16      	ldr	r3, [pc, #88]	; (8006f50 <HAL_DMA_Init+0x16c>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6859      	ldr	r1, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f02:	f003 031c 	and.w	r3, r3, #28
 8006f06:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0a:	4911      	ldr	r1, [pc, #68]	; (8006f50 <HAL_DMA_Init+0x16c>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	40020407 	.word	0x40020407
 8006f38:	bffdfff8 	.word	0xbffdfff8
 8006f3c:	cccccccd 	.word	0xcccccccd
 8006f40:	40020000 	.word	0x40020000
 8006f44:	bffdfbf8 	.word	0xbffdfbf8
 8006f48:	40020400 	.word	0x40020400
 8006f4c:	400200a8 	.word	0x400200a8
 8006f50:	400204a8 	.word	0x400204a8

08006f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_DMA_Start_IT+0x20>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e04b      	b.n	800700c <HAL_DMA_Start_IT+0xb8>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d13a      	bne.n	8006ffe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0201 	bic.w	r2, r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f95f 	bl	8007270 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f042 020e 	orr.w	r2, r2, #14
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e00f      	b.n	8006fec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0204 	bic.w	r2, r2, #4
 8006fda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 020a 	orr.w	r2, r2, #10
 8006fea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0201 	orr.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	e005      	b.n	800700a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007006:	2302      	movs	r3, #2
 8007008:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800700a:	7dfb      	ldrb	r3, [r7, #23]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d008      	beq.n	800703e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2204      	movs	r2, #4
 8007030:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e022      	b.n	8007084 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 020e 	bic.w	r2, r2, #14
 800704c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	f003 021c 	and.w	r2, r3, #28
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	2101      	movs	r1, #1
 800706c:	fa01 f202 	lsl.w	r2, r1, r2
 8007070:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d005      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2204      	movs	r2, #4
 80070ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	73fb      	strb	r3, [r7, #15]
 80070b2:	e029      	b.n	8007108 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 020e 	bic.w	r2, r2, #14
 80070c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0201 	bic.w	r2, r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d8:	f003 021c 	and.w	r2, r3, #28
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	2101      	movs	r1, #1
 80070e2:	fa01 f202 	lsl.w	r2, r1, r2
 80070e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	4798      	blx	r3
    }
  }
  return status;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712e:	f003 031c 	and.w	r3, r3, #28
 8007132:	2204      	movs	r2, #4
 8007134:	409a      	lsls	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4013      	ands	r3, r2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d026      	beq.n	800718c <HAL_DMA_IRQHandler+0x7a>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d021      	beq.n	800718c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d107      	bne.n	8007166 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0204 	bic.w	r2, r2, #4
 8007164:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	f003 021c 	and.w	r2, r3, #28
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2104      	movs	r1, #4
 8007174:	fa01 f202 	lsl.w	r2, r1, r2
 8007178:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	2b00      	cmp	r3, #0
 8007180:	d071      	beq.n	8007266 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800718a:	e06c      	b.n	8007266 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	f003 031c 	and.w	r3, r3, #28
 8007194:	2202      	movs	r2, #2
 8007196:	409a      	lsls	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4013      	ands	r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d02e      	beq.n	80071fe <HAL_DMA_IRQHandler+0xec>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d029      	beq.n	80071fe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10b      	bne.n	80071d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 020a 	bic.w	r2, r2, #10
 80071c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d4:	f003 021c 	and.w	r2, r3, #28
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	2102      	movs	r1, #2
 80071de:	fa01 f202 	lsl.w	r2, r1, r2
 80071e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d038      	beq.n	8007266 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80071fc:	e033      	b.n	8007266 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007202:	f003 031c 	and.w	r3, r3, #28
 8007206:	2208      	movs	r2, #8
 8007208:	409a      	lsls	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4013      	ands	r3, r2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d02a      	beq.n	8007268 <HAL_DMA_IRQHandler+0x156>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d025      	beq.n	8007268 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 020e 	bic.w	r2, r2, #14
 800722a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007230:	f003 021c 	and.w	r2, r3, #28
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	2101      	movs	r1, #1
 800723a:	fa01 f202 	lsl.w	r2, r1, r2
 800723e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007266:	bf00      	nop
 8007268:	bf00      	nop
}
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	f003 021c 	and.w	r2, r3, #28
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	2101      	movs	r1, #1
 800728c:	fa01 f202 	lsl.w	r2, r1, r2
 8007290:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d108      	bne.n	80072b4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80072b2:	e007      	b.n	80072c4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	60da      	str	r2, [r3, #12]
}
 80072c4:	bf00      	nop
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072de:	e154      	b.n	800758a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	2101      	movs	r1, #1
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	fa01 f303 	lsl.w	r3, r1, r3
 80072ec:	4013      	ands	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 8146 	beq.w	8007584 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	2b01      	cmp	r3, #1
 8007302:	d005      	beq.n	8007310 <HAL_GPIO_Init+0x40>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f003 0303 	and.w	r3, r3, #3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d130      	bne.n	8007372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	2203      	movs	r2, #3
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4013      	ands	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007346:	2201      	movs	r2, #1
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	43db      	mvns	r3, r3
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4013      	ands	r3, r2
 8007354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	091b      	lsrs	r3, r3, #4
 800735c:	f003 0201 	and.w	r2, r3, #1
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	fa02 f303 	lsl.w	r3, r2, r3
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b03      	cmp	r3, #3
 800737c:	d017      	beq.n	80073ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	2203      	movs	r2, #3
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	43db      	mvns	r3, r3
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4013      	ands	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d123      	bne.n	8007402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	08da      	lsrs	r2, r3, #3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3208      	adds	r2, #8
 80073c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	220f      	movs	r2, #15
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	43db      	mvns	r3, r3
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4013      	ands	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	fa02 f303 	lsl.w	r3, r2, r3
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	08da      	lsrs	r2, r3, #3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3208      	adds	r2, #8
 80073fc:	6939      	ldr	r1, [r7, #16]
 80073fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	2203      	movs	r2, #3
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43db      	mvns	r3, r3
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4013      	ands	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f003 0203 	and.w	r2, r3, #3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80a0 	beq.w	8007584 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007444:	4b58      	ldr	r3, [pc, #352]	; (80075a8 <HAL_GPIO_Init+0x2d8>)
 8007446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007448:	4a57      	ldr	r2, [pc, #348]	; (80075a8 <HAL_GPIO_Init+0x2d8>)
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	6613      	str	r3, [r2, #96]	; 0x60
 8007450:	4b55      	ldr	r3, [pc, #340]	; (80075a8 <HAL_GPIO_Init+0x2d8>)
 8007452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	60bb      	str	r3, [r7, #8]
 800745a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800745c:	4a53      	ldr	r2, [pc, #332]	; (80075ac <HAL_GPIO_Init+0x2dc>)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	089b      	lsrs	r3, r3, #2
 8007462:	3302      	adds	r3, #2
 8007464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	220f      	movs	r2, #15
 8007474:	fa02 f303 	lsl.w	r3, r2, r3
 8007478:	43db      	mvns	r3, r3
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4013      	ands	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007486:	d019      	beq.n	80074bc <HAL_GPIO_Init+0x1ec>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a49      	ldr	r2, [pc, #292]	; (80075b0 <HAL_GPIO_Init+0x2e0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <HAL_GPIO_Init+0x1e8>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a48      	ldr	r2, [pc, #288]	; (80075b4 <HAL_GPIO_Init+0x2e4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00d      	beq.n	80074b4 <HAL_GPIO_Init+0x1e4>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a47      	ldr	r2, [pc, #284]	; (80075b8 <HAL_GPIO_Init+0x2e8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d007      	beq.n	80074b0 <HAL_GPIO_Init+0x1e0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a46      	ldr	r2, [pc, #280]	; (80075bc <HAL_GPIO_Init+0x2ec>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d101      	bne.n	80074ac <HAL_GPIO_Init+0x1dc>
 80074a8:	2304      	movs	r3, #4
 80074aa:	e008      	b.n	80074be <HAL_GPIO_Init+0x1ee>
 80074ac:	2307      	movs	r3, #7
 80074ae:	e006      	b.n	80074be <HAL_GPIO_Init+0x1ee>
 80074b0:	2303      	movs	r3, #3
 80074b2:	e004      	b.n	80074be <HAL_GPIO_Init+0x1ee>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e002      	b.n	80074be <HAL_GPIO_Init+0x1ee>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <HAL_GPIO_Init+0x1ee>
 80074bc:	2300      	movs	r3, #0
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	f002 0203 	and.w	r2, r2, #3
 80074c4:	0092      	lsls	r2, r2, #2
 80074c6:	4093      	lsls	r3, r2
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80074ce:	4937      	ldr	r1, [pc, #220]	; (80075ac <HAL_GPIO_Init+0x2dc>)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	089b      	lsrs	r3, r3, #2
 80074d4:	3302      	adds	r3, #2
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074dc:	4b38      	ldr	r3, [pc, #224]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	43db      	mvns	r3, r3
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4013      	ands	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007500:	4a2f      	ldr	r2, [pc, #188]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007506:	4b2e      	ldr	r3, [pc, #184]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	43db      	mvns	r3, r3
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4013      	ands	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800752a:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007530:	4b23      	ldr	r3, [pc, #140]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	43db      	mvns	r3, r3
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4013      	ands	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4313      	orrs	r3, r2
 8007552:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007554:	4a1a      	ldr	r2, [pc, #104]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800755a:	4b19      	ldr	r3, [pc, #100]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	43db      	mvns	r3, r3
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4013      	ands	r3, r2
 8007568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800757e:	4a10      	ldr	r2, [pc, #64]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	3301      	adds	r3, #1
 8007588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	fa22 f303 	lsr.w	r3, r2, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	f47f aea3 	bne.w	80072e0 <HAL_GPIO_Init+0x10>
  }
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	40021000 	.word	0x40021000
 80075ac:	40010000 	.word	0x40010000
 80075b0:	48000400 	.word	0x48000400
 80075b4:	48000800 	.word	0x48000800
 80075b8:	48000c00 	.word	0x48000c00
 80075bc:	48001000 	.word	0x48001000
 80075c0:	40010400 	.word	0x40010400

080075c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	807b      	strh	r3, [r7, #2]
 80075d0:	4613      	mov	r3, r2
 80075d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075d4:	787b      	ldrb	r3, [r7, #1]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80075da:	887a      	ldrh	r2, [r7, #2]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80075e0:	e002      	b.n	80075e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80075e2:	887a      	ldrh	r2, [r7, #2]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007606:	887a      	ldrh	r2, [r7, #2]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4013      	ands	r3, r2
 800760c:	041a      	lsls	r2, r3, #16
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	43d9      	mvns	r1, r3
 8007612:	887b      	ldrh	r3, [r7, #2]
 8007614:	400b      	ands	r3, r1
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	619a      	str	r2, [r3, #24]
}
 800761c:	bf00      	nop
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007628:	b480      	push	{r7}
 800762a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <HAL_PWREx_GetVoltageRange+0x18>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007634:	4618      	mov	r0, r3
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40007000 	.word	0x40007000

08007644 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007652:	d130      	bne.n	80076b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007654:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800765c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007660:	d038      	beq.n	80076d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007662:	4b20      	ldr	r3, [pc, #128]	; (80076e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800766a:	4a1e      	ldr	r2, [pc, #120]	; (80076e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800766c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007670:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007672:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2232      	movs	r2, #50	; 0x32
 8007678:	fb02 f303 	mul.w	r3, r2, r3
 800767c:	4a1b      	ldr	r2, [pc, #108]	; (80076ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	0c9b      	lsrs	r3, r3, #18
 8007684:	3301      	adds	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007688:	e002      	b.n	8007690 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3b01      	subs	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007690:	4b14      	ldr	r3, [pc, #80]	; (80076e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800769c:	d102      	bne.n	80076a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1f2      	bne.n	800768a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076a4:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b0:	d110      	bne.n	80076d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e00f      	b.n	80076d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c2:	d007      	beq.n	80076d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80076cc:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40007000 	.word	0x40007000
 80076e8:	20000020 	.word	0x20000020
 80076ec:	431bde83 	.word	0x431bde83

080076f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f000 bc02 	b.w	8007f08 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007704:	4b96      	ldr	r3, [pc, #600]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 030c 	and.w	r3, r3, #12
 800770c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800770e:	4b94      	ldr	r3, [pc, #592]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0310 	and.w	r3, r3, #16
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 80e4 	beq.w	80078ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <HAL_RCC_OscConfig+0x4c>
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	2b0c      	cmp	r3, #12
 8007730:	f040 808b 	bne.w	800784a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b01      	cmp	r3, #1
 8007738:	f040 8087 	bne.w	800784a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800773c:	4b88      	ldr	r3, [pc, #544]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <HAL_RCC_OscConfig+0x64>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e3d9      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a1a      	ldr	r2, [r3, #32]
 8007758:	4b81      	ldr	r3, [pc, #516]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <HAL_RCC_OscConfig+0x7e>
 8007764:	4b7e      	ldr	r3, [pc, #504]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800776c:	e005      	b.n	800777a <HAL_RCC_OscConfig+0x8a>
 800776e:	4b7c      	ldr	r3, [pc, #496]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007774:	091b      	lsrs	r3, r3, #4
 8007776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800777a:	4293      	cmp	r3, r2
 800777c:	d223      	bcs.n	80077c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fd54 	bl	8008230 <RCC_SetFlashLatencyFromMSIRange>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e3ba      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007792:	4b73      	ldr	r3, [pc, #460]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a72      	ldr	r2, [pc, #456]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007798:	f043 0308 	orr.w	r3, r3, #8
 800779c:	6013      	str	r3, [r2, #0]
 800779e:	4b70      	ldr	r3, [pc, #448]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	496d      	ldr	r1, [pc, #436]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077b0:	4b6b      	ldr	r3, [pc, #428]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	4968      	ldr	r1, [pc, #416]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	604b      	str	r3, [r1, #4]
 80077c4:	e025      	b.n	8007812 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077c6:	4b66      	ldr	r3, [pc, #408]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a65      	ldr	r2, [pc, #404]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80077cc:	f043 0308 	orr.w	r3, r3, #8
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	4b63      	ldr	r3, [pc, #396]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	4960      	ldr	r1, [pc, #384]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077e4:	4b5e      	ldr	r3, [pc, #376]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	021b      	lsls	r3, r3, #8
 80077f2:	495b      	ldr	r1, [pc, #364]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fd14 	bl	8008230 <RCC_SetFlashLatencyFromMSIRange>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e37a      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007812:	f000 fc81 	bl	8008118 <HAL_RCC_GetSysClockFreq>
 8007816:	4602      	mov	r2, r0
 8007818:	4b51      	ldr	r3, [pc, #324]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	091b      	lsrs	r3, r3, #4
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	4950      	ldr	r1, [pc, #320]	; (8007964 <HAL_RCC_OscConfig+0x274>)
 8007824:	5ccb      	ldrb	r3, [r1, r3]
 8007826:	f003 031f 	and.w	r3, r3, #31
 800782a:	fa22 f303 	lsr.w	r3, r2, r3
 800782e:	4a4e      	ldr	r2, [pc, #312]	; (8007968 <HAL_RCC_OscConfig+0x278>)
 8007830:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007832:	4b4e      	ldr	r3, [pc, #312]	; (800796c <HAL_RCC_OscConfig+0x27c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f7fd fb8a 	bl	8004f50 <HAL_InitTick>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d052      	beq.n	80078ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	e35e      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d032      	beq.n	80078b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007852:	4b43      	ldr	r3, [pc, #268]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a42      	ldr	r2, [pc, #264]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800785e:	f7fd fbc7 	bl	8004ff0 <HAL_GetTick>
 8007862:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007864:	e008      	b.n	8007878 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007866:	f7fd fbc3 	bl	8004ff0 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d901      	bls.n	8007878 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e347      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007878:	4b39      	ldr	r3, [pc, #228]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0f0      	beq.n	8007866 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007884:	4b36      	ldr	r3, [pc, #216]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a35      	ldr	r2, [pc, #212]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 800788a:	f043 0308 	orr.w	r3, r3, #8
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	4b33      	ldr	r3, [pc, #204]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	4930      	ldr	r1, [pc, #192]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078a2:	4b2f      	ldr	r3, [pc, #188]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	492b      	ldr	r1, [pc, #172]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	604b      	str	r3, [r1, #4]
 80078b6:	e01a      	b.n	80078ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80078b8:	4b29      	ldr	r3, [pc, #164]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a28      	ldr	r2, [pc, #160]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80078be:	f023 0301 	bic.w	r3, r3, #1
 80078c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80078c4:	f7fd fb94 	bl	8004ff0 <HAL_GetTick>
 80078c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80078ca:	e008      	b.n	80078de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80078cc:	f7fd fb90 	bl	8004ff0 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e314      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80078de:	4b20      	ldr	r3, [pc, #128]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1f0      	bne.n	80078cc <HAL_RCC_OscConfig+0x1dc>
 80078ea:	e000      	b.n	80078ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80078ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d073      	beq.n	80079e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d005      	beq.n	800790c <HAL_RCC_OscConfig+0x21c>
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b0c      	cmp	r3, #12
 8007904:	d10e      	bne.n	8007924 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b03      	cmp	r3, #3
 800790a:	d10b      	bne.n	8007924 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800790c:	4b14      	ldr	r3, [pc, #80]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d063      	beq.n	80079e0 <HAL_RCC_OscConfig+0x2f0>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d15f      	bne.n	80079e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e2f1      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800792c:	d106      	bne.n	800793c <HAL_RCC_OscConfig+0x24c>
 800792e:	4b0c      	ldr	r3, [pc, #48]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a0b      	ldr	r2, [pc, #44]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	e025      	b.n	8007988 <HAL_RCC_OscConfig+0x298>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007944:	d114      	bne.n	8007970 <HAL_RCC_OscConfig+0x280>
 8007946:	4b06      	ldr	r3, [pc, #24]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a05      	ldr	r2, [pc, #20]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 800794c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	4b03      	ldr	r3, [pc, #12]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a02      	ldr	r2, [pc, #8]	; (8007960 <HAL_RCC_OscConfig+0x270>)
 8007958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	e013      	b.n	8007988 <HAL_RCC_OscConfig+0x298>
 8007960:	40021000 	.word	0x40021000
 8007964:	0800afb0 	.word	0x0800afb0
 8007968:	20000020 	.word	0x20000020
 800796c:	20000024 	.word	0x20000024
 8007970:	4ba0      	ldr	r3, [pc, #640]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a9f      	ldr	r2, [pc, #636]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	4b9d      	ldr	r3, [pc, #628]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a9c      	ldr	r2, [pc, #624]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d013      	beq.n	80079b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007990:	f7fd fb2e 	bl	8004ff0 <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007998:	f7fd fb2a 	bl	8004ff0 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b64      	cmp	r3, #100	; 0x64
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e2ae      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079aa:	4b92      	ldr	r3, [pc, #584]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0f0      	beq.n	8007998 <HAL_RCC_OscConfig+0x2a8>
 80079b6:	e014      	b.n	80079e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b8:	f7fd fb1a 	bl	8004ff0 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80079be:	e008      	b.n	80079d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079c0:	f7fd fb16 	bl	8004ff0 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b64      	cmp	r3, #100	; 0x64
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e29a      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80079d2:	4b88      	ldr	r3, [pc, #544]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1f0      	bne.n	80079c0 <HAL_RCC_OscConfig+0x2d0>
 80079de:	e000      	b.n	80079e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d060      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d005      	beq.n	8007a00 <HAL_RCC_OscConfig+0x310>
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	2b0c      	cmp	r3, #12
 80079f8:	d119      	bne.n	8007a2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d116      	bne.n	8007a2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a00:	4b7c      	ldr	r3, [pc, #496]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <HAL_RCC_OscConfig+0x328>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e277      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a18:	4b76      	ldr	r3, [pc, #472]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	061b      	lsls	r3, r3, #24
 8007a26:	4973      	ldr	r1, [pc, #460]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a2c:	e040      	b.n	8007ab0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d023      	beq.n	8007a7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a36:	4b6f      	ldr	r3, [pc, #444]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a6e      	ldr	r2, [pc, #440]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a42:	f7fd fad5 	bl	8004ff0 <HAL_GetTick>
 8007a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a48:	e008      	b.n	8007a5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a4a:	f7fd fad1 	bl	8004ff0 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d901      	bls.n	8007a5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e255      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a5c:	4b65      	ldr	r3, [pc, #404]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0f0      	beq.n	8007a4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a68:	4b62      	ldr	r3, [pc, #392]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	061b      	lsls	r3, r3, #24
 8007a76:	495f      	ldr	r1, [pc, #380]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	604b      	str	r3, [r1, #4]
 8007a7c:	e018      	b.n	8007ab0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a7e:	4b5d      	ldr	r3, [pc, #372]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a5c      	ldr	r2, [pc, #368]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8a:	f7fd fab1 	bl	8004ff0 <HAL_GetTick>
 8007a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a92:	f7fd faad 	bl	8004ff0 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e231      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007aa4:	4b53      	ldr	r3, [pc, #332]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1f0      	bne.n	8007a92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d03c      	beq.n	8007b36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01c      	beq.n	8007afe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ac4:	4b4b      	ldr	r3, [pc, #300]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aca:	4a4a      	ldr	r2, [pc, #296]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007acc:	f043 0301 	orr.w	r3, r3, #1
 8007ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad4:	f7fd fa8c 	bl	8004ff0 <HAL_GetTick>
 8007ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007adc:	f7fd fa88 	bl	8004ff0 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e20c      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007aee:	4b41      	ldr	r3, [pc, #260]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0ef      	beq.n	8007adc <HAL_RCC_OscConfig+0x3ec>
 8007afc:	e01b      	b.n	8007b36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007afe:	4b3d      	ldr	r3, [pc, #244]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b04:	4a3b      	ldr	r2, [pc, #236]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007b06:	f023 0301 	bic.w	r3, r3, #1
 8007b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0e:	f7fd fa6f 	bl	8004ff0 <HAL_GetTick>
 8007b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b14:	e008      	b.n	8007b28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b16:	f7fd fa6b 	bl	8004ff0 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e1ef      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b28:	4b32      	ldr	r3, [pc, #200]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1ef      	bne.n	8007b16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 80a6 	beq.w	8007c90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b44:	2300      	movs	r3, #0
 8007b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007b48:	4b2a      	ldr	r3, [pc, #168]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10d      	bne.n	8007b70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b54:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b58:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8007b60:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b68:	60bb      	str	r3, [r7, #8]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b70:	4b21      	ldr	r3, [pc, #132]	; (8007bf8 <HAL_RCC_OscConfig+0x508>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d118      	bne.n	8007bae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b7c:	4b1e      	ldr	r3, [pc, #120]	; (8007bf8 <HAL_RCC_OscConfig+0x508>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1d      	ldr	r2, [pc, #116]	; (8007bf8 <HAL_RCC_OscConfig+0x508>)
 8007b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b88:	f7fd fa32 	bl	8004ff0 <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b90:	f7fd fa2e 	bl	8004ff0 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e1b2      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ba2:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <HAL_RCC_OscConfig+0x508>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0f0      	beq.n	8007b90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d108      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x4d8>
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bbc:	4a0d      	ldr	r2, [pc, #52]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007bc6:	e029      	b.n	8007c1c <HAL_RCC_OscConfig+0x52c>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	2b05      	cmp	r3, #5
 8007bce:	d115      	bne.n	8007bfc <HAL_RCC_OscConfig+0x50c>
 8007bd0:	4b08      	ldr	r3, [pc, #32]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd6:	4a07      	ldr	r2, [pc, #28]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007bd8:	f043 0304 	orr.w	r3, r3, #4
 8007bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007be0:	4b04      	ldr	r3, [pc, #16]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be6:	4a03      	ldr	r2, [pc, #12]	; (8007bf4 <HAL_RCC_OscConfig+0x504>)
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007bf0:	e014      	b.n	8007c1c <HAL_RCC_OscConfig+0x52c>
 8007bf2:	bf00      	nop
 8007bf4:	40021000 	.word	0x40021000
 8007bf8:	40007000 	.word	0x40007000
 8007bfc:	4b9a      	ldr	r3, [pc, #616]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c02:	4a99      	ldr	r2, [pc, #612]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007c04:	f023 0301 	bic.w	r3, r3, #1
 8007c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c0c:	4b96      	ldr	r3, [pc, #600]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c12:	4a95      	ldr	r2, [pc, #596]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007c14:	f023 0304 	bic.w	r3, r3, #4
 8007c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d016      	beq.n	8007c52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c24:	f7fd f9e4 	bl	8004ff0 <HAL_GetTick>
 8007c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c2a:	e00a      	b.n	8007c42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c2c:	f7fd f9e0 	bl	8004ff0 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e162      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c42:	4b89      	ldr	r3, [pc, #548]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0ed      	beq.n	8007c2c <HAL_RCC_OscConfig+0x53c>
 8007c50:	e015      	b.n	8007c7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c52:	f7fd f9cd 	bl	8004ff0 <HAL_GetTick>
 8007c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c58:	e00a      	b.n	8007c70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c5a:	f7fd f9c9 	bl	8004ff0 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e14b      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c70:	4b7d      	ldr	r3, [pc, #500]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1ed      	bne.n	8007c5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c7e:	7ffb      	ldrb	r3, [r7, #31]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d105      	bne.n	8007c90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c84:	4b78      	ldr	r3, [pc, #480]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c88:	4a77      	ldr	r2, [pc, #476]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d03c      	beq.n	8007d16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01c      	beq.n	8007cde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ca4:	4b70      	ldr	r3, [pc, #448]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007caa:	4a6f      	ldr	r2, [pc, #444]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb4:	f7fd f99c 	bl	8004ff0 <HAL_GetTick>
 8007cb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cbc:	f7fd f998 	bl	8004ff0 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e11c      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007cce:	4b66      	ldr	r3, [pc, #408]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0ef      	beq.n	8007cbc <HAL_RCC_OscConfig+0x5cc>
 8007cdc:	e01b      	b.n	8007d16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007cde:	4b62      	ldr	r3, [pc, #392]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ce4:	4a60      	ldr	r2, [pc, #384]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007ce6:	f023 0301 	bic.w	r3, r3, #1
 8007cea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cee:	f7fd f97f 	bl	8004ff0 <HAL_GetTick>
 8007cf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007cf4:	e008      	b.n	8007d08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cf6:	f7fd f97b 	bl	8004ff0 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d901      	bls.n	8007d08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e0ff      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d08:	4b57      	ldr	r3, [pc, #348]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1ef      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80f3 	beq.w	8007f06 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	f040 80c9 	bne.w	8007ebc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007d2a:	4b4f      	ldr	r3, [pc, #316]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f003 0203 	and.w	r2, r3, #3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d12c      	bne.n	8007d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d123      	bne.n	8007d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d11b      	bne.n	8007d98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d113      	bne.n	8007d98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7a:	085b      	lsrs	r3, r3, #1
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d109      	bne.n	8007d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	085b      	lsrs	r3, r3, #1
 8007d90:	3b01      	subs	r3, #1
 8007d92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d06b      	beq.n	8007e70 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b0c      	cmp	r3, #12
 8007d9c:	d062      	beq.n	8007e64 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007d9e:	4b32      	ldr	r3, [pc, #200]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e0ac      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007dae:	4b2e      	ldr	r3, [pc, #184]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a2d      	ldr	r2, [pc, #180]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007db4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007db8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007dba:	f7fd f919 	bl	8004ff0 <HAL_GetTick>
 8007dbe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dc2:	f7fd f915 	bl	8004ff0 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e099      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dd4:	4b24      	ldr	r3, [pc, #144]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f0      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007de0:	4b21      	ldr	r3, [pc, #132]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	4b21      	ldr	r3, [pc, #132]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007de6:	4013      	ands	r3, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007df0:	3a01      	subs	r2, #1
 8007df2:	0112      	lsls	r2, r2, #4
 8007df4:	4311      	orrs	r1, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007dfa:	0212      	lsls	r2, r2, #8
 8007dfc:	4311      	orrs	r1, r2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007e02:	0852      	lsrs	r2, r2, #1
 8007e04:	3a01      	subs	r2, #1
 8007e06:	0552      	lsls	r2, r2, #21
 8007e08:	4311      	orrs	r1, r2
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007e0e:	0852      	lsrs	r2, r2, #1
 8007e10:	3a01      	subs	r2, #1
 8007e12:	0652      	lsls	r2, r2, #25
 8007e14:	4311      	orrs	r1, r2
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e1a:	06d2      	lsls	r2, r2, #27
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	4912      	ldr	r1, [pc, #72]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007e24:	4b10      	ldr	r3, [pc, #64]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a0f      	ldr	r2, [pc, #60]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e30:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	4a0c      	ldr	r2, [pc, #48]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e3c:	f7fd f8d8 	bl	8004ff0 <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e44:	f7fd f8d4 	bl	8004ff0 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e058      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e56:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <HAL_RCC_OscConfig+0x778>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f0      	beq.n	8007e44 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007e62:	e050      	b.n	8007f06 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e04f      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
 8007e68:	40021000 	.word	0x40021000
 8007e6c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e70:	4b27      	ldr	r3, [pc, #156]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d144      	bne.n	8007f06 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007e7c:	4b24      	ldr	r3, [pc, #144]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a23      	ldr	r2, [pc, #140]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e88:	4b21      	ldr	r3, [pc, #132]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	4a20      	ldr	r2, [pc, #128]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e94:	f7fd f8ac 	bl	8004ff0 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e9c:	f7fd f8a8 	bl	8004ff0 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e02c      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007eae:	4b18      	ldr	r3, [pc, #96]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0x7ac>
 8007eba:	e024      	b.n	8007f06 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	2b0c      	cmp	r3, #12
 8007ec0:	d01f      	beq.n	8007f02 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec2:	4b13      	ldr	r3, [pc, #76]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a12      	ldr	r2, [pc, #72]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007ec8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ece:	f7fd f88f 	bl	8004ff0 <HAL_GetTick>
 8007ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ed4:	e008      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ed6:	f7fd f88b 	bl	8004ff0 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d901      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e00f      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ee8:	4b09      	ldr	r3, [pc, #36]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1f0      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	4905      	ldr	r1, [pc, #20]	; (8007f10 <HAL_RCC_OscConfig+0x820>)
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <HAL_RCC_OscConfig+0x824>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	60cb      	str	r3, [r1, #12]
 8007f00:	e001      	b.n	8007f06 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3720      	adds	r7, #32
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	40021000 	.word	0x40021000
 8007f14:	feeefffc 	.word	0xfeeefffc

08007f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e0e7      	b.n	80080fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f2c:	4b75      	ldr	r3, [pc, #468]	; (8008104 <HAL_RCC_ClockConfig+0x1ec>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d910      	bls.n	8007f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f3a:	4b72      	ldr	r3, [pc, #456]	; (8008104 <HAL_RCC_ClockConfig+0x1ec>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f023 0207 	bic.w	r2, r3, #7
 8007f42:	4970      	ldr	r1, [pc, #448]	; (8008104 <HAL_RCC_ClockConfig+0x1ec>)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f4a:	4b6e      	ldr	r3, [pc, #440]	; (8008104 <HAL_RCC_ClockConfig+0x1ec>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0307 	and.w	r3, r3, #7
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d001      	beq.n	8007f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e0cf      	b.n	80080fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d010      	beq.n	8007f8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	4b66      	ldr	r3, [pc, #408]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d908      	bls.n	8007f8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f78:	4b63      	ldr	r3, [pc, #396]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	4960      	ldr	r1, [pc, #384]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d04c      	beq.n	8008030 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d107      	bne.n	8007fae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f9e:	4b5a      	ldr	r3, [pc, #360]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d121      	bne.n	8007fee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e0a6      	b.n	80080fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d107      	bne.n	8007fc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007fb6:	4b54      	ldr	r3, [pc, #336]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d115      	bne.n	8007fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e09a      	b.n	80080fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d107      	bne.n	8007fde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007fce:	4b4e      	ldr	r3, [pc, #312]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e08e      	b.n	80080fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fde:	4b4a      	ldr	r3, [pc, #296]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e086      	b.n	80080fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fee:	4b46      	ldr	r3, [pc, #280]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f023 0203 	bic.w	r2, r3, #3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	4943      	ldr	r1, [pc, #268]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008000:	f7fc fff6 	bl	8004ff0 <HAL_GetTick>
 8008004:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008006:	e00a      	b.n	800801e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008008:	f7fc fff2 	bl	8004ff0 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	f241 3288 	movw	r2, #5000	; 0x1388
 8008016:	4293      	cmp	r3, r2
 8008018:	d901      	bls.n	800801e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e06e      	b.n	80080fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800801e:	4b3a      	ldr	r3, [pc, #232]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f003 020c 	and.w	r2, r3, #12
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	429a      	cmp	r2, r3
 800802e:	d1eb      	bne.n	8008008 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d010      	beq.n	800805e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	4b31      	ldr	r3, [pc, #196]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008048:	429a      	cmp	r2, r3
 800804a:	d208      	bcs.n	800805e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800804c:	4b2e      	ldr	r3, [pc, #184]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	492b      	ldr	r1, [pc, #172]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 800805a:	4313      	orrs	r3, r2
 800805c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800805e:	4b29      	ldr	r3, [pc, #164]	; (8008104 <HAL_RCC_ClockConfig+0x1ec>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d210      	bcs.n	800808e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806c:	4b25      	ldr	r3, [pc, #148]	; (8008104 <HAL_RCC_ClockConfig+0x1ec>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f023 0207 	bic.w	r2, r3, #7
 8008074:	4923      	ldr	r1, [pc, #140]	; (8008104 <HAL_RCC_ClockConfig+0x1ec>)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	4313      	orrs	r3, r2
 800807a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800807c:	4b21      	ldr	r3, [pc, #132]	; (8008104 <HAL_RCC_ClockConfig+0x1ec>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d001      	beq.n	800808e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e036      	b.n	80080fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	d008      	beq.n	80080ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800809a:	4b1b      	ldr	r3, [pc, #108]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	4918      	ldr	r1, [pc, #96]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0308 	and.w	r3, r3, #8
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d009      	beq.n	80080cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080b8:	4b13      	ldr	r3, [pc, #76]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	4910      	ldr	r1, [pc, #64]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80080cc:	f000 f824 	bl	8008118 <HAL_RCC_GetSysClockFreq>
 80080d0:	4602      	mov	r2, r0
 80080d2:	4b0d      	ldr	r3, [pc, #52]	; (8008108 <HAL_RCC_ClockConfig+0x1f0>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	091b      	lsrs	r3, r3, #4
 80080d8:	f003 030f 	and.w	r3, r3, #15
 80080dc:	490b      	ldr	r1, [pc, #44]	; (800810c <HAL_RCC_ClockConfig+0x1f4>)
 80080de:	5ccb      	ldrb	r3, [r1, r3]
 80080e0:	f003 031f 	and.w	r3, r3, #31
 80080e4:	fa22 f303 	lsr.w	r3, r2, r3
 80080e8:	4a09      	ldr	r2, [pc, #36]	; (8008110 <HAL_RCC_ClockConfig+0x1f8>)
 80080ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80080ec:	4b09      	ldr	r3, [pc, #36]	; (8008114 <HAL_RCC_ClockConfig+0x1fc>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fc ff2d 	bl	8004f50 <HAL_InitTick>
 80080f6:	4603      	mov	r3, r0
 80080f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80080fa:	7afb      	ldrb	r3, [r7, #11]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40022000 	.word	0x40022000
 8008108:	40021000 	.word	0x40021000
 800810c:	0800afb0 	.word	0x0800afb0
 8008110:	20000020 	.word	0x20000020
 8008114:	20000024 	.word	0x20000024

08008118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008118:	b480      	push	{r7}
 800811a:	b089      	sub	sp, #36	; 0x24
 800811c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	2300      	movs	r3, #0
 8008124:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008126:	4b3e      	ldr	r3, [pc, #248]	; (8008220 <HAL_RCC_GetSysClockFreq+0x108>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f003 030c 	and.w	r3, r3, #12
 800812e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008130:	4b3b      	ldr	r3, [pc, #236]	; (8008220 <HAL_RCC_GetSysClockFreq+0x108>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0303 	and.w	r3, r3, #3
 8008138:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <HAL_RCC_GetSysClockFreq+0x34>
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b0c      	cmp	r3, #12
 8008144:	d121      	bne.n	800818a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d11e      	bne.n	800818a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800814c:	4b34      	ldr	r3, [pc, #208]	; (8008220 <HAL_RCC_GetSysClockFreq+0x108>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b00      	cmp	r3, #0
 8008156:	d107      	bne.n	8008168 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008158:	4b31      	ldr	r3, [pc, #196]	; (8008220 <HAL_RCC_GetSysClockFreq+0x108>)
 800815a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800815e:	0a1b      	lsrs	r3, r3, #8
 8008160:	f003 030f 	and.w	r3, r3, #15
 8008164:	61fb      	str	r3, [r7, #28]
 8008166:	e005      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008168:	4b2d      	ldr	r3, [pc, #180]	; (8008220 <HAL_RCC_GetSysClockFreq+0x108>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	091b      	lsrs	r3, r3, #4
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008174:	4a2b      	ldr	r2, [pc, #172]	; (8008224 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800817c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10d      	bne.n	80081a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008188:	e00a      	b.n	80081a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b04      	cmp	r3, #4
 800818e:	d102      	bne.n	8008196 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008190:	4b25      	ldr	r3, [pc, #148]	; (8008228 <HAL_RCC_GetSysClockFreq+0x110>)
 8008192:	61bb      	str	r3, [r7, #24]
 8008194:	e004      	b.n	80081a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	2b08      	cmp	r3, #8
 800819a:	d101      	bne.n	80081a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800819c:	4b23      	ldr	r3, [pc, #140]	; (800822c <HAL_RCC_GetSysClockFreq+0x114>)
 800819e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2b0c      	cmp	r3, #12
 80081a4:	d134      	bne.n	8008210 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80081a6:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <HAL_RCC_GetSysClockFreq+0x108>)
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d003      	beq.n	80081be <HAL_RCC_GetSysClockFreq+0xa6>
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d003      	beq.n	80081c4 <HAL_RCC_GetSysClockFreq+0xac>
 80081bc:	e005      	b.n	80081ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80081be:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <HAL_RCC_GetSysClockFreq+0x110>)
 80081c0:	617b      	str	r3, [r7, #20]
      break;
 80081c2:	e005      	b.n	80081d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80081c4:	4b19      	ldr	r3, [pc, #100]	; (800822c <HAL_RCC_GetSysClockFreq+0x114>)
 80081c6:	617b      	str	r3, [r7, #20]
      break;
 80081c8:	e002      	b.n	80081d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	617b      	str	r3, [r7, #20]
      break;
 80081ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80081d0:	4b13      	ldr	r3, [pc, #76]	; (8008220 <HAL_RCC_GetSysClockFreq+0x108>)
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	091b      	lsrs	r3, r3, #4
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	3301      	adds	r3, #1
 80081dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80081de:	4b10      	ldr	r3, [pc, #64]	; (8008220 <HAL_RCC_GetSysClockFreq+0x108>)
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	0a1b      	lsrs	r3, r3, #8
 80081e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	fb03 f202 	mul.w	r2, r3, r2
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80081f6:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <HAL_RCC_GetSysClockFreq+0x108>)
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	0e5b      	lsrs	r3, r3, #25
 80081fc:	f003 0303 	and.w	r3, r3, #3
 8008200:	3301      	adds	r3, #1
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	fbb2 f3f3 	udiv	r3, r2, r3
 800820e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008210:	69bb      	ldr	r3, [r7, #24]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3724      	adds	r7, #36	; 0x24
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	40021000 	.word	0x40021000
 8008224:	0800afc0 	.word	0x0800afc0
 8008228:	00f42400 	.word	0x00f42400
 800822c:	007a1200 	.word	0x007a1200

08008230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008238:	2300      	movs	r3, #0
 800823a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800823c:	4b2a      	ldr	r3, [pc, #168]	; (80082e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800823e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008248:	f7ff f9ee 	bl	8007628 <HAL_PWREx_GetVoltageRange>
 800824c:	6178      	str	r0, [r7, #20]
 800824e:	e014      	b.n	800827a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008250:	4b25      	ldr	r3, [pc, #148]	; (80082e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008254:	4a24      	ldr	r2, [pc, #144]	; (80082e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825a:	6593      	str	r3, [r2, #88]	; 0x58
 800825c:	4b22      	ldr	r3, [pc, #136]	; (80082e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800825e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008268:	f7ff f9de 	bl	8007628 <HAL_PWREx_GetVoltageRange>
 800826c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800826e:	4b1e      	ldr	r3, [pc, #120]	; (80082e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008272:	4a1d      	ldr	r2, [pc, #116]	; (80082e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008278:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008280:	d10b      	bne.n	800829a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b80      	cmp	r3, #128	; 0x80
 8008286:	d919      	bls.n	80082bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2ba0      	cmp	r3, #160	; 0xa0
 800828c:	d902      	bls.n	8008294 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800828e:	2302      	movs	r3, #2
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	e013      	b.n	80082bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008294:	2301      	movs	r3, #1
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	e010      	b.n	80082bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b80      	cmp	r3, #128	; 0x80
 800829e:	d902      	bls.n	80082a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80082a0:	2303      	movs	r3, #3
 80082a2:	613b      	str	r3, [r7, #16]
 80082a4:	e00a      	b.n	80082bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b80      	cmp	r3, #128	; 0x80
 80082aa:	d102      	bne.n	80082b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80082ac:	2302      	movs	r3, #2
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	e004      	b.n	80082bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b70      	cmp	r3, #112	; 0x70
 80082b6:	d101      	bne.n	80082bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80082b8:	2301      	movs	r3, #1
 80082ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80082bc:	4b0b      	ldr	r3, [pc, #44]	; (80082ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f023 0207 	bic.w	r2, r3, #7
 80082c4:	4909      	ldr	r1, [pc, #36]	; (80082ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80082cc:	4b07      	ldr	r3, [pc, #28]	; (80082ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0307 	and.w	r3, r3, #7
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d001      	beq.n	80082de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	40021000 	.word	0x40021000
 80082ec:	40022000 	.word	0x40022000

080082f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80082f8:	2300      	movs	r3, #0
 80082fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082fc:	2300      	movs	r3, #0
 80082fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008308:	2b00      	cmp	r3, #0
 800830a:	d031      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008310:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008314:	d01a      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008316:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800831a:	d814      	bhi.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d009      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008320:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008324:	d10f      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008326:	4b5d      	ldr	r3, [pc, #372]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	4a5c      	ldr	r2, [pc, #368]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800832c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008330:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008332:	e00c      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3304      	adds	r3, #4
 8008338:	2100      	movs	r1, #0
 800833a:	4618      	mov	r0, r3
 800833c:	f000 fa44 	bl	80087c8 <RCCEx_PLLSAI1_Config>
 8008340:	4603      	mov	r3, r0
 8008342:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008344:	e003      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	74fb      	strb	r3, [r7, #19]
      break;
 800834a:	e000      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800834c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800834e:	7cfb      	ldrb	r3, [r7, #19]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008354:	4b51      	ldr	r3, [pc, #324]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008362:	494e      	ldr	r1, [pc, #312]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008364:	4313      	orrs	r3, r2
 8008366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800836a:	e001      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800836c:	7cfb      	ldrb	r3, [r7, #19]
 800836e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 809e 	beq.w	80084ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800837e:	2300      	movs	r3, #0
 8008380:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008382:	4b46      	ldr	r3, [pc, #280]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800838e:	2301      	movs	r3, #1
 8008390:	e000      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008392:	2300      	movs	r3, #0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00d      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008398:	4b40      	ldr	r3, [pc, #256]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800839a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839c:	4a3f      	ldr	r2, [pc, #252]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800839e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083a2:	6593      	str	r3, [r2, #88]	; 0x58
 80083a4:	4b3d      	ldr	r3, [pc, #244]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80083a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ac:	60bb      	str	r3, [r7, #8]
 80083ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083b0:	2301      	movs	r3, #1
 80083b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083b4:	4b3a      	ldr	r3, [pc, #232]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a39      	ldr	r2, [pc, #228]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80083ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083c0:	f7fc fe16 	bl	8004ff0 <HAL_GetTick>
 80083c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80083c6:	e009      	b.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083c8:	f7fc fe12 	bl	8004ff0 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d902      	bls.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	74fb      	strb	r3, [r7, #19]
        break;
 80083da:	e005      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80083dc:	4b30      	ldr	r3, [pc, #192]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0ef      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80083e8:	7cfb      	ldrb	r3, [r7, #19]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d15a      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80083ee:	4b2b      	ldr	r3, [pc, #172]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80083f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01e      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	429a      	cmp	r2, r3
 8008408:	d019      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800840a:	4b24      	ldr	r3, [pc, #144]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800840c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008414:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008416:	4b21      	ldr	r3, [pc, #132]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841c:	4a1f      	ldr	r2, [pc, #124]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800841e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008426:	4b1d      	ldr	r3, [pc, #116]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800842c:	4a1b      	ldr	r2, [pc, #108]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800842e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008436:	4a19      	ldr	r2, [pc, #100]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b00      	cmp	r3, #0
 8008446:	d016      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008448:	f7fc fdd2 	bl	8004ff0 <HAL_GetTick>
 800844c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800844e:	e00b      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008450:	f7fc fdce 	bl	8004ff0 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	f241 3288 	movw	r2, #5000	; 0x1388
 800845e:	4293      	cmp	r3, r2
 8008460:	d902      	bls.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	74fb      	strb	r3, [r7, #19]
            break;
 8008466:	e006      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008468:	4b0c      	ldr	r3, [pc, #48]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800846a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0ec      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008476:	7cfb      	ldrb	r3, [r7, #19]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10b      	bne.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800847c:	4b07      	ldr	r3, [pc, #28]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800847e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008482:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800848a:	4904      	ldr	r1, [pc, #16]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800848c:	4313      	orrs	r3, r2
 800848e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008492:	e009      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008494:	7cfb      	ldrb	r3, [r7, #19]
 8008496:	74bb      	strb	r3, [r7, #18]
 8008498:	e006      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800849a:	bf00      	nop
 800849c:	40021000 	.word	0x40021000
 80084a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a4:	7cfb      	ldrb	r3, [r7, #19]
 80084a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084a8:	7c7b      	ldrb	r3, [r7, #17]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d105      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084ae:	4b9e      	ldr	r3, [pc, #632]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b2:	4a9d      	ldr	r2, [pc, #628]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084c6:	4b98      	ldr	r3, [pc, #608]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084cc:	f023 0203 	bic.w	r2, r3, #3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	4994      	ldr	r1, [pc, #592]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0302 	and.w	r3, r3, #2
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00a      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084e8:	4b8f      	ldr	r3, [pc, #572]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ee:	f023 020c 	bic.w	r2, r3, #12
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	498c      	ldr	r1, [pc, #560]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800850a:	4b87      	ldr	r3, [pc, #540]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800850c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008510:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	4983      	ldr	r1, [pc, #524]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0308 	and.w	r3, r3, #8
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800852c:	4b7e      	ldr	r3, [pc, #504]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800852e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008532:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853a:	497b      	ldr	r1, [pc, #492]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800853c:	4313      	orrs	r3, r2
 800853e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800854e:	4b76      	ldr	r3, [pc, #472]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008554:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855c:	4972      	ldr	r1, [pc, #456]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800855e:	4313      	orrs	r3, r2
 8008560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00a      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008570:	4b6d      	ldr	r3, [pc, #436]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008576:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857e:	496a      	ldr	r1, [pc, #424]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008580:	4313      	orrs	r3, r2
 8008582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00a      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008592:	4b65      	ldr	r3, [pc, #404]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085a0:	4961      	ldr	r1, [pc, #388]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00a      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085b4:	4b5c      	ldr	r3, [pc, #368]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80085b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	4959      	ldr	r1, [pc, #356]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085d6:	4b54      	ldr	r3, [pc, #336]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80085d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	4950      	ldr	r1, [pc, #320]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00a      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80085f8:	4b4b      	ldr	r3, [pc, #300]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80085fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008606:	4948      	ldr	r1, [pc, #288]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008608:	4313      	orrs	r3, r2
 800860a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800861a:	4b43      	ldr	r3, [pc, #268]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800861c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008620:	f023 0203 	bic.w	r2, r3, #3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	493f      	ldr	r1, [pc, #252]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800862a:	4313      	orrs	r3, r2
 800862c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d028      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800863c:	4b3a      	ldr	r3, [pc, #232]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800863e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800864a:	4937      	ldr	r1, [pc, #220]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800864c:	4313      	orrs	r3, r2
 800864e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800865a:	d106      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800865c:	4b32      	ldr	r3, [pc, #200]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	4a31      	ldr	r2, [pc, #196]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008666:	60d3      	str	r3, [r2, #12]
 8008668:	e011      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008672:	d10c      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3304      	adds	r3, #4
 8008678:	2101      	movs	r1, #1
 800867a:	4618      	mov	r0, r3
 800867c:	f000 f8a4 	bl	80087c8 <RCCEx_PLLSAI1_Config>
 8008680:	4603      	mov	r3, r0
 8008682:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008684:	7cfb      	ldrb	r3, [r7, #19]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800868a:	7cfb      	ldrb	r3, [r7, #19]
 800868c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d028      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800869a:	4b23      	ldr	r3, [pc, #140]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800869c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a8:	491f      	ldr	r1, [pc, #124]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086b8:	d106      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086ba:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	4a1a      	ldr	r2, [pc, #104]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80086c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086c4:	60d3      	str	r3, [r2, #12]
 80086c6:	e011      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086d0:	d10c      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3304      	adds	r3, #4
 80086d6:	2101      	movs	r1, #1
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f875 	bl	80087c8 <RCCEx_PLLSAI1_Config>
 80086de:	4603      	mov	r3, r0
 80086e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086e2:	7cfb      	ldrb	r3, [r7, #19]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80086e8:	7cfb      	ldrb	r3, [r7, #19]
 80086ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d02b      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086f8:	4b0b      	ldr	r3, [pc, #44]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80086fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008706:	4908      	ldr	r1, [pc, #32]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008708:	4313      	orrs	r3, r2
 800870a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008716:	d109      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008718:	4b03      	ldr	r3, [pc, #12]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	4a02      	ldr	r2, [pc, #8]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800871e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008722:	60d3      	str	r3, [r2, #12]
 8008724:	e014      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8008726:	bf00      	nop
 8008728:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008734:	d10c      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3304      	adds	r3, #4
 800873a:	2101      	movs	r1, #1
 800873c:	4618      	mov	r0, r3
 800873e:	f000 f843 	bl	80087c8 <RCCEx_PLLSAI1_Config>
 8008742:	4603      	mov	r3, r0
 8008744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008746:	7cfb      	ldrb	r3, [r7, #19]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800874c:	7cfb      	ldrb	r3, [r7, #19]
 800874e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01c      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800875c:	4b19      	ldr	r3, [pc, #100]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008762:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800876a:	4916      	ldr	r1, [pc, #88]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800876c:	4313      	orrs	r3, r2
 800876e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800877a:	d10c      	bne.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3304      	adds	r3, #4
 8008780:	2102      	movs	r1, #2
 8008782:	4618      	mov	r0, r3
 8008784:	f000 f820 	bl	80087c8 <RCCEx_PLLSAI1_Config>
 8008788:	4603      	mov	r3, r0
 800878a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800878c:	7cfb      	ldrb	r3, [r7, #19]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8008792:	7cfb      	ldrb	r3, [r7, #19]
 8008794:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087a2:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80087a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087b0:	4904      	ldr	r1, [pc, #16]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80087b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	40021000 	.word	0x40021000

080087c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80087d6:	4b74      	ldr	r3, [pc, #464]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d018      	beq.n	8008814 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80087e2:	4b71      	ldr	r3, [pc, #452]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	f003 0203 	and.w	r2, r3, #3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d10d      	bne.n	800880e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
       ||
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80087fa:	4b6b      	ldr	r3, [pc, #428]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	091b      	lsrs	r3, r3, #4
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
       ||
 800880a:	429a      	cmp	r2, r3
 800880c:	d047      	beq.n	800889e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	73fb      	strb	r3, [r7, #15]
 8008812:	e044      	b.n	800889e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d018      	beq.n	800884e <RCCEx_PLLSAI1_Config+0x86>
 800881c:	2b03      	cmp	r3, #3
 800881e:	d825      	bhi.n	800886c <RCCEx_PLLSAI1_Config+0xa4>
 8008820:	2b01      	cmp	r3, #1
 8008822:	d002      	beq.n	800882a <RCCEx_PLLSAI1_Config+0x62>
 8008824:	2b02      	cmp	r3, #2
 8008826:	d009      	beq.n	800883c <RCCEx_PLLSAI1_Config+0x74>
 8008828:	e020      	b.n	800886c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800882a:	4b5f      	ldr	r3, [pc, #380]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d11d      	bne.n	8008872 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800883a:	e01a      	b.n	8008872 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800883c:	4b5a      	ldr	r3, [pc, #360]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008844:	2b00      	cmp	r3, #0
 8008846:	d116      	bne.n	8008876 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800884c:	e013      	b.n	8008876 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800884e:	4b56      	ldr	r3, [pc, #344]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10f      	bne.n	800887a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800885a:	4b53      	ldr	r3, [pc, #332]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d109      	bne.n	800887a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800886a:	e006      	b.n	800887a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	73fb      	strb	r3, [r7, #15]
      break;
 8008870:	e004      	b.n	800887c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008872:	bf00      	nop
 8008874:	e002      	b.n	800887c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008876:	bf00      	nop
 8008878:	e000      	b.n	800887c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800887a:	bf00      	nop
    }

    if(status == HAL_OK)
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10d      	bne.n	800889e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008882:	4b49      	ldr	r3, [pc, #292]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6819      	ldr	r1, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	3b01      	subs	r3, #1
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	430b      	orrs	r3, r1
 8008898:	4943      	ldr	r1, [pc, #268]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800889a:	4313      	orrs	r3, r2
 800889c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d17c      	bne.n	800899e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80088a4:	4b40      	ldr	r3, [pc, #256]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a3f      	ldr	r2, [pc, #252]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b0:	f7fc fb9e 	bl	8004ff0 <HAL_GetTick>
 80088b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088b6:	e009      	b.n	80088cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088b8:	f7fc fb9a 	bl	8004ff0 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d902      	bls.n	80088cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	73fb      	strb	r3, [r7, #15]
        break;
 80088ca:	e005      	b.n	80088d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088cc:	4b36      	ldr	r3, [pc, #216]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1ef      	bne.n	80088b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d15f      	bne.n	800899e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d110      	bne.n	8008906 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088e4:	4b30      	ldr	r3, [pc, #192]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80088ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6892      	ldr	r2, [r2, #8]
 80088f4:	0211      	lsls	r1, r2, #8
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	68d2      	ldr	r2, [r2, #12]
 80088fa:	06d2      	lsls	r2, r2, #27
 80088fc:	430a      	orrs	r2, r1
 80088fe:	492a      	ldr	r1, [pc, #168]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008900:	4313      	orrs	r3, r2
 8008902:	610b      	str	r3, [r1, #16]
 8008904:	e027      	b.n	8008956 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d112      	bne.n	8008932 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800890c:	4b26      	ldr	r3, [pc, #152]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008914:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6892      	ldr	r2, [r2, #8]
 800891c:	0211      	lsls	r1, r2, #8
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6912      	ldr	r2, [r2, #16]
 8008922:	0852      	lsrs	r2, r2, #1
 8008924:	3a01      	subs	r2, #1
 8008926:	0552      	lsls	r2, r2, #21
 8008928:	430a      	orrs	r2, r1
 800892a:	491f      	ldr	r1, [pc, #124]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800892c:	4313      	orrs	r3, r2
 800892e:	610b      	str	r3, [r1, #16]
 8008930:	e011      	b.n	8008956 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008932:	4b1d      	ldr	r3, [pc, #116]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800893a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6892      	ldr	r2, [r2, #8]
 8008942:	0211      	lsls	r1, r2, #8
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6952      	ldr	r2, [r2, #20]
 8008948:	0852      	lsrs	r2, r2, #1
 800894a:	3a01      	subs	r2, #1
 800894c:	0652      	lsls	r2, r2, #25
 800894e:	430a      	orrs	r2, r1
 8008950:	4915      	ldr	r1, [pc, #84]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008952:	4313      	orrs	r3, r2
 8008954:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008956:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a13      	ldr	r2, [pc, #76]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800895c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008960:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008962:	f7fc fb45 	bl	8004ff0 <HAL_GetTick>
 8008966:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008968:	e009      	b.n	800897e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800896a:	f7fc fb41 	bl	8004ff0 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	2b02      	cmp	r3, #2
 8008976:	d902      	bls.n	800897e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	73fb      	strb	r3, [r7, #15]
          break;
 800897c:	e005      	b.n	800898a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800897e:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0ef      	beq.n	800896a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d106      	bne.n	800899e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008990:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008992:	691a      	ldr	r2, [r3, #16]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	4903      	ldr	r1, [pc, #12]	; (80089a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800899a:	4313      	orrs	r3, r2
 800899c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	40021000 	.word	0x40021000

080089ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e095      	b.n	8008aea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d108      	bne.n	80089d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089ce:	d009      	beq.n	80089e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	61da      	str	r2, [r3, #28]
 80089d6:	e005      	b.n	80089e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7fb fd8e 	bl	8004520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a24:	d902      	bls.n	8008a2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	e002      	b.n	8008a32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a3a:	d007      	beq.n	8008a4c <HAL_SPI_Init+0xa0>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a44:	d002      	beq.n	8008a4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a84:	431a      	orrs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8e:	ea42 0103 	orr.w	r1, r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	0c1b      	lsrs	r3, r3, #16
 8008aa8:	f003 0204 	and.w	r2, r3, #4
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ac8:	ea42 0103 	orr.w	r1, r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b08a      	sub	sp, #40	; 0x28
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b00:	2301      	movs	r3, #1
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <HAL_SPI_TransmitReceive+0x26>
 8008b14:	2302      	movs	r3, #2
 8008b16:	e1fb      	b.n	8008f10 <HAL_SPI_TransmitReceive+0x41e>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b20:	f7fc fa66 	bl	8004ff0 <HAL_GetTick>
 8008b24:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b2c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008b34:	887b      	ldrh	r3, [r7, #2]
 8008b36:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008b38:	887b      	ldrh	r3, [r7, #2]
 8008b3a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b3c:	7efb      	ldrb	r3, [r7, #27]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d00e      	beq.n	8008b60 <HAL_SPI_TransmitReceive+0x6e>
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b48:	d106      	bne.n	8008b58 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d102      	bne.n	8008b58 <HAL_SPI_TransmitReceive+0x66>
 8008b52:	7efb      	ldrb	r3, [r7, #27]
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d003      	beq.n	8008b60 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008b58:	2302      	movs	r3, #2
 8008b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008b5e:	e1cd      	b.n	8008efc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d005      	beq.n	8008b72 <HAL_SPI_TransmitReceive+0x80>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <HAL_SPI_TransmitReceive+0x80>
 8008b6c:	887b      	ldrh	r3, [r7, #2]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d103      	bne.n	8008b7a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008b78:	e1c0      	b.n	8008efc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	d003      	beq.n	8008b8e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2205      	movs	r2, #5
 8008b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	887a      	ldrh	r2, [r7, #2]
 8008b9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	887a      	ldrh	r2, [r7, #2]
 8008ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	887a      	ldrh	r2, [r7, #2]
 8008bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	887a      	ldrh	r2, [r7, #2]
 8008bba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bd0:	d802      	bhi.n	8008bd8 <HAL_SPI_TransmitReceive+0xe6>
 8008bd2:	8a3b      	ldrh	r3, [r7, #16]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d908      	bls.n	8008bea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008be6:	605a      	str	r2, [r3, #4]
 8008be8:	e007      	b.n	8008bfa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bf8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c04:	2b40      	cmp	r3, #64	; 0x40
 8008c06:	d007      	beq.n	8008c18 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c20:	d97c      	bls.n	8008d1c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <HAL_SPI_TransmitReceive+0x13e>
 8008c2a:	8a7b      	ldrh	r3, [r7, #18]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d169      	bne.n	8008d04 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	881a      	ldrh	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	1c9a      	adds	r2, r3, #2
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c54:	e056      	b.n	8008d04 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d11b      	bne.n	8008c9c <HAL_SPI_TransmitReceive+0x1aa>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d016      	beq.n	8008c9c <HAL_SPI_TransmitReceive+0x1aa>
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d113      	bne.n	8008c9c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	881a      	ldrh	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	1c9a      	adds	r2, r3, #2
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	3b01      	subs	r3, #1
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d11c      	bne.n	8008ce4 <HAL_SPI_TransmitReceive+0x1f2>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d016      	beq.n	8008ce4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc0:	b292      	uxth	r2, r2
 8008cc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc8:	1c9a      	adds	r2, r3, #2
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ce4:	f7fc f984 	bl	8004ff0 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d807      	bhi.n	8008d04 <HAL_SPI_TransmitReceive+0x212>
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfa:	d003      	beq.n	8008d04 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008d02:	e0fb      	b.n	8008efc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1a3      	bne.n	8008c56 <HAL_SPI_TransmitReceive+0x164>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d19d      	bne.n	8008c56 <HAL_SPI_TransmitReceive+0x164>
 8008d1a:	e0df      	b.n	8008edc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <HAL_SPI_TransmitReceive+0x23a>
 8008d24:	8a7b      	ldrh	r3, [r7, #18]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	f040 80cb 	bne.w	8008ec2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d912      	bls.n	8008d5c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3a:	881a      	ldrh	r2, [r3, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d46:	1c9a      	adds	r2, r3, #2
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	3b02      	subs	r3, #2
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d5a:	e0b2      	b.n	8008ec2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	330c      	adds	r3, #12
 8008d66:	7812      	ldrb	r2, [r2, #0]
 8008d68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d82:	e09e      	b.n	8008ec2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d134      	bne.n	8008dfc <HAL_SPI_TransmitReceive+0x30a>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d02f      	beq.n	8008dfc <HAL_SPI_TransmitReceive+0x30a>
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d12c      	bne.n	8008dfc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d912      	bls.n	8008dd2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	881a      	ldrh	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	1c9a      	adds	r2, r3, #2
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	3b02      	subs	r3, #2
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dd0:	e012      	b.n	8008df8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	330c      	adds	r3, #12
 8008ddc:	7812      	ldrb	r2, [r2, #0]
 8008dde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	3b01      	subs	r3, #1
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d148      	bne.n	8008e9c <HAL_SPI_TransmitReceive+0x3aa>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d042      	beq.n	8008e9c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d923      	bls.n	8008e6a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2c:	b292      	uxth	r2, r2
 8008e2e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e34:	1c9a      	adds	r2, r3, #2
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	3b02      	subs	r3, #2
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d81f      	bhi.n	8008e98 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e66:	605a      	str	r2, [r3, #4]
 8008e68:	e016      	b.n	8008e98 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f103 020c 	add.w	r2, r3, #12
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e76:	7812      	ldrb	r2, [r2, #0]
 8008e78:	b2d2      	uxtb	r2, r2
 8008e7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e9c:	f7fc f8a8 	bl	8004ff0 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d803      	bhi.n	8008eb4 <HAL_SPI_TransmitReceive+0x3c2>
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d102      	bne.n	8008eba <HAL_SPI_TransmitReceive+0x3c8>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d103      	bne.n	8008ec2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008ec0:	e01c      	b.n	8008efc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f47f af5b 	bne.w	8008d84 <HAL_SPI_TransmitReceive+0x292>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f47f af54 	bne.w	8008d84 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008edc:	69fa      	ldr	r2, [r7, #28]
 8008ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 fa57 	bl	8009394 <SPI_EndRxTxTransaction>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d006      	beq.n	8008efa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	661a      	str	r2, [r3, #96]	; 0x60
 8008ef8:	e000      	b.n	8008efc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008efa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3728      	adds	r7, #40	; 0x28
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	099b      	lsrs	r3, r3, #6
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10f      	bne.n	8008f5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	099b      	lsrs	r3, r3, #6
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d004      	beq.n	8008f5c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
    return;
 8008f5a:	e0d7      	b.n	800910c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	085b      	lsrs	r3, r3, #1
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <HAL_SPI_IRQHandler+0x66>
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	09db      	lsrs	r3, r3, #7
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d004      	beq.n	8008f7e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	4798      	blx	r3
    return;
 8008f7c:	e0c6      	b.n	800910c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10c      	bne.n	8008fa4 <HAL_SPI_IRQHandler+0x8c>
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	099b      	lsrs	r3, r3, #6
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	0a1b      	lsrs	r3, r3, #8
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 80b4 	beq.w	800910c <HAL_SPI_IRQHandler+0x1f4>
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	095b      	lsrs	r3, r3, #5
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 80ad 	beq.w	800910c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	099b      	lsrs	r3, r3, #6
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d023      	beq.n	8009006 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d011      	beq.n	8008fee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fce:	f043 0204 	orr.w	r2, r3, #4
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	617b      	str	r3, [r7, #20]
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	e00b      	b.n	8009006 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fee:	2300      	movs	r3, #0
 8008ff0:	613b      	str	r3, [r7, #16]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	613b      	str	r3, [r7, #16]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	613b      	str	r3, [r7, #16]
 8009002:	693b      	ldr	r3, [r7, #16]
        return;
 8009004:	e082      	b.n	800910c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	095b      	lsrs	r3, r3, #5
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d014      	beq.n	800903c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009016:	f043 0201 	orr.w	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	0a1b      	lsrs	r3, r3, #8
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00c      	beq.n	8009062 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800904c:	f043 0208 	orr.w	r2, r3, #8
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009054:	2300      	movs	r3, #0
 8009056:	60bb      	str	r3, [r7, #8]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	60bb      	str	r3, [r7, #8]
 8009060:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009066:	2b00      	cmp	r3, #0
 8009068:	d04f      	beq.n	800910a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009078:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d104      	bne.n	8009096 <HAL_SPI_IRQHandler+0x17e>
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d034      	beq.n	8009100 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0203 	bic.w	r2, r2, #3
 80090a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d011      	beq.n	80090d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b2:	4a18      	ldr	r2, [pc, #96]	; (8009114 <HAL_SPI_IRQHandler+0x1fc>)
 80090b4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fd ffe8 	bl	8007090 <HAL_DMA_Abort_IT>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d016      	beq.n	8009108 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090de:	4a0d      	ldr	r2, [pc, #52]	; (8009114 <HAL_SPI_IRQHandler+0x1fc>)
 80090e0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fd ffd2 	bl	8007090 <HAL_DMA_Abort_IT>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80090fe:	e003      	b.n	8009108 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f809 	bl	8009118 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009106:	e000      	b.n	800910a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009108:	bf00      	nop
    return;
 800910a:	bf00      	nop
  }
}
 800910c:	3720      	adds	r7, #32
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	0800912d 	.word	0x0800912d

08009118 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009138:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f7ff ffe5 	bl	8009118 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	4613      	mov	r3, r2
 8009166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009168:	f7fb ff42 	bl	8004ff0 <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009170:	1a9b      	subs	r3, r3, r2
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4413      	add	r3, r2
 8009176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009178:	f7fb ff3a 	bl	8004ff0 <HAL_GetTick>
 800917c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800917e:	4b39      	ldr	r3, [pc, #228]	; (8009264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	015b      	lsls	r3, r3, #5
 8009184:	0d1b      	lsrs	r3, r3, #20
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	fb02 f303 	mul.w	r3, r2, r3
 800918c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800918e:	e054      	b.n	800923a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d050      	beq.n	800923a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009198:	f7fb ff2a 	bl	8004ff0 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d902      	bls.n	80091ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d13d      	bne.n	800922a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80091bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091c6:	d111      	bne.n	80091ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091d0:	d004      	beq.n	80091dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091da:	d107      	bne.n	80091ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091f4:	d10f      	bne.n	8009216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009226:	2303      	movs	r3, #3
 8009228:	e017      	b.n	800925a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	3b01      	subs	r3, #1
 8009238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4013      	ands	r3, r2
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	429a      	cmp	r2, r3
 8009248:	bf0c      	ite	eq
 800924a:	2301      	moveq	r3, #1
 800924c:	2300      	movne	r3, #0
 800924e:	b2db      	uxtb	r3, r3
 8009250:	461a      	mov	r2, r3
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	429a      	cmp	r2, r3
 8009256:	d19b      	bne.n	8009190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000020 	.word	0x20000020

08009268 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	; 0x28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800927a:	f7fb feb9 	bl	8004ff0 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	4413      	add	r3, r2
 8009288:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800928a:	f7fb feb1 	bl	8004ff0 <HAL_GetTick>
 800928e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330c      	adds	r3, #12
 8009296:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009298:	4b3d      	ldr	r3, [pc, #244]	; (8009390 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	00da      	lsls	r2, r3, #3
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	0d1b      	lsrs	r3, r3, #20
 80092a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092aa:	fb02 f303 	mul.w	r3, r2, r3
 80092ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80092b0:	e060      	b.n	8009374 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80092b8:	d107      	bne.n	80092ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d104      	bne.n	80092ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d050      	beq.n	8009374 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092d2:	f7fb fe8d 	bl	8004ff0 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092de:	429a      	cmp	r2, r3
 80092e0:	d902      	bls.n	80092e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d13d      	bne.n	8009364 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009300:	d111      	bne.n	8009326 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800930a:	d004      	beq.n	8009316 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009314:	d107      	bne.n	8009326 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009324:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800932e:	d10f      	bne.n	8009350 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800934e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e010      	b.n	8009386 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	3b01      	subs	r3, #1
 8009372:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4013      	ands	r3, r2
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	429a      	cmp	r2, r3
 8009382:	d196      	bne.n	80092b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3728      	adds	r7, #40	; 0x28
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20000020 	.word	0x20000020

08009394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af02      	add	r7, sp, #8
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f7ff ff5b 	bl	8009268 <SPI_WaitFifoStateUntilTimeout>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093bc:	f043 0220 	orr.w	r2, r3, #32
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e027      	b.n	8009418 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2200      	movs	r2, #0
 80093d0:	2180      	movs	r1, #128	; 0x80
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7ff fec0 	bl	8009158 <SPI_WaitFlagStateUntilTimeout>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e2:	f043 0220 	orr.w	r2, r3, #32
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e014      	b.n	8009418 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7ff ff34 	bl	8009268 <SPI_WaitFifoStateUntilTimeout>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d007      	beq.n	8009416 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800940a:	f043 0220 	orr.w	r2, r3, #32
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e000      	b.n	8009418 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e049      	b.n	80094c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d106      	bne.n	800944c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7fb fbbc 	bl	8004bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3304      	adds	r3, #4
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f000 ffac 	bl	800a3bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d001      	beq.n	80094e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e038      	b.n	800955a <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a1c      	ldr	r2, [pc, #112]	; (8009568 <HAL_TIM_Base_Start+0x98>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00e      	beq.n	8009518 <HAL_TIM_Base_Start+0x48>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009502:	d009      	beq.n	8009518 <HAL_TIM_Base_Start+0x48>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a18      	ldr	r2, [pc, #96]	; (800956c <HAL_TIM_Base_Start+0x9c>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d004      	beq.n	8009518 <HAL_TIM_Base_Start+0x48>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a17      	ldr	r2, [pc, #92]	; (8009570 <HAL_TIM_Base_Start+0xa0>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d115      	bne.n	8009544 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689a      	ldr	r2, [r3, #8]
 800951e:	4b15      	ldr	r3, [pc, #84]	; (8009574 <HAL_TIM_Base_Start+0xa4>)
 8009520:	4013      	ands	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b06      	cmp	r3, #6
 8009528:	d015      	beq.n	8009556 <HAL_TIM_Base_Start+0x86>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009530:	d011      	beq.n	8009556 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0201 	orr.w	r2, r2, #1
 8009540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009542:	e008      	b.n	8009556 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 0201 	orr.w	r2, r2, #1
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	e000      	b.n	8009558 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	40012c00 	.word	0x40012c00
 800956c:	40000400 	.word	0x40000400
 8009570:	40014000 	.word	0x40014000
 8009574:	00010007 	.word	0x00010007

08009578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b01      	cmp	r3, #1
 800958a:	d001      	beq.n	8009590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e040      	b.n	8009612 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0201 	orr.w	r2, r2, #1
 80095a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a1c      	ldr	r2, [pc, #112]	; (8009620 <HAL_TIM_Base_Start_IT+0xa8>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00e      	beq.n	80095d0 <HAL_TIM_Base_Start_IT+0x58>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ba:	d009      	beq.n	80095d0 <HAL_TIM_Base_Start_IT+0x58>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a18      	ldr	r2, [pc, #96]	; (8009624 <HAL_TIM_Base_Start_IT+0xac>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d004      	beq.n	80095d0 <HAL_TIM_Base_Start_IT+0x58>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a17      	ldr	r2, [pc, #92]	; (8009628 <HAL_TIM_Base_Start_IT+0xb0>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d115      	bne.n	80095fc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689a      	ldr	r2, [r3, #8]
 80095d6:	4b15      	ldr	r3, [pc, #84]	; (800962c <HAL_TIM_Base_Start_IT+0xb4>)
 80095d8:	4013      	ands	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b06      	cmp	r3, #6
 80095e0:	d015      	beq.n	800960e <HAL_TIM_Base_Start_IT+0x96>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095e8:	d011      	beq.n	800960e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f042 0201 	orr.w	r2, r2, #1
 80095f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095fa:	e008      	b.n	800960e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f042 0201 	orr.w	r2, r2, #1
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	e000      	b.n	8009610 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800960e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	40012c00 	.word	0x40012c00
 8009624:	40000400 	.word	0x40000400
 8009628:	40014000 	.word	0x40014000
 800962c:	00010007 	.word	0x00010007

08009630 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e049      	b.n	80096d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d106      	bne.n	800965c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7fb fb6a 	bl	8004d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f000 fea4 	bl	800a3bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d109      	bne.n	8009704 <HAL_TIM_PWM_Start+0x24>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	bf14      	ite	ne
 80096fc:	2301      	movne	r3, #1
 80096fe:	2300      	moveq	r3, #0
 8009700:	b2db      	uxtb	r3, r3
 8009702:	e03c      	b.n	800977e <HAL_TIM_PWM_Start+0x9e>
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b04      	cmp	r3, #4
 8009708:	d109      	bne.n	800971e <HAL_TIM_PWM_Start+0x3e>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b01      	cmp	r3, #1
 8009714:	bf14      	ite	ne
 8009716:	2301      	movne	r3, #1
 8009718:	2300      	moveq	r3, #0
 800971a:	b2db      	uxtb	r3, r3
 800971c:	e02f      	b.n	800977e <HAL_TIM_PWM_Start+0x9e>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b08      	cmp	r3, #8
 8009722:	d109      	bne.n	8009738 <HAL_TIM_PWM_Start+0x58>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b01      	cmp	r3, #1
 800972e:	bf14      	ite	ne
 8009730:	2301      	movne	r3, #1
 8009732:	2300      	moveq	r3, #0
 8009734:	b2db      	uxtb	r3, r3
 8009736:	e022      	b.n	800977e <HAL_TIM_PWM_Start+0x9e>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b0c      	cmp	r3, #12
 800973c:	d109      	bne.n	8009752 <HAL_TIM_PWM_Start+0x72>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b01      	cmp	r3, #1
 8009748:	bf14      	ite	ne
 800974a:	2301      	movne	r3, #1
 800974c:	2300      	moveq	r3, #0
 800974e:	b2db      	uxtb	r3, r3
 8009750:	e015      	b.n	800977e <HAL_TIM_PWM_Start+0x9e>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2b10      	cmp	r3, #16
 8009756:	d109      	bne.n	800976c <HAL_TIM_PWM_Start+0x8c>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b01      	cmp	r3, #1
 8009762:	bf14      	ite	ne
 8009764:	2301      	movne	r3, #1
 8009766:	2300      	moveq	r3, #0
 8009768:	b2db      	uxtb	r3, r3
 800976a:	e008      	b.n	800977e <HAL_TIM_PWM_Start+0x9e>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b01      	cmp	r3, #1
 8009776:	bf14      	ite	ne
 8009778:	2301      	movne	r3, #1
 800977a:	2300      	moveq	r3, #0
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e083      	b.n	800988e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <HAL_TIM_PWM_Start+0xb6>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009794:	e023      	b.n	80097de <HAL_TIM_PWM_Start+0xfe>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b04      	cmp	r3, #4
 800979a:	d104      	bne.n	80097a6 <HAL_TIM_PWM_Start+0xc6>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097a4:	e01b      	b.n	80097de <HAL_TIM_PWM_Start+0xfe>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b08      	cmp	r3, #8
 80097aa:	d104      	bne.n	80097b6 <HAL_TIM_PWM_Start+0xd6>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097b4:	e013      	b.n	80097de <HAL_TIM_PWM_Start+0xfe>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b0c      	cmp	r3, #12
 80097ba:	d104      	bne.n	80097c6 <HAL_TIM_PWM_Start+0xe6>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097c4:	e00b      	b.n	80097de <HAL_TIM_PWM_Start+0xfe>
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b10      	cmp	r3, #16
 80097ca:	d104      	bne.n	80097d6 <HAL_TIM_PWM_Start+0xf6>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097d4:	e003      	b.n	80097de <HAL_TIM_PWM_Start+0xfe>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2202      	movs	r2, #2
 80097da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2201      	movs	r2, #1
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f001 fa80 	bl	800acec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a29      	ldr	r2, [pc, #164]	; (8009898 <HAL_TIM_PWM_Start+0x1b8>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d009      	beq.n	800980a <HAL_TIM_PWM_Start+0x12a>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a28      	ldr	r2, [pc, #160]	; (800989c <HAL_TIM_PWM_Start+0x1bc>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d004      	beq.n	800980a <HAL_TIM_PWM_Start+0x12a>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a26      	ldr	r2, [pc, #152]	; (80098a0 <HAL_TIM_PWM_Start+0x1c0>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d101      	bne.n	800980e <HAL_TIM_PWM_Start+0x12e>
 800980a:	2301      	movs	r3, #1
 800980c:	e000      	b.n	8009810 <HAL_TIM_PWM_Start+0x130>
 800980e:	2300      	movs	r3, #0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d007      	beq.n	8009824 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009822:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a1b      	ldr	r2, [pc, #108]	; (8009898 <HAL_TIM_PWM_Start+0x1b8>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d00e      	beq.n	800984c <HAL_TIM_PWM_Start+0x16c>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009836:	d009      	beq.n	800984c <HAL_TIM_PWM_Start+0x16c>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a19      	ldr	r2, [pc, #100]	; (80098a4 <HAL_TIM_PWM_Start+0x1c4>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d004      	beq.n	800984c <HAL_TIM_PWM_Start+0x16c>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a15      	ldr	r2, [pc, #84]	; (800989c <HAL_TIM_PWM_Start+0x1bc>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d115      	bne.n	8009878 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <HAL_TIM_PWM_Start+0x1c8>)
 8009854:	4013      	ands	r3, r2
 8009856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b06      	cmp	r3, #6
 800985c:	d015      	beq.n	800988a <HAL_TIM_PWM_Start+0x1aa>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009864:	d011      	beq.n	800988a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0201 	orr.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009876:	e008      	b.n	800988a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0201 	orr.w	r2, r2, #1
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	e000      	b.n	800988c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	40012c00 	.word	0x40012c00
 800989c:	40014000 	.word	0x40014000
 80098a0:	40014400 	.word	0x40014400
 80098a4:	40000400 	.word	0x40000400
 80098a8:	00010007 	.word	0x00010007

080098ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e049      	b.n	8009952 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d106      	bne.n	80098d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7fb fa4a 	bl	8004d6c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2202      	movs	r2, #2
 80098dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3304      	adds	r3, #4
 80098e8:	4619      	mov	r1, r3
 80098ea:	4610      	mov	r0, r2
 80098ec:	f000 fd66 	bl	800a3bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d104      	bne.n	800997a <HAL_TIM_IC_Start_IT+0x1e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009976:	b2db      	uxtb	r3, r3
 8009978:	e023      	b.n	80099c2 <HAL_TIM_IC_Start_IT+0x66>
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b04      	cmp	r3, #4
 800997e:	d104      	bne.n	800998a <HAL_TIM_IC_Start_IT+0x2e>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009986:	b2db      	uxtb	r3, r3
 8009988:	e01b      	b.n	80099c2 <HAL_TIM_IC_Start_IT+0x66>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b08      	cmp	r3, #8
 800998e:	d104      	bne.n	800999a <HAL_TIM_IC_Start_IT+0x3e>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009996:	b2db      	uxtb	r3, r3
 8009998:	e013      	b.n	80099c2 <HAL_TIM_IC_Start_IT+0x66>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b0c      	cmp	r3, #12
 800999e:	d104      	bne.n	80099aa <HAL_TIM_IC_Start_IT+0x4e>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	e00b      	b.n	80099c2 <HAL_TIM_IC_Start_IT+0x66>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b10      	cmp	r3, #16
 80099ae:	d104      	bne.n	80099ba <HAL_TIM_IC_Start_IT+0x5e>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	e003      	b.n	80099c2 <HAL_TIM_IC_Start_IT+0x66>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d104      	bne.n	80099d4 <HAL_TIM_IC_Start_IT+0x78>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	e013      	b.n	80099fc <HAL_TIM_IC_Start_IT+0xa0>
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d104      	bne.n	80099e4 <HAL_TIM_IC_Start_IT+0x88>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	e00b      	b.n	80099fc <HAL_TIM_IC_Start_IT+0xa0>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b08      	cmp	r3, #8
 80099e8:	d104      	bne.n	80099f4 <HAL_TIM_IC_Start_IT+0x98>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	e003      	b.n	80099fc <HAL_TIM_IC_Start_IT+0xa0>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d102      	bne.n	8009a0a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a04:	7b7b      	ldrb	r3, [r7, #13]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d001      	beq.n	8009a0e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e0ce      	b.n	8009bac <HAL_TIM_IC_Start_IT+0x250>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d104      	bne.n	8009a1e <HAL_TIM_IC_Start_IT+0xc2>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a1c:	e023      	b.n	8009a66 <HAL_TIM_IC_Start_IT+0x10a>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d104      	bne.n	8009a2e <HAL_TIM_IC_Start_IT+0xd2>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a2c:	e01b      	b.n	8009a66 <HAL_TIM_IC_Start_IT+0x10a>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d104      	bne.n	8009a3e <HAL_TIM_IC_Start_IT+0xe2>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a3c:	e013      	b.n	8009a66 <HAL_TIM_IC_Start_IT+0x10a>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b0c      	cmp	r3, #12
 8009a42:	d104      	bne.n	8009a4e <HAL_TIM_IC_Start_IT+0xf2>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a4c:	e00b      	b.n	8009a66 <HAL_TIM_IC_Start_IT+0x10a>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b10      	cmp	r3, #16
 8009a52:	d104      	bne.n	8009a5e <HAL_TIM_IC_Start_IT+0x102>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a5c:	e003      	b.n	8009a66 <HAL_TIM_IC_Start_IT+0x10a>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2202      	movs	r2, #2
 8009a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d104      	bne.n	8009a76 <HAL_TIM_IC_Start_IT+0x11a>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a74:	e013      	b.n	8009a9e <HAL_TIM_IC_Start_IT+0x142>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b04      	cmp	r3, #4
 8009a7a:	d104      	bne.n	8009a86 <HAL_TIM_IC_Start_IT+0x12a>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a84:	e00b      	b.n	8009a9e <HAL_TIM_IC_Start_IT+0x142>
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	2b08      	cmp	r3, #8
 8009a8a:	d104      	bne.n	8009a96 <HAL_TIM_IC_Start_IT+0x13a>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a94:	e003      	b.n	8009a9e <HAL_TIM_IC_Start_IT+0x142>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b0c      	cmp	r3, #12
 8009aa2:	d841      	bhi.n	8009b28 <HAL_TIM_IC_Start_IT+0x1cc>
 8009aa4:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <HAL_TIM_IC_Start_IT+0x150>)
 8009aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aaa:	bf00      	nop
 8009aac:	08009ae1 	.word	0x08009ae1
 8009ab0:	08009b29 	.word	0x08009b29
 8009ab4:	08009b29 	.word	0x08009b29
 8009ab8:	08009b29 	.word	0x08009b29
 8009abc:	08009af3 	.word	0x08009af3
 8009ac0:	08009b29 	.word	0x08009b29
 8009ac4:	08009b29 	.word	0x08009b29
 8009ac8:	08009b29 	.word	0x08009b29
 8009acc:	08009b05 	.word	0x08009b05
 8009ad0:	08009b29 	.word	0x08009b29
 8009ad4:	08009b29 	.word	0x08009b29
 8009ad8:	08009b29 	.word	0x08009b29
 8009adc:	08009b17 	.word	0x08009b17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68da      	ldr	r2, [r3, #12]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f042 0202 	orr.w	r2, r2, #2
 8009aee:	60da      	str	r2, [r3, #12]
      break;
 8009af0:	e01d      	b.n	8009b2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68da      	ldr	r2, [r3, #12]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f042 0204 	orr.w	r2, r2, #4
 8009b00:	60da      	str	r2, [r3, #12]
      break;
 8009b02:	e014      	b.n	8009b2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f042 0208 	orr.w	r2, r2, #8
 8009b12:	60da      	str	r2, [r3, #12]
      break;
 8009b14:	e00b      	b.n	8009b2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68da      	ldr	r2, [r3, #12]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f042 0210 	orr.w	r2, r2, #16
 8009b24:	60da      	str	r2, [r3, #12]
      break;
 8009b26:	e002      	b.n	8009b2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d13a      	bne.n	8009baa <HAL_TIM_IC_Start_IT+0x24e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 f8d5 	bl	800acec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a1b      	ldr	r2, [pc, #108]	; (8009bb4 <HAL_TIM_IC_Start_IT+0x258>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d00e      	beq.n	8009b6a <HAL_TIM_IC_Start_IT+0x20e>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b54:	d009      	beq.n	8009b6a <HAL_TIM_IC_Start_IT+0x20e>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a17      	ldr	r2, [pc, #92]	; (8009bb8 <HAL_TIM_IC_Start_IT+0x25c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d004      	beq.n	8009b6a <HAL_TIM_IC_Start_IT+0x20e>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a15      	ldr	r2, [pc, #84]	; (8009bbc <HAL_TIM_IC_Start_IT+0x260>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d115      	bne.n	8009b96 <HAL_TIM_IC_Start_IT+0x23a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	4b13      	ldr	r3, [pc, #76]	; (8009bc0 <HAL_TIM_IC_Start_IT+0x264>)
 8009b72:	4013      	ands	r3, r2
 8009b74:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2b06      	cmp	r3, #6
 8009b7a:	d015      	beq.n	8009ba8 <HAL_TIM_IC_Start_IT+0x24c>
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b82:	d011      	beq.n	8009ba8 <HAL_TIM_IC_Start_IT+0x24c>
      {
        __HAL_TIM_ENABLE(htim);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f042 0201 	orr.w	r2, r2, #1
 8009b92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b94:	e008      	b.n	8009ba8 <HAL_TIM_IC_Start_IT+0x24c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f042 0201 	orr.w	r2, r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	e000      	b.n	8009baa <HAL_TIM_IC_Start_IT+0x24e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	40012c00 	.word	0x40012c00
 8009bb8:	40000400 	.word	0x40000400
 8009bbc:	40014000 	.word	0x40014000
 8009bc0:	00010007 	.word	0x00010007

08009bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	f003 0302 	and.w	r3, r3, #2
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d122      	bne.n	8009c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d11b      	bne.n	8009c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f06f 0202 	mvn.w	r2, #2
 8009bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7fa fbfa 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 8009c0c:	e005      	b.n	8009c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fbb6 	bl	800a380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fbbd 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f003 0304 	and.w	r3, r3, #4
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	d122      	bne.n	8009c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d11b      	bne.n	8009c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f06f 0204 	mvn.w	r2, #4
 8009c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2202      	movs	r2, #2
 8009c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7fa fbd0 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 8009c60:	e005      	b.n	8009c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fb8c 	bl	800a380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fb93 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	f003 0308 	and.w	r3, r3, #8
 8009c7e:	2b08      	cmp	r3, #8
 8009c80:	d122      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f003 0308 	and.w	r3, r3, #8
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d11b      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f06f 0208 	mvn.w	r2, #8
 8009c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2204      	movs	r2, #4
 8009c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	f003 0303 	and.w	r3, r3, #3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d003      	beq.n	8009cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7fa fba6 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 8009cb4:	e005      	b.n	8009cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fb62 	bl	800a380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fb69 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f003 0310 	and.w	r3, r3, #16
 8009cd2:	2b10      	cmp	r3, #16
 8009cd4:	d122      	bne.n	8009d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f003 0310 	and.w	r3, r3, #16
 8009ce0:	2b10      	cmp	r3, #16
 8009ce2:	d11b      	bne.n	8009d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f06f 0210 	mvn.w	r2, #16
 8009cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7fa fb7c 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 8009d08:	e005      	b.n	8009d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fb38 	bl	800a380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fb3f 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d10e      	bne.n	8009d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d107      	bne.n	8009d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f06f 0201 	mvn.w	r2, #1
 8009d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7fa f99e 	bl	8004084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d52:	2b80      	cmp	r3, #128	; 0x80
 8009d54:	d10e      	bne.n	8009d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d60:	2b80      	cmp	r3, #128	; 0x80
 8009d62:	d107      	bne.n	8009d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f001 f8d2 	bl	800af18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d82:	d10e      	bne.n	8009da2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d8e:	2b80      	cmp	r3, #128	; 0x80
 8009d90:	d107      	bne.n	8009da2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 f8c5 	bl	800af2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dac:	2b40      	cmp	r3, #64	; 0x40
 8009dae:	d10e      	bne.n	8009dce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dba:	2b40      	cmp	r3, #64	; 0x40
 8009dbc:	d107      	bne.n	8009dce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 faed 	bl	800a3a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	2b20      	cmp	r3, #32
 8009dda:	d10e      	bne.n	8009dfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	f003 0320 	and.w	r3, r3, #32
 8009de6:	2b20      	cmp	r3, #32
 8009de8:	d107      	bne.n	8009dfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f06f 0220 	mvn.w	r2, #32
 8009df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f001 f885 	bl	800af04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dfa:	bf00      	nop
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b086      	sub	sp, #24
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d101      	bne.n	8009e20 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	e088      	b.n	8009f32 <HAL_TIM_IC_ConfigChannel+0x130>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d11b      	bne.n	8009e66 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6818      	ldr	r0, [r3, #0]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	6819      	ldr	r1, [r3, #0]
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f000 fda9 	bl	800a994 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	699a      	ldr	r2, [r3, #24]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f022 020c 	bic.w	r2, r2, #12
 8009e50:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6999      	ldr	r1, [r3, #24]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	689a      	ldr	r2, [r3, #8]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	619a      	str	r2, [r3, #24]
 8009e64:	e060      	b.n	8009f28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	d11c      	bne.n	8009ea6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	6819      	ldr	r1, [r3, #0]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	f000 fe15 	bl	800aaaa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699a      	ldr	r2, [r3, #24]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009e8e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6999      	ldr	r1, [r3, #24]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	021a      	lsls	r2, r3, #8
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	619a      	str	r2, [r3, #24]
 8009ea4:	e040      	b.n	8009f28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b08      	cmp	r3, #8
 8009eaa:	d11b      	bne.n	8009ee4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6818      	ldr	r0, [r3, #0]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6819      	ldr	r1, [r3, #0]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	f000 fe62 	bl	800ab84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	69da      	ldr	r2, [r3, #28]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 020c 	bic.w	r2, r2, #12
 8009ece:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	69d9      	ldr	r1, [r3, #28]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	689a      	ldr	r2, [r3, #8]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	61da      	str	r2, [r3, #28]
 8009ee2:	e021      	b.n	8009f28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b0c      	cmp	r3, #12
 8009ee8:	d11c      	bne.n	8009f24 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6818      	ldr	r0, [r3, #0]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	6819      	ldr	r1, [r3, #0]
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	f000 fe7f 	bl	800abfc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	69da      	ldr	r2, [r3, #28]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f0c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	69d9      	ldr	r1, [r3, #28]
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	021a      	lsls	r2, r3, #8
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	61da      	str	r2, [r3, #28]
 8009f22:	e001      	b.n	8009f28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3718      	adds	r7, #24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e0ff      	b.n	800a15a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b14      	cmp	r3, #20
 8009f66:	f200 80f0 	bhi.w	800a14a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009fc5 	.word	0x08009fc5
 8009f74:	0800a14b 	.word	0x0800a14b
 8009f78:	0800a14b 	.word	0x0800a14b
 8009f7c:	0800a14b 	.word	0x0800a14b
 8009f80:	0800a005 	.word	0x0800a005
 8009f84:	0800a14b 	.word	0x0800a14b
 8009f88:	0800a14b 	.word	0x0800a14b
 8009f8c:	0800a14b 	.word	0x0800a14b
 8009f90:	0800a047 	.word	0x0800a047
 8009f94:	0800a14b 	.word	0x0800a14b
 8009f98:	0800a14b 	.word	0x0800a14b
 8009f9c:	0800a14b 	.word	0x0800a14b
 8009fa0:	0800a087 	.word	0x0800a087
 8009fa4:	0800a14b 	.word	0x0800a14b
 8009fa8:	0800a14b 	.word	0x0800a14b
 8009fac:	0800a14b 	.word	0x0800a14b
 8009fb0:	0800a0c9 	.word	0x0800a0c9
 8009fb4:	0800a14b 	.word	0x0800a14b
 8009fb8:	0800a14b 	.word	0x0800a14b
 8009fbc:	0800a14b 	.word	0x0800a14b
 8009fc0:	0800a109 	.word	0x0800a109
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68b9      	ldr	r1, [r7, #8]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 fa64 	bl	800a498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	699a      	ldr	r2, [r3, #24]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f042 0208 	orr.w	r2, r2, #8
 8009fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	699a      	ldr	r2, [r3, #24]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f022 0204 	bic.w	r2, r2, #4
 8009fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6999      	ldr	r1, [r3, #24]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	691a      	ldr	r2, [r3, #16]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	619a      	str	r2, [r3, #24]
      break;
 800a002:	e0a5      	b.n	800a150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68b9      	ldr	r1, [r7, #8]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 fac0 	bl	800a590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699a      	ldr	r2, [r3, #24]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a01e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	699a      	ldr	r2, [r3, #24]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a02e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6999      	ldr	r1, [r3, #24]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	021a      	lsls	r2, r3, #8
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	430a      	orrs	r2, r1
 800a042:	619a      	str	r2, [r3, #24]
      break;
 800a044:	e084      	b.n	800a150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68b9      	ldr	r1, [r7, #8]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 fb19 	bl	800a684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	69da      	ldr	r2, [r3, #28]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f042 0208 	orr.w	r2, r2, #8
 800a060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	69da      	ldr	r2, [r3, #28]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0204 	bic.w	r2, r2, #4
 800a070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	69d9      	ldr	r1, [r3, #28]
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	691a      	ldr	r2, [r3, #16]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	61da      	str	r2, [r3, #28]
      break;
 800a084:	e064      	b.n	800a150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fb71 	bl	800a774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69da      	ldr	r2, [r3, #28]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	69da      	ldr	r2, [r3, #28]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69d9      	ldr	r1, [r3, #28]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	021a      	lsls	r2, r3, #8
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	61da      	str	r2, [r3, #28]
      break;
 800a0c6:	e043      	b.n	800a150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68b9      	ldr	r1, [r7, #8]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 fbae 	bl	800a830 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f042 0208 	orr.w	r2, r2, #8
 800a0e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0204 	bic.w	r2, r2, #4
 800a0f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	691a      	ldr	r2, [r3, #16]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a106:	e023      	b.n	800a150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68b9      	ldr	r1, [r7, #8]
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fbe6 	bl	800a8e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	021a      	lsls	r2, r3, #8
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	430a      	orrs	r2, r1
 800a146:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a148:	e002      	b.n	800a150 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	75fb      	strb	r3, [r7, #23]
      break;
 800a14e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a158:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop

0800a164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_TIM_ConfigClockSource+0x1c>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e0b6      	b.n	800a2ee <HAL_TIM_ConfigClockSource+0x18a>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2202      	movs	r2, #2
 800a18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a19e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1bc:	d03e      	beq.n	800a23c <HAL_TIM_ConfigClockSource+0xd8>
 800a1be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1c2:	f200 8087 	bhi.w	800a2d4 <HAL_TIM_ConfigClockSource+0x170>
 800a1c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ca:	f000 8086 	beq.w	800a2da <HAL_TIM_ConfigClockSource+0x176>
 800a1ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d2:	d87f      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x170>
 800a1d4:	2b70      	cmp	r3, #112	; 0x70
 800a1d6:	d01a      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0xaa>
 800a1d8:	2b70      	cmp	r3, #112	; 0x70
 800a1da:	d87b      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x170>
 800a1dc:	2b60      	cmp	r3, #96	; 0x60
 800a1de:	d050      	beq.n	800a282 <HAL_TIM_ConfigClockSource+0x11e>
 800a1e0:	2b60      	cmp	r3, #96	; 0x60
 800a1e2:	d877      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x170>
 800a1e4:	2b50      	cmp	r3, #80	; 0x50
 800a1e6:	d03c      	beq.n	800a262 <HAL_TIM_ConfigClockSource+0xfe>
 800a1e8:	2b50      	cmp	r3, #80	; 0x50
 800a1ea:	d873      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x170>
 800a1ec:	2b40      	cmp	r3, #64	; 0x40
 800a1ee:	d058      	beq.n	800a2a2 <HAL_TIM_ConfigClockSource+0x13e>
 800a1f0:	2b40      	cmp	r3, #64	; 0x40
 800a1f2:	d86f      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x170>
 800a1f4:	2b30      	cmp	r3, #48	; 0x30
 800a1f6:	d064      	beq.n	800a2c2 <HAL_TIM_ConfigClockSource+0x15e>
 800a1f8:	2b30      	cmp	r3, #48	; 0x30
 800a1fa:	d86b      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x170>
 800a1fc:	2b20      	cmp	r3, #32
 800a1fe:	d060      	beq.n	800a2c2 <HAL_TIM_ConfigClockSource+0x15e>
 800a200:	2b20      	cmp	r3, #32
 800a202:	d867      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x170>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d05c      	beq.n	800a2c2 <HAL_TIM_ConfigClockSource+0x15e>
 800a208:	2b10      	cmp	r3, #16
 800a20a:	d05a      	beq.n	800a2c2 <HAL_TIM_ConfigClockSource+0x15e>
 800a20c:	e062      	b.n	800a2d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	6899      	ldr	r1, [r3, #8]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f000 fd45 	bl	800acac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	609a      	str	r2, [r3, #8]
      break;
 800a23a:	e04f      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6818      	ldr	r0, [r3, #0]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	6899      	ldr	r1, [r3, #8]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f000 fd2e 	bl	800acac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	689a      	ldr	r2, [r3, #8]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a25e:	609a      	str	r2, [r3, #8]
      break;
 800a260:	e03c      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6818      	ldr	r0, [r3, #0]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	6859      	ldr	r1, [r3, #4]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	461a      	mov	r2, r3
 800a270:	f000 fbec 	bl	800aa4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2150      	movs	r1, #80	; 0x50
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fcfb 	bl	800ac76 <TIM_ITRx_SetConfig>
      break;
 800a280:	e02c      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6818      	ldr	r0, [r3, #0]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	6859      	ldr	r1, [r3, #4]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	461a      	mov	r2, r3
 800a290:	f000 fc48 	bl	800ab24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2160      	movs	r1, #96	; 0x60
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 fceb 	bl	800ac76 <TIM_ITRx_SetConfig>
      break;
 800a2a0:	e01c      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6818      	ldr	r0, [r3, #0]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	6859      	ldr	r1, [r3, #4]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f000 fbcc 	bl	800aa4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2140      	movs	r1, #64	; 0x40
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 fcdb 	bl	800ac76 <TIM_ITRx_SetConfig>
      break;
 800a2c0:	e00c      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	f000 fcd2 	bl	800ac76 <TIM_ITRx_SetConfig>
      break;
 800a2d2:	e003      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a2d8:	e000      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a2da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	2b0c      	cmp	r3, #12
 800a30a:	d831      	bhi.n	800a370 <HAL_TIM_ReadCapturedValue+0x78>
 800a30c:	a201      	add	r2, pc, #4	; (adr r2, 800a314 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a312:	bf00      	nop
 800a314:	0800a349 	.word	0x0800a349
 800a318:	0800a371 	.word	0x0800a371
 800a31c:	0800a371 	.word	0x0800a371
 800a320:	0800a371 	.word	0x0800a371
 800a324:	0800a353 	.word	0x0800a353
 800a328:	0800a371 	.word	0x0800a371
 800a32c:	0800a371 	.word	0x0800a371
 800a330:	0800a371 	.word	0x0800a371
 800a334:	0800a35d 	.word	0x0800a35d
 800a338:	0800a371 	.word	0x0800a371
 800a33c:	0800a371 	.word	0x0800a371
 800a340:	0800a371 	.word	0x0800a371
 800a344:	0800a367 	.word	0x0800a367
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a34e:	60fb      	str	r3, [r7, #12]

      break;
 800a350:	e00f      	b.n	800a372 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a358:	60fb      	str	r3, [r7, #12]

      break;
 800a35a:	e00a      	b.n	800a372 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a362:	60fb      	str	r3, [r7, #12]

      break;
 800a364:	e005      	b.n	800a372 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36c:	60fb      	str	r3, [r7, #12]

      break;
 800a36e:	e000      	b.n	800a372 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a370:	bf00      	nop
  }

  return tmpreg;
 800a372:	68fb      	ldr	r3, [r7, #12]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a2e      	ldr	r2, [pc, #184]	; (800a488 <TIM_Base_SetConfig+0xcc>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d007      	beq.n	800a3e4 <TIM_Base_SetConfig+0x28>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3da:	d003      	beq.n	800a3e4 <TIM_Base_SetConfig+0x28>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a2b      	ldr	r2, [pc, #172]	; (800a48c <TIM_Base_SetConfig+0xd0>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d108      	bne.n	800a3f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a23      	ldr	r2, [pc, #140]	; (800a488 <TIM_Base_SetConfig+0xcc>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d00f      	beq.n	800a41e <TIM_Base_SetConfig+0x62>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a404:	d00b      	beq.n	800a41e <TIM_Base_SetConfig+0x62>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a20      	ldr	r2, [pc, #128]	; (800a48c <TIM_Base_SetConfig+0xd0>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d007      	beq.n	800a41e <TIM_Base_SetConfig+0x62>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a1f      	ldr	r2, [pc, #124]	; (800a490 <TIM_Base_SetConfig+0xd4>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d003      	beq.n	800a41e <TIM_Base_SetConfig+0x62>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a1e      	ldr	r2, [pc, #120]	; (800a494 <TIM_Base_SetConfig+0xd8>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d108      	bne.n	800a430 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	689a      	ldr	r2, [r3, #8]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a0c      	ldr	r2, [pc, #48]	; (800a488 <TIM_Base_SetConfig+0xcc>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d007      	beq.n	800a46c <TIM_Base_SetConfig+0xb0>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a0c      	ldr	r2, [pc, #48]	; (800a490 <TIM_Base_SetConfig+0xd4>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d003      	beq.n	800a46c <TIM_Base_SetConfig+0xb0>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a0b      	ldr	r2, [pc, #44]	; (800a494 <TIM_Base_SetConfig+0xd8>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d103      	bne.n	800a474 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	691a      	ldr	r2, [r3, #16]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	615a      	str	r2, [r3, #20]
}
 800a47a:	bf00      	nop
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	40012c00 	.word	0x40012c00
 800a48c:	40000400 	.word	0x40000400
 800a490:	40014000 	.word	0x40014000
 800a494:	40014400 	.word	0x40014400

0800a498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	f023 0201 	bic.w	r2, r3, #1
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f023 0303 	bic.w	r3, r3, #3
 800a4d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f023 0302 	bic.w	r3, r3, #2
 800a4e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a24      	ldr	r2, [pc, #144]	; (800a584 <TIM_OC1_SetConfig+0xec>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d007      	beq.n	800a508 <TIM_OC1_SetConfig+0x70>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a23      	ldr	r2, [pc, #140]	; (800a588 <TIM_OC1_SetConfig+0xf0>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d003      	beq.n	800a508 <TIM_OC1_SetConfig+0x70>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a22      	ldr	r2, [pc, #136]	; (800a58c <TIM_OC1_SetConfig+0xf4>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d10c      	bne.n	800a522 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	f023 0308 	bic.w	r3, r3, #8
 800a50e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	4313      	orrs	r3, r2
 800a518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f023 0304 	bic.w	r3, r3, #4
 800a520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a17      	ldr	r2, [pc, #92]	; (800a584 <TIM_OC1_SetConfig+0xec>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d007      	beq.n	800a53a <TIM_OC1_SetConfig+0xa2>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a16      	ldr	r2, [pc, #88]	; (800a588 <TIM_OC1_SetConfig+0xf0>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d003      	beq.n	800a53a <TIM_OC1_SetConfig+0xa2>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a15      	ldr	r2, [pc, #84]	; (800a58c <TIM_OC1_SetConfig+0xf4>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d111      	bne.n	800a55e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	4313      	orrs	r3, r2
 800a552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	621a      	str	r2, [r3, #32]
}
 800a578:	bf00      	nop
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	40012c00 	.word	0x40012c00
 800a588:	40014000 	.word	0x40014000
 800a58c:	40014400 	.word	0x40014400

0800a590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	f023 0210 	bic.w	r2, r3, #16
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	021b      	lsls	r3, r3, #8
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	f023 0320 	bic.w	r3, r3, #32
 800a5de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	011b      	lsls	r3, r3, #4
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a22      	ldr	r2, [pc, #136]	; (800a678 <TIM_OC2_SetConfig+0xe8>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d10d      	bne.n	800a610 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	011b      	lsls	r3, r3, #4
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	4313      	orrs	r3, r2
 800a606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a60e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a19      	ldr	r2, [pc, #100]	; (800a678 <TIM_OC2_SetConfig+0xe8>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d007      	beq.n	800a628 <TIM_OC2_SetConfig+0x98>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a18      	ldr	r2, [pc, #96]	; (800a67c <TIM_OC2_SetConfig+0xec>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d003      	beq.n	800a628 <TIM_OC2_SetConfig+0x98>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a17      	ldr	r2, [pc, #92]	; (800a680 <TIM_OC2_SetConfig+0xf0>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d113      	bne.n	800a650 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a62e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	4313      	orrs	r3, r2
 800a642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	621a      	str	r2, [r3, #32]
}
 800a66a:	bf00      	nop
 800a66c:	371c      	adds	r7, #28
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	40012c00 	.word	0x40012c00
 800a67c:	40014000 	.word	0x40014000
 800a680:	40014400 	.word	0x40014400

0800a684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a684:	b480      	push	{r7}
 800a686:	b087      	sub	sp, #28
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a1b      	ldr	r3, [r3, #32]
 800a692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f023 0303 	bic.w	r3, r3, #3
 800a6be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	021b      	lsls	r3, r3, #8
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a21      	ldr	r2, [pc, #132]	; (800a768 <TIM_OC3_SetConfig+0xe4>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d10d      	bne.n	800a702 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	021b      	lsls	r3, r3, #8
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a18      	ldr	r2, [pc, #96]	; (800a768 <TIM_OC3_SetConfig+0xe4>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d007      	beq.n	800a71a <TIM_OC3_SetConfig+0x96>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a17      	ldr	r2, [pc, #92]	; (800a76c <TIM_OC3_SetConfig+0xe8>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d003      	beq.n	800a71a <TIM_OC3_SetConfig+0x96>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a16      	ldr	r2, [pc, #88]	; (800a770 <TIM_OC3_SetConfig+0xec>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d113      	bne.n	800a742 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	011b      	lsls	r3, r3, #4
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	4313      	orrs	r3, r2
 800a734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	011b      	lsls	r3, r3, #4
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	4313      	orrs	r3, r2
 800a740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	621a      	str	r2, [r3, #32]
}
 800a75c:	bf00      	nop
 800a75e:	371c      	adds	r7, #28
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	40012c00 	.word	0x40012c00
 800a76c:	40014000 	.word	0x40014000
 800a770:	40014400 	.word	0x40014400

0800a774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a774:	b480      	push	{r7}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	031b      	lsls	r3, r3, #12
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a14      	ldr	r2, [pc, #80]	; (800a824 <TIM_OC4_SetConfig+0xb0>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d007      	beq.n	800a7e8 <TIM_OC4_SetConfig+0x74>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a13      	ldr	r2, [pc, #76]	; (800a828 <TIM_OC4_SetConfig+0xb4>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d003      	beq.n	800a7e8 <TIM_OC4_SetConfig+0x74>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a12      	ldr	r2, [pc, #72]	; (800a82c <TIM_OC4_SetConfig+0xb8>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d109      	bne.n	800a7fc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	019b      	lsls	r3, r3, #6
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	621a      	str	r2, [r3, #32]
}
 800a816:	bf00      	nop
 800a818:	371c      	adds	r7, #28
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	40012c00 	.word	0x40012c00
 800a828:	40014000 	.word	0x40014000
 800a82c:	40014400 	.word	0x40014400

0800a830 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a830:	b480      	push	{r7}
 800a832:	b087      	sub	sp, #28
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a85e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a874:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	041b      	lsls	r3, r3, #16
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	4313      	orrs	r3, r2
 800a880:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a13      	ldr	r2, [pc, #76]	; (800a8d4 <TIM_OC5_SetConfig+0xa4>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d007      	beq.n	800a89a <TIM_OC5_SetConfig+0x6a>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a12      	ldr	r2, [pc, #72]	; (800a8d8 <TIM_OC5_SetConfig+0xa8>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d003      	beq.n	800a89a <TIM_OC5_SetConfig+0x6a>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a11      	ldr	r2, [pc, #68]	; (800a8dc <TIM_OC5_SetConfig+0xac>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d109      	bne.n	800a8ae <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	621a      	str	r2, [r3, #32]
}
 800a8c8:	bf00      	nop
 800a8ca:	371c      	adds	r7, #28
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	40012c00 	.word	0x40012c00
 800a8d8:	40014000 	.word	0x40014000
 800a8dc:	40014400 	.word	0x40014400

0800a8e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a90e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	021b      	lsls	r3, r3, #8
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	051b      	lsls	r3, r3, #20
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	4313      	orrs	r3, r2
 800a932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a14      	ldr	r2, [pc, #80]	; (800a988 <TIM_OC6_SetConfig+0xa8>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d007      	beq.n	800a94c <TIM_OC6_SetConfig+0x6c>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a13      	ldr	r2, [pc, #76]	; (800a98c <TIM_OC6_SetConfig+0xac>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d003      	beq.n	800a94c <TIM_OC6_SetConfig+0x6c>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a12      	ldr	r2, [pc, #72]	; (800a990 <TIM_OC6_SetConfig+0xb0>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d109      	bne.n	800a960 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a952:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	029b      	lsls	r3, r3, #10
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	685a      	ldr	r2, [r3, #4]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	693a      	ldr	r2, [r7, #16]
 800a978:	621a      	str	r2, [r3, #32]
}
 800a97a:	bf00      	nop
 800a97c:	371c      	adds	r7, #28
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	40012c00 	.word	0x40012c00
 800a98c:	40014000 	.word	0x40014000
 800a990:	40014400 	.word	0x40014400

0800a994 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a994:	b480      	push	{r7}
 800a996:	b087      	sub	sp, #28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
 800a9a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	f023 0201 	bic.w	r2, r3, #1
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	4a20      	ldr	r2, [pc, #128]	; (800aa40 <TIM_TI1_SetConfig+0xac>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d00b      	beq.n	800a9da <TIM_TI1_SetConfig+0x46>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9c8:	d007      	beq.n	800a9da <TIM_TI1_SetConfig+0x46>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	4a1d      	ldr	r2, [pc, #116]	; (800aa44 <TIM_TI1_SetConfig+0xb0>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d003      	beq.n	800a9da <TIM_TI1_SetConfig+0x46>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4a1c      	ldr	r2, [pc, #112]	; (800aa48 <TIM_TI1_SetConfig+0xb4>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d101      	bne.n	800a9de <TIM_TI1_SetConfig+0x4a>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e000      	b.n	800a9e0 <TIM_TI1_SetConfig+0x4c>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d008      	beq.n	800a9f6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	f023 0303 	bic.w	r3, r3, #3
 800a9ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	617b      	str	r3, [r7, #20]
 800a9f4:	e003      	b.n	800a9fe <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f043 0301 	orr.w	r3, r3, #1
 800a9fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	011b      	lsls	r3, r3, #4
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f023 030a 	bic.w	r3, r3, #10
 800aa18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	f003 030a 	and.w	r3, r3, #10
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	621a      	str	r2, [r3, #32]
}
 800aa32:	bf00      	nop
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	40012c00 	.word	0x40012c00
 800aa44:	40000400 	.word	0x40000400
 800aa48:	40014000 	.word	0x40014000

0800aa4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	f023 0201 	bic.w	r2, r3, #1
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	011b      	lsls	r3, r3, #4
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f023 030a 	bic.w	r3, r3, #10
 800aa88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	621a      	str	r2, [r3, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	371c      	adds	r7, #28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b087      	sub	sp, #28
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	60f8      	str	r0, [r7, #12]
 800aab2:	60b9      	str	r1, [r7, #8]
 800aab4:	607a      	str	r2, [r7, #4]
 800aab6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	f023 0210 	bic.w	r2, r3, #16
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aad6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	021b      	lsls	r3, r3, #8
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	4313      	orrs	r3, r2
 800aae0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	031b      	lsls	r3, r3, #12
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aafc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	011b      	lsls	r3, r3, #4
 800ab02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	621a      	str	r2, [r3, #32]
}
 800ab18:	bf00      	nop
 800ab1a:	371c      	adds	r7, #28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
 800ab34:	f023 0210 	bic.w	r2, r3, #16
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	031b      	lsls	r3, r3, #12
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	011b      	lsls	r3, r3, #4
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	621a      	str	r2, [r3, #32]
}
 800ab78:	bf00      	nop
 800ab7a:	371c      	adds	r7, #28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6a1b      	ldr	r3, [r3, #32]
 800aba8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f023 0303 	bic.w	r3, r3, #3
 800abb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	011b      	lsls	r3, r3, #4
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	4313      	orrs	r3, r2
 800abcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800abd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	021b      	lsls	r3, r3, #8
 800abda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	621a      	str	r2, [r3, #32]
}
 800abf0:	bf00      	nop
 800abf2:	371c      	adds	r7, #28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	021b      	lsls	r3, r3, #8
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	031b      	lsls	r3, r3, #12
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ac4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	031b      	lsls	r3, r3, #12
 800ac54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	621a      	str	r2, [r3, #32]
}
 800ac6a:	bf00      	nop
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b085      	sub	sp, #20
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	f043 0307 	orr.w	r3, r3, #7
 800ac98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	609a      	str	r2, [r3, #8]
}
 800aca0:	bf00      	nop
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acac:	b480      	push	{r7}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	021a      	lsls	r2, r3, #8
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	431a      	orrs	r2, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	697a      	ldr	r2, [r7, #20]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	697a      	ldr	r2, [r7, #20]
 800acde:	609a      	str	r2, [r3, #8]
}
 800ace0:	bf00      	nop
 800ace2:	371c      	adds	r7, #28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	f003 031f 	and.w	r3, r3, #31
 800acfe:	2201      	movs	r2, #1
 800ad00:	fa02 f303 	lsl.w	r3, r2, r3
 800ad04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6a1a      	ldr	r2, [r3, #32]
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	43db      	mvns	r3, r3
 800ad0e:	401a      	ands	r2, r3
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6a1a      	ldr	r2, [r3, #32]
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	f003 031f 	and.w	r3, r3, #31
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	fa01 f303 	lsl.w	r3, r1, r3
 800ad24:	431a      	orrs	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	621a      	str	r2, [r3, #32]
}
 800ad2a:	bf00      	nop
 800ad2c:	371c      	adds	r7, #28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
	...

0800ad38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d101      	bne.n	800ad50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	e054      	b.n	800adfa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a24      	ldr	r2, [pc, #144]	; (800ae08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d108      	bne.n	800ad8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ad80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a17      	ldr	r2, [pc, #92]	; (800ae08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d00e      	beq.n	800adce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adb8:	d009      	beq.n	800adce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a13      	ldr	r2, [pc, #76]	; (800ae0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d004      	beq.n	800adce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a11      	ldr	r2, [pc, #68]	; (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d10c      	bne.n	800ade8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800add4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	4313      	orrs	r3, r2
 800adde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	40012c00 	.word	0x40012c00
 800ae0c:	40000400 	.word	0x40000400
 800ae10:	40014000 	.word	0x40014000

0800ae14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d101      	bne.n	800ae30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e060      	b.n	800aef2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae96:	4313      	orrs	r3, r2
 800ae98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	041b      	lsls	r3, r3, #16
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a14      	ldr	r2, [pc, #80]	; (800af00 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d115      	bne.n	800aee0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	051b      	lsls	r3, r3, #20
 800aec0:	4313      	orrs	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	4313      	orrs	r3, r2
 800aed0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	6a1b      	ldr	r3, [r3, #32]
 800aedc:	4313      	orrs	r3, r2
 800aede:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	40012c00 	.word	0x40012c00

0800af04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <__libc_init_array>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	4d0d      	ldr	r5, [pc, #52]	; (800af78 <__libc_init_array+0x38>)
 800af44:	4c0d      	ldr	r4, [pc, #52]	; (800af7c <__libc_init_array+0x3c>)
 800af46:	1b64      	subs	r4, r4, r5
 800af48:	10a4      	asrs	r4, r4, #2
 800af4a:	2600      	movs	r6, #0
 800af4c:	42a6      	cmp	r6, r4
 800af4e:	d109      	bne.n	800af64 <__libc_init_array+0x24>
 800af50:	4d0b      	ldr	r5, [pc, #44]	; (800af80 <__libc_init_array+0x40>)
 800af52:	4c0c      	ldr	r4, [pc, #48]	; (800af84 <__libc_init_array+0x44>)
 800af54:	f000 f820 	bl	800af98 <_init>
 800af58:	1b64      	subs	r4, r4, r5
 800af5a:	10a4      	asrs	r4, r4, #2
 800af5c:	2600      	movs	r6, #0
 800af5e:	42a6      	cmp	r6, r4
 800af60:	d105      	bne.n	800af6e <__libc_init_array+0x2e>
 800af62:	bd70      	pop	{r4, r5, r6, pc}
 800af64:	f855 3b04 	ldr.w	r3, [r5], #4
 800af68:	4798      	blx	r3
 800af6a:	3601      	adds	r6, #1
 800af6c:	e7ee      	b.n	800af4c <__libc_init_array+0xc>
 800af6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af72:	4798      	blx	r3
 800af74:	3601      	adds	r6, #1
 800af76:	e7f2      	b.n	800af5e <__libc_init_array+0x1e>
 800af78:	0800aff0 	.word	0x0800aff0
 800af7c:	0800aff0 	.word	0x0800aff0
 800af80:	0800aff0 	.word	0x0800aff0
 800af84:	0800aff4 	.word	0x0800aff4

0800af88 <memset>:
 800af88:	4402      	add	r2, r0
 800af8a:	4603      	mov	r3, r0
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d100      	bne.n	800af92 <memset+0xa>
 800af90:	4770      	bx	lr
 800af92:	f803 1b01 	strb.w	r1, [r3], #1
 800af96:	e7f9      	b.n	800af8c <memset+0x4>

0800af98 <_init>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	bf00      	nop
 800af9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9e:	bc08      	pop	{r3}
 800afa0:	469e      	mov	lr, r3
 800afa2:	4770      	bx	lr

0800afa4 <_fini>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	bf00      	nop
 800afa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afaa:	bc08      	pop	{r3}
 800afac:	469e      	mov	lr, r3
 800afae:	4770      	bx	lr
